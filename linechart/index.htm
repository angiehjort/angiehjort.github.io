<!DOCTYPE html>
<meta charset="utf-8">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width,user-scalable=no">

<style>
    body {
        font-size: 14pt;
        font-family: Open Sans Light;
        padding: 0px;
        margin: 0px;
    }

    .nav {
        font-size: 12px;
        float: right;
    }

    .circle {
        fill: red;
        opacity: 0.4;
    }

    .line {
        stroke: grey;
        stroke-width: 2;
        /*stroke-dasharray: 4, 5, 6, 5, 1, 4, 14, 3, 15, 2, 7, 5;*/
        fill: none;
        opacity: 0.5;
    }

    .area {
        fill: lightgrey;
        stroke-width: 0;
        opacity: 0.5;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: lightgrey;
        stroke-width: 1;
        shape-rendering: crispEdges;
    }

    .axis.left, text.left{fill: red;}
    .axis.right, text.right { fill: #0eb700;}
    .line.left {stroke: red;}
    .line.right {stroke: #0eb700;}


    .grid .tick {
        stroke: lightgrey;
        opacity: 0.7;
    }
    .grid path {
        stroke-width: 0;
    }

    text.shadow {
        stroke: white;
        stroke-width: 2.5px;
        opacity: 0.9;
    }

   text.title {
        font-size: 16px;
        text-decoration: underline;
    }

    div.tooltip {
        position: absolute;
        text-align: center;
        width: 60px;
        height: 28px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }

    .patch{
        fill: white;
        opacity: 0.9;
    }

</style>

<body>


    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script>

var TITLE = "Learning to fly",
    LABEL_BOTTOM = "Some date",
    LABEL_RIGHT = "Green line",
    LABEL_LEFT = "Red line";


var globalData;
var samplesInView = 20;
var tick = 0;
var duration = 900;
var inter = setInterval(function() {updateData(); tick++;}, duration);

var margin = { top: 30, right: 70, bottom: 50, left: 70  },
    width = window.innerWidth - margin.left - margin.right,
    height = 320 - margin.top - margin.bottom;

var parseDate = d3.time.format("%d-%b-%y").parse;
var formatTime = d3.time.format("%e %B");
var formatValue = d3.format(",.0f");

// functions that convert linearly from input to screen dimensions
// domain is the property of it
// scale can be linear, ordinal
var x = d3.time.scale().range([0, width]);
var y0 = d3.scale.linear().range([height, 0]);
var y1 = d3.scale.linear().range([height, 0]);

var xAxis = d3.svg.axis().scale(x).orient("bottom").ticks(8).tickFormat(d3.time.format("%e.%m"));
var yAxisL = d3.svg.axis().scale(y0).orient("left").ticks(5);
var yAxisR = d3.svg.axis().scale(y1).orient("right").ticks(5);


var valueline0 = d3.svg.line()
    //.interpolate("basis")
    .x(function(d) {return x(d.date);})
    .y(function(d) {return y0(d.close);});

var valueline1 = d3.svg.line()
    //.interpolate("basis")
    .x(function(d) {return x(d.date);})
    .y(function(d) {return y1(d.open);});


//the area definition describes drawing two lines that share the
//same x coordinates, but simultaneously draws two y coordinates, y0 and y1.
var area = d3.svg.area()
    .x(function(d) { return x(d.date); })
    .y0(function(d) { return y0(d.close); })
    .y1(function(d) { return y1(d.open); });

var div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

var svg = d3.select("body")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .attr("viewBox", "0 0 320 320")
        .attr("preserveAspectRatio","xMinYMin")
    .append("g")
        .attr("transform","translate(" + margin.left + "," + margin.top + ")");


function make_x_axis() {
    return d3.svg.axis().scale(x).orient("bottom").ticks(8)
    }

function make_y_axis() {
    return d3.svg.axis().scale(y1).orient("left").ticks(5)
    }


        window.onresize = function(event){
            width = window.innerWidth - margin.left - margin.right,
            //x = d3.time.scale().range([0, width]);
            d3.select("svg").attr("width", width + margin.left + margin.right);
            d3.select("#rightGroup")
                .attr("transform", "translate(" + width + ",0)");
            d3.selectAll(".title, .label.bottom")
                .attr("x", width/2);
            x = d3.time.scale().range([0, width]);
            xAxis = d3.svg.axis().scale(x);


        }














function updateData() {
    if (tick > globalData.length-samplesInView)tick = 0;

    data = globalData;
    data_ = globalData.slice(tick, samplesInView + tick);

    // Scale the range of the data again
    x.domain(d3.extent(data_, function(d) {return d.date;}));
    y0.domain([0, d3.max(data_, function(d) {return d.close;})]);
    y1.domain([0, d3.max(data_, function(d) {return d.open;})]);

    // Select the section we want to apply our changes to
    var svg = d3.select("body").transition().ease("linear").duration(duration);


    // draw grid
    svg.select(".grid.x")
        .call(make_x_axis()
            .tickSize(-height, 0, 0)
            .tickFormat("")
            )

    svg.select(".grid.y")
        .call(make_y_axis()
            .tickSize(-width, 0, 0)
            .tickFormat("")
            )


    // Make the changes
    svg.select(".line.left") // change the line
        .attr("d", valueline0(data));

    svg.select(".line.right") // change the line
        .attr("d", valueline1(data));


    svg.select(".area")
        .attr("d", area(data));


    svg.select(".x.axis") // change the x axis
        .call(xAxis);

    svg.select(".y.axis.right") // change the y axis
        .call(yAxisR);

    svg.select(".y.axis.left") // change the y axis
        .call(yAxisL);


    svg.selectAll("circle")
        .attr("cx", function(d) { return x(d.date); })
        .attr("cy", function(d) { return y0(d.close); });

}









// Get the data
d3.tsv("data/data0.tsv", function(error, data) {
    data.forEach(function(d) {
        d.date = parseDate(d.date);
        d.close = +d.close;
        d.open = +d.open;
    });

    globalData = data;
    data = globalData; //.slice(tick, samplesInView + tick);


    // Scale the range of the data
    x.domain(d3.extent(data, function(d) {return d.date;}));
    y0.domain([0, d3.max(data, function(d) {return d.close;})]);
    y1.domain([0, d3.max(data, function(d) {return d.open;})]);


    // draw grid
    svg.append("g")
        .attr("class", "grid x")
        .attr("transform", "translate(0," + height + ")")
        .call(make_x_axis()
            .tickSize(-height, 0, 0)
            .tickFormat("")
            )
    svg.append("g")
        .attr("class", "grid y")
        .call(make_y_axis()
            .tickSize(-width, 0, 0)
            .tickFormat("")
            )


    // draw area alternative way
    svg.append("path")
        //.datum(data) works as well, when the last line says attr("d", area);
        .attr("class", "area")
        .attr("d", area(data));


    // draw line
    svg.append("path") // Add the valueline path.
        .attr("class", "line left")
        .attr("d", valueline0(data)); //.slice(1,data.length-1)

    svg.append("path") // Add the valueline path.
        .attr("class", "line right")
        .attr("d", valueline1(data)); //.slice(1,data.length-1)


    svg.selectAll("circle")
        .data(data)
      .enter().append("circle")
        .filter(function(d) { return d.close < 800 })
        .attr("class","circle")
        .attr("r", function(d){ return d.close<600? d.close/100 : 7; })
        .attr("cx", function(d) { return x(d.date); })
        .attr("cy", function(d) { return y0(d.close); })
        .on("mouseover", function(d) {
            div.transition()
                .duration(200)
                .style("opacity", .9);
            div.html(formatTime(d.date) + "<br/>" + formatValue(d.close))
                .style("left", (d3.event.pageX) + "px")
                .style("top", (d3.event.pageY - 28) + "px");
        })
        .on("mouseout", function(d) {
            div.transition()
                .duration(500)
                .style("opacity", 0);
        });

    var yLeftGroup = svg.append("g");
    var yRightGroup = svg.append("g")
    .attr("id", "rightGroup")
    .attr("transform", "translate(" + width + " ,0)");

    yLeftGroup.append("rect")
        .attr("class","patch left")
        .attr("x",-margin.left)
        .attr("y",-margin.top)
        .attr("width", margin.left)
        .attr("height", height + margin.top + margin.bottom);

    yRightGroup.append("rect")
        .attr("class","patch right")
        .attr("x",0)
        .attr("y",-margin.top)
        .attr("width", margin.right)
        .attr("height", height + margin.top + margin.bottom);


    // draw axes
    svg.append("g") // Add the X Axis
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);


    yLeftGroup.append("g") // Add the Y Axis
        .attr("class", "y axis left")
        .call(yAxisL);

    yRightGroup.append("g") // Add the Y Axis
        .attr("class", "y axis right")
        .call(yAxisR);


    // draw axis labels
    svg.append("text") // text label for the x axis
        .attr("x", width / 2 )
        .attr("y", height + margin.bottom)
        .attr("dy", "-0.75")
        .style("text-anchor", "middle")
        .attr("class", "label bottom")
        .text(LABEL_BOTTOM);

    yLeftGroup.append("text")
        .attr("transform", "rotate(-90)")
        .attr("y",0 - margin.left)
        .attr("x",0 - (height / 2))
        .attr("dy", "1em")
        .attr("class", "label left")
        .style("text-anchor", "middle")
        .text(LABEL_LEFT);

    yRightGroup.append("text")
        .attr("y",margin.right)
        .attr("x",0 - (height / 2))
        .attr("dy", "-0.7em")
        .attr("class", "label right")
        .attr("transform", "rotate(-90)")
        .style("text-anchor", "middle")
        .text(LABEL_RIGHT);


    // draw title
    svg.append("text")
        .attr("x", (width / 2))
        .attr("y", 25)
        .attr("text-anchor", "middle")
        .attr("class", "title shadow")
        .text(TITLE);

    svg.append("text")
        .attr("x", (width / 2))
        .attr("y", 25)
        .attr("text-anchor", "middle")
        .attr("class", "title")
        .text(TITLE);




});


    </script>
</body>
