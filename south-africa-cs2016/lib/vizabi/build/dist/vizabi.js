/**
 * vizabi - Vizabi Framework, Interactive charts and visualization tools animated through time
 * @version v0.15.0-33
 * @build timestampMon Jun 27 2016 11:33:10 GMT+0200 (CEST)
 * @link http://vizabi.org
 * @license BSD-3-Clause
 */

(function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define(factory) :
      global.Vizabi = factory();
}(this, function () { 'use strict';

      var globals = {ext_resources: {}};

      /*
       * A collection of interpolators
       * @param {Number} x1, x2, y1, y2 - boundary points
       * @param {Number} x - point of interpolation
       * @return {Number} y - interpolated value
       */
      //
      var interpolator = {
          linear: function(x1, x2, y1, y2, x) {
            return +y1 + (x - x1) / (x2 - x1) * (y2 - y1);
          },
          exp: function(x1, x2, y1, y2, x) {
            return Math.exp((Math.log(y1) * (x2 - x) - Math.log(y2) * (x1 - x)) / (x2 - x1));
          },
          stepBefore: function(x1, x2, y1, y2, x) {
              return y2;
          },
          stepAfter: function(x1, x2, y1, y2, x) {
              return y1;
          },
          stepMiddle: function(x1, x2, y1, y2, x) {
              return (x < (x1 + x2)/2) ? y1 : y2;
          }
      };

      /*
       * returns unique id with optional prefix
       * @param {String} prefix
       * @returns {String} id
       */
      var uniqueId = function() {
        var id = 0;
        return function(p) {
          return p ? p + (id += 1) : id += 1;
        };
      }();

      /*
       * checks whether obj is a DOM element
       * @param {Object} obj
       * @returns {Boolean}
       * from underscore: https://github.com/jashkenas/underscore/blob/master/underscore.js
       */
      var isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
      };

      /*
       * checks whether obj is an Array
       * @param {Object} obj
       * @returns {Boolean}
       * from underscore: https://github.com/jashkenas/underscore/blob/master/underscore.js
       */
      var isArray = Array.isArray || function(obj) {
        return toString.call(obj) === '[object Array]';
      };

      /*
       * checks whether obj is an object
       * @param {Object} obj
       * @returns {Boolean}
       * from underscore: https://github.com/jashkenas/underscore/blob/master/underscore.js
       */
      var isObject = function(obj) {
        var type = typeof obj;
        return type === 'object' && !!obj;
      };

      /*
       * checks whether arg is a date
       * @param {Object} arg
       * @returns {Boolean}
       */
      var isDate = function(arg) {
        return arg instanceof Date;
      };

      /*
       * checks whether arg is a string
       * @param {Object} arg
       * @returns {Boolean}
       */
      var isString = function(arg) {
        return typeof arg === 'string';
      };

      /*
       * checks whether arg is a NaN
       * @param {*} arg
       * @returns {Boolean}
       * from lodash: https://github.com/lodash/lodash/blob/master/lodash.js
       */
      var isNaN$1 = function(arg) {
        // A `NaN` primitive is the only number that is not equal to itself
        return isNumber(arg) && arg !== +arg;
      };

      /*
       * checks whether arg is a number. NaN is a number too
       * @param {*} arg
       * @returns {Boolean}
       * from lodash: https://github.com/lodash/lodash/blob/master/lodash.js
       * dependencies are resolved and included here
       */
      var isNumber = function(arg) {
        return typeof arg === 'number' || !!arg && typeof arg === 'object' && Object.prototype.toString.call(arg) ===
          '[object Number]';
      };

      /*
       * checks whether obj is a plain object {}
       * @param {Object} obj
       * @returns {Boolean}
       */
      var isPlainObject = function(obj) {
        return obj !== null && Object.prototype.toString.call(obj) === '[object Object]';
      };

      /*
       * checks whether two arrays are equal
       * @param {Array} a
       * @param {Array} b
       * @returns {Boolean}
       */
      var arrayEquals = function(a, b) {
        if(a === b) return true;
        if(a == null || b == null) return false;
        if(a.length != b.length) return false;
        for(var i = 0; i < a.length; ++i) {
          if(a[i] !== b[i]) return false;
        }
        return true;
      };


      /**
       * Object Comparison
       *
       * http://stamat.wordpress.com/2013/06/22/javascript-object-comparison/
       *
       * No version
       *
       * @param a
       * @param b
       * @returns {boolean} if objects are equal
       */
      var comparePlainObjects = function (a, b) {

          //Returns the object's class, Array, Date, RegExp, Object are of interest to us
          var getClass = function (val) {
              return Object.prototype.toString.call(val)
                  .match(/^\[object\s(.*)\]$/)[1];
          };

          //Defines the type of the value, extended typeof
          var whatis = function (val) {

              if (val === undefined) {
                  return 'undefined';
              }
              if (val === null) {
                  return 'null';
              }

              var type = typeof val;

              if (type === 'object') {
                  type = getClass(val).toLowerCase();
              }

              if (type === 'number') {
                  if (val.toString().indexOf('.') > 0) {
                      return 'float';
                  }
                  else {
                      return 'integer';
                  }
              }

              return type;
          };

          var compare = function (a, b) {
              if (a === b) {
                  return true;
              }
              for (var i in a) {
                  if (b.hasOwnProperty(i)) {
                      if (!equal(a[i], b[i])) {
                          return false;
                      }
                  } else {
                      return false;
                  }
              }

              for (var i in b) {
                  if (!a.hasOwnProperty(i)) {
                      return false;
                  }
              }
              return true;
          };

          var compareArrays = function (a, b) {
              if (a === b) {
                  return true;
              }
              if (a.length !== b.length) {
                  return false;
              }
              for (var i = 0; i < a.length; i++) {
                  if (!equal(a[i], b[i])) {
                      return false;
                  }
              }
              return true;
          };

          var _equal = {};
          _equal.array = compareArrays;
          _equal.object = compare;
          _equal.date = function (a, b) {
              return a.getTime() === b.getTime();
          };
          _equal.regexp = function (a, b) {
              return a.toString() === b.toString();
          };

          /**
           * Are two values equal, deep compare for objects and arrays.
           * @param a {any}
           * @param b {any}
           * @return {boolean} Are equal?
           */
          var equal = function (a, b) {
              if (a !== b) {
                  var atype = whatis(a), btype = whatis(b);

                  if (atype === btype) {
                      return _equal.hasOwnProperty(atype) ? _equal[atype](a, b) : a == b;
                  }

                  return false;
              }

              return true;
          };

          return compare(a, b);
      };


      var getViewportPosition = function(element) {
        var xPosition = 0;
        var yPosition = 0;

        while(element) {
          xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
          yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
          element = element.offsetParent;
        }

        return {
          x: xPosition,
          y: yPosition
        };
      };


      var findScrollableAncestor = function(node) {
        var scrollable = ["scroll", "auto"];
        while(node = node.parentNode) {
          var scrollHeight = node.scrollHeight,
            height = node.clientHeight;
            if (scrollHeight > height && scrollable.indexOf(d3.select(node).style("overflow")) !== -1) {
              return node;
            }
        }
        return null;
      };

      var roundStep = function(number, step) {
        return Math.round(number / step) * step;
      };

      /*
       * transforms a string into a validated fload value
       * @param {string} string to be transformed
       */
      var strToFloat = function(string) {
        return +string.replace(/[^\d.-]/g, '');
      };

      /*
       * loops through an object or array
       * @param {Object|Array} obj object or array
       * @param {Function} callback callback function
       * @param {Object} ctx context object
       */
      var forEach = function(obj, callback, ctx) {
        if(!obj) {
          return;
        }
        var i, size;
        if(isArray(obj)) {
          size = obj.length;
          for(i = 0; i < size; i += 1) {
            if(callback.apply(ctx, [
                obj[i],
                i
              ]) === false) {
              break;
            }
          }
        } else {
          var keys = Object.keys(obj);
          size = keys.length;
          for(i = 0; i < size; i += 1) {
            if(callback.apply(ctx, [
                obj[keys[i]],
                keys[i]
              ]) === false) {
              break;
            }
          }
        }
      };

      /*
       * extends an object
       * @param {Object} destination object
       * @returns {Object} extented object
       */
      var extend = function(dest) {
        //objects to overwrite dest are next arguments
        var objs = Array.prototype.slice.call(arguments, 1);
        //loop through each obj and each argument, left to right
        forEach(objs, function(obj, i) {
          forEach(obj, function(value, k) {
            if(obj.hasOwnProperty(k)) {
              dest[k] = value;
            }
          });
        });
        return dest;
      };

      // Deep extend and helper functions
      // https://github.com/unclechu/node-deep-extend/blob/master/lib/deep-extend.js

      function isSpecificValue(val) {
        return (
          val instanceof Date
          || val instanceof RegExp
        ) ? true : false;
      }

      function cloneSpecificValue(val) {
        if (val instanceof Date) {
          return new Date(val.getTime());
        } else if (val instanceof RegExp) {
          return new RegExp(val);
        } else {
          throw new Error('Unexpected situation');
        }
      }

      /**
       * Recursive cloning array.
       */
      function deepCloneArray(arr) {
        var clone = [];
        forEach(arr, function (item, index) {
          if (typeof item === 'object' && item !== null) {
            if (isArray(item)) {
              clone[index] = deepCloneArray(item);
            } else if (isSpecificValue(item)) {
              clone[index] = cloneSpecificValue(item);
            } else {
              clone[index] = deepExtend({}, item);
            }
          } else {
            clone[index] = item;
          }
        });
        return clone;
      }

      /**
       * Extening object that entered in first argument.
       *
       * Returns extended object or false if have no target object or incorrect type.
       *
       * If you wish to clone source object (without modify it), just use empty new
       * object as first argument, like this:
       *   deepExtend({}, yourObj_1, [yourObj_N]);
       */
      var deepExtend = function(/*obj_1, [obj_2], [obj_N]*/) {
        if (arguments.length < 1 || typeof arguments[0] !== 'object') {
          return false;
        }

        if (arguments.length < 2) {
          return arguments[0];
        }

        var target = arguments[0];

        // convert arguments to array and cut off target object
        var args = Array.prototype.slice.call(arguments, 1);

        var val, src, clone;

        forEach(args, function (obj) {
          // skip argument if it is array or isn't object
          if (typeof obj !== 'object' || isArray(obj)) {
            return;
          }

          forEach(Object.keys(obj), function (key) {
            src = target[key]; // source value
            val = obj[key]; // new value

            // recursion prevention
            if (val === target) {
              return;

            /**
             * if new value isn't object then just overwrite by new value
             * instead of extending.
             */
            } else if (typeof val !== 'object' || val === null) {
              target[key] = val;
              return;

            // just clone arrays (and recursive clone objects inside)
            } else if (isArray(val)) {
              target[key] = deepCloneArray(val);
              return;

            // custom cloning and overwrite for specific objects
            } else if (isSpecificValue(val)) {
              target[key] = cloneSpecificValue(val);
              return;

            // overwrite by new value if source isn't object or array
            } else if (typeof src !== 'object' || src === null || isArray(src)) {
              target[key] = deepExtend({}, val);
              return;

            // source value and new value is objects both, extending...
            } else {
              target[key] = deepExtend(src, val);
              return;
            }
          });
        });

        return target;
      }

      /*
       * merges objects instead of replacing
       * @param {Object} destination object
       * @returns {Object} merged object
       */
      var merge = function(dest) {

        // objects to overwrite dest are next arguments
        var objs = Array.prototype.slice.call(arguments, 1);

        // loop through each obj and each argument, left to right
        forEach(objs, function(obj, i) {
          forEach(obj, function(value, k) {
            if(obj.hasOwnProperty(k)) {
              if(dest.hasOwnProperty(k)) {
                if(!isArray(dest[k])) {
                  dest[k] = [dest[k]];
                }
                dest[k].push(value);
              } else {
                dest[k] = value;
              }
            }
          });
        });
        return dest;

      };

      /*
       * clones an object (shallow copy)
       * @param {Object} src original object
       * @param {Array} arr filter keys
       * @returns {Object} cloned object
       */
      var clone = function(src, arr, exclude) {
        if(isArray(src)) {
          return src.slice(0);
        }
        var clone = {};
        forEach(src, function(value, k) {
          if((arr && arr.indexOf(k) === -1) || (exclude && exclude.indexOf(k) !== -1)) {
            return;
          }
          if(src.hasOwnProperty(k)) {
            clone[k] = value;
          }
        });
        return clone;
      };

      /*
       * deep clones an object (deep copy)
       * @param {Object} src original object
       * @returns {Object} cloned object
       */
      var deepClone = function(src) {
        var clone = {};
        if(isArray(src)) clone = [];

        forEach(src, function(value, k) {
          if(isObject(value) || isArray(value)) {
            clone[k] = deepClone(value);
          } else {
            clone[k] = value;
          }
        });
        return clone;
      };

      /*
       * Prints message to timestamp
       * @param {Arr} arr
       * @param {Object} el
       */
      var without = function(arr, el) {
        var idx = arr.indexOf(el);
        if(idx !== -1) {
          arr.splice(idx, 1);
        }
        return arr;
      };

      /*
       * unique items in an array
       * @param {Array} arr original array
       * @param {Function} func optional evaluation function
       * @returns {Array} unique items
       * Based on:
       * http://stackoverflow.com/questions/1960473/unique-values-in-an-array
       */
      var unique = function(arr, func) {
        var u = {};
        var a = [];
        if(!func) {
          func = function(d) {
            return d;
          };
        }
        for(var i = 0, l = arr.length; i < l; i += 1) {
          var key = func(arr[i]);
          if(u.hasOwnProperty(key)) {
            continue;
          }
          a.push(arr[i]);
          u[key] = 1;
        }
        return a;
      };

      /*
       * unique items in an array keeping the last item
       * @param {Array} arr original array
       * @param {Function} func optional evaluation function
       * @returns {Array} unique items
       * Based on the previous method
       */
      var uniqueLast = function(arr, func) {
        var u = {};
        var a = [];
        if(!func) {
          func = function(d) {
            return d;
          };
        }
        for(var i = 0, l = arr.length; i < l; i += 1) {
          var key = func(arr[i]);
          if(u.hasOwnProperty(key)) {
            a.splice(u[key], 1); //remove old item from array
          }
          a.push(arr[i]);
          u[key] = a.length - 1;
        }
        return a;
      };

      /*
       * returns first value that passes the test
       * @param {Array} arr original collection
       * @returns {Function} func test function
       */
      var find = function(arr, func) {
        var found;
        forEach(arr, function(i) {
          if(func(i)) {
            found = i;
            return false; //break
          }
        });
        return found;
      };

      /*
       * filters an array based on object properties
       * @param {Array} arr original array
       * @returns {Object} filter properties to use as filter
       */
      var filter = function(arr, filter) {
        var index = -1;
        var length = arr.length;
        var resIndex = -1;
        var result = [];
        var keys = Object.keys(filter);
        var s_keys = keys.length;
        var i;
        var f;
        while((index += 1) < length) {
          var value = arr[index];
          var match = true;
          for(i = 0; i < s_keys; i += 1) {
            f = keys[i];
            if(!value.hasOwnProperty(f) || value[f] !== filter[f]) {
              match = false;
              break;
            }
          }
          if(match) {
            result[resIndex += 1] = value;
          }
        }
        return result;
      };

      /*
       * filters an array based on object properties.
       * Properties may be arrays determining possible values
       * @param {Array} arr original array
       * @returns {Object} filter properties to use as filter
       */
      var filterAny = function(arr, filter, wildcard) {
        var index = -1;
        var length = arr.length;
        var resIndex = -1;
        var result = [];
        var keys = Object.keys(filter);
        var s_keys = keys.length;
        var i, f;
        while((index += 1) < length) {
          var value = arr[index];
          //normalize to array
          var match = true;
          for(i = 0; i < s_keys; i += 1) {
            f = keys[i];
            if(!value.hasOwnProperty(f) || !matchAny(value[f], filter[f], wildcard)) {
              match = false;
              break;
            }
          }
          if(match) {
            result[resIndex += 1] = value;
          }
        }
        return result;
      };

      /*
       * checks if the value matches the comparison value or any in array
       * compare may be an determining possible values
       * @param value original value
       * @param compare value or array
       * @param {String} wildc wildcard value
       * @returns {Boolean} try
       */
      var matchAny = function(values, compare, wildc) {
        //normalize value
        if(!isArray(values)) values = [values];
        if(!wildc) wildc = "*"; //star by default
        var match = false;
        for(var e = 0; e < values.length; e++) {
          var value = values[e];

          if(!isArray(compare) && value == compare) {
            match = true;
            break;
          } else if(isArray(compare)) {
            var found = -1;
            for(var i = 0; i < compare.length; i++) {
              var c = compare[i];
              if(!isArray(c) && (c == value || c === wildc)) {
                found = i;
                break;
              } else if(isArray(c)) { //range
                var min = c[0];
                var max = c[1] || min;
                if(value >= min && value <= max) {
                  found = i;
                  break;
                }
              }
            }
            if(found !== -1) {
              match = true;
              break;
            }
          }
        }
        return match;
      };

      /**
       * prevent scrolling parent scrollable elements for 2 second when element scrolled to end
       * @param node
       */

      var preventAncestorScrolling = function(element) {
        var preventScrolling = false;
        element.on('mousewheel', function(d, i) {
          var scrollTop = this.scrollTop,
            scrollHeight = this.scrollHeight,
            height = element.node().offsetHeight,
            delta = d3.event.wheelDelta,
            up = delta > 0;
          var prevent = function() {
            d3.event.stopPropagation();
            d3.event.preventDefault();
            d3.event.returnValue = false;
            return false;
          };

          var scrollTopTween = function(scrollTop) {
            return function () {
              var i = d3.interpolateNumber(this.scrollTop, scrollTop);
              return function (t) {
                this.scrollTop = i(t);
              };
            }
          };
          if (!up) {
            // Scrolling down
            if (-delta > scrollHeight - height - scrollTop && scrollHeight != height + scrollTop) {
              element.transition().delay(0).duration(0).tween("scrolltween", scrollTopTween(scrollHeight));
              //freeze scrolling on 2 seconds on bottom position
              preventScrolling = true;
              setTimeout(function() {
                preventScrolling = false;
              }, 2000);
            } else if (scrollTop == 0) { //unfreeze when direction changed
              preventScrolling = false;
            }
          } else if (up) {
            // Scrolling up
            if (delta > scrollTop && scrollTop > 0) { //
              //freeze scrolling on 2 seconds on top position
              element.transition().delay(0).duration(0).tween("scrolltween", scrollTopTween(0));
              preventScrolling = true;
              setTimeout(function() {
                preventScrolling = false;
              }, 2000);
            } else if (scrollHeight == height + scrollTop) { //unfreeze when direction changed
              preventScrolling = false;
            }
          }
          if (preventScrolling) {
            return prevent();
          }
        });
      };

      /*
       * maps all rows according to the formatters
       * @param {Array} original original dataset
       * @param {Object} formatters formatters object
       * @returns {Boolean} try
       */
      var mapRows = function(original, formatters) {

        function mapRow(value, fmt) {
          if(!isArray(value)) {
            return fmt(value);
          } else {
            var res = [];
            for(var i = 0; i < value.length; i++) {
              res[i] = mapRow(value[i], fmt);
            }
            return res;
          }
        }
         
        // default formatter turns empty strings in null and converts numeric values into number
        //TODO: default formatter is moved to utils. need to return it to hook prototype class, but retest #1212 #1230 #1253
        var defaultFormatter = function (val) {
            var newVal = val;
            if(val === ""){
              newVal = null;
            } else {
              // check for numberic
              var numericVal = parseFloat(val);
              if (!isNaN$1(numericVal) && isFinite(val)) {
                newVal = numericVal;
              }
            }  
            return newVal;
        }
        
        original = original.map(function(row) {
          var columns = Object.keys(row);
            
          for(var i = 0; i < columns.length; i++) {
            var col = columns[i];
            row[col] = mapRow(row[col], formatters[col] || defaultFormatter);
          }
          return row;
        });

        return original;
      };

      /*
       * Converts radius to area, simple math
       * @param {Number} radius
       * @returns {Number} area
       */
      var radiusToArea = function(r) {
        return r * r * Math.PI;
      };

      /*
       * Converts area to radius, simple math
       * @param {Number} area
       * @returns {Number} radius
       */
      var areaToRadius = function(a) {
        return Math.sqrt(a / Math.PI);
      };

      /*
       * Prints message to timestamp
       * @param {String} message
       */
      var timeStamp = function(message) {
        if(console && typeof console.timeStamp === 'function') {
          console.timeStamp(message);
        }
      };

      /*
       * Prints warning
       * @param {String} message
       */
      var warn = function(message) {
        message = Array.prototype.slice.call(arguments).join(' ');
        if(console && typeof console.warn === 'function') {
          console.warn(message);
        }
        // "return true" is needed to find out if a parent function is exited with warning
        // example:
        // myfunction = function() { if(brokenstuff) return utils.warn("broken stuff found") }
        // if(myfunction()) return; // stopped execution after myfunction finds broken stuff
        // ... or moving on
        return true;
      };

      /*
       * Prints message for group
       * @param {String} message
       */
      var groupCollapsed = function(message) {
        message = Array.prototype.slice.call(arguments).join(' ');
        if(console && typeof console.groupCollapsed === 'function') {
          console.groupCollapsed(message);
        }
      };

      /*
       * Prints end of group
       * @param {String} message
       */
      var groupEnd = function() {
        if(console && typeof console.groupEnd === 'function') {
          console.groupEnd();
        }
      };

      /*
       * Prints error
       * @param {String} message
       */
      var error$1 = function(message) {
        message = Array.prototype.slice.call(arguments).join(' ');
        if(console && typeof console.error === 'function') {
          console.error(message);
        }
      };

      /*
       * Count the number of decimal numbers
       * @param {Number} number
       */
      var countDecimals = function(number) {
        if(Math.floor(number.valueOf()) === number.valueOf()) {
          return 0;
        }
        return number.toString().split('.')[1].length || 0;
      };

      /*
       * Adds class to DOM element
       * @param {Element} el
       * @param {String} className
       */
      var addClass = function(el, className) {
        if(el.classList) {
          el.classList.add(className);
        } else {
          //IE<10
          el.className += ' ' + className;
        }
      };

      /*
       * Remove class from DOM element
       * @param {Element} el
       * @param {String} className
       */
      var removeClass = function(el, className) {
        if(el.classList) {
          el.classList.remove(className);
        } else {
          //IE<10
          el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'),
            ' ');
        }
      };

      /*
       * Adds or removes class depending on value
       * @param {Element} el
       * @param {String} className
       * @param {Boolean} value
       */
      var classed = function(el, className, value) {
        if(value === true) {
          addClass(el, className);
        } else if(value === false) {
          removeClass(el, className);
        } else {
          return hasClass(el, className);
        }
      };

      /*
       * Checks whether a DOM element has a class or not
       * @param {Element} el
       * @param {String} className
       * @return {Boolean}
       */
      var hasClass = function(el, className) {
        if(el.classList) {
          return el.classList.contains(className);
        } else {
          //IE<10
          return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
        }
      };

      /*
       * Throttles a function
       * @param {Function} func
       * @param {Number} ms duration
       * @return {Function}
       * Function recallLast was added to prototype of returned function.
       * Call Function.recallLast() - immediate recall func with last saved arguments,
       *                              else func will be called automaticly after ms duration
       */
      var throttle = function(func, ms) {

        var throttled = false,
          savedArgs,
          savedThis,
          nextTime,
          wrapper = function() {
            
            if(nextTime > Date.now()) {
              throttled = true;        
              savedArgs = arguments;
              savedThis = this;
              return;
            }

            nextTime = Date.now() + ms;
            throttled = false;
            
            func.apply(this, arguments);

            setTimeout(function() {
              __recallLast();          
            }, ms);

          },
          
          __recallLast = function() {
            if(throttled) {
              throttled = false;
              func.apply(savedThis, savedArgs);
            }     
          };

        wrapper.recallLast = __recallLast; 

        return wrapper;
      };


      /*
       * Returns keys of an object as array
       * @param {Object} arg
       * @returns {Array} keys
       */
      var keys = function(arg) {
        return Object.keys(arg);
      };

      /*
       * returns the values of an object in an array format
       * @param {Object} obj
       * @return {Array}
       */
      var values = function(obj) {
        var arr;
        var keys = Object.keys(obj);
        var size = keys.length;
        for(var i = 0; i < size; i += 1) {
          (arr = arr || []).push(obj[keys[i]]);
        }
        return arr;
      };


      /*
       * Computes the minumum value in an array
       * @param {Array} arr
       */
      var arrayMin = function(arr) {
        return arr.reduce(function(p, v) {
          return(p < v ? p : v);
        });
      };

      /*
       * Computes the minumum value in an array
       * @param {Array} arr
       */
      var arrayMax = function(arr) {
        return arr.reduce(function(p, v) {
          return(p > v ? p : v);
        });
      };

      /*
       * Computes the mean of an array
       * @param {Array} arr
       */
      var arrayMean = function(arr) {
        return arraySum(arr) / arr.length;
      };

      /*
       * Computes the sum of an array
       * @param {Array} arr
       */
      var arraySum = function(arr) {
        return arr.reduce(function(a, b) {
          return a + b;
        });
      };

      /*
       * Computes the median of an array
       * @param {Array} arr
       */
      var arrayMedian = function(arr) {
        arr = arr.sort(function(a, b) {
          return a - b;
        });
        var middle = Math.floor((arr.length - 1) / 2);
        if(arr.length % 2) {
          return arr[middle];
        } else {
          return(arr[middle] + arr[middle + 1]) / 2;
        }
      };

      /*
       * Returns the last value of array
       * @param {Array} arr
       */
      var arrayLast = function(arr) {
        if(!arr.length) return null;
        return arr[arr.length - 1];
      };

      /*
       * Returns the resulting object of the difference between two objects
       * @param {Object} obj2
       * @param {Object} obj1
       * @returns {Object}
       */
      var diffObject = function(obj2, obj1) {
        var diff = {};
        forEach(obj2, function(value, key) {
          if(!obj1.hasOwnProperty(key)) {
            diff[key] = value;
          } else if(value !== obj1[key]) {
            if(isPlainObject(value) && isPlainObject(obj1[key])) {
              var d = diffObject(value, obj1[key]);
              if(Object.keys(d).length > 0) {
                diff[key] = d;
              }
            } else if(!isArray(value) || !isArray(obj1[key]) || !arrayEquals(value, obj1[key])) {
              diff[key] = value;
            }
          }
        });
        return diff;
      };

      /*
       * Returns the resulting object without _defs_ leveling
       * @param {Object} obj
       * @returns {Object}
       */
      var flattenDefaults = function(obj) {
        var flattened = {};
        forEach(obj, function(val, key) {
          if(isPlainObject(val) && val._defs_) {
            flattened[key] = val._defs_;
          } else if(isPlainObject(val)) {
            flattened[key] = flattenDefaults(val);
          } else {
            flattened[key] = val;
          }
        });
        return flattened;
      };

      /*
       * Returns the resulting object without date objects for time
       * @param {Object} obj
       * @returns {Object}
       */
      var flattenDates = function(obj, timeFormat) {
        var flattened = {};
        forEach(obj, function(val, key) {
          //todo: hack to flatten time unit objects to strings
          if (key === 'marker') {
            ["axis_x", "axis_y", "size_label"].map(function(name) {
              var hook = val[name];
              if(typeof hook === 'object') {
                if(isDate(hook.domainMin)) hook.domainMin = timeFormat(hook.domainMin);
                if(isDate(hook.domainMax)) hook.domainMax = timeFormat(hook.domainMax);
                if(isDate(hook.zoomedMin)) hook.zoomedMin = timeFormat(hook.zoomedMin);
                if(isDate(hook.zoomedMax)) hook.zoomedMax = timeFormat(hook.zoomedMax);
              }
            });
          } else if(key === 'time') {
            if(typeof val.value === 'object') {
              val.value = timeFormat(val.value);
            }
            if(typeof val.start === 'object') {
              val.start = timeFormat(val.start);
            }
            if(typeof val.end === 'object') {
              val.end = timeFormat(val.end);
            }
            if(typeof val.startSelected === 'object') {
              val.startSelected = timeFormat(val.startSelected);
            }
            if(typeof val.endSelected === 'object') {
              val.endSelected = timeFormat(val.endSelected);
            }
          }
          if(isPlainObject(val)) {
            flattened[key] = flattenDates(val, timeFormat);
          } else {
            flattened[key] = val;
          }
        });
        return flattened;
      }

      /*
       * Defers a function
       * @param {Function} func
       */
      var defer = function(func) {
        setTimeout(func, 1);
      };

      /*
       * Defers a function
       * @param {Function} func
       */
      var delay = function(func, delay) {
        return setTimeout(func, delay);
      };

      var clearDelay = function(delayId) {
        return clearTimeout(delayId);
      };

      /*
       * Creates a hashcode for a string or array
       * @param {String|Array} str
       * @return {Number} hashCode
       */
      var hashCode = function(str) {
        if(!isString(str)) {
          str = JSON.stringify(str);
        }
        var hash = 0;
        var size = str.length;
        var c;
        if(size === 0) {
          return hash;
        }
        for(var i = 0; i < size; i += 1) {
          c = str.charCodeAt(i);
          hash = (hash << 5) - hash + c;
          hash = hash & hash; // Convert to 32bit integer
        }
        return hash.toString();
      };


      /*
       * Converts D3 nest array into the object with key-value pairs, recursively
       * @param {Array} arr - array like this [{key: k, values: [a, b, ...]}, {...} ... {...}]
       * @return {Object} object like this {k: [a, b, ...], ...}
       */
      //
      var nestArrayToObj = function(arr) {
        if(!arr || !arr.length || !arr[0].key) return arr;
        var res = {};
        for(var i = 0; i < arr.length; i++) {
          res[arr[i].key] = nestArrayToObj(arr[i].values);
        };
        return res;
      }


      var interpolateVector = function(){
          
      }

      /**
       * interpolates the specific value 
       * @param {Array} items -- an array of items, sorted by "dimTime", filtered so that no item[which] is null
       * @param {String} use -- a use of hook that wants to interpolate. can be "indicator" or "property" or "constant"
       * @param {String} which -- a hook pointer to indicator or property, e.g. "lex"
       * @param {Number} next -- an index of next item in "items" array after the value to be interpolated. if omitted, then calculated here, but it's expensive
       * @param {String} dimTime -- a pointer to time dimension, usually "time"
       * @param {Date} time -- reference point for interpolation. here the valus is to be found
       * @param {String} method refers to which formula to use. "linear" or "exp". Falls back to "linear" if undefined
       * @param {Boolean} extrapolate indicates if we should use zero-order extrapolation outside the range of available data
       * @returns {Number} interpolated value
       */
      var interpolatePoint = function(items, use, which, next, dimTime, time, method, extrapolate){

          
        if(!items || items.length === 0) {
          warn('interpolatePoint failed because incoming array is empty. It was ' + which);
          return null;
        }
        // return constant for the use of "constant"
        if(use === 'constant') return which;
          
        // zero-order interpolation for the use of properties
        if(use === 'property') return items[0][which];

        // the rest is for the continuous measurements
          
        if (extrapolate){
          // check if the desired value is out of range. 0-order extrapolation
          if(time - items[0][dimTime] <= 0) return items[0][which];    
          if(time - items[items.length - 1][dimTime] >= 0) return items[items.length - 1][which];
        } else {
          // no extrapolation according to Ola's request
          if(time < items[0][dimTime] || time > items[items.length - 1][dimTime]) return null;
        }
          
        if(!next && next !== 0) next = d3.bisectLeft(items.map(function(m){return m[dimTime]}), time);
          
        if(next === 0) return items[0][which];
              
        //return null if data is missing
        if(items[next]===undefined || items[next][which] === null || items[next - 1][which] === null || items[next][which] === "") {
          warn('interpolatePoint failed because next/previous points are bad in ' + which);
          return null;
        }
          

        //do the math to calculate a value between the two points
        var result = interpolator[method||"linear"](
          items[next - 1][dimTime],
          items[next][dimTime],
          items[next - 1][which],
          items[next][which],
          time
        );

        // cast to time object if we are interpolating time
        if(which === dimTime) result = new Date(result);
        if(isNaN$1(result)) {
            warn('interpolatePoint failed because result is NaN. It was ' + which);
            result = null;
        }
          
        return result;

      }


      /*
       * Performs an ajax request
       * @param {Object} options
       * @param {String} className
       * @return {Boolean}
       */
      var ajax = function(options) {
        var request = new XMLHttpRequest();
        request.open(options.method, options.url, true);
        if(options.method === 'POST' && !options.json) {
          request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        } else if(options.method === 'POST' && options.json) {
          request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        }
        request.onload = function() {
          if(request.status >= 200 && request.status < 400) {
            // Success!
            var data = options.json ? JSON.parse(request.responseText) : request.responseText;
            if(options.success) {
              options.success(data);
            }
          } else {
            if(options.error) {
              options.error();
            }
          }
        };
        request.onerror = function() {
          if(options.error) {
            options.error();
          }
        };
        request.send(options.data);
      };

      /*
       * Performs a GET http request
       */
      var get = function(url, pars, success, error, json) {
        pars = pars || [];
        forEach(pars, function(value, key) {
          pars.push(key + '=' + value);
        });
        url = pars.length ? url + '?' + pars.join('&') : url;
        ajax({
          method: 'GET',
          url: url,
          success: success,
          error: error,
          json: json
        });
      };

      /*
       * Performs a POST http request
       */
      var post = function(url, pars, success, error, json) {
        ajax({
          method: 'POST',
          url: url,
          success: success,
          error: error,
          json: json,
          data: pars
        });
      };

      /**
       * Make function memoized
       * @param {Function} fn
       * @returns {Function}
       */
      var memoize = function(fn) {
        return function() {
          var args = Array.prototype.slice.call(arguments);
          var hash = '';
          var i = args.length;
          var currentArg = null;

          while(i--) {
            currentArg = args[i];
            hash += (currentArg === Object(currentArg)) ? JSON.stringify(currentArg) : currentArg;
            fn.memoize || (fn.memoize = {});
          }

          return(hash in fn.memoize) ? fn.memoize[hash] : fn.memoize[hash] = fn.apply(this, args);
        };
      };

      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      var debounce = function(func, wait, immediate) {
        var timeout;
        return function() {
          var context = this,
            args = arguments;
          var later = function() {
            timeout = null;
            if(!immediate) func.apply(context, args);
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if(callNow) func.apply(context, args);
        }
      };

      var isTouchDevice = function() {
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
      };

      //return a pruneed tree
      var pruneTree = function(tree, filterCallback) {
        var filteredTree = {};
        var filteredChildrens = [];
        if(tree.hasOwnProperty("children")) {
          filteredChildrens = tree.children.map(function(childrenTree) {
            return pruneTree(childrenTree, filterCallback);
          }).filter(function(childrenTree) {
            return Object.keys(childrenTree).length !== 0;
          });
        }
        if(filteredChildrens.length != 0 || filterCallback(tree)) {
          filteredTree["id"] = tree.id;
        }
        if(filteredChildrens.length != 0) {
          filteredTree["children"] = filteredChildrens;
        }
        return filteredTree;
      };

      var setIcon = function(element, icon) {
        element.selectAll('*').remove();
        element.node().appendChild(
          element.node().ownerDocument.importNode(
            new DOMParser().parseFromString(
              icon, 'application/xml').documentElement, true)
        );
        return element;
      };

      //http://stackoverflow.com/questions/26049488/how-to-get-absolute-coordinates-of-object-inside-a-g-group
      function makeAbsoluteContext(element, svgDocument) {
        return function(x,y) {
          var offset = svgDocument.getBoundingClientRect();
          var matrix = element.getScreenCTM();
          return {
            x: (matrix.a * x) + (matrix.c * y) + matrix.e - offset.left,
            y: (matrix.b * x) + (matrix.d * y) + matrix.f - offset.top
          };
        };
      }

      var utils = Object.freeze({
        uniqueId: uniqueId,
        isElement: isElement,
        isArray: isArray,
        isObject: isObject,
        isDate: isDate,
        isString: isString,
        isNaN: isNaN$1,
        isNumber: isNumber,
        isPlainObject: isPlainObject,
        arrayEquals: arrayEquals,
        comparePlainObjects: comparePlainObjects,
        getViewportPosition: getViewportPosition,
        findScrollableAncestor: findScrollableAncestor,
        roundStep: roundStep,
        strToFloat: strToFloat,
        forEach: forEach,
        extend: extend,
        deepExtend: deepExtend,
        merge: merge,
        clone: clone,
        deepClone: deepClone,
        without: without,
        unique: unique,
        uniqueLast: uniqueLast,
        find: find,
        filter: filter,
        filterAny: filterAny,
        matchAny: matchAny,
        preventAncestorScrolling: preventAncestorScrolling,
        mapRows: mapRows,
        radiusToArea: radiusToArea,
        areaToRadius: areaToRadius,
        timeStamp: timeStamp,
        warn: warn,
        groupCollapsed: groupCollapsed,
        groupEnd: groupEnd,
        error: error$1,
        countDecimals: countDecimals,
        addClass: addClass,
        removeClass: removeClass,
        classed: classed,
        hasClass: hasClass,
        throttle: throttle,
        keys: keys,
        values: values,
        arrayMin: arrayMin,
        arrayMax: arrayMax,
        arrayMean: arrayMean,
        arraySum: arraySum,
        arrayMedian: arrayMedian,
        arrayLast: arrayLast,
        diffObject: diffObject,
        flattenDefaults: flattenDefaults,
        flattenDates: flattenDates,
        defer: defer,
        delay: delay,
        clearDelay: clearDelay,
        hashCode: hashCode,
        nestArrayToObj: nestArrayToObj,
        interpolateVector: interpolateVector,
        interpolatePoint: interpolatePoint,
        ajax: ajax,
        get: get,
        post: post,
        memoize: memoize,
        debounce: debounce,
        isTouchDevice: isTouchDevice,
        pruneTree: pruneTree,
        setIcon: setIcon,
        makeAbsoluteContext: makeAbsoluteContext
      });

      var initializing = false;
      var fnTest = /xyz/.test(function() {
        xyz;
      }) ? /\b_super\b/ : /.*/;

      function extend$1(name, extensions) {

        //in case there are two args
        extensions = arguments.length === 1 ? name : extensions;
        var _super = this.prototype;
        initializing = true;
        var prototype = new this();
        initializing = false;

        forEach(extensions, function(method, name) {
          if(typeof extensions[name] === 'function' && typeof _super[name] === 'function' && fnTest.test(extensions[name])) {
            prototype[name] = function(name, fn) {
              return function() {
                var tmp = this._super;
                this._super = _super[name];
                var ret = fn.apply(this, arguments);
                this._super = tmp;
                return ret;
              };
            }(name, extensions[name]);
          } else {
            prototype[name] = method;
          }
        });

        function Class() {
          if(!initializing && this.init) {
            this.init.apply(this, arguments);
          }
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.extend = extend$1;

        Class._collection = {};
        Class.register = function(name, code) {
          if(typeof this._collection[name] !== 'undefined') {
            warn('"' + name + '" is already registered. Overwriting...');
          }
          this._collection[name] = code;
        };

        Class.unregister = function(name) {
          this._collection[name] = void 0;
        };

        Class.getCollection = function() {
          return this._collection;
        };

        //define a method or field in this prototype
        Class.define = function(name, value) {
          this.prototype[name] = value;
        };

        //get an item of the collection from this class
        Class.get = function(name, silent) {
          if(this._collection.hasOwnProperty(name)) {
            return this._collection[name];
          }
          if(!silent) {
            warn('"' + name + '" was not found.');
          }
          return false;
        };
        //register extension by name
        if(arguments.length > 1 && this.register) {
          this.register(name, Class);
        }
        return Class;
      }

      var Class = function() {};
      Class.extend = extend$1;

      function Promise(resolver) {
        if(!(this instanceof Promise)) {
          return new Promise(resolver);
        }
        this.status = 'pending';
        this.value;
        this.reason;
        // then may be called multiple times on the same promise
        this._resolves = [];
        this._rejects = [];
        if(isFn(resolver)) {
          resolver(this.resolve.bind(this), this.reject.bind(this));
        }
        return this;
      }

      Promise.prototype.then = function(resolve, reject) {
        var next = this._next || (this._next = Promise());
        var status = this.status;
        var x;
        if('pending' === status) {
          isFn(resolve) && this._resolves.push(resolve);
          isFn(reject) && this._rejects.push(reject);
          return next;
        }
        if('resolved' === status) {
          if(!isFn(resolve)) {
            next.resolve(resolve);
          } else {
      //      try {
              x = resolve(this.value);
              resolveX(next, x);
      //      } catch(e) {
      //        this.reject(e);
      //      }
          }
          return next;
        }
        if('rejected' === status) {
          if(!isFn(reject)) {
            next.reject(reject);
          } else {
            try {
              x = reject(this.reason);
              resolveX(next, x);
            } catch(e) {
              this.reject(e);
            }
          }
          return next;
        }
      };
      Promise.prototype.resolve = function(value) {
        if('rejected' === this.status) {
          throw Error('Illegal call.');
        }
        this.status = 'resolved';
        this.value = value;
        this._resolves.length && fireQ(this);
        return this;
      };
      Promise.prototype.reject = function(reason) {
        if('resolved' === this.status) {
          throw Error('Illegal call. ' + reason);
        }
        this.status = 'rejected';
        this.reason = reason;
        this._rejects.length && fireQ(this);
        return this;
      };
      // shortcut of promise.then(undefined, reject)
      Promise.prototype.catch = function(reject) {
        return this.then(void 0, reject);
      };
      // return a promise with another promise passing in
      Promise.cast = function(arg) {
        var p = Promise();
        if(arg instanceof Promise) {
          return resolvePromise(p, arg);
        } else {
          return Promise.resolve(arg);
        }
      };
      // return a promise which resolved with arg
      // the arg maybe a thanable object or thanable function or other
      Promise.resolve = function(arg) {
        var p = Promise();
        if(isThenable(arg)) {
          return resolveThen(p, arg);
        } else {
          return p.resolve(arg);
        }
      };
      // accept a promises array,
      // return a promise which will resolsed with all promises's value,
      // if any promise passed rejectd, the returned promise will rejected with the same reason
      Promise.all = function(promises) {
        var len = promises.length;
        var promise = Promise();
        var r = [];
        var pending = 0;
        var locked;
        var test = promises;
        //modified
        forEach(promises, function(p, i) {
          p.then(function(v) {
            r[i] = v;
            if((pending += 1) === len && !locked) {
              promise.resolve(r);
            }
          }, function(e) {
            locked = true;
            promise.reject(e);
          });
        });
        return promise;
      };
      // accept a promises array,
      // return a promise which will resolsed with the first resolved promise passed,
      // if any promise passed rejectd, the returned promise will rejected with the same reason
      Promise.any = function(promises) {
        var promise = Promise();
        var called;
        //modified
        forEach(promises, function(p, i) {
          p.then(function(v) {
            if(!called) {
              promise.resolve(v);
              called = true;
            }
          }, function(e) {
            called = true;
            promise.reject(e);
          });
        });
        return promise;
      };
      // return a promise which reject with reason
      // reason must be an instance of Error object
      Promise.reject = function(reason) {
        if(!(reason instanceof Error)) {
          throw Error('reason must be an instance of Error');
        }
        var p = Promise();
        p.reject(reason);
        return p;
      };

      function resolveX(promise, x) {
        if(x === promise) {
          promise.reject(new Error('TypeError'));
        }
        if(x instanceof Promise) {
          return resolvePromise(promise, x);
        } else if(isThenable(x)) {
          return resolveThen(promise, x);
        } else {
          return promise.resolve(x);
        }
      }

      function resolvePromise(promise1, promise2) {
        var status = promise2.status;
        if('pending' === status) {
          promise2.then(promise1.resolve.bind(promise1), promise1.reject.bind(promise1));
        }
        if('resolved' === status) {
          promise1.resolve(promise2.value);
        }
        if('rejected' === status) {
          promise1.reject(promise2.reason);
        }
        return promise;
      }

      function resolveThen(promise, thanable) {
        var called;
        var resolve = once(function(x) {
          if(called) {
            return;
          }
          resolveX(promise, x);
          called = true;
        });
        var reject = once(function(r) {
          if(called) {
            return;
          }
          promise.reject(r);
          called = true;
        });
        try {
          thanable.then.call(thanable, resolve, reject);
        } catch(e) {
          if(!called) {
            throw e;
          } else {
            promise.reject(e);
          }
        }
        return promise;
      }

      function fireQ(promise) {
        var status = promise.status;
        var queue = promise['resolved' === status ? '_resolves' : '_rejects'];
        var arg = promise['resolved' === status ? 'value' : 'reason'];
        var fn;
        var x;
        while(fn = queue.shift()) {
          x = fn.call(promise, arg);
          x && resolveX(promise._next, x);
        }
        return promise;
      }

      function isFn(fn) {
        return 'function' === type(fn);
      }

      function type(obj) {
        var o = {};
        return o.toString.call(obj).replace(/\[object (\w+)\]/, '$1').toLowerCase();
      }

      function isThenable(obj) {
        return obj && obj.then && isFn(obj.then);
      }

      function once(fn) {
        var called;
        var r;
        return function() {
          if(called) {
            return r;
          }
          called = true;
          return r = fn.apply(this, arguments);
        };
      }

      /**
       * Initializes the reader.
       * @param {Object} reader_info Information about the reader
       */
      var Reader = Class.extend({
        init: function(reader_info) {
          this._name = this._name || reader_info.reader;
          this._data = reader_info.data || [];
          this._basepath = this._basepath || reader_info.path || null;
          this._parsers = reader_info.parsers;

          if(this._parsers) {
            this._data = mapRows(this._data, this._parsers);
          }
        },

        /**
         * Reads from source
         * @param {Array} queries Queries to be performed
         * @param {String} language language
         * @returns a promise that will be resolved when data is read
         */
        read: function(queries, language) {
          return new Promise.resolve();
        },

        /**
         * Gets the data
         * @returns all data
         */
        getData: function() {
          return this._data;
        }
      });

      var Data = Class.extend({

        init: function() {
          this._collection = {};
          this._collectionPromises = {};// stores promises, making sure we don't do one calulation twice 
        },

        /**
         * Loads resource from reader or cache
         * @param {Array} query Array with queries to be loaded
         * @param {String} language Language
         * @param {Object} reader Which reader to use - data reader info
         * @param {*} evts ?
         */
        load: function(query, language, reader, evts) {
          var _this = this;
          var promise = new Promise();
          var wait = new Promise().resolve();
          var cached = query === true ? true : this.isCached(query, language, reader);
          var loaded = false;
          //if result is cached, dont load anything
          if(!cached) {
            timeStamp('Vizabi Data: Loading Data');
            if(evts && typeof evts.load_start === 'function') {
              evts.load_start();
            }
            wait = new Promise();
            this.loadFromReader(query, language, reader).then(function(queryId) {
              loaded = true;
              cached = queryId;
              wait.resolve();
            }, function(err) {
              warn(err);
              wait.reject();
            });
          }
          wait.then(function() {
            //pass the data forward
            var data = _this._collection[cached].data;
            //not loading anymore
            if(loaded && evts && typeof evts.load_end === 'function') {
              evts.load_end();
            }
            promise.resolve(cached);
          }, function() {
            //not loading anymore
            if(loaded && evts && typeof evts.load_end === 'function') {
              evts.load_end();
            }
            promise.reject();
          });
          return promise;
        },

        /**
         * Loads resource from reader
         * @param {Array} query Array with queries to be loaded
         * @param {String} lang Language
         * @param {Object} reader Which reader to use. E.g.: "json"
         * @param {String} path Where data is located
         */
        loadFromReader: function(query, lang, reader) {
          var _this = this;
          var promise = new Promise();
          var reader_name = reader.reader;
          var queryId = hashCode([
            query,
            lang,
            reader
          ]);

          // joining multiple queries
          // create a queue which this datamanager writes all queries to
          this.queryQueue = this.queryQueue || [];
          this.queryQueue.push({ query: query, queryId: queryId, promise: promise, reader: reader});

          // wait one execution round for the queue to fill up
          defer(function() {
            // now the query queue is filled with all queries from one execution round

            var mergedQueries = [];
            var willExecute = false;

            // check every query in the queue
            _this.queryQueue = _this.queryQueue.filter(function(queueItem) {
              if (queueItem.query == query) {
                // Query is still in the queue so this is the first deferred query with same requested rows (where & group) to reach here. 
                // This will be the base query which will be executed; It will be extended by other queries in the queue.
                mergedQueries.push(queueItem);
                willExecute = true;

                // remove so that other queries won't merge it
                return false;
              } else {
                // check if the requested rows are similar
                if (comparePlainObjects(queueItem.query.where, query.where)
                 && comparePlainObjects(queueItem.query.grouping, query.grouping)
                  ) {

                  // if so, merge the selects to the base query
                  Array.prototype.push.apply(query.select, queueItem.query.select);
                  // merge parsers so the reader can parse the newly added columns
                  extend(reader.parsers, queueItem.reader.parsers);
                  
                  reader.parsers[_this.getAvailableDimension(query, "key")] = function(d){return ""+d};

                  // include query's promise to promises for base query
                  mergedQueries.push(queueItem);

                  // remove queueItem from queue as it's merged in the current query
                  return false;
                }
              } 
              // otherwise keep it in the queue, so it can be joined with another query
              return true;
            });

            if (!willExecute) return;

            // make the promise a collection of all promises of merged queries
            // promise = promises.length ? Promise.all(promises) : new Promise.resolve();

            // remove double columns from select (resulting from merging)
            // no double columns in formatter because it's an object, extend would've overwritten doubles
            query.select = unique(query.select);

            //create hash for dimensions only query
            var dim, dimQ, dimQId = 0; 
            dimQ = clone(query);
            dim = keys(dimQ.grouping);
            if (arrayEquals(dimQ.select.slice(0, dim.length), dim)) {
              dimQ.select = dim;
              dimQId = hashCode([
                dimQ,
                lang,
                reader
              ]);
            }

            // Create a new reader for this query
            var readerClass = Reader.get(reader_name);
            if (!readerClass) {
              throw new Error('Unknown reader: ' + reader_name);
            }
            var r = new readerClass(reader);

            // execute the query with this reader
            r.read(query, lang).then(function() {

                //success reading
                var values = r.getData();
                var q = query;

                //make sure all queried is returned
                values = values.map(function(d) {
                  for(var i = 0; i < q.select.length; i += 1) {
                    var col = q.select[i];
                    if(typeof d[col] === 'undefined') {
                      d[col] = null;
                    }
                  }
                  return d;
                });

                _this._collection[queryId] = {};
                _this._collectionPromises[queryId] = {};
                var col = _this._collection[queryId];
                col.data = values;
                col.valid = {};
                col.nested = {};
                col.unique = {};
                col.limits = {};
                col.limitsPerFrame = {};
                col.frames = {};
                col.haveNoDataPointsPerKey = {};
                col.query = q;
                // col.sorted = {}; // TODO: implement this for sorted data-sets, or is this for the server/(or file reader) to handle?

                // returning the query-id/values of the merged query without splitting the result up again per query
                // this is okay because the collection-object above will only be passed by reference to the cache and this will not take up more memory. 
                // On the contrary: it uses less because there is no need to duplicate the key-columns.
                forEach(mergedQueries, function(mergedQuery) {
                  // set the cache-location for each seperate query to the combined query's cache
                  _this._collection[mergedQuery.queryId] = _this._collection[queryId];
                  _this._collectionPromises[mergedQuery.queryId] = _this._collectionPromises[queryId];
                  // resolve the query
                  mergedQuery.promise.resolve(mergedQuery.queryId);
                });
        
                //create cache record for dimension only query
                if(dimQId !== 0) {
                  _this._collection[dimQId] = _this._collection[queryId];              
                }
                //promise.resolve(queryId);
              }, //error reading
              function(err) { 
                forEach(mergedQueries, function(mergedQuery) {
                  mergedQuery.promise.reject(err);
                });
              }
            );

          })

          return promise;
        },

        /**
         * get data
         */
        get: function(queryId, what, whatId, args) {
          // if not specified data from what query, return nothing
          if(!queryId) return warn("Data.js 'get' method doesn't like the queryId you gave it: " + queryId);

          // if they want data, return the data
          if(!what || what == 'data') {
            return this._collection[queryId]['data'];
          }

          // if they didn't give an instruction, give them the whole thing
          // it's probably old code which modifies the data outside this class
          // TODO: move these methods inside (e.g. model.getNestedItems())
          if (!whatId) {
            return this._collection[queryId][what];
          }

          // if they want a certain processing of the data, see if it's already in cache
          var id = (typeof whatId == "string")? whatId : JSON.stringify(whatId);
          if(this._collection[queryId][what][id]) {
            return this._collection[queryId][what][id];
          }

          // if it's not cached, process the data and then return it
          switch(what) {
            case 'unique':
              this._collection[queryId][what][id] = this._getUnique(queryId, whatId);
              break;
            case 'valid':
              this._collection[queryId][what][id] = this._getValid(queryId, whatId);
              break;
            case 'limits':
              this._collection[queryId][what][id] = this._getLimits(queryId, whatId);
              break;
            case 'nested':     
              this._collection[queryId][what][id] = this._getNested(queryId, whatId);
              break;
            case 'haveNoDataPointsPerKey':     
              //do nothing. no caching is available for this option, served directly from collection
              break;
          }
          return this._collection[queryId][what][id];
        },

        getConceptprops: function(which){
            if(!globals.conceptprops || !globals.conceptprops.indicatorsDB) return {};
            return which ? globals.conceptprops.indicatorsDB[which] : globals.conceptprops.indicatorsDB;
        },
          
        /**
         * Gets the concept properties of all hooks
         * @returns {Object} concept properties
         */
        getIndicatorsTree: function() {
          return globals.conceptprops && globals.conceptprops.indicatorsTree ? globals.conceptprops.indicatorsTree : {};
        },

        getFrames: function(queryId, framesArray) {
          var _this = this;
          var whatId = framesArray[0] + " - " + framesArray[framesArray.length-1];
          if (!this._collectionPromises[queryId][whatId]) {
            this._collectionPromises[queryId][whatId] = {
              queue: this.framesQueue(framesArray),
              promise: null
            };
          }
          if (this._collectionPromises[queryId][whatId] && this._collectionPromises[queryId][whatId]["promise"] instanceof Promise) {
            return this._collectionPromises[queryId][whatId]["promise"];
          } else {
            this._collectionPromises[queryId][whatId]["promise"] = new Promise(function (resolve, reject) {
              if (!queryId) reject(warn("Data.js 'get' method doesn't like the queryId you gave it: " + queryId));
              _this._getFrames(queryId, whatId, framesArray).then(function (frames) {
                _this._collection[queryId]["frames"][whatId] = frames;
                resolve(_this._collection[queryId]["frames"][whatId]);
              });
            })
           
          }
          return this._collectionPromises[queryId][whatId]["promise"];
        },

        getFrame: function(queryId, framesArray, neededFrame) {
          //can only be called after getFrames()
          var _this = this;
          var query = _this._collection[queryId].query;
          var whatId = framesArray[0] + " - " + framesArray[framesArray.length-1];
          var columns = query.select.filter(function(f){return f != "municipality" && f != "year" && f !== "_default"});

          return new Promise(function(resolve, reject) {
            if (_this._collection[queryId]["frames"][whatId] && _this._collection[queryId]["frames"][whatId][neededFrame]) {
              resolve(_this._collection[queryId]["frames"][whatId]);
            } else {
              _this._collectionPromises[queryId][whatId]["queue"].forceFrame(neededFrame, function() {
                resolve(_this._collection[queryId]["frames"][whatId]);
              });
            }
          });
        },
        /**
         * set priority for generate each year frame
         * @param framesArray
         * @returns {*}
         */
        framesQueue: function(framesArray) {
          return new function(){
            this.callbacks = {};
            this.forcedQueue = [];
            this.queue = framesArray.slice(0); //clone array
              
            //put the last element to the start of the queue because we are likely to need it first
            this.queue.splice(0, 0, this.queue.splice(this.queue.length - 1, 1)[0]);
            this.key = 0;
              
            // returns the next frame in a queue
            this.getNext = function() {
              var queue = this;
              var frameName = null;
              if (this.forcedQueue.length > 0) {
                frameName = this.forcedQueue.shift();
              } else {
                if (this.queue.length == 0) return false;
                if (this.forcedQueue.length == 0 && this.key >= this.queue.length - 1) {
                  this.key = 0;
                }
                frameName = this.queue.splice(this.key, 1).pop();
              }
              if (!this.callbacks[frameName]) {
                this.callbacks[frameName] = [];
              }
              var frameComplete = function(frameName) { //function called after build each frame with name of frame build
                if (queue.callbacks[frameName].length > 0) {
                  for (var  i = 0; i < queue.callbacks[frameName].length; i++) {
                    queue.callbacks[frameName][i]();
                  }
                  //delete queue.callbacks[frameName];
                }
              };
              return {
                frameName: frameName,
                callback: frameComplete
              };
            };
              
            // force the particular frame up the queue
            this.forceFrame = function(frameName, cb) {
              var objIndexOf = function(obj, need) {
                var search = need.toString();
                var index = -1;
                for(var i = 0, len = obj.length; i < len; i++) {
                  if (obj[i].toString() == search) {
                    index = i;
                    break;
                  }
                }
                return index;
              };
              if (this.callbacks[frameName]) {

                this.callbacks[frameName].push(cb);
              } else {
                var newKey = objIndexOf(this.queue, frameName);//this.queue.indexOf(frameName.toString());
                if (newKey !== -1) {
                  this.forcedQueue.unshift(this.queue.splice(newKey, 1).pop());
                  if (typeof cb === "function") {
                    if (typeof this.callbacks[frameName] != "object") {
                      this.callbacks[frameName] = [];
                    }
                    this.callbacks[frameName].push(cb);
                  }
                  this.key = newKey; //set key to next year after gorced element (preload if user click play)
                } else {
                  if (typeof this.callbacks[frameName] === "object") {
                    this.callbacks[frameName].push(cb);
                  } else {
                    this.callbacks[frameName] = [cb];
                  }
                }
              }
            }
          }();
        },
        
        
        // arg = "key" or "time"
        getAvailableDimension: function(query, arg){
          
          // HARD CODED KEY/TIME. Added "flexibility" for StatsSA assignment. 
          // This should be replaced by getting key/time dimensions from query or model.
          var possibleDimensions = {
            key: ["geo","municipality","province"],
            time: ["time","year"]
          }

          for (var i = 0; i<possibleDimensions[arg].length; i++) {
            if (query.select.indexOf(possibleDimensions[arg][i]) !== -1)
              return possibleDimensions[arg][i];
          }
          
        },

        /**
         * Get regularised dataset (where gaps are filled)
         * @param {Number} queryId hash code for query
         * @param {Array} framesArray -- array of keyframes across animatable
         * @returns {Object} regularised dataset, nested by [animatable, column, key]
         */
        _getFrames: function(queryId, whatId, framesArray) {
          var _this = this;

          if (!_this._collection[queryId]["frames"][whatId]) {
            _this._collection[queryId]["frames"][whatId] = {};
          }
          return new Promise(function(resolve, reject) {

            //TODO: thses should come from state or from outside somehow
            // FramesArray in the input contains the array of keyframes in animatable dimension.
            // Example: array of years like [1800, 1801 … 2100]
            // these will be the points where we need data
            // (some of which might already exist in the set. in regular datasets all the points would exist!)

            // Check if query.where clause is missing a time field

            var indicatorsDB = _this.getConceptprops();

            if(!indicatorsDB) warn("_getFrames in data.js is missing indicatorsDB, it's needed for gap filling");
            if(!framesArray) warn("_getFrames in data.js is missing framesArray, it's needed so much");

            var KEY = _this.getAvailableDimension(_this._collection[queryId].query, "key");
            var TIME = _this.getAvailableDimension(_this._collection[queryId].query, "time");

            var filtered = {};
            var items, itemsIndex, oneFrame, method, use, next;

            // We _nest_ the flat dataset in two levels: first by “key” (example: geo), then by “animatable” (example: year)
            // See the _getNested function for more details
            var nested = _this.get(queryId, 'nested', [KEY, TIME]);
            var keys = Object.keys(nested);

            // Get the list of columns that are in the dataset, exclude key column and animatable column
            // Example: [“lex”, “gdp”, “u5mr"]
            var query = _this._collection[queryId].query;
            var columns = query.select.filter(function(f){return f != KEY && f != TIME && f !== "_default"});

            var cLength = columns.length;
            var key, k, column, c;

            for (k = 0; k < keys.length; k++) {
              filtered[keys[k]] = {};
              for (c = 0; c < cLength; c++) filtered[keys[k]][columns[c]] = null;
            }
            for (c = 0; c < cLength; c++) _this._collection[queryId].haveNoDataPointsPerKey[columns[c]] = {};

            var buildFrame = function(frameName, keys, queryId, callback) {
                var frame = {};

                if (!query.where[TIME]) {
                  // The query.where clause doesn't have time field for properties:
                  // we populate the regular set with a single value (unpack properties into constant time series)
                  var dataset = _this._collection[queryId].data;
                  for (c = 0; c < cLength; c++) frame[columns[c]] = {};

                  for (var i = 0; i < dataset.length; i++) {
                    var d = dataset[i];
                    for (c = 0; c < cLength; c++) {
                      frame[columns[c]][d[KEY]] = d[columns[c]];
                      //check data for properties with missed data. If founded then write key to haveNoDataPointsPerKey with 
                      //count of broken datapoints  
                      if(d[columns[c]] == null) {
                        _this._collection[queryId].haveNoDataPointsPerKey[columns[c]][d[KEY]] = dataset.length;
                      }
                    }
                  }

                } else {
                  // If there is a time field in query.where clause, then we are dealing with indicators in this request

                  // Put together a template for cached filtered sets (see below what's needed)

                  // Now we run a 3-level loop: across frames, then across keys, then and across data columns (lex, gdp)

                  for (c = 0; c < cLength; c++) frame[columns[c]] = {};

                  for (k = 0; k < keys.length; k++) {
                    key = keys[k];

                    for (c = 0; c < cLength; c++) {
                      column = columns[c];

                      //If there are some points in the array with valid numbers, then
                      //interpolate the missing point and save it to the “clean regular set”
                      method = indicatorsDB[column] ? indicatorsDB[column].interpolation : null;
                      use = indicatorsDB[column] ? indicatorsDB[column].use : "indicator";


                      // Inside of this 3-level loop is the following:
                      if (nested[key] && nested[key][frameName] && (nested[key][frameName][0][column] || nested[key][frameName][0][column] === 0)) {

                        // Check if the piece of data for [this key][this frame][this column] exists
                        // and is valid. If so, then save it into a “clean regular set”
                        frame[column][key] = nested[key][frameName][0][column];

                      } else if (method === "none") {
                          
                        // the piece of data is not available and the interpolation is set to "none"
                        frame[column][key] = null;
                          
                      } else {
                        // If the piece of data doesn’t exist or is invalid, then we need to inter- or extapolate it

                        // Let’s take a slice of the nested set, corresponding to the current key nested[key]
                        // As you remember it has the data nested further by frames.
                        // At every frame the data in the current column might or might not exist.
                        // Thus, let’s filter out all the frames which don’t have the data for the current column.
                        // Let’s cache it because we will most likely encounter another gap in the same column for the same key
                        items = filtered[key][column];
                        if (items === null) {
                          var givenFrames = Object.keys(nested[key]);
                          items = new Array(givenFrames.length);
                          itemsIndex = 0;

                          for (var z = 0, length = givenFrames.length; z < length; z++) {
                            oneFrame = nested[key][givenFrames[z]];
                            if (oneFrame[0][column] || oneFrame[0][column] === 0) items[itemsIndex++] = oneFrame[0];
                          }

                          //trim the length of the array
                          items.length = itemsIndex;

                          if (itemsIndex === 0) {
                            filtered[key][column] = [];
                          } else {
                            filtered[key][column] = items;
                          }
                            
                          if(items.length==0) _this._collection[queryId].haveNoDataPointsPerKey[column][key] = items.length;
                        }

                        // Now we are left with a fewer frames in the filtered array. Let's check its length.
                        //If the array is empty, then the entire column is missing for the key
                        //So we let the key have missing values in this column for all frames
                        if (items && items.length > 0) {
                          next = null;
                          frame[column][key] = interpolatePoint(items, use, column, next, TIME, frameName, method);
                        }
                      }
                    } //loop across columns
                  } //loop across keys
                }
                
                // save the calcualted frame to global datamanager cache
                _this._collection[queryId]["frames"][whatId][frameName] = frame;
                
                // fire the callback
                if (typeof callback === "function") {
                  // runs the function frameComplete inside framesQueue.getNext()
                  callback(frameName); 
                }
                
                // recursively call the buildFrame again, this time for the next frame
                //QUESTION: FramesArray is probably not needed at this point. queryId and whatId is enough
                var nextFrame = _this._collectionPromises[queryId][whatId]["queue"].getNext(); 
                if (nextFrame) {
                  // defer allows other interactions to squeeze in between buildFrame executions
                  defer(function() {
                    buildFrame(nextFrame.frameName, keys, queryId, nextFrame.callback);
                  });
                } else {
                  //this goes to marker.js as a "response"
                  resolve(_this._collection[queryId]["frames"][whatId]); 
                }
            };
            var nextFrame = _this._collectionPromises[queryId][whatId]["queue"].getNext();
            if (nextFrame) {
              buildFrame(nextFrame.frameName, keys, queryId, nextFrame.callback);
            }
          });
        },


        _getNested: function(queryId, order) {
          // Nests are objects of key-value pairs
          // Example: 
          // 
          // order = ["geo", "time"];
          // 
          // original_data = [
          //   { geo: "afg", time: 1800, gdp: 23424, lex: 23}
          //   { geo: "afg", time: 1801, gdp: 23424, lex: null}
          //   { geo: "chn", time: 1800, gdp: 23587424, lex: 46}
          //   { geo: "chn", time: 1801, gdp: null, lex: null}
          // ];
          //  
          // nested_data = {
          //   afg: {
          //     1800: {gdp: 23424, lex: 23},
          //     1801: {gdp: 23424, lex: null}
          //   }
          //   chn: {
          //     1800: {gdp: 23587424, lex: 46 },
          //     1801: {gdp: null, lex: null }
          //   }
          // };

          var nest = d3.nest();
          for(var i = 0; i < order.length; i++) {
            nest = nest.key(
              (function(k) {
                return function(d) {
                  return d[k];
                };
              })(order[i])
            );
          };

          return nestArrayToObj(nest.entries(this._collection[queryId]['data']));
        },
          

        _getUnique: function(queryId, attr) {
          var uniq;
          var items = this._collection[queryId].data;
          //if it's an array, it will return a list of unique combinations.
          if(isArray(attr)) {
            var values = items.map(function(d) {
              return clone(d, attr); //pick attrs
            });
            uniq = unique(values, function(n) {
              return JSON.stringify(n);
            });
          } //if it's a string, it will return a list of values
          else {
            var values = items.map(function(d) {
              return d[attr];
            });
            uniq = unique(values);
          }
          return uniq;
        },

        _getValid: function(queryId, column) {
          return this._collection[queryId].data.filter(function(f){return f[column] || f[column]===0});
        },    
          
        _getLimits: function(queryId, attr) {

          var items = this._collection[queryId].data;
          // get only column attr and only rows with number or date
          var filtered = items.reduce(function(filtered, d) {
            
            // check for dates
            var f = (isDate(d[attr])) ? d[attr] : parseFloat(d[attr]);

            // if it is a number
            if(!isNaN(f)) {
              filtered.push(f);
            }

            //filter
            return filtered;
          }, []);

          // get min/max for the filtered rows
          var min;
          var max;
          var limits = {};
          for(var i = 0; i < filtered.length; i += 1) {
            var c = filtered[i];
            if(typeof min === 'undefined' || c < min) {
              min = c;
            }
            if(typeof max === 'undefined' || c > max) {
              max = c;
            }
          }
          limits.min = min || 0;
          limits.max = max || 100;
          return limits;    
        },

        /**
         * checks whether this combination is cached or not
         */
        isCached: function(query, language, reader) {
          //encode in hashCode
          var q = hashCode([
            query,
            language,
            reader
          ]);
          //simply check if we have this in internal data
          if(Object.keys(this._collection).indexOf(q) !== -1) {
            return q;
          }
          return false;
        }
      });

      var _freezeAllEvents = false;
      var _frozenEventInstances = [];
      var _freezeAllExceptions = {};

      var DefaultEvent = Class.extend({

        source: '',
        type: 'default',

        init: function(source, type) {
          this.source = source;
          if (type) this.type = type;
        }

      });

      var ChangeEvent = DefaultEvent.extend('change', {

        type: 'change',

        init: function(source) {
          this._super(source);
        }

      })

      var EventSource = Class.extend({

        /**
         * Initializes the event class
         */
        init: function() {
          this._id = this._id || uniqueId('e');
          this._events = {};
          //freezing events
          this._freeze = false;
          this._freezer = [];
          this._freezeExceptions = {};
        },

        /**
         * Binds a callback function to an event: part 1: split grouped parameters in seperate calls
         * @param {String} type type of event
         * @param {String|Array} target path to object the event should be bound to or array of target paths
         * @param {Function|Array} func function to be bound with event or array with functions
         */
        on: function(type, path, func) {
          
          // if parameters had to be split up in seperate calls, don't continue with this call
          if (this.splitEventParameters(type, path, func, this.on))
            return;

          // get the target model
          var target = this.traversePath(path);
          if (!target) return;

          // register the event to this object
          target._events[type] = target._events[type] || [];
          if(typeof func === 'function') {
            target._events[type].push(func);
          } else {
            warn('Can\'t bind event \'' + type + '\'. It must be a function.');
          }
        },


        /**
         * Unbinds all events associated with a name or a specific one
         * @param {String|Array} name name of event or array with names
         */
        off: function(type, path, func) {

          // if no arguments, unbind all
          if (arguments.length == 0) {
            this._events = {};
            return;
          }

          // if parameters had to be split up in seperate calls, don't continue with this call
          if (this.splitEventParameters(type, path, func, this.off))
            return;

          // get target model
          var target = this.traversePath(path);
          if (!target) return;

          // unbind events
          if(target._events.hasOwnProperty(type)) {
            // if function not given, remove all events of type
            if (typeof func === 'undefined') {
              target._events[type] = [];
              return;
            }
            var index = target._events[type].indexOf(func);
            if (index > -1) {
              target._events[type].splice(index, 1);
            } else {
              warn('Could not unbind function ' + func.name + '. Function not in bound function list.');
            }
          }
        },

        /**
         * Split grouped event parameters to seperate calls to given funtion
         * @param {String|Object|Array} type type of event
         * @param {String|Array} target path to object the event should be bound to or array of target paths
         * @param {Function|Array} func function to be bound with event or array with functions
         * @param {Function} eventFunc function to further process the split up parameters 
         * @return {Boolean} true if the parameters where split up, false if nothing was split up
         * eventFunc is mostly arguments.callee but this is deprecated in ECMAscript 5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee
         */
        splitEventParameters: function(type, path, func, eventFunc) {
          var i;
          var calls = [];

          // multiple at a time, array format: [{type: function}, {'type:path': function}, ... ]
          // seems redundant but used so that binding-sets won't be turned into models (which happens when it's a pure object). Used e.g. in Tool.init();
          if(isArray(type)) {
            for(i = 0; i < type.length; i += 1) {
              eventFunc.call(this, type[i], func);
            }
            return true;
          }

          //multiple at a time, object format: {type: function, 'type:path': function, ... }
          if(isObject(type)) {
            for(i in type) {
              eventFunc.call(this, i, type[i]);
            }
            return true;
          }

          // type and path are both in type: on('type:path', function)
          // or
          // path undefined: on('type', function)
          if(typeof path === 'function') {
            func = path; // put callback function in func variable
            // on('type:path', func)
            if (type.indexOf(':') !== -1) {
              var split = type.split(':');  
              type = split[0];
              path = split[1];
            } 
            // on(type, func)
            else {
              path = undefined;
            }
            eventFunc.call(this, type, path, func);
            return true;
          }

          // bind multiple paths at a time to one function: on(type, [path1, path2], function)
          if(isArray(path)) {
            for(i = 0; i < path.length; i += 1) {
              eventFunc.call(this, type, path[i], func);
            }
            return true;
          }

          //bind multiple functions at the same time to one path: on(type, path, [function1, function2])
          if(func && isArray(func)) {
            for(i = 0; i < func.length; i += 1) {
              eventFunc.call(this, type, path, func[i]);
            }
            return true;
          }   
          return false;
        },

        /**
         * // TODO: if events will not be strictly model-bound, this might have to move to model.
         * Traverse path down the model tree
         * @param {String|Array} target path to object that should be returned. Either in string or array form
         */
        traversePath: function(path) {

          // if there's no path to traverse
          if (typeof path === 'undefined' || isArray(path) && path.length == 0) {
            return this; 
          }

          // prepare path to array
          if (typeof path === 'string') {
            path = path.split('.');
          }
          
          // check if path is an array
          if (!isArray(path)) {
            error$1('Path is wrong type. Path should be a string or array but is ' + typeof path + '.');
            return null;
          }

          // descent to next child to find target object
          var currentTarget = path.shift();
          if (this[currentTarget] === undefined)
            warn('Can\'t find child "' + currentTarget + '" of the model ' + this._name + '.');
          else
            return this.getModelObject(currentTarget).traversePath(path);
        },

        /**
         * Triggers an event, adding it to the buffer
         * @param {String|Array} name name of event or array with names
         * @param args Optional arguments (values to be passed)
         */
        trigger: function(evtType, args) {
          var i;
          var size;

          // split up eventType-paremeter for multiple event-triggers
          if(isArray(evtType)) {
            for(i = 0, size = evtType.length; i < size; i += 1) {
              this.trigger(evtType[i], args);
            }
            return;
          }

          // create an event-object if necessary
          var evt;
          if ((evtType instanceof DefaultEvent)) {
            evt = evtType;
          } else {
            var eventClass = DefaultEvent.get(evtType, true); // silent
            if(eventClass) {
              evt = new eventClass(this);
            } else {
              evt = new DefaultEvent(this, evtType);
            }
          } 

          // if this eventType has no events registered
          if(!this._events.hasOwnProperty(evt.type)) {
            return;
          }

          // for each function registered to this eventType on this object
          var _this = this;
          forEach(this._events[evt.type], function(func) {

            // prepare execution
            var execute = function() {
              var msg = 'Vizabi Event: ' + evt.type; // + ' - ' + eventPath;
              timeStamp(msg);
              func.apply(_this, [
                evt,
                args
              ]);
            };

            //TODO: improve readability of freezer code
            //only execute if not frozen and exception doesnt exist
            if(_this._freeze || _freezeAllEvents) {
              //if exception exists for freezing, execute
              if(_freezeAllEvents && _freezeAllExceptions.hasOwnProperty(evt.type) || !_freezeAllEvents && _this._freeze &&
                _this._freezeExceptions.hasOwnProperty(evt.type)) {
                execute();
              } //otherwise, freeze it
              else {
                _this._freezer.push(execute);
                if(_freezeAllEvents && !_frozenEventInstances[_this._id]) {
                  _this.freeze();
                  _frozenEventInstances[_this._id] = _this;
                }
              }
            } else {
              execute();
            }
          })    
        },

        /**
         * Prevents all events from being triggered, buffering them
         */
        freeze: function(exceptions) {
          this._freeze = true;
          if(!exceptions) {
            return;
          }
          if(!isArray(exceptions)) {
            exceptions = [exceptions];
          }
          for(var i = 0; i < exceptions.length; i += 1) {
            this._freezeExceptions[exceptions[i]] = true;
          }
        },

        /**
         * triggers all frozen events
         */
        unfreeze: function() {
          this._freeze = false;
          this._freezeExceptions = {};
          //execute old frozen events
          while(this._freezer.length) {
            var execute = this._freezer.shift();
            execute();
          }
        },

        /**
         * clears all frozen events
         */
        clearFrozen: function() {
          this._freeze = false;
          this._freezeExceptions = {};
          this._freezer = [];
        }
      });

      EventSource.freezeAll = freezeAll;
      EventSource.unfreezeAll = unfreezeAll;

      //generic event functions
      /**
       * freezes all events
       */
      function freezeAll(exceptions) {
        _freezeAllEvents = true;
        if(!exceptions) {
          return;
        }
        if(!isArray(exceptions)) {
          exceptions = [exceptions];
        }
        forEach(exceptions, function(e) {
          _freezeAllExceptions[e] = true;
        });
      };

      /**
       * triggers all frozen events form all instances
       */
      function unfreezeAll() {
        _freezeAllEvents = false;
        _freezeAllExceptions = {};
        //unfreeze all instances
        var keys = Object.keys(_frozenEventInstances);
        for(var i = 0; i < keys.length; i++) {
          var instance = _frozenEventInstances[keys[i]];
          if(!instance) {
            continue;
          }
          instance.unfreeze();
        }
        _frozenEventInstances = {};
      };

      var Intervals = Class.extend({

        /**
         * Initializes intervals
         */
        init: function() {
          this.intervals = {};
        },

        /**
         * Sets an interval
         * @param {String} name name of interval
         * @param {Function} func function to be executed
         * @param {Number} duration duration in milliseconds
         */
        setInterval: function(name, func, duration) {
          this.clearInterval(name);
          this.intervals[name] = setInterval(func, duration);
        },

        /**
         * Clears an interval
         * @param {String} name name of interval to be removed
         */
        clearInterval: function(name) {
          return name ? clearInterval(this.intervals[name]) : this.clearAllIntervals();
        },

        /**
         * Clears all intervals
         */
        clearAllIntervals: function() {
          for(var i in this.intervals) {
            this.clearInterval(i);
          }
        }
      });

      var _DATAMANAGER = new Data();

      var ModelLeaf = EventSource.extend({

        _name: '',
        _parent: null,
        _persistent: true,

        init: function(name, value, parent, binds) {

          // getter and setter for the value
          Object.defineProperty(this, 'value', {
            get: this.get,
            set: this.set
          });
          Object.defineProperty(this, 'persistent', {
            get: function() { return this._persistent; }
          });

          this._super();

          this._name = name;
          this._parent = parent;
          this.value = value;
          this.on(binds); // after super so there is an .events object
        },

        // if they want a persistent value and the current value is not persistent, return the last persistent value
        get: function(persistent) {
          return (persistent && !this._persistent) ? this._persistentVal : this._val;
        },

        set: function(val, force, persistent) {
          if (force || (this._val !== val && JSON.stringify(this._val) !== JSON.stringify(val))) {

            // persistent defaults to true
            persistent = (typeof persistent !== 'undefined') ? persistent : true;
       
            // set leaf properties
            if (persistent) this._persistentVal = val; // set persistent value if change is persistent.
            this._val = val;
            this._persistent = persistent;

            // trigger change event
            this.trigger(new ChangeEvent(this), this._name);
          }
        },

        // duplicate from Model. Should be in a shared parent class.
        setTreeFreezer: function(freezerStatus) {
          if (freezerStatus) {
            this.freeze();
          } else {
            this.unfreeze();
          }
        }

      })

      var Model = EventSource.extend({
        /**
         * Initializes the model.
         * @param {Object} values The initial values of this model
         * @param {Object} parent reference to parent
         * @param {Object} bind Initial events to bind
         * @param {Boolean} freeze block events from being dispatched
         */
        init: function(name, values, parent, bind) {
          this._type = this._type || 'model';
          this._id = this._id || uniqueId('m');
          this._data = {};
          //holds attributes of this model
          this._parent = parent;
          this._name = name;
          this._ready = false;
          this._readyOnce = false;
          //has this model ever been ready?
          this._loadedOnce = false;
          this._loading = [];
          //array of processes that are loading
          this._intervals = getIntervals(this);
          //holds the list of dependencies for virtual models
          this._deps = {
            parent: [],
            children: []
          };
          //will the model be hooked to data?
          this._space = {};
          this._spaceDims = {};

          this._dataId = false;
          this._limits = {};
          //stores limit values
          this._super();

          //initial values
          if(values) {
            this.set(values);
          }
          // bind initial events
          // bind after setting, so no events are fired by setting initial values
          if(bind) {
            this.on(bind);
          }
        },

        /* ==========================
         * Getters and Setters
         * ==========================
         */

        /**
         * Gets an attribute from this model or all fields.
         * @param attr Optional attribute
         * @returns attr value or all values if attr is undefined
         */
        get: function(attr) {
          if(!attr) {
            return this._data;
          }
          if (isModel(this._data[attr]))
            return this._data[attr];
          else
            return this._data[attr].value; // return leaf value
        },

        /**
         * Sets an attribute or multiple for this model (inspired by Backbone)
         * @param attr property name
         * @param val property value (object or value)
         * @param {Boolean} force force setting of property to value and triggers set event
         * @param {Boolean} persistent true if the change is a persistent change
         * @returns defer defer that will be resolved when set is done
         */
        set: function(attr, val, force, persistent) {
          var setting = this._setting;
          var attrs;
          var freezeCall = false; // boolean, indicates if this .set()-call froze the modelTree
          
          //expect object as default
          if(!isPlainObject(attr)) {
            (attrs = {})[attr] = val;
          } else {
            // move all arguments one place
            attrs = attr;
            persistent = force;
            force = val;
          }

          //we are currently setting the model
          this._setting = true;

          // Freeze the whole model tree if not frozen yet, so no events are fired while setting
          if (!this._freeze) {
            freezeCall = true;
            this.setTreeFreezer(true);
          }

          // init/set all given values
          var newSubmodels = false;
          for(var a in attrs) {
            val = attrs[a];

            var bothModel = isPlainObject(val) && this._data[a] instanceof Model;
            var bothModelLeaf = !isPlainObject(val) && this._data[a] instanceof ModelLeaf;
            
            if (this._data[a] && (bothModel || bothModelLeaf)) {
              // data type does not change (model or leaf and can be set through set-function)
              this._data[a].set(val, force, persistent);
            } else {
              // data type has changed or is new, so initializing the model/leaf
              this._data[a] = initSubmodel(a, val, this);
              newSubmodels = true;
            }
          }

          // only if there's new submodels, we have to set new getters/setters
          if (newSubmodels)
            bindSettersGetters(this);

          if(this.validate && !setting) {
            this.validate();
          }

          if(!setting || force) {
            this._setting = false;
            if(!this.isHook()) {
              this.setReady();
            }
          }
          
          // if this set()-call was the one freezing the tree, now the tree can be unfrozen (i.e. all setting is done)
          if (freezeCall) {
            this.setTreeFreezer(false);
          }

        },


        setTreeFreezer: function(freezerStatus) {
          // first traverse down
          // this ensures deepest events are triggered first
          forEach(this._data, function(submodel) {
            submodel.setTreeFreezer(freezerStatus);
          });

          // then freeze/unfreeze
          if (freezerStatus) {
            this.freeze();
          } else {
            this.unfreeze();
          }
        },

        /**
         * Gets the type of this model
         * @returns {String} type of the model
         */
        getType: function() {
          return this._type;
        },



        /**
         * Gets all submodels of the current model
         * @param {Object} object [object=false] Should it return an object?
         * @param {Function} fn Validation function
         * @returns {Array} submodels
         */
        getSubmodels: function(object, fn) {
          var submodels = (object) ? {} : [];
          var fn = fn || function() {
            return true;
          };
          var _this = this;
          forEach(this._data, function(s, name) {
            if(s && typeof s._id !== 'undefined' && isModel(s) && fn(s)) {
              if(object) {
                submodels[name] = s;
              } else {
                submodels.push(s);
              }
            }
          });
          return submodels;
        },

        /**
         * Gets the current model and submodel values as a JS object
         * @returns {Object} All model as JS object, leafs will return their values
         */
        getPlainObject: function(persistent) {
          var obj = {};
          forEach(this._data, function(dataItem, i) {
            // if it's a submodel
            if(dataItem instanceof Model) {
              obj[i] = dataItem.getPlainObject(persistent);
            } 
            // if it's a modelLeaf
            else {
              obj[i] = dataItem.get(persistent);
            }
          });
          return obj;
        },


        /**
         * Gets the requested object, including the leaf-object, not the value
         * @returns {Object} Model or ModelLeaf object.
         */
        getModelObject: function(name) {
          if (name)
            return this._data[name];
          else
            return this;
        },

        /**
         * Clears this model, submodels, data and events
         */
        clear: function() {
          var submodels = this.getSubmodels();
          for(var i in submodels) {
            submodels[i].clear();
          }
          this._spaceDims = {};
          this.setReady(false);
          this.off();
          this._intervals.clearAllIntervals();
          this._data = {};
        },

        /**
         * Validates data.
         * Interface for the validation function implemented by a model
         * @returns Promise or nothing
         */
        validate: function() {},

        /* ==========================
         * Model loading
         * ==========================
         */

        /**
         * checks whether this model is loading anything
         * @param {String} optional process id (to check only one)
         * @returns {Boolean} is it loading?
         */
        isLoading: function(p_id) {
          if(this.isHook() && (!this._loadedOnce || this._loadCall)) {
            return true;
          }
          if(p_id) {
            return this._loading.indexOf(p_id) !== -1;
          } //if loading something
          else if(this._loading.length > 0) {
            return true;
          } //if not loading anything, check submodels
          else {
            var submodels = this.getSubmodels();
            var i;
            for(i = 0; i < submodels.length; i += 1) {
              if(submodels[i].isLoading()) {
                return true;
              }
            }
            for(i = 0; i < this._deps.children.length; i += 1) {
              var d = this._deps.children[i];
              if(d.isLoading() || !d._ready) {
                return true;
              }
            }
            return false;
          }
        },

        /**
         * specifies that the model is loading data
         * @param {String} p_id of the loading process
         */
        setLoading: function(p_id) {
          //if this is the first time we're loading anything
          if(!this.isLoading()) {
            this.trigger('load_start');
          }
          //add id to the list of processes that are loading
          this._loading.push(p_id);
        },

        /**
         * specifies that the model is done with loading data
         * @param {String} p_id of the loading process
         */
        setLoadingDone: function(p_id) {
          this._loading = without(this._loading, p_id);
          this.setReady();
        },

        /**
         * Sets the model as ready or not depending on its loading status
         */
        setReady: function(value) {
          if(value === false) {
            this._ready = false;
            if(this._parent && this._parent.setReady) {
              this._parent.setReady(false);
            }
            return;
          }
          //only ready if nothing is loading at all
          var prev_ready = this._ready;
          this._ready = !this.isLoading() && !this._setting && !this._loadCall;
          // if now ready and wasn't ready yet
          if(this._ready && prev_ready !== this._ready) {
            if(!this._readyOnce) {
              this._readyOnce = true;
              this.trigger('readyOnce');
            }
            this.trigger('ready');
          }
        },

        /**
         * loads data (if hook)
         * Hooks loads data, models ask children to load data
         * Basically, this method:
         * loads is theres something to be loaded:
         * does not load if there's nothing to be loaded
         * @param {Object} options (includes splashScreen)
         * @returns defer
         */
        load: function(opts) {

          opts = opts || {};
          var splashScreen = opts.splashScreen || false;

          var _this = this;
          var data_hook = this._dataModel;
          var language_hook = this._languageModel;
          var query = this.getQuery(splashScreen);
          var promiseLoad = new Promise();
          var promises = [];
          //useful to check if in the middle of a load call
          this._loadCall = true;

          //load hook
          //if its not a hook, the promise will not be created
          if(this.isHook() && data_hook && query) {
            //hook changes, regardless of actual data loading
            this.trigger('hook_change');
            //get reader info
            var reader = data_hook.getPlainObject();
            reader.parsers = this._getAllParsers();

            var lang = language_hook ? language_hook.id : 'en';
            var promise = new Promise();
            var evts = {
              'load_start': function() {
                _this.setLoading('_hook_data');
                EventSource.freezeAll([
                  'load_start',
                  'resize',
                  'dom_ready'
                ]);
              }
            };

            defer(function() { //defer require to fire "hook_change" event
              timeStamp('Vizabi Model: Loading Data: ' + _this._id);
              _DATAMANAGER.load(query, lang, reader, evts).then(function(dataId) {
                _this._dataId = dataId;
                timeStamp('Vizabi Model: Data loaded: ' + _this._id);
                _this.afterLoad();
                promise.resolve();
              }, function(err) {
                warn('Problem with query: ', JSON.stringify(query));
                promise.reject(err);
              });
              
            });
            promises.push(promise);
          }

          //load submodels as well
          forEach(this.getSubmodels(true), function(sm, name) {
            promises.push(sm.load(opts));
          });

          //when all promises/loading have been done successfully
          //we will consider this done
          var wait = promises.length ? Promise.all(promises) : new Promise.resolve();
          wait.then(function() {

            //only validate if not showing splash screen to avoid fixing the year
            if(_this.validate) {
              _this.validate();
            }
            timeStamp('Vizabi Model: Model loaded: ' + _this._id);
            //end this load call
            _this._loadedOnce = true;

            //we need to defer to make sure all other submodels
            //have a chance to call loading for the second time
            _this._loadCall = false;
            promiseLoad.resolve();
            defer(function() {
              _this.setReady();
            });
          }, function() {
            _this.trigger('load_error');
            promiseLoad.reject();
          });

          return promiseLoad;
        },

        /**
         * executes after preloading processing is done
         */
        afterPreload: function() {
          var submodels = this.getSubmodels();
          forEach(submodels, function(s) {
            s.afterPreload();
          });
        },

        /**
         * executes after data has actually been loaded
         */
        afterLoad: function() {
          EventSource.unfreezeAll();
          this.setLoadingDone('_hook_data');
        },

        /**
         * removes all external dependency references
         */
        resetDeps: function() {
          this._deps.children = [];
        },

        /**
         * add external dependency ref to this model
         */
        addDep: function(child) {
          this._deps.children.push(child);
          child._deps.parent.push(this);
        },

        /**
         * gets query that this model/hook needs to get data
         * @returns {Array} query
         */
        getQuery: function(splashScreen) {

          var dimensions, filters, select, grouping, orderBy, q;

          //if it's not a hook, no query is necessary
          if(!this.isHook()) return true;
          //error if there's nothing to hook to
          if(Object.keys(this._space).length < 1) {
            error$1('Error:', this._id, 'can\'t find the space');
            return true;
          }

          var prop = (this.use === "property") || (this.use === "constant");
          var exceptions = (prop) ? { exceptType: 'time' } : {};

          // select
          dimensions = this._getAllDimensions(exceptions);
          if(this.use !== 'constant') dimensions = dimensions.concat([this.which]);
          select = unique(dimensions);

          // where 
          filters = this._getAllFilters(exceptions, splashScreen);
          
          // grouping
          grouping = this._getGrouping();

          // order by
          orderBy = (!prop) ? this._space.time.dim : null;

          //return query
          return {
            'select': select,
            'where': filters,
            'grouping': grouping,
            'orderBy': orderBy // should be _space.animatable, but that's time for now
          };
        },

        /* ===============================
         * Hooking model to external data
         * ===============================
         */

        /**
         * is this model hooked to data?
         */
        isHook: function() {
          return this.use ? true : false;
        },
        /**
         * Hooks all hookable submodels to data
         */
        setHooks: function() {
          if(this.isHook()) {
            //what should this hook to?
            this.hookModel();
          } else {
            //hook submodels
            var submodels = this.getSubmodels();
            forEach(submodels, function(s) {
              s.setHooks();
            });
          }
        },

        /**
         * Hooks this model to data, entities and time
         * @param {Object} h Object containing the hooks
         */
        hookModel: function() {
          var _this = this;
          var spaceRefs = getSpace(this);
          // assuming all models will need data and language support
          this._dataModel = getClosestModel(this, 'data');
          this._languageModel = getClosestModel(this, 'language');
          //check what we want to hook this model to
          forEach(spaceRefs, function(name) {
            //hook with the closest prefix to this model
            _this._space[name] = getClosestModel(_this, name);
            //if hooks change, this should load again
            //TODO: remove hardcoded 'show"
            if(_this._space[name].show) {
              _this._space[name].on('change:show', function(evt) {
                //hack for right size of bubbles
                if(_this._type === 'size' && _this.which === _this.which_1) {
                  _this.which_1 = '';
                };
                //defer is necessary because other events might be queued.
                //load right after such events
                defer(function() {
                  _this.load().then(function() {

                  }, function(err) {
                    warn(err);
                  });
                });
              });
            }
          });
          //this is a hook, therefore it needs to reload when data changes
          this.on('change:which', function(evt) {
            //defer is necessary because other events might be queued.
            //load right after such events
            _this.load();
          });
          //this is a hook, therefore it needs to reload when data changes
          this.on('hook_change', function() {
            _this._spaceDims = {};
            _this.setReady(false);
          });
        },

        /**
         * Gets all submodels of the current model that are hooks
         * @param object [object=false] Should it return an object?
         * @returns {Array|Object} hooks array or object
         */
        getSubhooks: function(object) {
          return this.getSubmodels(object, function(s) {
            return s.isHook();
          });
        },

        /**
         * gets all sub values for a certain hook
         * only hooks have the "hook" attribute.
         * @param {String} type specific type to lookup
         * @returns {Array} all unique values with specific hook use
         */
        getHookWhich: function(type) {
          var values = [];
          if(this.use && this.use === type) {
            values.push(this.which);
          }
          //repeat for each submodel
          forEach(this.getSubmodels(), function(s) {
            values = unique(values.concat(s.getHookWhich(type)));
          });
          //now we have an array with all values in a type of hook for hooks.
          return values;
        },

        /**
         * gets all sub values for indicators in this model
         * @returns {Array} all unique values of indicator hooks
         */
        getIndicators: function() {
          return this.getHookWhich('indicator');
        },

        /**
         * gets all sub values for indicators in this model
         * @returns {Array} all unique values of property hooks
         */
        getProperties: function() {
          return this.getHookWhich('property');
        },

        /**
         * Gets the dimension of this model if it has one
         * @returns {String|Boolean} dimension
         */
        getDimension: function() {
          return this.dim || false; //defaults to dim if it exists
        },

        /**
         * Gets the dimension (if entity) or which (if hook) of this model
         * @returns {String|Boolean} dimension
         */
        getDimensionOrWhich: function() {
          return this.dim || (this.use != 'constant' ? this.which : false); //defaults to dim or which if it exists
        },

        /**
         * Gets the filter for this model if it has one
         * @returns {Object} filters
         */
        getFilter: function() {
          return {}; //defaults to no filter
        },


        /**
         * maps the value to this hook's specifications
         * @param value Original value
         * @returns hooked value
         */
        mapValue: function(value) {
          return value;
        },



          
        /**
         * gets nested dataset
         * @param {Array} keys define how to nest the set
         * @returns {Object} hash-map of key-value pairs
         */
        getNestedItems: function(keys) {
          if(!keys) return warn("No keys provided to getNestedItems(<keys>)");
          return _DATAMANAGER.get(this._dataId, 'nested', keys);
        },


        /**
         * Gets formatter for this model
         * @returns {Function|Boolean} formatter function
         */
        getParser: function() {
          //TODO: default formatter is moved to utils. need to return it to hook prototype class, but retest #1212 #1230 #1253
          return null;
        },

        getDataManager: function(){
          return _DATAMANAGER;
        },

        /**
         * Gets limits
         * @param {String} attr parameter
         * @returns {Object} limits (min and max)
         */
        getLimits: function(attr) {
          return _DATAMANAGER.get(this._dataId, 'limits', attr);
        },

        /**
         * gets all hook dimensions
         * @param {Object} opts options with exceptType or onlyType
         * @returns {Array} all unique dimensions
         */
        _getAllDimensions: function(opts) {

          var optsStr = JSON.stringify(opts);
          if(optsStr in this._spaceDims) {
            return this._spaceDims[optsStr];
          }

          opts = opts || {};
          var dims = [];
          var dim;

          var models = this._space;
          //in case it's a parent of hooks
          if(!this.isHook() && this.space) {
            models = [];
            var _this = this;
            forEach(this.space, function(name) {
              models.push(getClosestModel(_this, name));
            });
          }

          forEach(models, function(m) {
            if(opts.exceptType && m.getType() === opts.exceptType) {
              return true;
            }
            if(opts.onlyType && m.getType() !== opts.onlyType) {
              return true;
            }
            if(dim = m.getDimension()) {
              dims.push(dim);
            }
          });

          this._spaceDims[optsStr] = dims;

          return dims;
        },

        /**
         * gets first dimension that matches type
         * @param {Object} options
         * @returns {Array} all unique dimensions
         */
        _getFirstDimension: function(opts) {
          opts = opts || {};

          var models = this._space;
          //in case it's a parent of hooks
          if(!this.isHook() && this.space) {
            models = [];
            var _this = this;
            forEach(this.space, function(name) {
              models.push(getClosestModel(_this, name));
            });
          }

          var dim = false;
          forEach(models, function(m) {
            if(opts.exceptType && m.getType() !== opts.exceptType) {
              dim = m.getDimension();
              return false;
            } else if(opts.type && m.getType() === opts.type) {
              dim = m.getDimension();
              return false;
            } else if(!opts.exceptType && !opts.type) {
              dim = m.getDimension();
              return false;
            }
          });
          return dim;
        },

        /**
         * gets all hook filters
         * @param {Boolean} splashScreen get filters for first screen only
         * @returns {Object} filters
         */
        _getAllFilters: function(opts, splashScreen) {
          opts = opts || {};
          var filters = {};
          forEach(this._space, function(h) {
            if(opts.exceptType && h.getType() === opts.exceptType) {
              return true;
            }
            if(opts.onlyType && h.getType() !== opts.onlyType) {
              return true;
            }
            filters = extend(filters, h.getFilter(splashScreen));
          });
          return filters;
        },

        /**
         * gets grouping for each of the used entities
         * @param {Boolean} splashScreen get filters for first screen only
         * @returns {Object} filters
         */
        _getGrouping: function() {
          var groupings = {};
          forEach(this._space, function(h) {
            groupings[h.dim] = h.grouping || undefined;
          });
          return groupings;
        },

        /**
         * gets all hook filters
         * @returns {Object} filters
         */
        _getAllParsers: function() {

          var parsers = {};

          function addParser(model) {
            // get parsers from model
            var parser = model.getParser();
            var column = model.getDimensionOrWhich();
            if (parser && column) {
              parsers[column] = parser;
            }
          }

          // loop through all models which can have filters
          forEach(this._space, function(h) {
            addParser(h);
          });
          addParser(this);

          return parsers;
        },

        getDefaults: function() {
          // if defaults are set, does not care about defaults from children
          if(this._defaults) return this._defaults;
          var d = {};
          forEach(this.getSubmodels(true), function(model, name) {
            d[name] = model.getDefaults();
          });
          return d;
        }

      });

      /* ===============================
       * Private Helper Functions
       * ===============================
       */

      /**
       * Checks whether an object is a model or not
       * if includeLeaf is true, a leaf is also seen as a model
       */
      function isModel(model, includeLeaf) {
        return model && (model.hasOwnProperty('_data') || (includeLeaf &&  model.hasOwnProperty('_val')));
      }

      /**
       * Binds all attributes in _data to magic setters and getters
       */
      function bindSettersGetters(model) {
        for(var prop in model._data) {
          Object.defineProperty(model, prop, {
            configurable: true,
            //allow reconfiguration
            get: function(p) {
              return function() {
                return model.get(p);
              };
            }(prop),
            set: function(p) {
              return function(value) {
                return model.set(p, value);
              };
            }(prop)
          });
        }
      }

      /**
       * Loads a submodel, when necessaary
       * @param {String} attr Name of submodel
       * @param {Object} val Initial values
       * @param {Object} ctx context / parent model
       * @returns {Object} model new submodel
       */
      function initSubmodel(attr, val, ctx) {

        var submodel;

        // if value is a value -> leaf
        if(!isPlainObject(val) || isArray(val)) {  

          var binds = {
            //the submodel has changed (multiple times)
            'change': onChange
          }
          submodel = new ModelLeaf(attr, val, ctx, binds);
        }

        // if value is an object -> model
        else {

          var binds = {
            //the submodel has changed (multiple times)
            'change': onChange,
            //loading has started in this submodel (multiple times)
            'hook_change': onHookChange,
            //loading has started in this submodel (multiple times)
            'load_start': onLoadStart,
            //loading has failed in this submodel (multiple times)
            'load_error': onLoadError,
              //loading has ended in this submodel (multiple times)
            'ready': onReady
          };

          // if the value is an already instantiated submodel (Model or ModelLeaf)
          // this is the case for example when a new componentmodel is made (in Component._modelMapping)
          // it takes the submodels from the toolmodel and creates a new model for the component which refers 
          // to the instantiated submodels (by passing them as model values, and thus they reach here)
          if (isModel(val, true)) {
            submodel = val;
            submodel.on(binds);
          } 
          // if it's just a plain object, create a new model
          else {
            // construct model
            var modelType = attr.split('_')[0];
            var Modl = Model.get(modelType, true) || models[modelType] || Model;
            submodel = new Modl(attr, val, ctx, binds);
            // model is still frozen but will be unfrozen at end of original .set()
          }
        }

        return submodel;

        // Default event handlers for models
        function onChange(evt, path) {
          if(!ctx._ready) return; //block change propagation if model isnt ready
          path = ctx._name + '.' + path
          ctx.trigger(evt, path);    
        }
        function onHookChange(evt, vals) {
          ctx.trigger(evt, vals);
        }
        function onLoadStart(evt, vals) {
          ctx.setReady(false);
          ctx.trigger(evt, vals);
        }
        function onLoadError(evt, vals) {
          ctx.trigger(evt, vals);
        }
        function onReady(evt, vals) {
          //trigger only for submodel
          ctx.setReady(false);
          //wait to make sure it's not set false again in the next execution loop
          defer(function() {
            ctx.setReady();
          });
          //ctx.trigger(evt, vals);
        }
      }

      /**
       * gets closest interval from this model or parent
       * @returns {Object} Intervals object
       */
      function getIntervals(ctx) {
        if(ctx._intervals) {
          return ctx._intervals;
        } else if(ctx._parent) {
          return getIntervals(ctx._parent);
        } else {
          return new Intervals();
        }
      }

      /**
       * gets closest prefix model moving up the model tree
       * @param {String} prefix
       * @returns {Object} submodel
       */
      function getClosestModel(ctx, name) {
        var model = findSubmodel(ctx, name);
        if(model) {
          return model;
        } else if(ctx._parent) {
          return getClosestModel(ctx._parent, name);
        }
      }

      /**
       * find submodel with name that starts with prefix
       * @param {String} prefix
       * @returns {Object} submodel or false if nothing is found
       */
      function findSubmodel(ctx, name) {
        for(var i in ctx._data) {
          //found submodel
          if(i === name && isModel(ctx._data[i])) {
            return ctx._data[i];
          }
        }
      }

      /**
       * Learn what this model should hook to
       * @returns {Array} space array
       */
      function getSpace(model) {
        if(isArray(model.space)) {
          return model.space;
        } else if(model._parent) {
          return getSpace(model._parent);
        } else {
          error$1(
            'ERROR: space not found.\n You must specify the objects this hook will use under the "space" attribute in the state.\n Example:\n space: ["entities", "time"]'
          );
        }
      }

      /*!
       * VIZABI Time Model
       */

      // short-cut for developers to get UTC date strings
      // not meant to be used in code!!!
      Date.prototype.utc = Date.prototype.toUTCString;

      /*
       * Time formats for internal data
       * all in UTC
       */
      var formats = {
        'year':    d3.time.format.utc('%Y'),
        'month':   d3.time.format.utc('%Y%m'),
        'day':     d3.time.format.utc('%Y%m%d'),
        'hour':    d3.time.format.utc("%Y-%m-%d %H"),
        'minute':  d3.time.format.utc("%Y-%m-%d %H:%M"),
        'second':  d3.time.format.utc("%Y-%m-%d %H:%M:%S"),
        'week':    weekFormat(),   // %Yw%W d3 week format does not comply with ISO
        'quarter': quarterFormat() // %Yq%Q d3 does not support quarters
      };

      var TimeModel = Model.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          dim: "time",
          value: "2015",
          start: "1800", //mandatory defaults! 
          end: "2016", //mandatory defaults!
          startSelected: "1800",
          endSelected: "2015",
          playable: true,
          playing: false,
          loop: false,
          round: 'round',
          delay: 600, //delay between animation frames
          delayThresholdX2: 600, //delay X2 boundary: if less -- then every other frame will be dropped and animation dely will be double the value
          delayThresholdX4: 600, //delay X4 boundary: if less -- then 3/4 frame will be dropped and animation dely will be 4x the value
          unit: "year",
          step: 1, //step must be integer, and expressed in units
          immediatePlay: false,
          record: false
        },

        /**
         * Initializes the language model.
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "time";
          //default values for time model
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);

          //same constructor
          this._super(name, values, parent, bind);

          var _this = this;
          this.timeFormat = formats[this.unit];
          this.dragging = false;
          this.postponePause = false;
          this.allSteps = {};
          this.delayAnimations = this.delay;

          //bing play method to model change
          this.on({

            "change:playing": function() {
              if(_this.playing === true) {
                _this._startPlaying();
              } else {
                _this._stopPlaying();
              }
            },

            "change:unit": function() {
              _this.timeFormat = formats[_this.unit];
            }

          });
        },

        /**
         * Formats value, start and end dates to actual Date objects
         */
        _formatToDates: function() {

          var date_attr = ["value", "start", "end", "startSelected", "endSelected"];
          for(var i = 0; i < date_attr.length; i++) {
            var attr = date_attr[i];
            if(!isDate(this[attr])) {
              var date = this.parseToUnit(this[attr].toString(), this.unit);
              this.set(attr, date);
            }
          }
        },

        /*
         * Formatting and parsing functions
         * @param {Date} date
         * @param {String} unit
         * @returns {String}
         */
        format: function(dateObject, unit) {
          unit = unit || this.unit;
          return formats[unit] ? formats[unit](dateObject) : formats['year'](dateObject);
        },

        parseToUnit: function(timeString, unit) {
          unit = unit || this.unit;
          return formats[unit] ? formats[unit].parse(timeString) : null;
        },

        parse: function(timeString) {
          var keys = Object.keys(formats), i = 0; 
          for (; i < keys.length; i++) {
            var dateObject = formats[keys[i]].parse(timeString);
            if (dateObject) return { unit: keys[i], time: dateObject };
          }
          return null;
        },


        /**
         * Validates the model
         */
        validate: function() {

          //unit has to be one of the available_time_units
          if(!formats[this.unit]) {
            warn(this.unit + ' is not a valid time unit, using "year" instead.');
            this.unit = "year";
          }

          if(this.step < 1) {
            this.step = 1;
          }
            
          //make sure dates are transformed into dates at all times
          if(!isDate(this.start) || !isDate(this.end) || !isDate(this.value) 
            || !isDate(this.startSelected) || !isDate(this.endSelected)) {
            this._formatToDates();
          }

          //end has to be >= than start
          if(this.end < this.start) {
            this.end = new Date(this.start);
          }
          
          if(this.value < this.startSelected) {
            this.value = new Date(this.startSelected); 
          }
          
          if(this.value > this.endSelected) {
            this.value = new Date(this.endSelected);
          }
          
          if(this.startSelected < this.start) {
            this.startSelected = new Date(this.start);
          }

          if(this.endSelected > this.end) {
            this.endSelected = new Date(this.end);
          }
        
          //value has to be between start and end
          if(this.value < this.start) {
            this.value = new Date(this.start);
          } else if(this.value > this.end) {
            this.value = new Date(this.end);
          }

          if(this.playable === false && this.playing === true) {
            this.playing = false;
          }
        },

        /**
         * Plays time
         */
        play: function() {
          this._startPlaying();
        },

        /**
         * Pauses time
         */
        pause: function(soft) {
          if(soft) {
            this.postponePause = true;
          } else {
            this.playing = false;
          }
        },

        /**
         * Indicates dragging of time
         */
        dragStart: function() {
          this.dragging = true;
        },
        dragStop: function() {
          this.dragging = false;
        },


        /**
         * gets time range
         * @returns range between start and end
         */
        getRange: function() {
          var is = this.getIntervalAndStep();
          return d3.time[is.interval].utc.range(this.start, this.end, is.step);
        },

        /** 
         * gets the d3 interval and stepsize for d3 time interval methods
         * D3's week-interval starts on sunday and it does not support a quarter interval
         * 
         **/
        getIntervalAndStep: function() {
          var d3Interval, step;
          switch (this.unit) {
            case 'week': d3Interval = 'monday'; step = this.step; break;
            case 'quarter': d3Interval = 'month'; step = this.step*3; break;
            default: d3Interval = this.unit; step = this.step; break;
          }
          return { interval: d3Interval, step: step };
        },

        /**
         * Gets filter for time
         * @param {Boolean} firstScreen get filter for current year only
         * @returns {Object} time filter
         */
        getFilter: function(firstScreen) {
          var defaultStart = this.parseToUnit(this._defaults.start, this.unit);
          var defaultEnd = this.parseToUnit(this._defaults.end, this.unit);
            
          var start = this.timeFormat(defaultStart || this.start);
          var end = this.timeFormat(defaultEnd || this.end);
          var value = this.timeFormat(this.value);
          var dim = this.getDimension();
          var filter = {};

          filter[dim] = (firstScreen) ? [
            [value]
          ] : [
            [start, end]
          ];
          return filter;
        },

        /**
         * Gets formatter for this model
         * @returns {Function} formatter function
         */
        getParser: function() {
          return this.timeFormat.parse;
        },

        /**
         * Gets an array with all time steps for this model
         * @returns {Array} time array
         */
        getAllSteps: function() {
          var hash = "" + this.start + this.end + this.step;
          
          //return if cached
          if(this.allSteps[hash]) return this.allSteps[hash];
            
          this.allSteps[hash] = [];
          var curr = this.start;
          while(curr <= this.end) {
            var is = this.getIntervalAndStep();
            this.allSteps[hash].push(curr);
            curr = d3.time[is.interval].utc.offset(curr, is.step);
          }
          return this.allSteps[hash];
        },

        /**
         * Snaps the time to integer
         * possible inputs are "start", "end", "value". "value" is default
         */
        snap: function(what) {
          if(!this.round) return;
          if(what == null) what = "value";
          var op = 'round';
          if(this.round === 'ceil') op = 'ceil';
          if(this.round === 'floor') op = 'floor';
          var is = this.getIntervalAndStep();
          var time = d3.time[is.interval].utc[op](this[what]);
          this.set(what, time, true); //3rd argumennt forces update
        },

        /**
         * Starts playing the time, initializing the interval
         */
        _startPlaying: function() {
          //don't play if it's not playable
          if(!this.playable) return;

          var _this = this;

          //go to start if we start from end point
          if(this.value >= this.endSelected) {
            _this.getModelObject('value').set(_this.startSelected, null, false /*make change non-persistent for URL and history*/);
          } else {
            //the assumption is that the time is already snapped when we start playing
            //because only dragging the timeslider can un-snap the time, and it snaps on drag.end
            //so we don't need this line. let's see if we survive without.
            //as a consequence, the first time update in playing sequence will have this.playing flag up
            //so the bubble chart will zoom in smoothly. Closes #1213
            //this.snap();
          }
          this.playing = true;
          this.playInterval(this.immediatePlay);

          this.trigger("play");
        },

        playInterval: function(immediatePlay){
          if(!this.playing) return;
          var _this = this;
          this.delayAnimations = this.delay;
          if(this.delay < this.delayThresholdX2) this.delayAnimations*=2;
          if(this.delay < this.delayThresholdX4) this.delayAnimations*=2;

          var delayAnimations = immediatePlay ? 1 : this.delayAnimations;

          this._intervals.setInterval('playInterval_' + this._id, function() {
            // when time is playing and it reached the end
            if(_this.value >= _this.endSelected) {
              // if looping
              if(_this.loop) {
                // reset time to start, silently
                _this.getModelObject('value').set(_this.startSelected, null, false /*make change non-persistent for URL and history*/);
              } else {
                _this.playing = false;
              }
              return;
            } else {

              _this._intervals.clearInterval('playInterval_' + _this._id);

              if(_this.postponePause || !_this.playing) {
                _this.playing = false;
                _this.postponePause = false;
                _this.getModelObject('value').set(_this.value, true, true /*force the change and make it persistent for URL and history*/);
              } else {
                var is = _this.getIntervalAndStep();
                if(_this.delay < _this.delayThresholdX2) is.step*=2;
                if(_this.delay < _this.delayThresholdX4) is.step*=2;
                var time = d3.time[is.interval].utc.offset(_this.value, is.step);
                if(time >= _this.endSelected) {
                  // if no playing needed anymore then make the last update persistent and not overshooting
                  _this.getModelObject('value').set(_this.endSelected, null, true /*force the change and make it persistent for URL and history*/);
                }else{
                  _this.getModelObject('value').set(time, null, false /*make change non-persistent for URL and history*/);
                }
                _this.playInterval();
              }
            }
          }, delayAnimations);

        },
        
        incrementTime: function(time) {
          var is = this.getIntervalAndStep();
          return d3.time[is.interval].utc.offset(time, is.step);
        },

        /**
         * Stops playing the time, clearing the interval
         */
        _stopPlaying: function() {
          this._intervals.clearInterval('playInterval_' + this._id);
          //this.snap();
          this.trigger("pause");
        }

      });

      /*
       * Week Format to format and parse dates
       * Conforms with ISO8601
       * Follows format: YYYYwWW: 2015w04, 3845w34, 0020w53
       */ 
      function weekFormat() {

        var format = function(d) {
          return formatWeekYear(d) + 'w' + formatWeek(d);
        }
        
        format.parse = function parse(dateString) {
          var matchedDate = dateString.match(/^(\d{4})w(\d{2})$/);
          return matchedDate ? getDateFromWeek(matchedDate[1], matchedDate[2]): null;
        };
        
        var formatWeekYear = function(d) {
            var origin = +d;
            return new Date(origin + ((4 - (d.getUTCDay() || 7)) * 86400000)).getUTCFullYear();
        };
        
        var formatWeek = function(d) {
          var origin = +d;
          var quote = new Date(origin + ((4 - (d.getUTCDay() || 7)) * 86400000))
          var week = Math.ceil(((quote.getTime() - quote.setUTCMonth(0, 1)) / 86400000 + 1) / 7);
          return week < 10 ? '0' + week : week;
        };
        
        var getDateFromWeek = function(p1, p2) {
          var week = parseInt(p2);
          var year = p1;
          var startDateOfYear = new Date(); // always 4th of January (according to standard ISO 8601)
          startDateOfYear.setUTCFullYear(year);
          startDateOfYear.setUTCMonth(0);
          startDateOfYear.setUTCDate(4);
          var startDayOfWeek = startDateOfYear.getUTCDay() || 7;
          var dayOfWeek = 1; // Monday === 1
          var dayOfYear = week * 7 + dayOfWeek - (startDayOfWeek + 4);

          var date = formats['year'].parse(year);
          date = new Date(date.getTime() + dayOfYear * 24 * 60 * 60 * 1000);

          return date;
        }
        
        return format;
        
      };

      /*
       * Quarter Format to format and parse quarter dates
       * A quarter is the month%3
       * Follows format: YYYYqQ: 2015q4, 5847q1, 0040q2
       */ 
      function quarterFormat() {
        
        var format = function(d) {
          return formats['year'](d) + 'q' + formatQuarter(d)
        }
        
        format.parse = function(dateString) {
          var matchedDate = dateString.match(/^(\d{4})q(\d)$/);
          return matchedDate ? getDateFromQuarter(matchedDate[1], matchedDate[2]): null;
        }

        var formatQuarter = function(d) {
          return ((d.getUTCMonth() / 3) | 0) + 1;
        };
       
        var getDateFromQuarter = function(p1, p2) {
          var quarter = parseInt(p2);
          var month = 3 * quarter - 2; // first month in quarter
          var year = p1;
          return formats['month'].parse([year, (month < 9 ? '0': '') + month].join(''));
        }   
        
        return format;
      }

      /*!
       * HOOK MODEL
       */


      var Hook = Model.extend({
        
        //some hooks can be important. like axis x and y
        //that means, if X or Y doesn't have data at some point, we can't show markers
        _important: false,
        
          /**
         * Gets tick values for this hook
         * @returns {Number|String} value The value for this tick
         */
        getTickFormatter: function() {
            
          var _this = this;
          var SHARE = "share";
          var PERCENT = "percent";
          
          // percentageMode works like rounded if set to SHARE, but multiplies by 100 and suffixes with "%"
          // percentageMode works like rounded if set to PERCENT, but suffixes with "%"
            
          return function format(x, index, removePrefix, percentageMode){
            
          percentageMode = _this.getConceptprops().format;
          if(percentageMode===SHARE) x*=100;

          // Format time values
          // Assumption: a hook has always time in its space
          if(isDate(x)) return _this._space.time.timeFormat(x);
            
          // Dealing with values that are supposed to be time
          if(_this.scaleType === "time" && !isDate(x)) {
              return _this._space.time.timeFormat(new Date(x));
          }
            
          // Strings, null, NaN and undefined are bypassing any formatter
          if(isString(x) || !x && x!==0) return x;

          if(Math.abs(x)<0.00000000000001) return "0";
              
          var format = "r"; //rounded format. use "f" for fixed
          var prec = 3; //round to so many significant digits
          
          var prefix = "";
          if(removePrefix) return d3.format("." + prec + format)(x);
              
          //---------------------
          // BEAUTIFIERS GO HOME!
          // don't break formatting please
          //---------------------
          // the tiny constant compensates epsilon-error when doing logsrithms
          switch(Math.floor(Math.log(Math.abs(x))/Math.LN10 + 0.00000000000001)) {
            case -13: x = x * 1000000000000; prefix = "p"; break; //0.1p
            case -10: x = x * 1000000000; prefix = "n"; break; //0.1n
            case -7: x = x * 1000000; prefix = "µ"; break; //0.1µ
            case -6: x = x * 1000000; prefix = "µ"; break; //1µ
            case -5: x = x * 1000000; prefix = "µ"; break; //10µ
            case -4: break; //0.0001
            case -3: break; //0.001
            case -2: break; //0.01
            case -1: break; //0.1
            case 0:  break; //1
            case 1:  break; //10
            case 2:  break; //100
            case 3:  break; //1000
            case 4:  x = x / 1000; prefix = "k"; break; //10k
            case 5:  x = x / 1000; prefix = "k"; break; //100k
            case 6:  x = x / 1000000; prefix = "M"; break; //1M
            case 7:  x = x / 1000000; prefix = "M"; break; //10M
            case 8:  x = x / 1000000; prefix = "M"; break; //100M
            case 9:  x = x / 1000000000; prefix = "B"; break; //1B
            case 10: x = x / 1000000000; prefix = "B"; break; //10B
            case 11: x = x / 1000000000; prefix = "B"; break; //100B
            case 12: x = x / 1000000000000; prefix = "TR"; break; //1TR
            case 13: x = x / 1000000000000; prefix = "TR"; break; //10TR
            case 14: x = x / 1000000000000; prefix = "TR"; break; //100TR
            //use the D3 SI formatting for the extreme cases
            default: return(d3.format("." + prec + "s")(x)).replace("G", "B");
          }  
          
          var formatted = d3.format("." + prec + format)(x);
          //remove trailing zeros if dot exists to avoid numbers like 1.0M, 3.0B, 1.500, 0.9700, 0.0
          if (formatted.indexOf(".")>-1) formatted = formatted.replace(/0+$/,"").replace(/\.$/,"");
            
          
          
          // use manual formatting for the cases above
          return(formatted + prefix + (percentageMode===PERCENT || percentageMode===SHARE?"%":""));
          }
        },
          
        /**
         * Gets the d3 scale for this hook. if no scale then builds it
         * @returns {Array} domain
         */
        getScale: function(margins) {
          if(!this.scale) {
            this.buildScale(margins);
          }
          return this.scale;
        },

        /**
         * Gets the domain for this hook
         * @returns {Array} domain
         */
        buildScale: function() {
          if(!this.isHook()) {
            return;
          }
          var domain;
          var scaleType = this.scaleType || 'linear';
          switch(this.use) {
            case 'indicator':
              var limits = this.getLimits(this.which);
              domain = [
                limits.min,
                limits.max
              ];
              break;
            case 'property':
              domain = this.getUnique(this.which);
              break;
            default:
              domain = [this.which];
              break;
          }
          //TODO: d3 is global?
          this.scale = scaleType === 'time' ? d3.time.scale.utc().domain(domain) : d3.scale[scaleType]().domain(domain);
        },
          
            //TODO: this should go down to datamanager, hook should only provide interface
        /**
         * gets maximum, minimum and mean values from the dataset of this certain hook
         */
        gerLimitsPerFrame: function() {
            
          if(this.use === "property") return warn("getMaxMinMean: strange that you ask min max mean of a property"); 
          if(!this.isHook) return warn("getMaxMinMean: only works for hooks");
            
          var result = {};
          var values = [];
          var value = null;
          var TIME = this._getFirstDimension({type: "time"});
            
          var steps = this._parent._parent.time.getAllSteps();
            
          if(this.use === "constant") {
              steps.forEach(function(t){ 
                  value = this.which;
                  result[t] = {
                      min: value,
                      max: value
                  }
              });

          }else if(this.which===TIME){
              steps.forEach(function(t){ 
                  value = new Date(t);
                  result[t] = {
                      min: value,
                      max: value
                  }
              });

          }else{
              var args = {framesArray: steps, which: this.which};
              result = this.getDataManager().get(this._dataId, 'limitsPerFrame', args);   
          }
            
          return result;
        },
          
          
           /**
           * Gets unique values in a column
           * @param {String|Array} attr parameter
           * @returns {Array} unique values
           */
          getUnique: function(attr) {
              if(!this.isHook()) return;
              if(!attr) attr = this._getFirstDimension({type: "time"});
              return this.getDataManager().get(this._dataId, 'unique', attr);
          },
          
          
          
          
            /**
         * gets dataset without null or nan values with respect to this hook's which
         * @returns {Object} filtered items object
         */
        getValidItems: function() {
          return this.getDataManager().get(this._dataId, 'valid', this.which);
        },

        getNestedItems: function(groupBy) {
          return this.getDataManager().get(this._dataId, 'nested', groupBy);
        },
          
        getLimitsByDimensions: function(dims) {
          var filtered = this.getDataManager().get(this._dataId, 'nested', dims);
          var values = {};
          var limitsDim = {};
          var attr = this.which;
          
          var countLimits = function(items, limitsDim, id) {
       
            var filtered = items.reduce(function(filtered, d) {
              
              // check for dates
              var f = (isDate(d[attr])) ? d[attr] : parseFloat(d[attr]);

              // if it is a number
              if(!isNaN(f)) {
                filtered.push(f);
              }

              //filter
              return filtered;
            }, []);
            
            // get min/max for the filtered rows
            var min;
            var max;
            var limits = {};
            for(var i = 0; i < filtered.length; i += 1) {
              var c = filtered[i];
              if(typeof min === 'undefined' || c < min) {
                min = c;
              }
              if(typeof max === 'undefined' || c > max) {
                max = c;
              }
            }
            limits.min = min || 0;
            limits.max = max || 100;
            limitsDim[id] = limits;    
          
          }
          
          var iterateGroupKeys = function(data, deep, result, cb) {
            deep--;
            forEach(data, function(d, id) {
              if(deep) {
                result[id] = {};
                iterateGroupKeys(d, deep, result[id], cb);
              } else {
                cb(d, result, id);
              }
            });
          }
          
          iterateGroupKeys(filtered, dims.length, limitsDim, countLimits);
          
          return limitsDim;
        },
        
        
          
        /**
         * Gets the concept properties of the hook's "which"
         * @returns {Object} concept properties
         */
        getConceptprops: function() {
          return this.use !== 'constant' ? this.getDataManager().getConceptprops(this.which) : {};
        }    
      });

      /*
       * VIZABI Stack Model
       */

      var palettes = {
        'ALL': "all",
        _default: "none"
      };

      var StackModel = Hook.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          use: null,
          which: null,
          merge: false
        },
        /**
         * Initializes the stack hook
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "model";
          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);
          this._super(name, values, parent, bind);
        },

        /**
         * Validates a color hook
         */
        validate: function() {
          //there must be no scale
          if(this.scale) this.scale = null;

          //use must not be "indicator" 
          if(this.use === "indicator") {
            warn("stack model: use must not be 'indicator'. Resetting use to 'constant' and which to '" + palettes._default)
            this.use = "constant";
            this.which = palettes._default;
          }

          //if use is "constant"
          if(this.use === "constant" && values(palettes).indexOf(this.which) == -1) {
            warn("stack model: the requested value '" + this.which + "' is not allowed. resetting to '" +
              palettes._default)
            this.which == palettes._default;
          }
        },

        /**
         * Get the above constants
         */
        getPalettes: function() {
          return palettes;
        },

        /**
         * There must be no scale
         */
        buildScale: function() {}

      });

      /*!
       * VIZABI Axis Model (hook)
       */

      var allowTypes = {
          "indicator": ["linear", "log", "genericLog", "time", "pow"],
          "property": ["ordinal"],
          "constant": ["ordinal"]
      };

      var AxisModel = Hook.extend({
        
        //some hooks can be important. like axis x and y
        //that means, if X or Y doesn't have data at some point, we can't show markers
        _important: true,
        
        /**
         * Default values for this model
         */
        _defaults: {
          use: null,
          which: null,
          domainMin: null,
          domainMax: null,
          zoomedMin: null,
          zoomedMax: null
        },
          
        _type: "axis",

        /**
         * Initializes the color hook
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);      
          this._super(name, values, parent, bind);
        },

        /**
         * Validates a color hook
         */
        validate: function() {

          //only some scaleTypes are allowed depending on use. reset to default if inappropriate
          if(allowTypes[this.use].indexOf(this.scaleType) === -1) this.scaleType = allowTypes[this.use][0];

          //kill the scale if indicator or scale type have changed
          //the scale will be rebuild upon getScale request in model.js
          if(this.which_1 != this.which || this.scaleType_1 != this.scaleType) this.scale = null;
          this.which_1 = this.which;
          this.scaleType_1 = this.scaleType;

          //here the modified min and max may change the domain, if the scale is defined
          if(this.scale && this._readyOnce && this.use === "indicator") {
            if(this.scaleType == "time") {
              
              var timeMdl = this._space.time;
              var limits = timeMdl.beyondSplash ? 
                  {min: timeMdl.beyondSplash.start, max: timeMdl.beyondSplash.end}
                  :
                  {min: timeMdl.start, max: timeMdl.end};
              
              if (this.scale.domain()[0] < limits.min || this.scale.domain()[1] > limits.max) {
                this.scale.domain([limits.min, limits.max]);
              }
              
              //restore the correct object type for time values
              if(this.zoomedMin != null && !isDate(this.zoomedMin)) this.zoomedMin = this._space.time.parseToUnit(this.zoomedMin.toString());
              if(this.zoomedMax != null && !isDate(this.zoomedMax)) this.zoomedMax = this._space.time.parseToUnit(this.zoomedMax.toString());

              if(!isDate(this.domainMin)) this.domainMin = this.scale.domain()[0];
              if(!isDate(this.domainMax)) this.domainMax = this.scale.domain()[1];
            }
            //min and max nonsense protection
            if(this.domainMin == null || this.domainMin <= 0 && this.scaleType === "log") this.domainMin = this.scale.domain()[0];
            if(this.domainMax == null || this.domainMax <= 0 && this.scaleType === "log") this.domainMax = this.scale.domain()[1];

            //zoomedmin and zoomedmax nonsense protection    
            if(this.zoomedMin == null || this.zoomedMin < this.scale.domain()[0]) this.zoomedMin = this.scale.domain()[0];
            if(this.zoomedMax == null || this.zoomedMax > this.scale.domain()[1]) this.zoomedMax = this.scale.domain()[1];

            this.scale.domain([this.domainMin, this.domainMax]);
          }
        },

        /**
         * Gets the domain for this hook
         * @returns {Array} domain
         */
        buildScale: function(margins) {
          var domain;

          if(this.scaleType == "time") {
            
            var timeMdl = this._space.time;
            var limits = timeMdl.beyondSplash ? 
                {min: timeMdl.beyondSplash.start, max: timeMdl.beyondSplash.end}
                :
                {min: timeMdl.start, max: timeMdl.end};
            
            domain = [limits.min, limits.max];
            this.scale = d3.time.scale.utc().domain(domain);

            return;
          }

          switch(this.use) {
            case "indicator":
              var limits = this.getLimits(this.which);
              //default domain is based on limits
              domain = [limits.min, limits.max];
              //domain from concept properties can override it if defined
              domain = this.getConceptprops().domain ? this.getConceptprops().domain : domain;
              //min and max can override the domain if defined
              domain = this.domainMin!=null && this.domainMax!=null ? [+this.domainMin, +this.domainMax] : domain;
              break;
            case "property":
              domain = this.getUnique(this.which);
              break;
            case "constant":
            default:
              domain = [this.which];
              break;
          }
          
          var scaletype = (d3.min(domain)<=0 && d3.max(domain)>=0 && this.scaleType === "log")? "genericLog" : this.scaleType;
          this.scale = d3.scale[scaletype || "linear"]().domain(domain);
        }
      });

      /*
       * VIZABI Size Model
       */

      var SizeModel = AxisModel.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          use: null,
          which: null,
          domainMin: null,
          domainMax: null,
          zoomedMin: null,
          zoomedMax: null,
          extent: null
        },
          
        _type: "size",
          
        buildScale: function(margins){
          //do whatever axis.buildScale does
          this._super(margins);
          //but then also clamp a numeric scale
          if(this.scaleType !== 'ordinal') this.scale.clamp(true);
        }
      });

      /*!
       * HOOK MODEL
       */


      var Marker = Model.extend({

        /**
         * Gets the narrowest limits of the subhooks with respect to the provided data column
         * @param {String} attr parameter (data column)
         * @returns {Object} limits (min and max)
         * this function is only needed to route the "time" to some indicator, 
         * to adjust time start and end to the max and min time available in data
         */
        getTimeLimits: function(attr) {
            var _this = this;
            var time = this._parent.time;
            var min, max, minArray = [], maxArray = [], items = {};      
            if (!this.cachedTimeLimits) this.cachedTimeLimits = {};      
            forEach(this.getSubhooks(), function(hook) {
              if(hook.use !== "indicator" || !hook._important) return;
              var hookConceptprops = hook.getConceptprops();
              if(!hookConceptprops) return warn(hook._name + ": " + hook.which + " is not found in metadata.json. \
            Check that you read the correct file or server instance... \
            Check that the pointer 'which' of the hook is correct too");
                                              
              var availability = hookConceptprops.availability;
              var availabilityForHook = _this.cachedTimeLimits[hook._dataId + hook.which];
                
              if (availabilityForHook){
                  //if already calculated the limits then no ned to do it again
                  min = availabilityForHook.min;
                  max = availabilityForHook.max;
              }else if (availability){
                  //if date limits are supplied by the concept properties then use them
                  min = time.timeFormat.parse(availability[0]+"");
                  var timeEnd = time._defaults.end || availability[1];
                  max = time.timeFormat.parse(Math.min(timeEnd, availability[1])+"");
              }else{ 
                  //otherwise calculate own date limits (a costly operation)
                  items = hook.getValidItems().map(function(m){return m[time.getDimension()];});
                  min = d3.min(items);
                  max = d3.max(items);
              }
              _this.cachedTimeLimits[hook._dataId + hook.which] = {min: min, max: max};
              minArray.push(min);
              maxArray.push(max);
            });
            
            var resultMin = d3.max(minArray);
            var resultMax = d3.min(maxArray);
            if(resultMin > resultMax) {
                resultMin = d3.min(minArray);
                resultMax = d3.max(maxArray);
                warn("getTimeLimits(): Availability of the indicator's data has no intersection. I give up and just return some valid time range where you'll find no data points. Enjoy!")
            }
            return {min: resultMin, max: resultMax}
        },


        /**
         * Computes the intersection of keys in all hooks: a set of keys that have data in each hook
         * @returns array of keys that have data in all hooks of this._datacube
         */
          getKeys: function(KEY) {
              var _this = this;
              var resultKeys = [];
              
              KEY = KEY || this._getFirstDimension();
              var TIME = this._getFirstDimension({type: "time"});
            
              forEach(this._dataCube||this.getSubhooks(true), function(hook, name) {

                  // If hook use is constant, then we can provide no additional info about keys
                  // We can just hope that we have something else than constants =)
                  if(hook.use === "constant") return;

                  // Get keys in data of this hook
                  var nested = _this.getDataManager().get(hook._dataId, 'nested', [KEY, TIME]);
                  var noDataPoints = _this.getDataManager().get(hook._dataId, 'haveNoDataPointsPerKey', hook.which);
                  
                  var keys = Object.keys(nested);
                  var keysNoDP = Object.keys(noDataPoints || []);

                  // If ain't got nothing yet, set the list of keys to result
                  if(resultKeys.length == 0) resultKeys = keys;
                      
                  // Remove the keys from it that are not in this hook
                  if(hook._important) resultKeys = resultKeys.filter(function(f) {
                    return keys.indexOf(f) > -1 && keysNoDP.indexOf(f) == -1;
                  })
              });
              return resultKeys.map(function(d){var r = {}; r[KEY] = d; return r; });
          },
          
        /**
         * 
         * @param {String|null} time of a particularly requested data frame. Null if all frames are requested
         * @param {function} cb 
         * @return null
         */
          getFrame: function(time, cb) {
            var _this = this;
            if (!this.cachedFrames) this.cachedFrames = {};
            this._dataCube = this._dataCube || this.getSubhooks(true);  
            
            //array of steps -- names of all frames  
            var steps = this._parent.time.getAllSteps();
              
            var cachePath = steps[0] + " - " + steps[steps.length-1];
            var dataLoading = false;
            forEach(this._dataCube, function(hook, name) {
              if (hook._loadCall) dataLoading = true;  
              cachePath = cachePath + "_" +  hook._dataId;
            });
            // prevent calculating corrupted frames when one of models is loading 
            if (dataLoading) return cb(null, time);
            // check if the requested time point has a cached animation frame
            if(time && _this.cachedFrames[cachePath] && _this.cachedFrames[cachePath][time]) {
              // if it does, then return that frame directly and stop here
              //QUESTION: can we call the callback and return the frame? this will allow callbackless API too
              return cb(_this.cachedFrames[cachePath][time], time);
            } else {
              // if it doesn't (the requested time point falls between animation frames or frame is not cached yet)
              // check if interpolation makes sense: we've requested a particular time and we have more than one frame
              if (time && steps.length > 1) {
                
                //find the next frame after the requested time point
                var nextFrameIndex = d3.bisectLeft(steps, time);
                
                if(!steps[nextFrameIndex]) warn("The requested frame is out of range");
                  
                //if "time" doesn't hit the frame precisely 
                if (steps[nextFrameIndex].toString() != time.toString()) {
                  
                  //interpolate between frames and fire the callback
                  this._interpolateBetweenFrames(time, nextFrameIndex, steps, function (response) {
                    return cb(response, time); 
                  }); 
                }
              }
              
              //QUESTION: we don't need any further execution after we called for interpolation, right?
              //request preparing the data, wait until it's done
              _this.getFrames(time).then(function() {
                if (!time && _this.cachedFrames[cachePath]) {
                  //time can be null: then return all frames
                  return cb(_this.cachedFrames[cachePath], time);
                } else if(_this.cachedFrames[cachePath][time]) {
                  //time can be !null: then a particular frame calculation was forced and now it's done  
                  return cb(_this.cachedFrames[cachePath][time], time);
                } else {
                  warn("marker.js getFrame: Data is not available for frame: " + time);
                  return cb(null, time);
                }
              }); 
            }
          },
          
          _interpolateBetweenFrames: function(time, nextFrameIndex, steps, cb) {
            var _this = this;
            
            if (nextFrameIndex == 0) {
              //getFrame makes sure the frane is ready because a frame with non-existing data might be adressed
              this.getFrame(steps[nextFrameIndex], function(values) { 
                return cb(values);
              });
            } else {
              var prevFrameTime = steps[nextFrameIndex - 1];
              var nextFrameTime = steps[nextFrameIndex];
                
              //getFrame makes sure the frane is ready because a frame with non-existing data might be adressed
              this.getFrame(prevFrameTime, function(pValues) {
                _this.getFrame(nextFrameTime, function(nValues) {
                  var fraction = (time - prevFrameTime) / (nextFrameTime - prevFrameTime);
                  var dataBetweenFrames = {};
                  
                  //loop across the hooks
                  forEach(pValues, function(values, hook) {
                    dataBetweenFrames[hook] = {};
                  
                    //loop across the entities
                    forEach(values, function(val1, key) {
                      var val2 = nValues[hook][key];
                      if(isDate(val1)){
                        dataBetweenFrames[hook][key] = time;
                      } else if(!isNumber(val1)){
                          //we can be interpolating string values
                          dataBetweenFrames[hook][key] = val1;
                      }else{
                          //interpolation between number and null should rerurn null, not a value in between (#1350)
                          dataBetweenFrames[hook][key] = (val1==null || val2==null) ? null : val1 + ((val2 - val1) * fraction);
                      }
                    });
                  });
                  cb(dataBetweenFrames);
                })
              })
            }
          },

          getFrames: function(forceFrame) {
            var _this = this;
            
            var KEY = this._getFirstDimension();
            var TIME = this._getFirstDimension({type: "time"});
            
            if (!this.frameQueues) this.frameQueues = {}; //static queue of frames
            if (!this.partialResult) this.partialResult = {};
              
            //array of steps -- names of all frames  
            var steps = this._parent.time.getAllSteps();
              
            var cachePath = steps[0] + " - " + steps[steps.length-1];
            forEach(this._dataCube, function(hook, name) {
              cachePath = cachePath + "_" + hook._dataId;
            });

            //if the collection of frames for this data cube is not scheduled yet (otherwise no need to repeat calculation)
            if (!this.frameQueues[cachePath] || !this.frameQueues[cachePath] instanceof Promise) {
              
              //this is a promise nobody listens to - it prepares all the frames we need without forcing any  
              this.frameQueues[cachePath] = new Promise(function(resolve, reject) { 

                _this.partialResult[cachePath] = {};
                steps.forEach(function(t) { _this.partialResult[cachePath][t] = {}; });

                // Assemble the list of keys as an intersection of keys in all queries of all hooks
                var keys = _this.getKeys();

                var deferredHooks = [];
              
                // Assemble data from each hook. Each frame becomes a vector containing the current configuration of hooks.
                // frame -> hooks -> entities: values
                forEach(_this._dataCube, function(hook, name) {
                  if(hook.use === "constant") {
                    //special case: fill data with constant values
                    steps.forEach(function(t) {
                      _this.partialResult[cachePath][t][name] = {};
                      keys.forEach(function(key) {
                        _this.partialResult[cachePath][t][name][key[KEY]] = hook.which;
                      });
                    });
                  } else if(hook.which === KEY) {
                    //special case: fill data with keys to data itself
                    steps.forEach(function(t) {
                      _this.partialResult[cachePath][t][name] = {};
                      keys.forEach(function(key) {
                        _this.partialResult[cachePath][t][name][key[KEY]] = key[KEY];
                      });
                    });
                  } else if(hook.which === TIME) {
                    //special case: fill data with time points
                    steps.forEach(function(t) {
                      _this.partialResult[cachePath][t][name] = {};
                      keys.forEach(function(key) {
                        _this.partialResult[cachePath][t][name][key[KEY]] = new Date(t);
                      });
                    });
                  } else {
                    //calculation of async frames is taken outside the loop
                    //hooks with real data that needs to be fetched from datamanager
                    deferredHooks.push({hook: hook, name: name}); 
                  }
                });
                  
                //check if we have any data to get from datamanager
                if (deferredHooks.length > 0) {
                  var promises = [];
                  for (var hookId = 0; hookId < deferredHooks.length; hookId++) {
                    (function(hookKey) {
                      var defer = deferredHooks[hookKey];
                      promises.push(new Promise(function(res, rej) {
                        _this.getDataManager().getFrames(defer.hook._dataId, steps).then(function(response) {
                          forEach(response, function (frame, t) {
                            _this.partialResult[cachePath][t][defer.name] = frame[defer.hook.which];
                          });
                          res();
                        })
                      }));
                    }(hookId));
                  }
                  Promise.all(promises).then(function() {
                    _this.cachedFrames[cachePath] = _this.partialResult[cachePath];
                    resolve();
                  });
                } else {
                  _this.cachedFrames[cachePath] = _this.partialResult[cachePath];
                  resolve();
                }

              });
            }

            return new Promise(function(resolve, reject) {
              if (steps.length < 2 || !forceFrame) {
                  //wait until the above promise is resolved, then resolve the current promise
                _this.frameQueues[cachePath].then(function() {
                  resolve(); //going back to getFrame(), to ".then"
                });
              } else {
                var promises = [];
                forEach(_this._dataCube, function(hook, name) {
                  //exception: we know that these are knonwn, no need to calculate these
                  if(hook.use !== "constant" && hook.which !== KEY && hook.which !== TIME) {
                    (function(_hook, _name) {
                      promises.push(new Promise(function(res, rej) {
                        _this.getDataManager().getFrame(_hook._dataId, steps, forceFrame).then(function(response) {
                          _this.partialResult[cachePath][forceFrame][_name] = response[forceFrame][_hook.which];
                          res();
                        })
                      }));
                    }(hook, name)); //isolate this () code with its own hook and name
                  }
                });
                if (promises.length > 0) {
                  Promise.all(promises).then(function() {
                    if (!_this.cachedFrames[cachePath]) {
                      _this.cachedFrames[cachePath] = {};
                    }
                    _this.cachedFrames[cachePath][forceFrame] = _this.partialResult[cachePath][forceFrame];
                    resolve();
                  });
                }
              }
            });

          },
          
          

        /**
         * gets multiple values from the hook
         * @param {Object} filter Reference to the row. e.g: {geo: "swe", time: "1999", ... }
         * @param {Array} group_by How to nest e.g: ["geo"]
         * @param {Boolean} [previous = false] previous Append previous data points
         * @returns an array of values
         */
        getValues: function(filter$$, group_by, previous) {
          var _this = this;

          if(this.isHook()) {
            return [];
          }

          var dimTime, time, filtered, next, method, u, w, value, method;
          this._dataCube = this._dataCube || this.getSubhooks(true);
          filter$$ = clone(filter$$, this._getAllDimensions());
          dimTime = this._getFirstDimension({
            type: 'time'
          });
          time = new Date(filter$$[dimTime]); //clone date
          filter$$ = clone(filter$$, null, dimTime);

          var response = {};
          var f_keys = Object.keys(filter$$);
          var f_values = f_keys.map(function(k) {
            return filter$$[k];
          });

          //if there's a filter, interpolate only that
          if(f_keys.length) {
            forEach(this._dataCube, function(hook, name) {
              u = hook.use;
              w = hook.which;

              if(hook.use !== "property") next = next || d3.bisectLeft(hook.getUnique(dimTime), time);        

              method = hook.getConceptprops ? hook.getConceptprops().interpolation : null;
              filtered = _this.getDataManager().get(hook._dataId, 'nested', f_keys);
              forEach(f_values, function(v) {
                filtered = filtered[v]; //get precise array (leaf)
              });
              value = interpolatePoint(filtered, u, w, next, dimTime, time, method);
              response[name] = hook.mapValue(value);

              //concat previous data points
              if(previous) {
                var values = filter(filtered, filter$$).filter(function(d) {
                  return d[dimTime] <= time;
                }).map(function(d) {
                  return hook.mapValue(d[w]);
                }).concat(response[name]);
                response[name] = values;
              }
            });
          }
          //else, interpolate all with time
          else {
            forEach(this._dataCube, function(hook, name) {
                
              filtered = _this.getDataManager().get(hook._dataId, 'nested', group_by);
                  
              response[name] = {};
              //find position from first hook
              u = hook.use;
              w = hook.which;
                
              if(hook.use !== "property") next = (typeof next === 'undefined') ? d3.bisectLeft(hook.getUnique(dimTime), time) : next;
              
              method = hook.getConceptprops ? hook.getConceptprops().interpolation : null;
                      
              var interpolate = function(arr, result, id) {
                //TODO: this saves when geos have different data length. line can be optimised. 
                next = d3.bisectLeft(arr.map(function(m){return m[dimTime]}), time);
                  
                value = interpolatePoint(arr, u, w, next, dimTime, time, method);
                result[id] = hook.mapValue(value);

                //concat previous data points
                if(previous) {
                  var values = filter(arr, filter$$).filter(function(d) {
                    return d[dimTime] <= time;
                  }).map(function(d) {
                    return hook.mapValue(d[w]);
                  }).concat(result[id]);
                  result[id] = values;
                }

              }
              
              var iterateGroupKeys = function(data, deep, result, cb) {
                deep--;
                forEach(data, function(d, id) {
                  if(deep) {
                    result[id] = {};
                    iterateGroupKeys(d, deep, result[id], cb);
                  } else {
                    cb(d, result, id);
                  }
                });
              }
              
              iterateGroupKeys(filtered, group_by.length, response[name], interpolate);
              
            });
          }

          return response;
        },

        /**
         * Gets the concept properties of all hooks
         * @returns {Object} concept properties
         */
        getConceptprops: function() {
          return this.getDataManager().getConceptprops();
        },
          
        /**
         * Gets the concept properties of all hooks
         * @returns {Object} concept properties
         */
        getIndicatorsTree: function() {
          return this.getDataManager().getIndicatorsTree();
        } 
          

      });

      var LanguageModel = Model.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          id: "en",
          strings: {}
        },

        /**
         * Initializes the language model.
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "language";
          //default values for state model
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);

          //same constructor, with same arguments
          this._super(name, values, parent, bind);
        },

        /**
         * Gets a certain UI string
         * @param {String} id string identifier
         * @param {String} lang language
         * @param {Object} ui_strings ui_strings object or model
         * @returns {string} translated string
         */
        getUIString: function(id, lang, strings) {
          lang = lang || this.id;
          strings = strings || this.strings;

          if(strings && strings[lang] && (strings[lang][id] || strings[lang][id]==="")) {
            return strings[lang][id];
          } else {
            if(!strings || !strings[lang]) warn("Strings are not loaded for the " + lang + " language. Check if translation JSON is valid");
            return id;
          }
        },

        /**
         * Gets the translation function
         * @returns {string} translation function
         */
        getTFunction: function() {
          var lang = this.id,
            strings = this.strings,
            _this = this;

          return function(string) {
            return _this.getUIString(string, lang, strings);
          }
        }

      });

      /*
       * VIZABI Data Model (options.data)
       */

      var LabelModel = Hook.extend({

        /**
         * Default values for this model
         */
        _defaults: {
        },

        /**
         * Initializes the size hook
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "label";
          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);
          this._super(name, values, parent, bind);
        }


      });

      /*
       * VIZABI Group Model
       */

      var GroupModel = Hook.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          use: null,
          which: null,
          merge: false,
          manualSorting: null
        },

        /**
         * Initializes the group hook
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "model";
          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);
          this._super(name, values, parent, bind);
        },

        /**
         * Validates a color hook
         */
        validate: function() {
          //there must be no scale
          if(this.scale) this.scale = null;

          //use must be "property" 
          if(this.use != "property") {
            warn("group model: use must be 'property'. Resetting...")
            this.use = "property";
          }
        },

        /**
         * There must be no scale
         */
        buildScale: function() {}

      });

      /*!
       * VIZABI Entities Model
       */

      var EntitiesModel = Model.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          show: {},
          select: [],
          highlight: [],
          opacityHighlightDim: .1,
          opacitySelectDim: .3,
          opacityRegular: 1
        },

        /**
         * Initializes the entities model.
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "entities";
          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);

          this._visible = [];
          this._multiple = true;

          this._super(name, values, parent, bind);
        },

        /**
         * Validates the model
         * @param {boolean} silent Block triggering of events
         */
        validate: function(silent) {
          var _this = this;
          var dimension = this.getDimension();
          var visible_array = this._visible.map(function(d) {
            return d[dimension]
          });

          if(visible_array.length) {
            this.select = this.select.filter(function(f) {
              return visible_array.indexOf(f[dimension]) !== -1;
            });
            this.setHighlight(this.highlight.filter(function(f) {
              return visible_array.indexOf(f[dimension]) !== -1;
            }));
          }
        },

        /**
         * Sets the visible entities
         * @param {Array} arr
         */
        setVisible: function(arr) {
          this._visible = arr;
        },

        /**
         * Gets the visible entities
         * @returns {Array} visible
         */
        getVisible: function(arr) {
          return this._visible;
        },

        /**
         * Determines whether multiple entities can be selected
         * @param {Boolean} bool
         */
        selectMultiple: function(bool) {
          this._multiple = bool;
        },

        /**
         * Gets the dimensions in this entities
         * @returns {String} String with dimension
         */
        getDimension: function() {
          return this.dim;
        },

        /**
         * Gets the filter in this entities
         * @returns {Array} Array of unique values
         */
        getFilter: function() {
          return this.show.getPlainObject();
        },

        /**
         * Gets the selected items
         * @returns {Array} Array of unique selected values
         */
        getSelected: function() {
          var dim = this.getDimension();
          return this.select.map(function(d) {
            return d[dim];
          });
        },

        /**
         * Selects or unselects an entity from the set
         */
        selectEntity: function(d, timeDim, timeFormatter) {
          var dimension = this.getDimension();
          var value = d[dimension];
          if(this.isSelected(d)) {
            this.select = this.select.filter(function(d) {
              return d[dimension] !== value;
            });
          } else {
            var added = {};
            added[dimension] = value;
            if(timeDim && timeFormatter) {
              added["trailStartTime"] = timeFormatter(d[timeDim]);
            }
            this.select = (this._multiple) ? this.select.concat(added) : [added];
          }
        },

        selectEntityMD: function(d, timeDim, timeFormatter) {
          var _this = this;
          var value = this._createValue(d);
          if(this.isSelectedMD(d)) {
            this.select = this.select.filter(function(d) {
              return JSON.stringify(_this._createValue(d)) !== JSON.stringify(value);
            });
          } else {
            if(timeDim && timeFormatter) {
              value["trailStartTime"] = timeFormatter(d[timeDim]);
            }
            this.select = (this._multiple) ? this.select.concat(value) : [value];
          }
        },
          
        /**
         * Select all entities
         */
        selectAll: function(timeDim, timeFormatter) {
          if(!this._multiple) return;
          
          var added,
            dimension = this.getDimension();
          
          var select = this._visible.map(function(d) {
            added = {};
            added[dimension] = d[dimension];
            if(timeDim && timeFormatter) {
              added["trailStartTime"] = timeFormatter(d[timeDim]);
            }
            return added;
          });

          this.select = select;
        },
          
        /**
         * Shows or unshows an entity from the set
         */
        showEntity: function(d) {
          //clear selected countries when showing something new
          this.clearSelected();
          
          var dimension = this.getDimension();
          var value = d[dimension];
          var show = this.show[dimension];
            
          if(!show || show[0] === "*") show = [];
            
          show = show.concat([]); //clone array
            
          if(this.isShown(d)) {
            show = show.filter(function(d) { return d !== value; });
          } else {
            show = show.concat(value);
          }
            
          if(show.length === 0) show = ["*"];
          this.show[dimension] = show.concat([]);

        },

        setLabelOffset: function(d, xy) {
          if(xy[0]===0 && xy[1]===1) return;
            
          var dimension = this.getDimension();
          var value = d[dimension];

          find(this.select, function(d) {
            return d[dimension] === value;
          }).labelOffset = [Math.round(xy[0]*1000)/1000, Math.round(xy[1]*1000)/1000];

          //force the model to trigger events even if value is the same
          this.set("select", this.select, true);
        },

        /**
         * Selects an entity from the set
         * @returns {Boolean} whether the item is selected or not
         */
        isSelected: function(d) {
          var dimension = this.getDimension();
          var value = d[this.getDimension()];

          return this.select
              .map(function(d) {return d[dimension];})
              .indexOf(value) !== -1;
        },
          
        isSelectedMD: function(d) {
          var _this = this;
          var value = this._createValue(d);
              
          return this.select
            .map(function(d) {
              return JSON.stringify(_this._createValue(d)) === JSON.stringify(value);
            })
            .indexOf(true) !== -1;
        },
        
        _createValue: function(d) {
          var dims = [this.getDimension()].concat(this._getAllDimensions());
          return dims.reduce(function(value, key) {
            value[key] = d[key];
            return value;
          }, {});
        },
         
        /**
         * Selects an entity from the set
         * @returns {Boolean} whether the item is shown or not
         */
        isShown: function(d) {
          var dimension = this.getDimension();
          return this.show[dimension] && this.show[dimension].indexOf(d[dimension]) !== -1;
        },

        /**
         * Clears selection of items
         */
        clearSelected: function() {
          this.select = [];
        },
        /**
         * Clears showing of items
         */
        clearShow: function() {
          var dimension = this.getDimension();
          this.show[dimension] = ["*"];
        },


        setHighlight: function(arg) {
          if (!isArray(arg))
            this.setHighlight([].concat(arg));
          this.getModelObject('highlight').set(arg, false, false); // highlights are always non persistent changes
        },

        //TODO: join the following 3 methods with the previous 3

        /**
         * Highlights an entity from the set
         */
        highlightEntity: function(d, timeDim, timeFormatter, copyDatum) {
          var dimension = this.getDimension();
          var value = d[dimension];
          if(!this.isHighlighted(d)) {
            var added = {};
            if(copyDatum) {
              added = clone(d);                
            } else {
              added[dimension] = value;
              if(timeDim && timeFormatter) {
                added["trailStartTime"] = timeFormatter(d[timeDim]);
              }
            }
            this.setHighlight(this.highlight.concat(added));
          }
        },

        /**
         * Unhighlights an entity from the set
         */
        unhighlightEntity: function(d) {
          var dimension = this.getDimension();
          var value = d[dimension];
          if(this.isHighlighted(d)) {
            this.setHighlight(this.highlight.filter(function(d) {
              return d[dimension] !== value;
            }));
          }
        },

        /**
         * Checks whether an entity is highlighted from the set
         * @returns {Boolean} whether the item is highlighted or not
         */
        isHighlighted: function(d) {
          var dimension = this.getDimension();
          var value = d[this.getDimension()];

          var highlight_array = this.highlight.map(function(d) {
            return d[dimension];
          });

          return highlight_array.indexOf(value) !== -1;
        },

        /**
         * Clears selection of items
         */
        clearHighlighted: function() {
          this.setHighlight([]);
        }
          
      });

      /*
       * VIZABI Data Model (model.data)
       */

      var DataModel = Model.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          reader: "csv",
          splash: false
        },


        /**
         * Initializes the data model.
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "data";
          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);

          //same constructor as parent, with same arguments
          this._super(name, values, parent, bind);
        }

      });

      /*!
       * VIZABI Color Model (hook)
       */

      var defaultPalettes = {
        "_continuous": {
          "0": "#B4DE79",
          "50": "#E1CE00",
          "100": "#F77481"
        },
        "_discrete": {
          "0": "#bcfa83",
          "1": "#4cd843",
          "2": "#ff8684",
          "3": "#e83739",
          "4": "#ffb04b",
          "5": "#ff7f00",
          "6": "#f599f5",
          "7": "#c027d4",
          "8": "#f4f459",
          "9": "#d66425",
          "10": "#7fb5ed",
          "11": "#0ab8d8"
        },
        "_default": {
          "_default": "#93daec"
        }
      };

      var ColorModel = Hook.extend({

        /**
         * Default values for this model
         */
        _defaults: {
          use: null,
          palette: {},
          paletteLabels: null,
          scaleType: null,
          which: null
        },

        /**
         * Initializes the color hook
         * @param {Object} values The initial values of this model
         * @param parent A reference to the parent model
         * @param {Object} bind Initial events to bind
         */
        init: function(name, values, parent, bind) {

          this._type = "color";
          //TODO: add defaults extend to super
          var defaults = deepClone(this._defaults);
          values = extend(defaults, values);

          this._original_palette = values.palette;

          this._super(name, values, parent, bind);

          this._firstLoad = true;
          this._hasDefaultColor = false;
        },

        // args: {colorID, shadeID}
        getColorShade: function(args){
          var palette = this.getPalette();
            
          if(!args) return warn("getColorShade() is missing arguments");  
            
          // if colorID is not given or not found in the palette, replace it with default color
          if(!args.colorID || !palette[args.colorID]) args.colorID = "_default";
          
          // if the resolved colr value is not an array (has only one shade) -- return it
          if( !isArray(palette[args.colorID]) ) return palette[args.colorID];
            
          var conceptpropsColor = this.getConceptprops().color;
          var shade = args.shadeID && conceptpropsColor && conceptpropsColor.shades && conceptpropsColor.shades[args.shadeID] ? conceptpropsColor.shades[args.shadeID] : 0;
              
          return palette[args.colorID][shade];
          
        },
          

        afterPreload: function() {
          this._super();
        },
        
        /**
         * Get the above constants
         */
        isUserSelectable: function() {
          var conceptpropsColor = this.getConceptprops().color;
          return conceptpropsColor == null || conceptpropsColor.selectable == null || conceptpropsColor.selectable;
        },

        /**
         * Validates a color hook
         */
        validate: function() {

          var possibleScales = ["log", "genericLog", "linear", "time", "pow"];
          if(!this.scaleType || (this.use === "indicator" && possibleScales.indexOf(this.scaleType) === -1)) {
            this.scaleType = 'linear';
          }
          if(this.use !== "indicator" && this.scaleType !== "ordinal") {
            this.scaleType = "ordinal";
          }

          // reset palette and scale in the following cases: indicator or scale type changed
          if(this._firstLoad === false && (this.which_1 != this.which || this.scaleType_1 != this.scaleType)) {

            //TODO a hack that kills the scale and palette, it will be rebuild upon getScale request in model.js
            if(this.palette) this.palette._data = {};
            this.scale = null;
          }

          this.which_1 = this.which;
          this.scaleType_1 = this.scaleType;
          this._firstLoad = false;
        },

        /**
         * set color
         */
        setColor: function(value, pointer) {
          var temp = this.getPalette();
          temp[pointer] = value;
          this.scale.range(values(temp));
          this.palette[pointer] = value;
        },


        /**
         * maps the value to this hook's specifications
         * @param value Original value
         * @returns hooked value
         */
        mapValue: function(value) {
          //if the property value does not exist, supply the _default
          // otherwise the missing value would be added to the domain
          if(this.scale != null && this.use == "property" && this._hasDefaultColor && this.scale.domain().indexOf(value) == -1) value = "_default";
          return this._super(value);
        },


        getDefaultPalette: function() {     
            var conceptpropsColor = this.getConceptprops().color;
            var palette;
            
            if(conceptpropsColor && conceptpropsColor.palette) {
              //specific color palette from hook concept properties
              palette = clone(conceptpropsColor.palette);
            } else if(defaultPalettes[this.which]) {
              //color palette for this.which exists in palette defaults
              palette = clone(defaultPalettes[this.which]);
            } else if(this.use === "constant" && /^#([0-9a-f]{3}|[0-9a-f]{6})$/.test(this.which)) {
              //an explicit hex color constant #abc or #adcdef is provided
              palette = {"_default": this.which};
            } else if(this.use === "indicator") {
              palette = clone(defaultPalettes["_continuous"]);
            } else if(this.use === "property") {
              palette = clone(defaultPalettes["_discrete"]);
            } else {
              palette = clone(defaultPalettes["_default"]);
            }
            
            return palette;
        },

        _getPaletteLabels: function() {
            var conceptpropsColor = this.getConceptprops().color;
            var paletteLabels;
            
            if(conceptpropsColor && conceptpropsColor.paletteLabels) {
              //specific color palette from hook concept properties
              paletteLabels = clone(conceptpropsColor.paletteLabels);
            }
            return paletteLabels;
        },

        getPaletteLabels: function() {
          return this.paletteLabels.getPlainObject(); 
        },

        getPalette: function(){
          //rebuild palette if it's empty
          if (!this.palette || Object.keys(this.palette._data).length===0){
            this.palette.set(this.getDefaultPalette(), false, false);
            this.getModelObject("paletteLabels").set(this._getPaletteLabels(), false, false);
          }
          
          return this.palette.getPlainObject(); 
        },
          
        /**
         * Gets the domain for this hook
         * @returns {Array} domain
         */
        buildScale: function() {
          var _this = this;

          var paletteObject = _this.getPalette();
          var domain = Object.keys(paletteObject);
          var range = values(paletteObject);

          this._hasDefaultColor = domain.indexOf("_default") > -1;
          
          if(this.scaleType == "time") {
            
            var timeMdl = this._space.time;
            var limits = timeMdl.beyondSplash ? 
                {min: timeMdl.beyondSplash.start, max: timeMdl.beyondSplash.end}
                :
                {min: timeMdl.start, max: timeMdl.end};
            
            var singlePoint = (limits.max - limits.min == 0);
              
            domain = domain.sort(function(a,b){return a-b});
            range = domain.map(function(m){
              return singlePoint? paletteObject[domain[0]] : paletteObject[m]
            });
            domain = domain.map(function(m){
              return limits.min.valueOf() + m/100 * (limits.max.valueOf() - limits.min.valueOf())
            });
            
            this.scale = d3.time.scale.utc()
              .domain(domain)
              .range(range)
              .interpolate(d3.interpolateRgb);
            return;
          }

          switch(this.use) {
            case "indicator":
              var limits = this.getLimits(this.which);
              //default domain is based on limits
              limits = [limits.min, limits.max];
              //domain from concept properties can override it if defined
              limits = this.getConceptprops().domain ? this.getConceptprops().domain : limits;
                
              var singlePoint = (limits[1] - limits[0] == 0);

              domain = domain.sort(function(a,b){return a-b});
              range = domain.map(function(m){
                return singlePoint? paletteObject[domain[0]] : paletteObject[m]
              });
              domain = domain.map(function(m){
                return limits[0] + m/100 * (limits[1] - limits[0])
              });        
              
              var scaleType = (d3.min(domain)<=0 && d3.max(domain)>=0 && this.scaleType === "log")? "genericLog" : this.scaleType;

              if(this.scaleType == "log" || this.scaleType == "genericLog") {
                var s = d3.scale.genericLog()
                  .domain(limits)
                  .range(limits);
                domain = domain.map(function(d) {
                  return s.invert(d)
                });
              }
              this.scale = d3.scale[scaleType || "linear"]()
                .domain(domain)
                .range(range)
                .interpolate(d3.interpolateRgb);
              return;

            default:
              range = range.map(function(m){ return isArray(m)? m[0] : m; });
                  
              this.scale = d3.scale["ordinal"]()
                .domain(domain)
                .range(range);
              return;
          }
        }

      });

      var _index = {
      axis : AxisModel,
      color : ColorModel,
      data : DataModel,
      entities : EntitiesModel,
      group : GroupModel,
      hook : Hook,
      label : LabelModel,
      language : LanguageModel,
      marker : Marker,
      size : SizeModel,
      stack : StackModel,
      time : TimeModel,
      };

      var models = Object.freeze({
      	axis: AxisModel,
      	color: ColorModel,
      	data: DataModel,
      	entities: EntitiesModel,
      	group: GroupModel,
      	hook: Hook,
      	label: LabelModel,
      	language: LanguageModel,
      	marker: Marker,
      	size: SizeModel,
      	stack: StackModel,
      	time: TimeModel,
      	default: _index
      });

      var class_loading_first$1 = 'vzb-loading-first';
      var class_loading_data$1 = 'vzb-loading-data';
      var class_error = 'vzb-error';

      var templates$1 = {};
      var Component = EventSource.extend({

        /**
         * Initializes the component
         * @param {Object} config Initial config, with name and placeholder
         * @param {Object} parent Reference to tool
         */
        init: function(config, parent) {
          this._id = this._id || uniqueId('c');
          this._ready = false;
          this._readyOnce = false;
          this.name = this.name || config.name;
          this.template = this.template || '<div></div>';
          this.placeholder = this.placeholder || config.placeholder;
          this.template_data = this.template_data || {
            name: this.name
          };
          //make sure placeholder is DOM element
          if(this.placeholder && !isElement(this.placeholder)) {
            try {
              this.placeholder = parent.placeholder.querySelector(this.placeholder);
            } catch(e) {
              error$1('Error finding placeholder \'' + this.placeholder + '\' for component \'' + this.name + '\'');
            }
          }
          this.parent = parent || this;
          this.root = this.parent.root || this;

          this.components = this.components || [];
          this._components_config = this.components.map(function(x) {
            return clone(x);
          });
          this._frameRate = 10;
          //define expected models for this component
          this.model_expects = this.model_expects || [];
          this.model_binds = this.model_binds || {};
          this.ui = this.ui || config.ui;
          this._super();
          //readyOnce alias
          var _this = this;
          this.on({
            'readyOnce': function() {
              if(typeof _this.readyOnce === 'function') {
                _this.readyOnce();
              }
            },
            'ready': function() {
              if(typeof _this.ready === 'function') {
                _this.ready();
              }
            },
            'domReady': function() {
              if(typeof _this.domReady === 'function') {
                _this.domReady();
              }
            },
            'resize': function() {
              if(typeof _this.resize === 'function') {
                _this.resize();
              }
            }
          });
          this.triggerResize = throttle(this.triggerResize, 100);
        },

        /**
         * Preloads data before anything else
         */
        preload: function(promise) {
          promise.resolve(); //by default, load nothing
        },

        /**
         * Executes after preloading is finished
         */
        afterPreload: function() {
          if(this.model) {
            this.model.afterPreload();
          }
        },

        /**
         * Renders the component (after data is ready)
         */
        render: function() {
          var _this = this;
          this.loadTemplate();
          this.loadComponents();
          //render each subcomponent
          forEach(this.components, function(subcomp) {
            subcomp.render();
            _this.on('resize', function() {
              subcomp.trigger('resize');
            });
          });

          // if a componente's model is ready, the component is ready
          this.model.on('ready', function() {
            done();
          });

          //if it's a root component with model
          if(this.isRoot() && this.model) {
            this.model.setHooks();

            var splashScreen = this.model && this.model.data && this.model.data.splash;

            preloader(this).then(function() {
              var timeMdl = _this.model.state.time;
              if(splashScreen) {

                //TODO: cleanup hardcoded splash screen
                timeMdl.splash = true;
                timeMdl.beyondSplash = clone(timeMdl.getPlainObject(), ['start', 'end']);

                _this.model.load({
                  splashScreen: true
                }).then(function() {
                  //delay to avoid conflicting with setReady
                  delay(function() {
                    //force loading because we're restoring time.
                    _this.model.setLoading('restore_orig_time');
                    //restore because validation kills the original start/end
                    timeMdl.start = timeMdl.beyondSplash.start;
                    timeMdl.end = timeMdl.beyondSplash.end;
                    delete timeMdl.beyondSplash;

                    _this.model.load().then(function() {
                      _this.model.setLoadingDone('restore_orig_time');
                      timeMdl.splash = false;
                      //_this.model.data.splash = false;
                      timeMdl.trigger('change', timeMdl.getPlainObject());
                    });
                  }, 300);

                }, function() {
                  renderError();
                });
              } else {
                _this.model.load().then(function() {
                  delay(function() {
                    if(timeMdl) {
                      timeMdl.trigger('change');
                    } else {
                      done();
                    }
                  }, 300);
                }, function() {
                  renderError();
                });
              }
            });

          } else if(this.model && this.model.isLoading()) {
            // nothing
          } else {
            done();
          }

          function renderError() {
            removeClass(_this.placeholder, class_loading_first$1);
            removeClass(_this.placeholder, class_loading_data$1);
            addClass(_this.placeholder, class_error);
            _this.setError({
              type: 'data'
            });
          }

          function done() {
            removeClass(_this.placeholder, class_loading_first$1);
            removeClass(_this.placeholder, class_loading_data$1);        
            _this.setReady();
          }
        },

        setError: function(opts) {
          if(typeof this.error === 'function') {
            this.error(opts);
          }
        },

        setReady: function(value) {
          if(!this._readyOnce) {
            this.trigger('readyOnce');
            this._readyOnce = true;
          }
          this._ready = true;
          this.trigger('ready');
        },

        /**
         * Loads the template
         * @returns defer a promise to be resolved when template is loaded
         */
        loadTemplate: function() {
          var tmpl = this.template;
          var data = this.template_data;
          var _this = this;
          var rendered = '';
          if(!this.placeholder) {
            return;
          }
          //todo: improve t function getter + generalize this
          data = extend(data, {
            t: this.getTranslationFunction(true)
          });
          if(this.template) {
            try {
              rendered = templateFunc(tmpl, data);
            } catch(e) {
              error$1('Templating error for component: \'' + this.name +
                '\' - Check if template name is unique and correct. E.g.: \'bubblechart\'');

              removeClass(this.placeholder, class_loading_data$1);
              addClass(this.placeholder, class_error);
              this.setError({
                type: 'template'
              });
            }
          }
          //add loading class and html
          addClass(this.placeholder, class_loading_data$1);
          addClass(this.placeholder, class_loading_first$1);
          this.placeholder.innerHTML = rendered;
          this.element = this.placeholder.children[0];
          //only tools have layout (manage sizes)
          if(this.layout) {
            this.layout.setContainer(this.element);
            this.layout.on('resize', function() {
              if(_this._ready) {
                _this.triggerResize();
              }
            });
          }
          //template is ready
          this.trigger('domReady');
        },

        triggerResize: function() {
          this.trigger('resize');
        },

        getActiveProfile: function(profiles, presentationProfileChanges) {
          // get layout values
          var layoutProfile = this.getLayoutProfile();
          var presentationMode = this.getPresentationMode();
          var activeProfile = deepClone(profiles[layoutProfile]); // clone so it can be extended without changing the original profile

          // extend the profile with presentation mode values
          if (presentationMode && (presentationProfileChanges||{})[layoutProfile]) {
            deepExtend(activeProfile, presentationProfileChanges[layoutProfile]);
          }

          return activeProfile;
        },

        /*
         * Loads all subcomponents
         */
        loadComponents: function() {
          var _this = this;
          var config;
          var comp;
          //use the same name for collection
          this.components = [];
          //external dependencies let this model know what it
          //has to wait for
          if(this.model) {
            this.model.resetDeps();
          }
          // Loops through components, loading them.
          forEach(this._components_config, function(c) {
            if(!c.component) {
              error$1('Error loading component: name not provided');
              return;
            }
            comp = (isString(c.component)) ? Component.get(c.component) : c.component;

            if(!comp) return;

            config = extend(c, {
              name: c.component,
              ui: _this._uiMapping(c.placeholder, c.ui)
            });
            //instantiate new subcomponent
            var subcomp = new comp(config, _this);
            var c_model = c.model || [];
            subcomp.model = _this._modelMapping(subcomp.name, c_model, subcomp.model_expects, subcomp.model_binds);
            _this.components.push(subcomp);
          });
        },

        /**
         * Checks whether this is the root component
         * @returns {Boolean}
         */
        isRoot: function() {
          return this.parent === this;
        },

        /**
         * Returns subcomponent by name
         * @returns {Boolean}
         */
        findChildByName: function(name) {
          return find(this.components, function(f) {
            return f.name === name
          });
        },

        /**
         * Get layout profile of the current resolution
         * @returns {String} profile
         */
        getLayoutProfile: function() {
          //get profile from parent if layout is not available
          if(this.layout) {
            return this.layout.currentProfile();
          } else {
            return this.parent.getLayoutProfile();
          }
        },

        /**
         * Get if presentation mode is set of the current tool
         * @returns {Bool} presentation mode
         */
        getPresentationMode: function() {
          //get profile from parent if layout is not available
          if(this.layout) {
            return this.layout.getPresentationMode();
          } else {
            return this.parent.getPresentationMode();
          }
        },

        //TODO: make ui mapping more powerful
        /**
         * Maps the current ui to the subcomponents
         * @param {String} id subcomponent id (placeholder)
         * @param {Object} ui Optional ui parameters to overwrite existing
         * @returns {Object} the UI object
         */
        _uiMapping: function(id, ui) {
          //if overwritting UI
          if(ui) {
            return new Model('ui', ui);
          }
          if(id && this.ui) {
            id = id.replace('.', '');
            //remove trailing period
            var sub_ui = this.ui[id];
            if(sub_ui) {
              return sub_ui;
            }
          }
          return this.ui;
        },

        /**
         * Maps the current model to the subcomponents
         * @param {String} subcomponentName name of the subcomponent
         * @param {String|Array} model_config Configuration of model
         * @param {String|Array} model_expects Expected models
         * @param {Object} model_binds Initial model bindings
         * @returns {Object} the model
         */
        _modelMapping: function(subcomponentName, model_config, model_expects, model_binds) {
          var _this = this;
          var values = {};
          //If model_config is an array, we map it
          if(isArray(model_config) && isArray(model_expects)) {

            //if there's a different number of models received and expected
            if(model_expects.length !== model_config.length) {
              groupCollapsed('DIFFERENCE IN NUMBER OF MODELS EXPECTED AND RECEIVED');
              warn('Please, configure the \'model_expects\' attribute accordingly in \'' + subcomponentName +
                '\' or check the models passed in \'' + _this.name + '\'.\n\nComponent: \'' + _this.name +
                '\'\nSubcomponent: \'' + subcomponentName + '\'\nNumber of Models Expected: ' + model_expects.length +
                '\nNumber of Models Received: ' + model_config.length);
              groupEnd();
            }
            forEach(model_config, function(m, i) {
              var model_info = _mapOne(m);
              var new_name;
              if(model_expects[i]) {
                new_name = model_expects[i].name;
                if(model_expects[i].type && model_info.type !== model_expects[i].type && (!isArray(
                      model_expects[i].type) ||
                    model_expects[i].type.indexOf(model_info.type) === -1)) {

                  groupCollapsed('UNEXPECTED MODEL TYPE: \'' + model_info.type + '\' instead of \'' +
                    model_expects[i].type + '\'');
                  warn('Please, configure the \'model_expects\' attribute accordingly in \'' + subcomponentName +
                    '\' or check the models passed in \'' + _this.name + '\'.\n\nComponent: \'' + _this.name +
                    '\'\nSubcomponent: \'' + subcomponentName + '\'\nExpected Model: \'' + model_expects[i].type +
                    '\'\nReceived Model\'' + model_info.type + '\'\nModel order: ' + i);
                  groupEnd();
                }
              } else {

                groupCollapsed('UNEXPECTED MODEL: \'' + model_config[i] + '\'');
                warn('Please, configure the \'model_expects\' attribute accordingly in \'' + subcomponentName +
                  '\' or check the models passed in \'' + _this.name + '\'.\n\nComponent: \'' + _this.name +
                  '\'\nSubcomponent: \'' + subcomponentName + '\'\nNumber of Models Expected: ' + model_expects.length +
                  '\nNumber of Models Received: ' + model_config.length);
                groupEnd();
                new_name = model_info.name;
              }
              values[new_name] = model_info.model;
            });

            // fill the models that weren't passed with empty objects
            // e.g. if expected = [ui, language, color] and passed/existing = [ui, language]
            // it will fill values up to [ui, language, {}]
            var existing = model_config.length;
            var expected = model_expects.length;
            if(expected > existing) {
              //skip existing
              model_expects.splice(0, existing);
              //adds new expected models if needed
              forEach(expected, function(m) {
                values[m.name] = {};
              });
            }
          } else {
            return;
          }
          //return a new model with the defined submodels
          return new Model(subcomponentName, values, null, model_binds);
          /**
           * Maps one model name to current submodel and returns info
           * @param {String} name Full model path. E.g.: "state.marker.color"
           * @returns {Object} the model info, with name and the actual model
           */
          function _mapOne(name) {
            var parts = name.split('.');
            var current = _this.model;
            var current_name = '';
            while(parts.length) {
              current_name = parts.shift();
              current = current[current_name];
            }
            return {
              name: name,
              model: current,
              type: current ? current.getType() : null
            };
          }
        },

        /**
         * Get translation function for templates
         * @param {Boolean} wrap wrap in spam tags
         * @returns {Function}
         */
        getTranslationFunction: function(wrap) {
          var t_func;
          try {
            t_func = this.model.get('language').getTFunction();
          } catch(err) {
            if(this.parent && this.parent !== this) {
              t_func = this.parent.getTranslationFunction();
            }
          }
          if(!t_func) {
            t_func = function(s) {
              return s;
            };
          }
          if(wrap) {
            return this._translatedStringFunction(t_func);
          } else {
            return t_func;
          }
        },

        /**
         * Get function for translated string
         * @param {Function} translation_function The translation function
         * @returns {Function}
         */
        _translatedStringFunction: function(translation_function) {
          return function(string) {
            var translated = translation_function(string);
            return '<span data-vzb-translate="' + string + '">' + translated + '</span>';
          };
        },

        /**
         * Translate all strings in the template
         */
        translateStrings: function() {
          var t = this.getTranslationFunction();
          var strings = this.placeholder.querySelectorAll('[data-vzb-translate]');
          if(strings.length === 0) {
            return;
          }
          forEach(strings, function(str) {
            if(!str || !str.getAttribute) {
              return;
            }
            str.innerHTML = t(str.getAttribute('data-vzb-translate'));
          });
        },

        /**
         * Checks whether this component is a tool or not
         * @returns {Boolean}
         */
        isTool: function() {
          return this._id[0] === 't';
        },

        /**
         * Executes after the template is loaded and rendered.
         * Ideally, it contains HTML instantiations related to template
         * At this point, this.element and this.placeholder are available
         * as DOM elements
         */
        readyOnce: function() {},

        /**
         * Executes after the template and model (if any) are ready
         */
        ready: function() {},

        /**
         * Executes when the resize event is triggered.
         * Ideally, it only contains operations related to size
         */
        resize: function() {},

        /**
         * Clears a component
         */
        clear: function() {
          this.freeze();
          if(this.model) this.model.freeze();
          forEach(this.components, function(c) {
            c.clear();
          });
        }
      });

      /**
       * Preloader implementation with promises
       * @param {Object} comp any component
       * @returns {Promise}
       */
      function preloader(comp) {
        var promise = new Promise();
        var promises = []; //holds all promises

        //preload all subcomponents first
        forEach(comp.components, function(subcomp) {
          promises.push(preloader(subcomp));
        });

        var wait = promises.length ? Promise.all(promises) : new Promise.resolve();
        wait.then(function() {
          comp.preload(promise);
        }, function(err) {
          error$1("Error preloading data:", err);
        });

        return promise.then(function() {
          comp.afterPreload();
          return true;
        });
      }

      // Based on Simple JavaScript Templating by John Resig
      //generic templating function
      function templateFunc(str, data) {

        var func = function(obj) {
          return str.replace(/<%=([^\%]*)%>/g, function(match) {
            //match t("...")
            var s = match.match(/t\s*\(([^)]+)\)/g);
            //replace with translation
            if(s.length) {
              s = obj.t(s[0].match(/\"([^"]+)\"/g)[0].split('"').join(''));
            }
            //use object[name]
            else {
              s = match.match(/([a-z\-A-Z]+([a-z\-A-Z0-9]?[a-zA-Z0-9]?)?)/g)[0];
              s = obj[s] || s;
            }
            return s;
          });
        }
        // Figure out if we're getting a template, or if we need to
        // load the template - and be sure to cache the result.
        var fn = !/<[a-z][\s\S]*>/i.test(str) ? templates$1[str] = templates$1[str] || templateFunc(globals.templates[str]) : func;

        // Provide some basic currying to the user
        return data ? fn(data) : fn;
      }

      //utility function to check if a component is a component
      //TODO: Move to utils?
      Component.isComponent = function(c) {
        return c._id && (c._id[0] === 't' || c._id[0] === 'c');
      };

      //classes are vzb-portrait, vzb-landscape...
      var class_prefix = 'vzb-';
      var class_presentation = 'presentation';
      var class_portrait = 'vzb-portrait';
      var class_lansdcape = 'vzb-landscape';

      var Layout = EventSource.extend({

        screen_profiles: {
          small: {
            min_width: 0,
            min_height: 0
          },
          medium: {
            min_width: 600,
            min_height: 400
          },
          large: {
            min_width: 900,
            min_height: 520
          }
        },

        /**
         * Initializes the layout manager
         */
        init: function(ui) {
          this.ui = ui || {};

          this._container = null;
          //dom element
          this._curr_profile = null;
          this._prev_size = {};
          //resize when window resizes
          var _this = this;

          this.resizeHandler = this.resizeHandler || resize$1.bind(this);

          window.addEventListener('resize', this.resizeHandler);
          this._super();
        },

        /**
         * Calculates the size of the newly resized container
         */
        setSize: function(force) {
          var _this = this;
          var width = this._container.clientWidth;
          var height = this._container.clientHeight;

          /**
           * issue #1118
           * check if device is iPhone then add top margin for searchbar if it visible
           */
          if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) // browser is safari
            && navigator.userAgent.match(/iPhone/i) // checking device
          ) {
            this._container.style.top =  0;
            if (this._container.clientWidth > this._container.clientHeight // landscape mode
              && this._container.clientWidth < 700) {  // small device
              var bodyHeight = this._container.clientHeight;
              var windowHeight = window.innerHeight;
              if (2 < (bodyHeight - windowHeight) && (bodyHeight - windowHeight) <= 45) { // check searchbar is visible
                this._container.style.top =  44 + "px";
                document.body.scrollTop = 44; // scrolling empty space
              }
            }
          }

          if(!force && this._prev_size && this._prev_size.width === width && this._prev_size.height === height) {
            return;
          }

          // choose profile depending on size
          forEach(this.screen_profiles, function(range, size) {
            //remove class
            removeClass(_this._container, class_prefix + size);
            //find best fit
            if(width >= range.min_width && height >= range.min_height) {
              _this._curr_profile = size;
            }
          });

          //update size class
          addClass(this._container, class_prefix + this._curr_profile);
          //toggle, untoggle classes based on orientation
          if(width < height) {
            addClass(this._container, class_portrait);
            removeClass(this._container, class_lansdcape);
          } else {
            addClass(this._container, class_lansdcape);
            removeClass(this._container, class_portrait);
          }
          this._prev_size.width = width;
          this._prev_size.height = height;
          this.trigger('resize');
        },

        /**
         * Sets the container for this layout
         * @param container DOM element
         */
        setContainer: function(container) {
          this._container = container;
          this.setSize();
          this.updatePresentation();
        },

        /**
         * Sets the presentation mode for this layout
         * @param {Bool} presentation mode on or off
         */
        updatePresentation: function() {
          if (this.ui.presentation) {
              addClass(this._container, class_prefix + class_presentation);
          } else {
              removeClass(this._container, class_prefix + class_presentation);
          }
        },

        getPresentationMode: function() {
          return this.ui.presentation;
        },

        /**
         * Gets the current selected profile
         * @returns {String} name of current profile
         */
        currentProfile: function() {
          return this._curr_profile;
        },

        clear: function() {
          window.removeEventListener('resize', this.resizeHandler);
        }

      });

      function resize$1() {
        if(this._container) {
          this.setSize();
        }
      }

      // source https://github.com/encharm/Font-Awesome-SVG-PNG/tree/master/black/svg

      var paintbrush =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1615 0q70 0 122.5 46.5t52.5 116.5q0 63-45 151-332 629-465 752-97 91-218 91-126 0-216.5-92.5t-90.5-219.5q0-128 92-212l638-579q59-54 130-54zm-909 1034q39 76 106.5 130t150.5 76l1 71q4 213-129.5 347t-348.5 134q-123 0-218-46.5t-152.5-127.5-86.5-183-29-220q7 5 41 30t62 44.5 59 36.5 46 17q41 0 55-37 25-66 57.5-112.5t69.5-76 88-47.5 103-25.5 125-10.5z"/></svg>';
      var search =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1216 832q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 52-38 90t-90 38q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>';
      var circle =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1664 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"/></svg>';
      var expand =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M883 1056q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23zm781-864v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45z"/></svg>';
      var asterisk =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1546 1050q46 26 59.5 77.5t-12.5 97.5l-64 110q-26 46-77.5 59.5t-97.5-12.5l-266-153v307q0 52-38 90t-90 38h-128q-52 0-90-38t-38-90v-307l-266 153q-46 26-97.5 12.5t-77.5-59.5l-64-110q-26-46-12.5-97.5t59.5-77.5l266-154-266-154q-46-26-59.5-77.5t12.5-97.5l64-110q26-46 77.5-59.5t97.5 12.5l266 153v-307q0-52 38-90t90-38h128q52 0 90 38t38 90v307l266-153q46-26 97.5-12.5t77.5 59.5l64 110q26 46 12.5 97.5t-59.5 77.5l-266 154z"/></svg>';
      var trails =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M 1381.375 17.1875 C 1375.7825 17.176804 1370.1216 17.316078 1364.4375 17.5625 C 1273.4913 21.505489 1197.0982 57.199956 1135.2188 124.6875 C 1076.5961 188.62338 1047.6964 263.96059 1048.5312 350.65625 L 835.71875 433 C 797.77288 391.67699 749.96961 361.96416 692.3125 343.84375 C 604.96227 316.39162 520.95691 323.70366 440.25 365.8125 C 359.5432 407.92133 305.45225 472.64985 278 560 C 250.54783 647.35004 257.89117 731.38694 300 812.09375 C 342.10886 892.80075 406.83755 946.89147 494.1875 974.34375 C 576.9404 1000.3512 657.38873 994.58645 735.5625 957.09375 L 959.28125 1171.4375 L 972.375 1184.4062 C 966.2931 1198.3454 961.94845 1209.2226 959.34375 1217.0625 C 956.73915 1224.9024 953.7186 1236.224 950.25 1251.0312 L 711.03125 1285.1875 C 669.59175 1209.0324 607.72526 1157.2863 525.40625 1129.9375 C 438.51381 1101.0693 354.34933 1107.021 272.96875 1147.8125 C 191.58796 1188.6039 136.49335 1252.4513 107.625 1339.3438 C 78.756758 1426.2362 84.708528 1510.3694 125.5 1591.75 C 166.29138 1673.1307 230.1387 1728.2567 317.03125 1757.125 C 403.92369 1785.9933 488.05682 1780.0415 569.4375 1739.25 C 650.81799 1698.4587 705.94425 1634.6111 734.8125 1547.7188 C 737.41718 1539.8788 740.43763 1528.5573 743.90625 1513.75 L 983.125 1479.5938 C 1024.5644 1555.7487 1086.4309 1607.4948 1168.75 1634.8438 C 1255.6425 1663.7119 1339.8069 1657.7603 1421.1875 1616.9688 C 1502.5682 1576.1772 1557.6631 1512.3299 1586.5312 1425.4375 C 1615.3996 1338.5451 1609.4477 1254.4119 1568.6562 1173.0312 C 1527.8647 1091.6506 1464.0174 1036.5244 1377.125 1007.6562 C 1294.9259 980.34721 1214.5066 984.74084 1135.8438 1020.8125 L 1120.2812 1005.9062 L 898.0625 785.96875 C 902.79653 774.40321 906.33847 765.03422 908.5 758.15625 C 920.42249 720.22 925.7916 682.90194 924.59375 646.21875 L 1130.9688 566.34375 C 1141.2015 577.59424 1149.3796 586.0106 1155.4688 591.59375 C 1222.9566 653.47326 1302.1474 682.44278 1393.0938 678.5 C 1484.04 674.55731 1560.4642 638.83151 1622.3438 571.34375 C 1684.2232 503.85591 1713.1929 424.6337 1709.25 333.6875 C 1705.3072 242.74139 1669.5816 166.34819 1602.0938 104.46875 C 1538.8238 46.456824 1465.2625 17.347946 1381.375 17.1875 z "/></svg>';
      var lock =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z"/></svg>';
      var unlock =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1376 768q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-320q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45q0-106-75-181t-181-75-181 75-75 181v320h736z"/></svg>';
      var unexpand =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M896 960v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45zm755-672q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23z"/></svg>';
      var axes =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500"><path d="M430.25,379.655l-75.982-43.869v59.771H120.73V151.966h59.774l-43.869-75.983L92.767,0L48.898,75.983L5.029,151.966h59.775 v271.557c0,15.443,12.52,27.965,27.963,27.965h261.5v59.773l75.982-43.869l75.982-43.867L430.25,379.655z"/></svg>';
      var gear =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1152 896q0-106-75-181t-181-75-181 75-75 181 75 181 181 75 181-75 75-181zm512-109v222q0 12-8 23t-20 13l-185 28q-19 54-39 91 35 50 107 138 10 12 10 25t-9 23q-27 37-99 108t-94 71q-12 0-26-9l-138-108q-44 23-91 38-16 136-29 186-7 28-36 28h-222q-14 0-24.5-8.5t-11.5-21.5l-28-184q-49-16-90-37l-141 107q-10 9-25 9-14 0-25-11-126-114-165-168-7-10-7-23 0-12 8-23 15-21 51-66.5t54-70.5q-27-50-41-99l-183-27q-13-2-21-12.5t-8-23.5v-222q0-12 8-23t19-13l186-28q14-46 39-92-40-57-107-138-10-12-10-24 0-10 9-23 26-36 98.5-107.5t94.5-71.5q13 0 26 10l138 107q44-23 91-38 16-136 29-186 7-28 36-28h222q14 0 24.5 8.5t11.5 21.5l28 184q49 16 90 37l142-107q9-9 24-9 13 0 25 10 129 119 165 170 7 8 7 22 0 12-8 23-15 21-51 66.5t-54 70.5q26 50 41 98l183 28q13 2 21 12.5t8 23.5z"/></svg>';
      var stack =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 54.849 54.849"><g><path d="M54.497,39.614l-10.363-4.49l-14.917,5.968c-0.537,0.214-1.165,0.319-1.793,0.319c-0.627,0-1.254-0.104-1.79-0.318     l-14.921-5.968L0.351,39.614c-0.472,0.203-0.467,0.524,0.01,0.716L26.56,50.81c0.477,0.191,1.251,0.191,1.729,0L54.488,40.33     C54.964,40.139,54.969,39.817,54.497,39.614z"/><path d="M54.497,27.512l-10.364-4.491l-14.916,5.966c-0.536,0.215-1.165,0.321-1.792,0.321c-0.628,0-1.256-0.106-1.793-0.321     l-14.918-5.966L0.351,27.512c-0.472,0.203-0.467,0.523,0.01,0.716L26.56,38.706c0.477,0.19,1.251,0.19,1.729,0l26.199-10.479     C54.964,28.036,54.969,27.716,54.497,27.512z"/><path d="M0.361,16.125l13.662,5.465l12.537,5.015c0.477,0.191,1.251,0.191,1.729,0l12.541-5.016l13.658-5.463     c0.477-0.191,0.48-0.511,0.01-0.716L28.277,4.048c-0.471-0.204-1.236-0.204-1.708,0L0.351,15.41     C-0.121,15.614-0.116,15.935,0.361,16.125z"/></g></svg>';
      var iconDrag =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M896 384q-53 0-90.5 37.5t-37.5 90.5v128h-32v-93q0-48-32-81.5t-80-33.5q-46 0-79 33t-33 79v429l-32-30v-172q0-48-32-81.5t-80-33.5q-46 0-79 33t-33 79v224q0 47 35 82l310 296q39 39 39 102 0 26 19 45t45 19h640q26 0 45-19t19-45v-25q0-41 10-77l108-436q10-36 10-77v-246q0-48-32-81.5t-80-33.5q-46 0-79 33t-33 79v32h-32v-125q0-40-25-72.5t-64-40.5q-14-2-23-2-46 0-79 33t-33 79v128h-32v-122q0-51-32.5-89.5t-82.5-43.5q-5-1-13-1zm0-128q84 0 149 50 57-34 123-34 59 0 111 27t86 76q27-7 59-7 100 0 170 71.5t70 171.5v246q0 51-13 108l-109 436q-6 24-6 71 0 80-56 136t-136 56h-640q-84 0-138-58.5t-54-142.5l-308-296q-76-73-76-175v-224q0-99 70.5-169.5t169.5-70.5q11 0 16 1 6-95 75.5-160t164.5-65q52 0 98 21 72-69 174-69z"/></svg>';
      var iconWarn =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512.209 512.209"><path d="M507.345,439.683L288.084,37.688c-3.237-5.899-7.71-10.564-13.429-13.988c-5.705-3.427-11.893-5.142-18.554-5.142   s-12.85,1.718-18.558,5.142c-5.708,3.424-10.184,8.089-13.418,13.988L4.859,439.683c-6.663,11.998-6.473,23.989,0.57,35.98   c3.239,5.517,7.664,9.897,13.278,13.128c5.618,3.237,11.66,4.859,18.132,4.859h438.529c6.479,0,12.519-1.622,18.134-4.859   c5.62-3.23,10.038-7.611,13.278-13.128C513.823,463.665,514.015,451.681,507.345,439.683z M292.655,411.132   c0,2.662-0.91,4.897-2.71,6.704c-1.807,1.811-3.949,2.71-6.427,2.71h-54.816c-2.474,0-4.616-0.899-6.423-2.71   c-1.809-1.807-2.713-4.042-2.713-6.704v-54.248c0-2.662,0.905-4.897,2.713-6.704c1.807-1.811,3.946-2.71,6.423-2.71h54.812   c2.479,0,4.62,0.899,6.428,2.71c1.803,1.807,2.71,4.042,2.71,6.704v54.248H292.655z M292.088,304.357   c-0.198,1.902-1.198,3.47-3.001,4.709c-1.811,1.238-4.046,1.854-6.711,1.854h-52.82c-2.663,0-4.947-0.62-6.849-1.854   c-1.908-1.243-2.858-2.807-2.858-4.716l-4.853-130.47c0-2.667,0.953-4.665,2.856-5.996c2.474-2.093,4.758-3.14,6.854-3.14h62.809   c2.098,0,4.38,1.043,6.854,3.14c1.902,1.331,2.851,3.14,2.851,5.424L292.088,304.357z"/></svg>';
      var iconPin =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M800 864v-448q0-14-9-23t-23-9-23 9-9 23v448q0 14 9 23t23 9 23-9 9-23zm672 352q0 26-19 45t-45 19h-429l-51 483q-2 12-10.5 20.5t-20.5 8.5h-1q-27 0-32-27l-76-485h-404q-26 0-45-19t-19-45q0-123 78.5-221.5t177.5-98.5v-512q-52 0-90-38t-38-90 38-90 90-38h640q52 0 90 38t38 90-38 90-90 38v512q99 0 177.5 98.5t78.5 221.5z"/></svg>';
      var iconQuestion =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="17 17 483 483"> <circle stroke-width="40" cx="258.57" cy="258.57" r="220"/> <path d="M299.756,413.021v-61.78c0-3.003-0.966-5.472-2.896-7.401s-4.398-2.896-7.401-2.896h-61.78 c-3.003,0-5.47,0.965-7.4,2.896c-1.932,1.931-2.896,4.398-2.896,7.401v61.78c0,3.002,0.965,5.47,2.896,7.399 c1.931,1.931,4.396,2.896,7.4,2.896h61.779c3.003,0,5.472-0.967,7.401-2.896S299.756,416.021,299.756,413.021z"/> <path d="M382.128,196.789c0-18.877-5.952-36.36-17.856-52.449c-11.905-16.088-26.762-28.53-44.566-37.325 c-17.804-8.795-36.037-13.192-54.7-13.192c-52.127,0-91.919,22.845-119.377,68.537c-3.218,5.148-2.359,9.653,2.574,13.514 l42.474,32.177c1.502,1.287,3.54,1.931,6.114,1.931c3.433,0,6.115-1.287,8.044-3.861c11.369-14.587,20.594-24.454,27.672-29.603 c7.294-5.148,16.519-7.723,27.673-7.723c10.297,0,19.468,2.789,27.513,8.366c8.044,5.578,12.065,11.906,12.065,18.985 c0,8.151-2.146,14.694-6.437,19.628c-4.29,4.934-11.583,9.76-21.881,14.479c-13.514,6.006-25.901,15.284-37.164,27.834 c-11.263,12.549-16.894,26.01-16.894,40.382v11.583c0,3.004,0.965,5.472,2.896,7.401c1.931,1.93,4.396,2.896,7.4,2.896h61.779 c3.003,0,5.471-0.965,7.401-2.896c1.93-1.931,2.896-4.397,2.896-7.401c0-4.075,2.306-9.385,6.917-15.928 c4.612-6.542,10.458-11.852,17.537-15.927c6.863-3.861,12.119-6.918,15.768-9.171c3.646-2.252,8.579-6.008,14.802-11.263 c6.22-5.255,10.993-10.402,14.317-15.443c3.325-5.042,6.328-11.53,9.01-19.467C380.788,214.916,382.128,206.228,382.128,196.789z"/> </svg>';
      var iconClose =
        '<svg class="vzb-icon vzb-icon-pin" viewBox="-150 -250 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1149 414q0 26 -19 45l-181 181l181 181q19 19 19 45q0 27 -19 46l-90 90q-19 19 -46 19q-26 0 -45 -19l-181 -181l-181 181q-19 19 -45 19q-27 0 -46 -19l-90 -90q-19 -19 -19 -46q0 -26 19 -45l181 -181l-181 -181q-19 -19 -19 -45q0 -27 19 -46l90 -90q19 -19 46 -19 q26 0 45 19l181 181l181 -181q19 -19 45 -19q27 0 46 19l90 90q19 19 19 46z"/></svg>';
      var presentation =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path id="flip-chart-1" d="M334.549,393.834l58.607,68.666h-45.096l-58.709-68.666H334.549z M240.333,462.5h34.333v-68.666h-34.333 V462.5z M360.5,153.5h-34.334v137.334H360.5V153.5z M121.566,462.5h45.113l58.709-68.666h-45.197L121.566,462.5z M206,273.666 h-34.333v17.168H206V273.666z M257.5,239.333h-34.333v51.5H257.5V239.333z M309,205h-34.334v85.834H309V205z M446.334,102h-17.168 v257.5H85.833V102H68.667V50.5h377.667V102z M394.834,102H120.167v223.166h274.667V102z"/></svg>';
      var about =
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1088 1256v240q0 16-12 28t-28 12h-240q-16 0-28-12t-12-28v-240q0-16 12-28t28-12h240q16 0 28 12t12 28zm316-600q0 54-15.5 101t-35 76.5-55 59.5-57.5 43.5-61 35.5q-41 23-68.5 65t-27.5 67q0 17-12 32.5t-28 15.5h-240q-15 0-25.5-18.5t-10.5-37.5v-45q0-83 65-156.5t143-108.5q59-27 84-56t25-76q0-42-46.5-74t-107.5-32q-65 0-108 29-35 25-107 115-13 16-31 16-12 0-25-8l-164-125q-13-10-15.5-25t5.5-28q160-266 464-266 80 0 161 31t146 83 106 127.5 41 158.5z"/></svg>'
      var cursorArrow =
        '<svg class="vzb-icon" viewBox="-200 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1389 1043q31 30 14 69-17 40-59 40h-382l201 476q10 25 0 49t-34 35l-177 75q-25 10-49 0t-35-34l-191-452-312 312q-19 19-45 19-12 0-24-5-40-17-40-59v-1504q0-42 40-59 12-5 24-5 27 0 45 19z"/></svg>'
      var cursorPlus = 
        '<svg class="vzb-icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1088 800v64q0 13-9.5 22.5t-22.5 9.5h-224v224q0 13-9.5 22.5t-22.5 9.5h-64q-13 0-22.5-9.5t-9.5-22.5v-224h-224q-13 0-22.5-9.5t-9.5-22.5v-64q0-13 9.5-22.5t22.5-9.5h224v-224q0-13 9.5-22.5t22.5-9.5h64q13 0 22.5 9.5t9.5 22.5v224h224q13 0 22.5 9.5t9.5 22.5zm128 32q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 53-37.5 90.5t-90.5 37.5q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>'
      var cursorMinus = 
        '<svg class="vzb-icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1088 800v64q0 13-9.5 22.5t-22.5 9.5h-576q-13 0-22.5-9.5t-9.5-22.5v-64q0-13 9.5-22.5t22.5-9.5h576q13 0 22.5 9.5t9.5 22.5zm128 32q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 53-37.5 90.5t-90.5 37.5q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>'
      var hundredPercent = 
        '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg"><g transform="translate(18 11)"><text transform="scale(0.9 1)" x="0" y="0">100</text><text transform="scale(0.6 1)" class="percent" x="0" y="0">%</text></g></svg>'
      var percent = 
        '<svg class="vzb-icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1408 1280q0-52-38-90t-90-38-90 38-38 90 38 90 90 38 90-38 38-90zm-768-768q0-52-38-90t-90-38-90 38-38 90 38 90 90 38 90-38 38-90zm1024 768q0 159-112.5 271.5t-271.5 112.5-271.5-112.5-112.5-271.5 112.5-271.5 271.5-112.5 271.5 112.5 112.5 271.5zm-96-1088q0 20-13 38l-1056 1408q-19 26-51 26h-160q-26 0-45-19t-19-45q0-20 13-38l1056-1408q19-26 51-26h160q26 0 45 19t19 45zm-672 320q0 159-112.5 271.5t-271.5 112.5-271.5-112.5-112.5-271.5 112.5-271.5 271.5-112.5 271.5 112.5 112.5 271.5z"/></svg>'


      var iconset = Object.freeze({
        paintbrush: paintbrush,
        search: search,
        circle: circle,
        expand: expand,
        asterisk: asterisk,
        trails: trails,
        lock: lock,
        unlock: unlock,
        unexpand: unexpand,
        axes: axes,
        gear: gear,
        stack: stack,
        drag: iconDrag,
        warn: iconWarn,
        pin: iconPin,
        question: iconQuestion,
        close: iconClose,
        presentation: presentation,
        about: about,
        cursorArrow: cursorArrow,
        cursorPlus: cursorPlus,
        cursorMinus: cursorMinus,
        hundredPercent: hundredPercent,
        percent: percent
      });

      var class_loading_first = 'vzb-loading-first';
      var class_loading_data = 'vzb-loading-data';
      var class_loading_error = 'vzb-loading-error';
      var class_placeholder = 'vzb-placeholder';
      var class_buttons_off = 'vzb-buttonlist-off';

      //tool model is quite simple and doesn't need to be registered
      var ToolModel = Model.extend({
        /**
         * Initializes the tool model.
         * @param {Object} values The initial values of this model
         * @param {Object} binds contains initial bindings for the model
         * @param {Function|Array} validade validate rules
         */
        init: function(name, values, defaults, binds, validate) {
          this._id = uniqueId('tm');
          this._type = 'tool';
          //generate validation function
          this.validate = generateValidate(this, validate);
          //default submodels
          values = values || {};
          defaults = defaults || {};
          values = defaultModel(values, defaults);
          //constructor is similar to model
          this._super(name, values, null, binds);
          // change language
          if(values.language) {
            var _this = this;
            this.on('change:language.id', function() {
              _this.trigger('translate');
            });
          }
        }
      });
      //tool
      var Tool = Component.extend({
        /**
         * Initializes the tool
         * @param {Object} placeholder object
         * @param {Object} external_model External model such as state, data, etc
         */
        init: function(placeholder, external_model) {
          this._id = uniqueId('t');
          this.template = this.template || 
            '<div class="vzb-tool vzb-tool-' + this.name + '">' + 
              '<div class="vzb-tool-stage">' + 
                '<div class="vzb-tool-viz">' + 
                '</div>' + 
                '<div class="vzb-tool-timeslider">' + 
                '</div>' + 
              '</div>' + 
              '<div class="vzb-tool-sidebar">' + 
                '<div class="vzb-tool-dialogs">' + 
                '</div>' +
                '<div class="vzb-tool-buttonlist">' + 
                '</div>' + 
              '</div>' +         
              '<div class="vzb-tool-datanotes vzb-hidden">' + 
              '</div>' + 
              '<div class="vzb-tool-treemenu vzb-hidden">' + 
              '</div>' + 
              '<div class="vzb-tool-datawarning vzb-hidden">' + 
              '</div>' + 
              '<div class="vzb-tool-labels vzb-hidden">' + 
              '</div>' + 
            '</div>';
          this.model_binds = this.model_binds || {};
          
          external_model = external_model || {}; //external model can be undefined
          external_model.bind = external_model.bind || {}; //bind functions can be undefined

          
          //bind the validation function with the tool
          var validate = this.validate.bind(this);
          var _this = this;

          // callbacks has to be an array so that it will not be turned into a submodel when the toolmodel is made.
          var callbacks = {
            'change': function(evt, path) {
              if(_this._ready) {
                _this.model.validate();

                if (evt.source.persistent)
                  _this.model.trigger(new DefaultEvent(evt.source, 'persistentChange'), _this.getMinModel());
              }
            },
            'hook_change': function() {
              if (!_this.model.state.time.splash) { // not block when it initial splash screen
                _this.beforeLoading(true);
              }
            },
            'change:ui.presentation': function() {
              _this.layout.updatePresentation();
              _this.trigger('resize');
            },
            'translate': function(evt, val) {
              if(_this._ready) {
                Promise.all([_this.preloadLanguage(), _this.model.load()])
                  .then(function() {
                    _this.model.validate();
                    _this.translateStrings();
                  });
              }
            },
            'load_start': function() {
              _this.beforeLoading();
            },
            'ready': function(evt) {
              if(_this._ready) {
                _this.afterLoading();
              }
            }      
          };
          extend(callbacks, this.model_binds, external_model.bind);
          delete external_model.bind;

          this.model = new ToolModel(this.name, external_model, this.default_model, callbacks, validate);

          // default model is the model set in the tool
          this.default_model = this.default_model || {};

          this.ui = this.model.ui || {};

          this.layout = new Layout(this.ui);
          //splash
          this.ui.splash = this.model && this.model.data && this.model.data.splash;
          this._super({
            name: this.name || this._id,
            placeholder: placeholder
          }, this);

          this.render();
          this._setUIModel();
        },

        ready: function(){
          this.checkTimeLimits();  
        },
          
        checkTimeLimits: function() {
          if(!this.model.state.time) return;
          
          var time = this.model.state.time;
          
          if(this.model.state.marker) {
            var tLimits = this.model.state.marker.getTimeLimits(time.getDimension());

            if(!tLimits || !isDate(tLimits.min) || !isDate(tLimits.max)) 
                return warn("checkTimeLimits(): min-max date objects look wrong: " + tLimits.min + " " + tLimits.max);

            // change start and end (but keep startOrigin and endOrigin for furhter requests)
            // change is not persistent if it's splashscreen change
            if(time.start < tLimits.min) time.getModelObject('start').set(tLimits.min, false, !time.splash);
            if(time.end > tLimits.max) time.getModelObject('end').set(tLimits.max, false, !time.splash);
          }
            
          //force time validation because time.value might now fall outside of start-end
          time.validate(); 
        },
          

        getMinModel: function() {
          var currentToolModel = this.model.getPlainObject(true); // true = get only persistent model values
          var defaultToolModel = this.default_model;
          var defaultsFromModels = this.model.getDefaults();
          //flattens _defs_ object
          defaultToolModel = flattenDefaults(defaultToolModel);
          // compares with chart default model
          var modelChanges = diffObject(currentToolModel, defaultToolModel);
          // change date object to string according to current format
          modelChanges = flattenDates(modelChanges, this.model.state.time.timeFormat);
          //compares with model's defaults
          return diffObject(modelChanges, defaultsFromModels);
        },

        /**
         * Clears a tool
         */

        clear: function() {
          this.layout.clear();
          this.setModel = this.getModel = function() {
            return;
          };
          this._super();
        },

        /**
         * Visually display errors
         */
        error: function(opts) {

          var msg = (opts && opts.type === "data") ? "Error loading chart data. <br>Please, try again soon." : "Error loading chart";

          this.placeholder.innerHTML = '<div class="vzb-error-message"><h1>'+iconWarn+'</h1><p>'+msg+'</p></div>';
        },

        /**
         * Sets model from external page
         * @param {Object} JSONModel new model in JSON format
         * @param {Boolean} overwrite overwrite everything instead of extending
         */
        setModel: function(newModelJSON, overwrite) {
          if(overwrite) {
            this.model.reset(newModelJSON);
          } else {
            this.model.set(newModelJSON);
          }
          this._setUIModel();
        },

        /**
         * get model
         * @return {Object} JSON object of model
         */
        getModel: function() {
          return this.model.getPlainObject() || {};
        },
        /**
         * Displays loading class
         */
        beforeLoading: function(loadingData) {
          if(!this._readyOnce) {
              addClass(this.placeholder, class_loading_first);    
          }
          if(loadingData) {
              addClass(this.placeholder, class_loading_data);    
          }
        },
        /**
         * Removes loading class
         */
        afterLoading: function() {
          removeClass(this.placeholder, class_loading_first);
          removeClass(this.placeholder, class_loading_data);
        },
        /**
         * Adds loading error class
         */
        errorLoading: function() {
          addClass(this.placeholder, class_loading_error);
        },
        /* ==========================
         * Validation and query
         * ==========================
         */
        /**
         * Validating the tool model
         * @param model the current tool model to be validated
         */
        validate: function(model) {
          model = this.model || model;

          if(!model || !model.state) return warn("tool validation aborted: model.state looks wrong: " + model);
        },

        _setUIModel: function() {
          //add placeholder class
          addClass(this.placeholder, class_placeholder);
          //add-remove buttonlist class
          if(!this.ui || !this.ui.buttons || !this.ui.buttons.length) {
            addClass(this.element, class_buttons_off);
          } else {
            removeClass(this.element, class_buttons_off);
          }
        },

        preloadLanguage: function() {
          return Promise.resolve();
        }
      });

      /* ==========================
       * Validation methods
       * ==========================
       */

      /**
       * Generates a validation function based on specific model validation
       * @param {Object} m model
       * @param {Function} validate validation function
       * @returns {Function} validation
       */
      function generateValidate(m, validate) {
        var max = 10;

        function validate_func() {
          var model = JSON.stringify(m.getPlainObject());
          var c = arguments[0] || 0;
          //TODO: remove validation hotfix
          //while setting this.model is not available
          if(!this._readyOnce) {
            validate(this);
          } else {
            validate();
          }
          var model2 = JSON.stringify(m.getPlainObject());
          if(c >= max) {
            error$1('Max validation loop.');
          } else if(model !== model2) {
            validate_func.call(this, [c += 1]);
          }
        }

        return validate_func;
      }

      /* ==========================
       * Default model methods
       * ==========================
       */

      /**
       * Generates a valid state based on default model
       */
      function defaultModel(values, defaults) {
        var keys = Object.keys(defaults);
        var size = keys.length;
        var field;
        var blueprint;
        var original;
        var type;
        for(var i = 0; i < size; i += 1) {
          field = keys[i];
          if(field === '_defs_') {
            continue;
          }
          blueprint = defaults[field];
          original = values[field];
          type = typeof blueprint;
          if(type === 'object') {
            type = isPlainObject(blueprint) && blueprint._defs_ ? 'object' : isArray(blueprint) ? 'array' :
              'model';
          }
          if(typeof original === 'undefined') {
            if(type !== 'object' && type !== 'model') {
              values[field] = blueprint;
            } else {
              values[field] = defaultModel({}, blueprint);
            }
          }
          original = values[field];
          if(type === 'number' && isNaN(original)) {
            values[field] = 0;
          } else if(type === 'string' && typeof original !== 'string') {
            values[field] = '';
          } else if(type === 'array' && !isArray(original)) {
            values[field] = [];
          } else if(type === 'model') {
            if(!isObject(original)) {
              values[field] = {};
            }
            values[field] = defaultModel(values[field], blueprint);
          } else if(type === 'object') {
            if(!isObject(original) || Object.keys(original).length === 0) {
              original = false; //will be overwritten
            }
            if(!isObject(blueprint._defs_)) {
              blueprint._defs_ = {};
            }
            values[field] = original || blueprint._defs_;
          }
        }
        return values;
      }

      //utility function to check if a component is a tool
      //TODO: Move to utils?
      Tool.isTool = function(c) {
        return c._id && c._id[0] === 't';
      };

      //d3.svg.axisSmart

      function axisSmart() {

        return function d3_axis_smart(_super) {

          var VERTICAL = 'vertical axis';
          var HORIZONTAL = 'horizontal axis';
          var X = 'labels stack side by side';
          var Y = 'labels stack top to bottom';

          var OPTIMISTIC = 'optimistic approximation: labels have different lengths';
          var PESSIMISTIC = 'pessimistic approximation: all labels have the largest length';
          var DEFAULT_LOGBASE = 10;

          function onlyUnique(value, index, self) {
            return self.indexOf(value) === index;
          }

          function axis(g) {
            if(highlightValue != null) {
              axis.highlightValueRun(g);
              return;
            }

            // measure the width and height of one digit
            var widthSampleG = g.append("g").attr("class", "tick widthSampling");
            var widthSampleT = widthSampleG.append('text').text('0');

            options.cssMarginTop = widthSampleT.style("margin-top");
            options.cssMarginBottom = widthSampleT.style("margin-bottom");
            options.cssMarginLeft = widthSampleT.style("margin-left");
            options.cssMarginRight = widthSampleT.style("margin-right");
            options.widthOfOneDigit = widthSampleT[0][0].getBBox().width;
            options.heightOfOneDigit = widthSampleT[0][0].getBBox().height;
            widthSampleG.remove();


            // run label factory - it will store labels in tickValues property of axis
            axis.labelFactory(options);

            //if(axis.orient()=="bottom") console.log("ordered", axis.tickValues())
            // construct the view (d3 constructor is used)
            if(options.transitionDuration > 0) {
              _super(g.transition().duration(options.transitionDuration));
            } else {
              _super(g);
            }
            //if(axis.orient()=="bottom") console.log("received", g.selectAll("text").each(function(d){console.log(d)}))

            var orient = axis.orient() == "top" || axis.orient() == "bottom" ? HORIZONTAL : VERTICAL;
            var dimension = (orient == HORIZONTAL && axis.pivot() || orient == VERTICAL && !axis.pivot()) ? Y : X;

            g.selectAll('.vzb-axis-value')
              .data([null])
              .enter().append('g')
              .attr("class", 'vzb-axis-value')
              .classed("vzb-hidden", true)
              .append("text");

            // patch the label positioning after the view is generated
            g.selectAll("text")
              .each(function(d, i) {
                var view = d3.select(this);

                if(axis.pivot() == null) return;
                view.attr("transform", "rotate(" + (axis.pivot() ? -90 : 0) + ")");
                view.style("text-anchor", dimension == X ? "middle" : "end");
                view.attr("x", dimension == X ? 0 : (-axis.tickPadding() - axis.tickSize()));
                view.attr("y", dimension == X ? (orient == VERTICAL ? -1 : 1) * (axis.tickPadding() + axis.tickSize()) :
                  0);
                view.attr("dy", dimension == X ? (orient == VERTICAL ? 0 : ".72em") : ".32em");
              })
            
            if(axis.repositionLabels() != null){
                g.selectAll(".tick")
                  .each(function(d, i) {
                    var view = d3.select(this).select("text");
                    var shift = axis.repositionLabels()[i] || {x: 0, y: 0};
                    view.attr("x", +view.attr("x") + shift.x);
                    view.attr("y", +view.attr("y") + shift.y);
                  })
            }

            if(axis.tickValuesMinor() == null) axis.tickValuesMinor([]);
            // add minor ticks
            var minorTicks = g.selectAll(".tickMinor").data(tickValuesMinor);
            minorTicks.exit().remove();
            minorTicks.enter().append("line")
              .attr("class", "tickMinor");

            var tickLengthOut = axis.tickSizeMinor().outbound;
            var tickLengthIn = axis.tickSizeMinor().inbound;
            var scale = axis.scale();
            minorTicks
              .attr("y1", orient == HORIZONTAL ? (axis.orient() == "top" ? 1 : -1) * tickLengthIn : scale)
              .attr("y2", orient == HORIZONTAL ? (axis.orient() == "top" ? -1 : 1) * tickLengthOut : scale)
              .attr("x1", orient == VERTICAL ? (axis.orient() == "right" ? -1 : 1) * tickLengthIn : scale)
              .attr("x2", orient == VERTICAL ? (axis.orient() == "right" ? 1 : -1) * tickLengthOut : scale)


            //adjust axis rake 
            g.selectAll("path").remove();
            var rake = g.selectAll(".vzb-axis-line").data([0]);
            rake.exit().remove();
            rake.enter().append("line")
                .attr("class", "vzb-axis-line");
              
            if(options.constantRakeLength){
                rake 
                  .attr("x1", orient == VERTICAL ? 0 : -1)
                  .attr("x2", orient == VERTICAL ? 0 : options.constantRakeLength)
                  .attr("y1", orient == HORIZONTAL ? 0 : 0)
                  .attr("y2", orient == HORIZONTAL ? 0 : options.constantRakeLength)      
            }else{
                //TODO: this will not work for the "ordinal" scaleType
                rake 
                  .attr("x1", orient == VERTICAL ? 0 : d3.min(scale.range()) - (options.bump||0) - 1)
                  .attr("x2", orient == VERTICAL ? 0 : d3.max(scale.range()) + (options.bump||0))
                  .attr("y1", orient == HORIZONTAL ? 0 : d3.min(scale.range()) - (options.bump||0))
                  .attr("y2", orient == HORIZONTAL ? 0 : d3.max(scale.range()) + (options.bump||0))
            }

          };


          axis.highlightValueRun = function(g) {
            var orient = axis.orient() == "top" || axis.orient() == "bottom" ? HORIZONTAL : VERTICAL;

            g.select('.vzb-axis-value')
              .classed("vzb-hidden", highlightValue == "none")
              .select("text")
              .text(options.formatter(highlightValue == "none" ? 0 : highlightValue));
              
            var getTransform = function(){
              return highlightValue == "none" ? "translate(0,0)" : 
                  "translate(" 
                  + (orient == HORIZONTAL ? axis.scale()(highlightValue) : 0) + "," 
                  + (orient == VERTICAL ? axis.scale()(highlightValue) : 0) 
                  + ")"
            }
            
            var getOpacity = function(d, t){
              return highlightValue == "none" ? 1 : 
                  Math.min(1, Math.pow( Math.abs(axis.scale()(d) - axis.scale()(highlightValue)) / (axis.scale().range()[1] - axis.scale().range()[0]) * 5, 2))
            }
              
            if(highlightTransDuration){
              g.selectAll(".tick").each(function(d, t) {
                d3.select(this).select("text")
                  .transition()
                  .duration(highlightTransDuration)
                  .ease("linear")
                  .style("opacity", getOpacity(d,t))
              })
                
              g.select('.vzb-axis-value')
                .transition()
                .duration(highlightTransDuration)
                .ease("linear")
                .attr("transform", getTransform);
                
            }else{
                
              g.selectAll(".tick").each(function(d, t) {
                d3.select(this).select("text")
                  .interrupt()
                  .style("opacity", getOpacity(d,t))
              })
                
              g.select('.vzb-axis-value')
                .interrupt()
                .attr("transform", getTransform);
                
            }

            highlightValue = null;
          }


          var highlightValue = null;
          axis.highlightValue = function(arg) {
            if(!arguments.length) return highlightValue;
            highlightValue = arg;
            return axis;
          }

          var highlightTransDuration = 0;
          axis.highlightTransDuration = function(arg) {
            if(!arguments.length) return highlightTransDuration;
            highlightTransDuration = arg;
            return axis;
          }

          var repositionLabels = null;
          axis.repositionLabels = function(arg) {
            if(!arguments.length) return repositionLabels;
            repositionLabels = arg;
            return axis;
          };

          var pivot = false;
          axis.pivot = function(arg) {
            if(!arguments.length) return pivot;
            pivot = !!arg;
            return axis;
          };

          var tickValuesMinor = [];
          axis.tickValuesMinor = function(arg) {
            if(!arguments.length) return tickValuesMinor;
            tickValuesMinor = arg;
            return axis;
          };

          var tickSizeMinor = {
            outbound: 0,
            inbound: 0
          };
          axis.tickSizeMinor = function(arg1, arg2) {
            if(!arguments.length) return tickSizeMinor;
            tickSizeMinor = {
              outbound: arg1,
              inbound: arg2 || 0
            };
            meow("setting", tickSizeMinor)
            return axis;
          };

          var options = {};
          axis.labelerOptions = function(arg) {
            if(!arguments.length) return options;
            options = arg;
            return axis;
          };

          axis.METHOD_REPEATING = 'repeating specified powers';
          axis.METHOD_DOUBLING = 'doubling the value';

          axis.labelFactory = function(options) {
            if(options == null) options = {}
            if(options.scaleType != "linear" &&
              options.scaleType != "time" &&
              options.scaleType != "genericLog" &&
              options.scaleType != "log" &&
              options.scaleType != "ordinal") {
              return axis.ticks(ticksNumber)
                .tickFormat(null)
                .tickValues(null)
                .tickValuesMinor(null)
                .pivot(null)
                .repositionLabels(null);
            };
            if(options.scaleType == 'ordinal') return axis.tickValues(null);

            if(options.logBase == null) options.logBase = DEFAULT_LOGBASE;
            if(options.stops == null) options.stops = [1, 2, 5, 3, 7, 4, 6, 8, 9];



            if(options.removeAllLabels == null) options.removeAllLabels = false;

            if(options.formatter == null) options.formatter = axis.tickFormat()?
              axis.tickFormat() : function(d) {return d+"";}
            options.cssLabelMarginLimit = 5; //px
            if(options.cssMarginLeft == null || parseInt(options.cssMarginLeft) < options.cssLabelMarginLimit) options.cssMarginLeft =
              options.cssLabelMarginLimit + "px";
            if(options.cssMarginRight == null || parseInt(options.cssMarginRight) < options.cssLabelMarginLimit) options.cssMarginRight =
              options.cssLabelMarginLimit + "px";
            if(options.cssMarginTop == null || parseInt(options.cssMarginTop) < options.cssLabelMarginLimit) options.cssMarginTop =
              options.cssLabelMarginLimit + "px";
            if(options.cssMarginBottom == null || parseInt(options.cssMarginBottom) < options.cssLabelMarginLimit) options
              .cssMarginBottom = options.cssLabelMarginLimit + "px";
            if(options.toolMargin == null) options.toolMargin = {
              left: 30,
              bottom: 30,
              right: 30,
              top: 30
            };
            if(options.bump == null) options.bump = 0;
            if(options.constantRakeLength == null) options.constantRakeLength = 0;

            if(options.pivotingLimit == null) options.pivotingLimit = options.toolMargin[this.orient()];

            if(options.showOuter == null) options.showOuter = false;
            if(options.limitMaxTickNumber == null) options.limitMaxTickNumber = 0; //0 is unlimited

            var orient = this.orient() == "top" || this.orient() == "bottom" ? HORIZONTAL : VERTICAL;

            if(options.isPivotAuto == null) options.isPivotAuto = orient == VERTICAL;

            if(options.cssFontSize == null) options.cssFontSize = "13px";
            if(options.widthToFontsizeRatio == null) options.widthToFontsizeRatio = .75;
            if(options.heightToFontsizeRatio == null) options.heightToFontsizeRatio = 1.20;
            if(options.widthOfOneDigit == null) options.widthOfOneDigit =
              parseInt(options.cssFontSize) * options.widthToFontsizeRatio;
            if(options.heightOfOneDigit == null) options.heightOfOneDigit =
              parseInt(options.cssFontSize) * options.heightToFontsizeRatio;
            if(options.fitIntoScale == null || options.fitIntoScale == 'pessimistic') options.fitIntoScale = PESSIMISTIC;
            if(options.fitIntoScale == 'optimistic') options.fitIntoScale = OPTIMISTIC;


            meow("********** " + orient + " **********");

            var domain = axis.scale().domain();
            var range = axis.scale().range();
            var lengthDomain = Math.abs(domain[domain.length - 1] - domain[0]);
            var lengthRange = Math.abs(range[range.length - 1] - range[0]);

            var min = d3.min([domain[0], domain[domain.length - 1]]);
            var max = d3.max([domain[0], domain[domain.length - 1]]);
            var bothSidesUsed = (min <= 0 && max >= 0) && options.scaleType != "time";

            var tickValues = options.showOuter ? [min, max] : [];
            var tickValuesMinor = []; //[min, max];
            var ticksNumber = 5;

            function getBaseLog(x, base) {
              if (x == 0 || base == 0) {
                return 0;
              }
              if(base == null) base = options.logBase;
              return Math.log(x) / Math.log(base);
            };

            // estimate the longest formatted label in pixels
            var estLongestLabelLength =
              //take 17 sample values and measure the longest formatted label
              d3.max(d3.range(min, max, (max - min) / 17).concat(max).map(function(d) {
                return options.formatter(d).length
              })) * options.widthOfOneDigit + parseInt(options.cssMarginLeft);

            var pivot = options.isPivotAuto && (
              (estLongestLabelLength + axis.tickPadding() + axis.tickSize() > options.pivotingLimit) && (orient ==
                VERTICAL) ||
              !(estLongestLabelLength + axis.tickPadding() + axis.tickSize() > options.pivotingLimit) && !(orient ==
                VERTICAL)
            );

            var labelsStackOnTop = (orient == HORIZONTAL && pivot || orient == VERTICAL && !pivot);




            // conditions to remove labels altogether
            var labelsJustDontFit = (!labelsStackOnTop && options.heightOfOneDigit > options.pivotingLimit);
            if(options.removeAllLabels) return axis.tickValues([]);

            // return a single tick if have only one point in the domain
            if(min == max) return axis.tickValues([min]).ticks(1).tickFormat(options.formatter);






            // LABELS FIT INTO SCALE
            // measure if all labels in array tickValues can fit into the allotted lengthRange
            // approximationStyle can be OPTIMISTIC or PESSIMISTIC
            // in optimistic style the length of every label is added up and then we check if the total pack of symbols fit
            // in pessimistic style we assume all labels have the length of the longest label from tickValues
            // returns TRUE if labels fit and FALSE otherwise
            var labelsFitIntoScale = function(tickValues, lengthRange, approximationStyle, rescalingLabels) {
              if(tickValues == null || tickValues.length <= 1) return true;
              if(approximationStyle == null) approximationStyle = PESSIMISTIC;
              if(rescalingLabels == null) scaleType = "none";



              if(labelsStackOnTop) {
                //labels stack on top of each other. digit height matters
                return lengthRange >
                  tickValues.length * (
                    options.heightOfOneDigit +
                    parseInt(options.cssMarginTop) +
                    parseInt(options.cssMarginBottom)
                  );
              } else {
                //labels stack side by side. label width matters
                var marginsLR = parseInt(options.cssMarginLeft) + parseInt(options.cssMarginRight);
                var maxLength = d3.max(tickValues.map(function(d) {
                  return options.formatter(d).length
                }));

                // log scales need to rescale labels, so that 9 takes more space than 2
                if(rescalingLabels == "log") {
                  // sometimes only a fragment of axis is used. in this case we want to limit the scope to that fragment
                  // yes, this is hacky and experimental
                  lengthRange = Math.abs(axis.scale()(d3.max(tickValues)) - axis.scale()(d3.min(tickValues)));

                  return lengthRange >
                    d3.sum(tickValues.map(function(d) {
                      return(
                          options.widthOfOneDigit * (approximationStyle == PESSIMISTIC ? maxLength : options.formatter(
                            d).length) + marginsLR
                        )
                        // this is a logarithmic rescaling of labels
                        * (1 + Math.log(d.toString().replace(/([0\.])/g, "")[0])/Math.LN10)
                    }))

                } else {
                  return lengthRange + options.toolMargin.left + options.toolMargin.right >
                    tickValues.length * marginsLR + (approximationStyle == PESSIMISTIC ?
                      options.widthOfOneDigit * tickValues.length * maxLength : 0) + (approximationStyle == OPTIMISTIC ?
                      options.widthOfOneDigit * (
                        tickValues.map(function(d) {
                          return options.formatter(d)
                        }).join("").length
                      ) : 0);
                }
              }
            }





            // COLLISION BETWEEN
            // Check is there is a collision between labels ONE and TWO
            // ONE is a value, TWO can be a value or an array
            // returns TRUE if collision takes place and FALSE otherwise
            var collisionBetween = function(one, two) {
              if(two == null || two.length == 0) return false;
              if(!(two instanceof Array)) two = [two];

              for(var i = 0; i < two.length; i++) {
                if(
                  one != two[i] && one != 0 &&
                  Math.abs(axis.scale()(one) - axis.scale()(two[i])) <
                  (labelsStackOnTop ?
                    (options.heightOfOneDigit) :
                    (options.formatter(one).length + options.formatter(two[i]).length) * options.widthOfOneDigit / 2
                  )
                ) return true;

              }
              return false;
            }

            if(options.scaleType == "genericLog" || options.scaleType == "log") {
              var eps = axis.scale().eps ? axis.scale().eps() : 0;

              var spawnZero = bothSidesUsed ? [0] : [];

              // check if spawn positive is needed. if yes then spawn!
              var spawnPos = max < eps ? [] : (
                d3.range(
                  Math.floor(getBaseLog(Math.max(eps, min))),
                  Math.ceil(getBaseLog(max)),
                  1)
                .concat(Math.ceil(getBaseLog(max)))
                .map(function(d) {
                  return Math.pow(options.logBase, d)
                })
              );

              // check if spawn negative is needed. if yes then spawn!
              var spawnNeg = min > -eps ? [] : (
                d3.range(
                  Math.floor(getBaseLog(Math.max(eps, -max))),
                  Math.ceil(getBaseLog(-min)),
                  1)
                .concat(Math.ceil(getBaseLog(-min)))
                .map(function(d) {
                  return -Math.pow(options.logBase, d)
                })
              );


              // automatic chosing of method if it's not explicitly defined
              if(options.method == null) {
                var coverage = bothSidesUsed ?
                  Math.max(Math.abs(max), Math.abs(min)) / eps :
                  Math.max(Math.abs(max), Math.abs(min)) / Math.min(Math.abs(max), Math.abs(min));
                options.method = 10 <= coverage && coverage <= 1024 ? this.METHOD_DOUBLING : this.METHOD_REPEATING;
              };


              //meow('spawn pos/neg: ', spawnPos, spawnNeg);


              if(options.method == this.METHOD_DOUBLING) {
                var doublingLabels = [];
                if(bothSidesUsed) tickValues.push(0);
                var avoidCollidingWith = [].concat(tickValues);

                // start with the smallest abs number on the scale, rounded to nearest nice power
                //var startPos = max<eps? null : Math.pow(options.logBase, Math.floor(getBaseLog(Math.max(eps,min))));
                //var startNeg = min>-eps? null : -Math.pow(options.logBase, Math.floor(getBaseLog(Math.max(eps,-max))));

                var startPos = max < eps ? null : 4 * spawnPos[Math.floor(spawnPos.length / 2) - 1];
                var startNeg = min > -eps ? null : 4 * spawnNeg[Math.floor(spawnNeg.length / 2) - 1];

                //meow('starter pos/neg: ', startPos, startNeg);

                if(startPos) {
                  for(var l = startPos; l <= max; l *= 2) doublingLabels.push(l);
                }
                if(startPos) {
                  for(var l = startPos / 2; l >= Math.max(min, eps); l /= 2) doublingLabels.push(l);
                }
                if(startNeg) {
                  for(var l = startNeg; l >= min; l *= 2) doublingLabels.push(l);
                }
                if(startNeg) {
                  for(var l = startNeg / 2; l <= Math.min(max, -eps); l /= 2) doublingLabels.push(l);
                }

                doublingLabels = doublingLabels
                  .sort(d3.ascending)
                  .filter(function(d) {
                    return min <= d && d <= max
                  });

                tickValuesMinor = tickValuesMinor.concat(doublingLabels);

                doublingLabels = groupByPriorities(doublingLabels, false); // don't skip taken values

                var tickValues_1 = tickValues;
                for(var j = 0; j < doublingLabels.length; j++) {

                  // compose an attempt to add more axis labels
                  var trytofit = tickValues_1.concat(doublingLabels[j])
                    .filter(function(d) {
                      return !collisionBetween(d, avoidCollidingWith);
                    })
                    .filter(onlyUnique)

                  // stop populating if labels don't fit
                  if(!labelsFitIntoScale(trytofit, lengthRange, PESSIMISTIC, "none")) break;

                  // apply changes if no blocking instructions
                  tickValues = trytofit
                }
              }


              if(options.method == this.METHOD_REPEATING) {

                var spawn = spawnZero.concat(spawnPos).concat(spawnNeg).sort(d3.ascending);

                options.stops.forEach(function(stop, i) {
                  tickValuesMinor = tickValuesMinor.concat(spawn.map(function(d) {
                    return d * stop
                  }));
                });

                spawn = groupByPriorities(spawn);
                var avoidCollidingWith = spawnZero.concat(tickValues);

                var stopTrying = false;

                options.stops.forEach(function(stop, i) {
                  if(i == 0) {
                    for(var j = 0; j < spawn.length; j++) {

                      // compose an attempt to add more axis labels
                      var trytofit = tickValues
                        .concat(spawn[j].map(function(d) {
                          return d * stop
                        }))
                        // throw away labels that collide with "special" labels 0, min, max
                        .filter(function(d) {
                          return !collisionBetween(d, avoidCollidingWith);
                        })
                        .filter(function(d) {
                          return min <= d && d <= max
                        })
                        .filter(onlyUnique);

                      // stop populating if labels don't fit
                      if(!labelsFitIntoScale(trytofit, lengthRange, PESSIMISTIC, "none")) break;

                      // apply changes if no blocking instructions
                      tickValues = trytofit;
                    }

                    //flatten the spawn array
                    spawn = [].concat.apply([], spawn);
                  } else {
                    if(stopTrying) return;

                    // compose an attempt to add more axis labels
                    var trytofit = tickValues
                      .concat(spawn.map(function(d) {
                        return d * stop
                      }))
                      .filter(function(d) {
                        return min <= d && d <= max
                      })
                      .filter(onlyUnique);

                    // stop populating if the new composition doesn't fit
                    if(!labelsFitIntoScale(trytofit, lengthRange, PESSIMISTIC, "log")) {
                      stopTrying = true;
                      return;
                    }
                    // stop populating if the number of labels is limited in options
                    if(tickValues.length > options.limitMaxTickNumber && options.limitMaxTickNumber != 0) {
                      stopTrying = true;
                      return;
                    }

                    // apply changes if no blocking instructions
                    tickValues = trytofit;
                  }
                })


              } //method


            } //logarithmic




            if(options.scaleType == "linear" || options.scaleType == "time") {
              if(bothSidesUsed) tickValues.push(0);
              var avoidCollidingWith = [].concat(tickValues);

              if(labelsStackOnTop){
                  ticksNumber = Math.max(Math.floor(lengthRange / (options.heightOfOneDigit + parseInt(options.cssMarginTop))), 2);
              }else{
                  ticksNumber = Math.max(Math.floor(lengthRange / estLongestLabelLength), 2);
              }

              // limit maximum ticks number
              if(options.limitMaxTickNumber != 0 && ticksNumber > options.limitMaxTickNumber) ticksNumber = options.limitMaxTickNumber;

              var addLabels = axis.scale().ticks.apply(axis.scale(), [ticksNumber])
                .sort(d3.ascending)
                .filter(function(d) {
                  return min <= d && d <= max
                });

              tickValuesMinor = tickValuesMinor.concat(addLabels);

              addLabels = groupByPriorities(addLabels, false);

              var tickValues_1 = tickValues;
              for(var j = 0; j < addLabels.length; j++) {

                // compose an attempt to add more axis labels
                var trytofit = tickValues_1.concat(addLabels[j])
                  .filter(function(d) {
                    return !collisionBetween(d, avoidCollidingWith);
                  })
                  .filter(onlyUnique);

                // stop populating if labels don't fit
                if(!labelsFitIntoScale(trytofit, lengthRange, options.fitIntoScale, "none")) break;

                // apply changes if no blocking instructions
                tickValues = trytofit
              }

              tickValues = tickValues //.concat(addLabels)
                .filter(function(d) {
                  return !collisionBetween(d, avoidCollidingWith);
                })
                .filter(onlyUnique);


            }




            if(tickValues != null && tickValues.length <= 2 && !bothSidesUsed) tickValues = [min, max];

            if(tickValues != null && tickValues.length <= 3 && bothSidesUsed) {
              if(!collisionBetween(0, [min, max])) {
                tickValues = [min, 0, max];
              } else {
                tickValues = [min, max];
              }
            }

            if(tickValues != null) tickValues.sort(function(a, b) {
              return(orient == HORIZONTAL ? -1 : 1) * (axis.scale()(b) - axis.scale()(a))
            });

            if(labelsJustDontFit) tickValues = [];
            tickValuesMinor = tickValuesMinor.filter(function(d) {
              return tickValues.indexOf(d) == -1 && min <= d && d <= max
            });


            meow("final result", tickValues);

            return axis
              .ticks(ticksNumber)
              .tickFormat(options.formatter)
              .tickValues(tickValues)
              .tickValuesMinor(tickValuesMinor)
              .pivot(pivot)
              .repositionLabels(
                repositionLabelsThatStickOut(tickValues, options, orient, axis.scale(), labelsStackOnTop ? "y" : "x")
              );
          };











          // GROUP ELEMENTS OF AN ARRAY, SO THAT...
          // less-prio elements are between the high-prio elements
          // Purpose: enable adding axis labels incrementally, like this for 9 labels:
          // PRIO 1: +--------, concat result: +-------- first we show only 1 label
          // PRIO 2: ----+---+, concat result: +---+---+ then we add 2 more, that are maximally spaced
          // PRIO 3: --+---+--, concat result: +-+-+-+-+ then we fill spaces with 2 more labels
          // PRIO 4: -+-+-+-+-, concat result: +++++++++ then we fill the remaing spaces and show all labels
          // exception: zero jumps to the front, if it's on the list
          // example1: [1 2 3 4 5 6 7] --> [[1][4 7][2 3 5 6]]
          // example2: [1 2 3 4 5 6 7 8 9] --> [[1][5 9][3 7][2 4 6 8]]
          // example3: [-4 -3 -2 -1 0 1 2 3 4 5 6 7] --> [[0][-4][2][-1 5][-3 -2 1 3 4 6 7]]
          // inputs:
          // array - the source array to be processed. Only makes sense if sorted
          // removeDuplicates - return incremental groups (true, default), or return concatinated result (false)
          // returns:
          // the nested array
          function groupByPriorities(array, removeDuplicates) {
            if(removeDuplicates == null) removeDuplicates = true;

            var result = [];
            var taken = [];

            //zero is an exception, if it's present we manually take it to the front
            if(array.indexOf(0) != -1) {
              result.push([0]);
              taken.push(array.indexOf(0));
            }

            for(var k = array.length; k >= 1; k = k < 4 ? k - 1 : k / 2) {
              // push the next group of elements to the result
              result.push(array.filter(function(d, i) {
                if(i % Math.floor(k) == 0 && (taken.indexOf(i) == -1 || !removeDuplicates)) {
                  taken.push(i);
                  return true;
                }
                return false;
              }));
            }

            return result;
          }








          // REPOSITION LABELS THAT STICK OUT
          // Purpose: the outer labels can easily be so large, they stick out of the allotted area
          // Example:
          // Label is fine:    Label sticks out:    Label sticks out more:    Solution - label is shifted:
          //      12345 |           1234|                123|5                   12345|
          // _______.   |      _______. |           _______.|                 _______.|
          //
          // this is what the function does on the first step (only outer labels)
          // on the second step it shifts the inner labels that start to overlap with the shifted outer labels
          //
          // requires tickValues array to be sorted from tail-first
          // tail means left or bottom, head means top or right
          //
          // dimension - which dimension requires shifting
          // X if labels stack side by side, Y if labels stack on top of one another
          //
          // returns the array of recommended {x,y} shifts

          function repositionLabelsThatStickOut(tickValues, options, orient, scale, dimension) {
            if(tickValues == null) return null;

            // make an abstraction layer for margin sizes
            // tail means left or bottom, head means top or right
            var margin =
              orient == VERTICAL ? {
                head: options.toolMargin.top,
                tail: options.toolMargin.bottom
              } : {
                head: options.toolMargin.right,
                tail: options.toolMargin.left
              };


            var result = {};


            // STEP 1:
            // for outer labels: avoid sticking out from the tool margin
            tickValues.forEach(function(d, i) {
              if(i != 0 && i != tickValues.length - 1) return;

              // compute the influence of the axis head
              var repositionHead = margin.head + options.bump 
                + (orient == HORIZONTAL ? 1 : 0) * d3.max(scale.range()) 
                - (orient == HORIZONTAL ? 0 : 1) * d3.min(scale.range()) 
                + (orient == HORIZONTAL ? -1 : 1) * scale(d) 
                - (dimension == "x") * options.formatter(d).length * options.widthOfOneDigit / 2 
                - (dimension == "y") * options.heightOfOneDigit / 2
                // we may consider or not the label margins to give them a bit of spacing from the edges
                - (dimension == "x") * parseInt(options.cssMarginRight) 
                - (dimension == "y") * parseInt(options.cssMarginTop);

              // compute the influence of the axis tail
              var repositionTail = Math.min(margin.tail, options.widthOfOneDigit) + options.bump 
                + (orient == VERTICAL ? 1 : 0) * d3.max(scale.range()) 
                - (orient == VERTICAL ? 0 : 1) * d3.min(scale.range()) 
                + (orient == VERTICAL ? -1 : 1) * scale(d) - (dimension == "x") 
                * options.formatter(d).length * options.widthOfOneDigit / 2 - (dimension == "y") * options.heightOfOneDigit / 2
                // we may consider or not the label margins to give them a bit of spacing from the edges
                - (dimension == "x") * parseInt(options.cssMarginLeft) 
                - (dimension == "y") * parseInt(options.cssMarginBottom);

              // apply limits in order to cancel repositioning of labels that are good
              if(repositionHead > 0) repositionHead = 0;
              if(repositionTail > 0) repositionTail = 0;

              // add them up with appropriate signs, save to the axis
              result[i] = {
                x: 0,
                y: 0
              };
              result[i][dimension] = (dimension == "y" && orient == VERTICAL ? -1 : 1) * (repositionHead -
                repositionTail);
            });


            // STEP 2:
            // for inner labels: avoid collision with outer labels
            tickValues.forEach(function(d, i) {
              if(i == 0 || i == tickValues.length - 1) return;

              // compute the influence of the head-side outer label
              var repositionHead =
                // take the distance between head and the tick at hand
                Math.abs(scale(d) - scale(tickValues[tickValues.length - 1]))
              
                // substract the shift of the head TODO: THE SIGN CHOICE HERE MIGHT BE WRONG. NEED TO TEST ALL CASES
                - (dimension == "y") * (orient == HORIZONTAL ? -1 : 1) * result[tickValues.length - 1][dimension]
                - (dimension == "x") * (orient == HORIZONTAL ? 1 : -1) * result[tickValues.length - 1][dimension]
              
                // substract half-length of the overlapping labels
                - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(d).length 
                - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(tickValues[tickValues.length - 1]).length 
                - (dimension == "y") * options.heightOfOneDigit * .7 //TODO remove magic constant - relation of actual font height to BBox-measured height
                
                // we may consider or not the label margins to give them a bit of spacing from the edges
                - (dimension == "x") * parseInt(options.cssMarginLeft) 
                - (dimension == "y") * parseInt(options.cssMarginBottom);
                
              // compute the influence of the tail-side outer label
              var repositionTail =
                // take the distance between tail and the tick at hand
                Math.abs(scale(d) - scale(tickValues[0]))
              
                // substract the shift of the tail TODO: THE SIGN CHOICE HERE MIGHT BE WRONG. NEED TO TEST ALL CASES
                - (dimension == "y") * (orient == VERTICAL ? -1 : 1) * result[0][dimension]
                - (dimension == "x") * (orient == VERTICAL ? 1 : -1) * result[0][dimension]
              
                // substract half-length of the overlapping labels
                - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(d).length 
                - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(tickValues[0]).length 
                - (dimension == "y") * options.heightOfOneDigit * .7 //TODO remove magic constant - relation of actual font height to BBox-measured height
              
                // we may consider or not the label margins to give them a bit of spacing from the edges
                - (dimension == "x") * parseInt(options.cssMarginLeft) 
                - (dimension == "y") * parseInt(options.cssMarginBottom);

              // apply limits in order to cancel repositioning of labels that are good
              if(repositionHead > 0) repositionHead = 0;
              if(repositionTail > 0) repositionTail = 0;

              // add them up with appropriate signs, save to the axis
              result[i] = {
                x: 0,
                y: 0
              };
              result[i][dimension] = (dimension == "y" && orient == VERTICAL ? -1 : 1) * (repositionHead -
                repositionTail);
            });


            return result;
          } // function repositionLabelsThatStickOut()




          axis.copy = function() {
            return d3_axis_smart(d3.svg.axis());
          };

          return d3.rebind(axis, _super,
            "scale", "orient", "ticks", "tickValues", "tickFormat",
            "tickSize", "innerTickSize", "outerTickSize", "tickPadding",
            "tickSubdivide"
          );


          function meow(l1, l2, l3, l4, l5) {
            if(!axis.labelerOptions().isDevMode) return;
            if(l5 != null) {
              console.log(l1, l2, l3, l4, l5);
              return;
            }
            if(l4 != null) {
              console.log(l1, l2, l3, l4);
              return;
            }
            if(l3 != null) {
              console.log(l1, l2, l3);
              return;
            }
            if(l2 != null) {
              console.log(l1, l2);
              return;
            }
            if(l1 != null) {
              console.log(l1);
              return;
            }
          }

        }(d3.svg.axis());

      };

      //BAR CHART COMPONENT
      var BarComponent = Component.extend({

        /**
         * Initializes the component (Bar Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The options passed to the component
         * @param {Object} context The component's parent
         */
        init: function(config, context) {
          this.name = 'barchart';
          this.template = 'barchart.html';

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];

          var _this = this;

          this.model_binds = {
            "change:time.value": function(evt) {
              _this.model.marker.getFrame(_this.model.time.value, function(values) {
              _this.values = values;
              _this.updateEntities();
              });
            },
            'change:marker': function(evt, path) {
              if(!_this._readyOnce) return;
              if(path.indexOf("color.palette") > -1) return;
              if(path.indexOf("which") > -1 || path.indexOf("use") > -1) return;

              _this.ready();
            },
            'change:marker.color.palette': debounce(function(evt) {
              if(!_this._readyOnce) return;
              _this.updateEntities();
            }, 200)
          };

          //contructor is the same as any component
          this._super(config, context);

          this.xScale = null;
          this.yScale = null;
          this.cScale = d3.scale.category10();

          this.xAxis = axisSmart();
          this.yAxis = axisSmart();
        },

        /**
         * DOM is ready
         */
        readyOnce: function() {
          this.element = d3.select(this.element);

          this.graph = this.element.select('.vzb-bc-graph');
          this.yAxisEl = this.graph.select('.vzb-bc-axis-y');
          this.xAxisEl = this.graph.select('.vzb-bc-axis-x');
          this.yTitleEl = this.graph.select('.vzb-bc-axis-y-title');
          this.xTitleEl = this.graph.select('.vzb-bc-axis-x-title');
          this.bars = this.graph.select('.vzb-bc-bars');
          this.year = this.element.select('.vzb-bc-year');

          var _this = this;
          this.on("resize", function() {
              _this.updateEntities();
          });
        },

        /*
         * Both model and DOM are ready
         */
        ready: function() {
          var _this = this;
          this.model.marker.getFrame(this.model.time.value, function(values) {
            _this.values = values;
            _this.updateIndicators();
            _this.resize();
            _this.updateEntities();
          });

        },

        /**
         * Changes labels for indicators
         */
        updateIndicators: function() {

          var _this = this;
          this.translator = this.model.language.getTFunction();
          this.duration = this.model.time.delayAnimations;

          var titleStringY = this.translator("indicator/" + this.model.marker.axis_y.which);
          var titleStringX = this.translator("indicator/" + this.model.marker.axis_x.which);

          var yTitle = this.yTitleEl.selectAll("text").data([0]);
          yTitle.enter().append("text");
          yTitle
            .attr("y", "-6px")
            .attr("x", "-9px")
            .attr("dx", "-0.72em")
            .text(titleStringY)
            .on("click", function() {
              //TODO: Optimise updateView
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("axis_y")
                .alignX("left")
                .alignY("top")
                .updateView()
                .toggle();
            });

          var xTitle = this.xTitleEl.selectAll("text").data([0]);
          xTitle.enter().append("text");
          xTitle
            .attr("y", "-3px")
            .attr("dx", "-0.72em")
            .text(titleStringX)
            .on("click", function() {
              //TODO: Optimise updateView
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("axis_x")
                .alignY("bottom")
                .alignX("center")
                .updateView()
                .toggle();
            });

          this.yScale = this.model.marker.axis_y.getScale();
          this.xScale = this.model.marker.axis_x.getScale();
          this.cScale = this.model.marker.color.getScale();

          var xFormatter = this.model.marker.axis_x.which == "geo.world_4region"?
              function(x){return _this.translator("entity/geo.world_4region/" + x)}
              :
              _this.model.marker.axis_x.getTickFormatter();

          this.yAxis.tickFormat(_this.model.marker.axis_y.getTickFormatter());
          this.xAxis.tickFormat(xFormatter);

        },

        /**
         * Updates entities
         */
        updateEntities: function() {

          var _this = this;
          var time = this.model.time;
          var timeDim = time.getDimension();
          var entityDim = this.model.entities.getDimension();
          var duration = (time.playing) ? time.delayAnimations : 0;
          var filter = {};
          filter[timeDim] = time.value;
          var items = this.model.marker.getKeys(filter);

          this.entityBars = this.bars.selectAll('.vzb-bc-bar')
            .data(items);

          //exit selection
          this.entityBars.exit().remove();

          //enter selection -- init circles
          this.entityBars.enter().append("rect")
            .attr("class", "vzb-bc-bar")
            .on("mousemove", function(d, i) {})
            .on("mouseout", function(d, i) {})
            .on("click", function(d, i) {});

          //positioning and sizes of the bars

          var bars = this.bars.selectAll('.vzb-bc-bar');
          var barWidth = this.xScale.rangeBand();

          this.bars.selectAll('.vzb-bc-bar')
            .attr("width", barWidth)
            .attr("fill", function(d) {
              return _this.cScale(_this.values.color[d[entityDim]]);
            })
            .attr("x", function(d) {
              return _this.xScale(_this.values.axis_x[d[entityDim]]);
            })
            .transition().duration(duration).ease("linear")
            .attr("y", function(d) {
              return _this.yScale(_this.values.axis_y[d[entityDim]]);
            })
            .attr("height", function(d) {
              return _this.height - _this.yScale(_this.values.axis_y[d[entityDim]]);
            });
            this.year.text(this.model.time.timeFormat(this.model.time.value));
        },

        /**
         * Executes everytime the container or vizabi is resized
         * Ideally,it contains only operations related to size
         */
        resize: function() {

          var _this = this;

          this.profiles = {
            "small": {
              margin: {
                top: 30,
                right: 20,
                left: 40,
                bottom: 50
              },
              padding: 2,
              minRadius: 2,
              maxRadius: 40
            },
            "medium": {
              margin: {
                top: 30,
                right: 60,
                left: 60,
                bottom: 60
              },
              padding: 2,
              minRadius: 3,
              maxRadius: 60
            },
            "large": {
              margin: {
                top: 30,
                right: 60,
                left: 60,
                bottom: 80
              },
              padding: 2,
              minRadius: 4,
              maxRadius: 80
            }
          };

          this.activeProfile = this.profiles[this.getLayoutProfile()];
          var margin = this.activeProfile.margin;


          //stage
          this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
            
          if(this.height<=0 || this.width<=0) return warn("Bar chart resize() abort: vizabi container is too little or has display:none");
          
          this.graph
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          //update scales to the new range
          if(this.model.marker.axis_y.scaleType !== "ordinal") {
            this.yScale.range([this.height, 0]);
          } else {
            this.yScale.rangePoints([this.height, 0], _this.activeProfile.padding).range();
          }
          if(this.model.marker.axis_x.scaleType !== "ordinal") {
            this.xScale.range([0, this.width]);
          } else {
            this.xScale.rangePoints([0, this.width], _this.activeProfile.padding).range();
          }

          //apply scales to axes and redraw
          this.yAxis.scale(this.yScale)
            .orient("left")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_y.scaleType,
              timeFormat: this.model.time.timeFormat,
              toolMargin: {top: 5, right: margin.right, left: margin.left, bottom: margin.bottom},
              limitMaxTickNumber: 6
            });

          this.xAxis.scale(this.xScale)
            .orient("bottom")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_x.scaleType,
              timeFormat: this.model.time.timeFormat,
              toolMargin: margin,
              constantRakeLength: this.width
            });

          this.xAxisEl.attr("transform", "translate(0," + this.height + ")")
            .call(this.xAxis);

          this.xScale.rangeRoundBands([0, this.width], .1, .2);

          this.yAxisEl.call(this.yAxis);
          this.xAxisEl.call(this.xAxis);

          var xAxisSize = this.xAxisEl.node().getBoundingClientRect();
          var xTitleSize = this.xTitleEl.node().getBoundingClientRect();
          var xTitleXPos = xAxisSize.width / 2 - xTitleSize.width / 2;
          var xTitleYPos = this.height + xAxisSize.height + xTitleSize.height;
          this.xTitleEl.attr("transform", "translate(" + xTitleXPos + "," + xTitleYPos + ")");
          this.year.attr('x', this.width).attr('y', 0);
        }
      });

      /*!
       * VIZABI OPTIONSBUTTONLIST
       * Reusable optionsbuttonlist component
       */

      //default existing buttons
      var class_active$2 = "vzb-active";
      // var class_active_locked = "vzb-active-locked";
      // var class_expand_dialog = "vzb-dialog-side";
      // var class_hide_btn = "vzb-dialog-side-btn";
      // var class_unavailable = "vzb-unavailable";
      // var class_vzb_fullscreen = "vzb-force-fullscreen";
      // var class_container_fullscreen = "vzb-container-fullscreen";

      var ZoomButtonList = Component.extend({

        /**
         * Initializes the buttonlist
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, context) {

          //set properties
          var _this = this;
          this.name = 'gapminder-zoombuttonlist';

          this.model_expects = [{
            name: "state",
            type: "model"
          }, {
            name: "ui",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];
          
          this._available_buttons = {
            'arrow': {
              title: "buttons/cursorarrow",
              icon: "cursorArrow",
              func: this.toggleCursorMode.bind(this),
              required: true,
              statebind: "ui.cursorMode",
              statebindfunc: this.setCursorMode.bind(this)
            },
            'plus': {
              title: "buttons/cursorplus",
              icon: "cursorPlus",
              func: this.toggleCursorMode.bind(this),
              required: true,
              statebind: "ui.cursorMode",
              statebindfunc: this.setCursorMode.bind(this)
            },
            'minus': {
              title: "buttons/cursorminus",
              icon: "cursorMinus",
              func: this.toggleCursorMode.bind(this),
              required: true,
              statebind: "ui.cursorMode",
              statebindfunc: this.setCursorMode.bind(this)
            },
            'hundredpercent': {
              title: "buttons/hundredpercent",
              icon: "hundredPercent",
              func: this.toggleHundredPercent.bind(this),
              required: true
              // ,
              // statebind: "ui.chart.trails",
              // statebindfunc: this.setBubbleTrails.bind(this)
            }
          }
          
          this.model_binds = {};
          
          if(config.ui.cursorMode == undefined) {
            config.ui.set('cursorMode', null, false, false);
          }

          Object.keys(this._available_buttons).forEach(function(buttonId) {
            var button = _this._available_buttons[buttonId];
            if(button && button.statebind) {
              _this.model_binds['change:' + button.statebind] = function(evt) {
                button.statebindfunc(buttonId, evt.source.value);
              }
            }
          });

          this._super(config, context);
          
        },
        
        readyOnce: function() {
          var _this = this;
          
          this.element = d3.select(this.placeholder);
          this.element.selectAll("div").remove();

          this._addButtons(Object.keys(this._available_buttons), []);
          this.setCursorMode('arrow');

        },  
           
        /*
         * adds buttons configuration to the components and template_data
         * @param {Array} button_list list of buttons to be added
         */
        _addButtons: function(button_list, button_expand) {
          var _this = this;
          this._components_config = [];
          var details_btns = [];
          if(!button_list.length) return;
          //add a component for each button
          for(var i = 0; i < button_list.length; i++) {

            var btn = button_list[i];
            var btn_config = this._available_buttons[btn];

            //add template data
            var d = (btn_config) ? btn : "_default";
            var details_btn = clone(this._available_buttons[d]);

            details_btn.id = btn;
            details_btn.icon = iconset[details_btn.icon];
            details_btns.push(details_btn);
          };

          var t = this.getTranslationFunction(true);

          this.element.selectAll('button').data(details_btns)
            .enter().append("button")
            .attr('class', function (d) {
              var cls = 'vzb-buttonlist-btn';
              if (button_expand.length > 0) {
                if (button_expand.indexOf(d.id) > -1) {
                  cls += ' vzb-dialog-side-btn';
                }
              }

              return cls;
            })
            .attr('data-btn', function(d) {
              return d.id;
            })
            .html(function(btn) {
              return "<span class='vzb-buttonlist-btn-icon fa'>" +
                btn.icon + "</span><span class='vzb-buttonlist-btn-title'>" +
                t(btn.title) + "</span>";
            });

          var buttons = this.element.selectAll(".vzb-buttonlist-btn");

          //clicking the button
          buttons.on('click', function() {

            d3.event.preventDefault();
            d3.event.stopPropagation();
            
            var id = d3.select(this).attr("data-btn");
            _this.proceedClick(id);
          });

        },
        
        proceedClick: function(id) {
          var _this = this;
          var btn = _this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']"),
            classes = btn.attr("class"),
            btn_config = _this._available_buttons[id];

          if(btn_config && btn_config.func) {
            btn_config.func(id);
          } else {
            var btn_active = classes.indexOf(class_active$2) === -1;

            btn.classed(class_active$2, btn_active);
            var evt = {};
            evt['id'] = id;
            evt['active'] = btn_active;
            _this.trigger('click', evt);
          }    
        },
        
        setButtonActive: function(id, boolActive) {
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

          btn.classed(class_active$2, boolActive);
        },
        
        toggleCursorMode: function(id) {
          var value = id;
          this.model.ui.set('cursorMode', value, false, false);
        },
        
        setCursorMode: function(id) {
          var value = this.model.ui.cursorMode ? this.model.ui.cursorMode : 'arrow';
          this.element.selectAll(".vzb-buttonlist-btn")
            .classed(class_active$2, function(d) {
              return d.id == value;
            }); 
        },
        
        toggleHundredPercent: function(id) {
          this.root.trigger("resetZoom");
        }
        
      });

      var MENU_HORIZONTAL = 1;
      var MENU_VERTICAL = 2;

      //css custom classes
      var css = {
        wrapper: 'vzb-treemenu-wrap',
        wrapper_outer: 'vzb-treemenu-wrap-outer',
        background: 'vzb-treemenu-background',
        close: 'vzb-treemenu-close',
        search: 'vzb-treemenu-search',
        list: 'vzb-treemenu-list',
        list_outer: 'vzb-treemenu-list-outer',
        list_item: 'vzb-treemenu-list-item',
        list_item_leaf: 'vzb-treemenu-list-item-leaf',
        leaf: 'vzb-treemenu-leaf',
        leaf_content: 'vzb-treemenu-leaf-content',
        leaf_content_item: 'vzb-treemenu-leaf-content-item',
        leaf_content_item_title: 'vzb-treemenu-leaf-content-item-title',
        leaf_content_item_descr: 'vzb-treemenu-leaf-content-item-descr',
        hasChild: 'vzb-treemenu-list-item-children',
        list_item_label: 'vzb-treemenu-list-item-label',
        list_top_level: 'vzb-treemenu-list-top',
        search_wrap: 'vzb-treemenu-search-wrap',
        isSpecial: 'vzb-treemenu-list-item-special',
        hidden: 'vzb-hidden',
        title: 'vzb-treemenu-title',
        scaletypes: 'vzb-treemenu-scaletypes',
        scaletypesDisabled: 'vzb-treemenu-scaletypes-disabled',
        scaletypesActive: 'vzb-treemenu-scaletypes-active',
        alignYt: 'vzb-align-y-top',
        alignYb: 'vzb-align-y-bottom',
        alignXl: 'vzb-align-x-left',
        alignXr: 'vzb-align-x-right',
        alignXc: 'vzb-align-x-center',
        menuHorizontal: 'vzb-treemenu-horizontal',
        menuVertical: 'vzb-treemenu-vertical',
        absPosVert: 'vzb-treemenu-abs-pos-vert',
        absPosHoriz: 'vzb-treemenu-abs-pos-horiz',
        menuOpenLeftSide: 'vzb-treemenu-open-left-side',
        noTransition: 'notransition'
      };

      //options and globals
      var OPTIONS$3 = {
        MOUSE_LOCS: [], //contains last locations of mouse
        MOUSE_LOCS_TRACKED: 3, //max number of locations of mouse
        DELAY: 200, //amazons multilevel delay
        TOLERANCE: 150, //this parameter is used for controlling the angle of multilevel dropdown
        LAST_DELAY_LOC: null, //this is cached location of mouse, when was a delay
        TIMEOUT: null, //timeout id
        SEARCH_PROPERTY: 'id', //property in input data we we'll search by
        SUBMENUS: 'children', //property for submenus (used by search)
        SEARCH_MIN_STR: 1, //minimal length of query string to start searching
        RESIZE_TIMEOUT: null, //container resize timeout
        MOBILE_BREAKPOINT: 400, //mobile breakpoint
        CURRENT_PATH: [], //current active path
        MIN_COL_WIDTH: 60, //minimal column size
        MENU_DIRECTION: MENU_HORIZONTAL,
        MAX_MENU_WIDTH: 320,
        MENU_OPEN_LEFTSIDE: false
      };

      var Menu = Class.extend({
        init: function (parent, menu) {
          var _this = this;
          this.parent = parent;
          this.entity = menu;
          this.width = OPTIONS$3.MIN_COL_WIDTH;
          this.direction = OPTIONS$3.MENU_DIRECTION;
          this._setDirectionClass();
          this.menuItems = [];
          var menuItemsHolder;
          
          if(this.entity.empty()) return this;

          this.entity.each(function() {
            menuItemsHolder = d3.selectAll(this.childNodes).filter(function() {
              return d3.select(this).classed(css.list);
            });
          });
          if(menuItemsHolder.empty()) menuItemsHolder = this.entity;
          menu.selectAll('.' + css.list_item)
            .filter(function() {
              return this.parentNode == menuItemsHolder.node();
            })
            .each(function() {
              _this.addSubmenu(d3.select(this));
            });
          return this;
        },
        setWidth: function(width, recursive, immediate) {
          if (this.width != width && this.entity.node()) {
            this.width = width;
            if ((this.entity.classed(css.list_top_level) || this.entity.classed('active')) && this.direction == MENU_HORIZONTAL) {
              if(!immediate) {
                this.entity.transition()
                  .delay(0)
                  .duration(100)
                  .style('width', this.width + "px")
              } else {
                this.entity.style('width', this.width + "px");
              }
            }
            if (this.entity.classed(css.list_top_level)) {
              this.entity.selectAll('.' + css.leaf).style('width', this.width - 1 + "px");
            }
            if (recursive) {
              for (var i = 0; i < this.menuItems.length; i++) {
                this.menuItems[i].setWidth(this.width, recursive, immediate);
              }
            }
            return this;
          }
        },
        /**
         * configure menu type (horizontal or vertical)
         * @param direction MENU_HORIZONTAL or MENU_VERTICAL
         * @param recursive change direction over menu sublevels
         * @returns {Menu}
         */
        setDirection: function(direction, recursive) {
          this.direction = direction;
          this.entity
            .style('width', '')
            .style('height', '');
          if (recursive) {
            for (var i = 0; i < this.menuItems.length; i++) {
              this.menuItems[i].setDirection(this.direction, recursive);
            }
          }
          this._setDirectionClass();
          return this;
        },
        _setDirectionClass: function() {
          if (this.direction == MENU_HORIZONTAL) {
            this.entity.classed(css.menuVertical, false);
            this.entity.classed(css.menuHorizontal, true);
          } else {
            this.entity.classed(css.menuHorizontal, false);
            this.entity.classed(css.menuVertical, true);
          }
        },
        addSubmenu: function(item) {
          this.menuItems.push(new MenuItem(this, item))
        },
        open: function() {
          var _this = this;
          if (!this.isActive()) {
            _this.parent.parentMenu.openSubmenuNow = true;
            this.closeNeighbors(function() {
              if (_this.direction == MENU_HORIZONTAL) {
                _this._openHorizontal();
                _this.calculateMissingWidth(0);
              } else {
                _this._openVertical();
              }
            });
            _this.parent.parentMenu.openSubmenuNow = false;      
          }
          return this;
        },
        /**
         * recursively calculate missed width for last menu level
         * @param width
         * @param cb
         */
        calculateMissingWidth: function(width, cb) {
          var _this = this;
          if (this.entity.classed(css.list_top_level)) {
            if (width > OPTIONS$3.MAX_MENU_WIDTH) {
              if (typeof cb === "function") cb(width - OPTIONS$3.MAX_MENU_WIDTH);
            }
          } else {
            this.parent.parentMenu.calculateMissingWidth(width + this.width, function(widthToReduce) {
              if (widthToReduce > 0) {
                _this.reduceWidth(widthToReduce, function(newWidth) {
                  if (typeof cb === "function") cb(newWidth); // callback is not defined if it is emitted from this level
                });
              } else if (typeof cb === "function") cb(widthToReduce);
            });
          }
        },
        /**
         * restore width (if it was reduced before)
         * @param width
         * @param isClosedElement (parameter for check if curent element emit this action)
         * @param cb
         */
        restoreWidth: function(width, isClosedElement, cb) {
          var _this = this;
          if (isClosedElement) {
            this.parent.parentMenu.restoreWidth(width, false, cb);
          } else if (width <= 0) {
            if (typeof cb === "function") cb();
          } else if (!this.entity.classed(css.list_top_level)) {
            var currentElementWidth =  this.entity.node().offsetWidth;
            var newElementWidth = Math.min(width, _this.width);
            if (currentElementWidth < newElementWidth) {
              var duration = 250*(currentElementWidth / newElementWidth);
              this.entity.transition()
                .delay(0)
                .duration(duration)
                .style('width', newElementWidth + "px")
                .each('end', function() {
                });
              _this.parent.parentMenu.restoreWidth(width - newElementWidth, false, cb);
            } else {
              this.parent.parentMenu.restoreWidth(width, false, cb);
            }
          } else {
            if (typeof cb === "function") cb();
          }
        },
        /**
         * made element narrower to free space for other element
         * @param width
         * @param cb
         */
        reduceWidth: function(width, cb) {
          var _this = this;
          var currWidth = this.entity.node().offsetWidth;

          if (currWidth <= OPTIONS$3.MIN_COL_WIDTH) {
            cb(width - _this.width + currWidth);
          } else {

            var newElementWidth = Math.max(OPTIONS$3.MIN_COL_WIDTH, _this.width - width);
            var duration = 250 / (_this.width / newElementWidth);
            this.entity.transition()
              .delay(0)
              .duration(duration)
              .style('width', newElementWidth + "px")
              .each('end', function() {
                cb(width - _this.width + newElementWidth);
              });
          }
        },
        _openHorizontal: function() {
          var _this = this;
          _this.entity.classed('active', true)
            .transition()
            .delay(0)
            .duration(250)
            .style('width', _this.width + "px")
            .each('end', function() {
              _this.marqueeToggle(true);
            });
        },
        _openVertical: function() {
          var _this = this;
          _this.entity.style('height','0px');
          _this.entity.transition()
            .delay(0)
            .duration(250)
            .style('height', (36 * _this.menuItems.length) + "px")
            .each('end', function() {
              _this.entity.style('height', 'auto');
              _this.marqueeToggle(true);
              _this.scrollToFitView();
            });
          _this.entity.classed('active', true);
        },
        closeAllChildren: function(cb) {
          var callbacks = 0;
          for (var i = 0; i < this.menuItems.length; i++) {
            if (this.menuItems[i].isActive()) {
              ++callbacks;
              this.menuItems[i].submenu.close(function() {
                if (--callbacks == 0) {
                  if (typeof cb === "function") cb();
                }
              });
            }
          }
          if (callbacks == 0) {
            if (typeof cb === "function") cb();
          }
        },
        closeNeighbors: function(cb) {
          if (this.parent) {
            this.parent.closeNeighbors(cb);
          } else {
            cb();
          }
        },
        close: function(cb) {
          var _this = this;
          this.closeAllChildren(function() {
            if (_this.direction == MENU_HORIZONTAL) {
              _this._closeHorizontal(cb);
            } else {
              _this._closeVertical(cb);
            }
          })
        },
        _closeHorizontal: function(cb) {
          var elementWidth = this.entity.node().offsetWidth;
          var _this = this;
          var openSubmenuNow = _this.parent.parentMenu.openSubmenuNow;
          _this.entity.transition()
            .delay(0)
            .duration(20)
            .style('width', 0 + "px")
            .each('end', function() {
              _this.marqueeToggle(false);
              _this.entity.classed('active', false);
              if(!openSubmenuNow) {
                _this.restoreWidth(OPTIONS$3.MAX_MENU_WIDTH, true, function() {
                  if (typeof cb === "function") cb();
                });
              } else {
                if (typeof cb === "function") cb();
              }
            });
        },
        _closeVertical: function(cb) {
          var _this = this;
          _this.entity
            .transition()
            .delay(0)
            .duration(100)
            .style('height', 0 + "px")
            .each('end', function() {
              _this.marqueeToggle(false);
              _this.entity.classed('active', false);
              if (typeof cb === "function") cb();
            });
        },
        isActive: function() {
          return this.entity.classed('active');
        },
        marqueeToggle: function(toggle) {
          for (var i = 0; i < this.menuItems.length; i++) {
            this.menuItems[i].marqueeToggle(toggle);
          }
        },
        marqueeToggleAll: function(toggle) {
          for (var i = 0; i < this.menuItems.length; i++) {
            this.menuItems[i].marqueeToggleAll(toggle);
          }
        },
        findItemByName: function(name) {
          for (var i = 0; i < this.menuItems.length; i++) {
            if(this.menuItems[i].entity.select('.' + css.list_item_label).text() == name) {
              return this.menuItems[i];
            }
            if(this.menuItems[i].submenu) {
              var item = this.menuItems[i].submenu.findItemByName(name);
              if(item) return item;
            }
          }
          return null;
        },
        getTopMenu: function() {
          if (this.parent) {
            return this.parent.parentMenu.getTopMenu();
          } else {
            return this;
          }
        },

        scrollToFitView: function() {
          var treeMenuNode = this.getTopMenu().entity.node().parentNode;
          var parentItemNode = this.entity.node().parentNode;
          var menuRect = treeMenuNode.getBoundingClientRect();
          var itemRect = parentItemNode.getBoundingClientRect();
          var viewportItemTop = itemRect.top - menuRect.top;
          if (viewportItemTop + itemRect.height > menuRect.height) {
            var newItemTop = (itemRect.height > menuRect.height) ?
              (menuRect.height - 10) : (itemRect.height + 10);

            var newScrollTop = treeMenuNode.scrollTop + newItemTop - menuRect.height + viewportItemTop;     

            var scrollTopTween = function(scrollTop) {
              return function() {
                var i = d3.interpolateNumber(this.scrollTop, scrollTop);
                return function(t) { this.scrollTop = i(t); };
              };
            }

            d3.select(treeMenuNode).transition().duration(20)
            .tween("scrolltoptween", scrollTopTween(newScrollTop));
            
            //treeMenuNode.scrollTop = scrollTop;
          }

        }

      });

      var MenuItem = Class.extend({
        init: function (parent, item) {
          var _this = this;
          this.parentMenu = parent;
          this.entity = item;
          var submenu = item.select('.' + css.list_outer);
          if (submenu.node()) {
            this.submenu = new Menu(this, submenu);
          }
          var label = this.entity.select('.' + css.list_item_label).on('mouseenter', function() {
            if(isTouchDevice()) return;
            if (_this.parentMenu.direction == MENU_HORIZONTAL) {
              _this.openSubmenu();
              _this.marqueeToggle(true);
            }
          }).on('click.item', function() {
            if(isTouchDevice()) return;
            d3.event.stopPropagation();
            if(_this.parentMenu.direction == MENU_HORIZONTAL) {
              _this.openSubmenu();
            } else {
              var view = d3.select(this);
              //only for leaf nodes
              if(!view.attr("children")) return;
              _this.toggleSubmenu();
            }
          }).onTap(function(evt) {
            d3.event.stopPropagation();
            if(_this.parentMenu.direction == MENU_VERTICAL) {
              var view = _this.entity.select('.' + css.list_item_label);
              //only for leaf nodes
              if(!view.attr("children")) return;
            }
            _this.toggleSubmenu();
          });
          return this;
        },
        setWidth: function(width, recursive, immediate) {
          if (this.submenu && recursive) {
            this.submenu.setWidth(width, recursive, immediate);
          }
          return this;
        },
        setDirection: function(direction, recursive) {
          if (this.submenu && recursive) {
            this.submenu.setDirection(direction, recursive);
          }
          return this;
        },
        toggleSubmenu: function() {
          if (this.submenu) {
            if (this.submenu.isActive()) {
              this.submenu.close();
            } else {
              this.submenu.open();
            }
          }
        },
        openSubmenu: function() {
          if (this.submenu) {
            this.submenu.open();
          } else {
            this.closeNeighbors();
          }
        },
        closeNeighbors: function(cb) {
          this.parentMenu.closeAllChildren(cb);
        },
        isActive: function() {
          return this.submenu && this.submenu.isActive();
        },
        marqueeToggleAll: function(toggle) {
          var _this = this;
          var labels = this.entity.selectAll('.' + css.list_item_label);
          labels.each(function() {
            var label = d3.select(this).select('span');
            var parent = d3.select(this.parentNode);
            parent.classed('marquee', false);
            label.style("left", '');
            if(toggle) {
              if(label.node().scrollWidth > label.node().offsetWidth) {
                label.attr("data-content", label.text());
                var space = 30;
                label.style("left", (-space - label.node().scrollWidth) + 'px');
                parent.classed('marquee', true);
              }
            }
          });
        },
        marqueeToggle: function(toggle) {
          var label = this.entity.select('.' + css.list_item_label).select('span');
          this.entity.classed('marquee', false);
          label.style("left", '');
          if(toggle) {
            if(label.node().scrollWidth > label.node().offsetWidth) {
              label.attr("data-content", label.text());
              var space = 30;
              label.style("left", (-space - label.node().scrollWidth) + 'px');
              this.entity.classed('marquee', true);
            }
          }
        }
      });

      //default callback
      var callback = function(indicator) {
        console.log("Indicator selector: stub callback fired. New indicator is ", indicator);
      };

      var tree;
      var langStrings;
      var lang;
      var markerID;
      var alignX = "center";
      var alignY = "center";
      var top$1;
      var left$1;
      var selectedNode;

      var TreeMenu = Component.extend({

        //setters-getters
        tree: function(input) {
          if(!arguments.length) return tree;
          tree = input;
          return this;
        },
        lang: function(input) {
          if(!arguments.length) return lang;
          lang = input;
          return this;
        },
        langStrings: function(input) {
          if(!arguments.length) return langStrings;
          langStrings = input;
          return this;
        },
        callback: function(input) {
          if(!arguments.length) return callback;
          callback = input;
          return this;
        },
        markerID: function(input) {
          if(!arguments.length) return markerID;
          markerID = input;
          return this;
        },
        alignX: function(input) {
          if(!arguments.length) return alignX;
          alignX = input;
          return this;
        },
        alignY: function(input) {
          if(!arguments.length) return alignY;
          alignY = input;
          return this;
        },
        top: function(input) {
          if(!arguments.length) return top$1;
          top$1 = input;
          return this;
        },
        left: function(input) {
          if(!arguments.length) return left$1;
          left$1 = input;
          return this;
        },

        init: function(config, context) {

          var _this = this;

          this.name = 'gapminder-treemenu';
          this.model_expects = [{
            name: "marker",
            type: "model"
          }, {
              name: "language",
              type: "language"
            }];

          this.context = context;
          // object for manipulation with menu representation level
          this.menuEntity = null;
          this.model_binds = {
            "change:marker": function(evt, path) {
              if(path.indexOf(markerID + '.which')==-1 && path.indexOf(markerID + '.scaleType')==-1) return;
              _this.updateView();
            },
            "change:language.strings": function(evt) {
              _this.updateView();
            }
          };

          //contructor is the same as any component
          this._super(config, context);

          this.ui = extend({
            //...add properties here
          }, this.ui);

        },

        ready: function() {
          this.updateView();
        },

        readyOnce: function() {
          //this function is only called once at start, when both DOM and this.model are ready
          //this.element contains the view where you can append the menu
          this.element = d3.select(this.placeholder);
          //menu class private
          var _this = this;

          this.element.selectAll("div").remove();

          //general markup

          this.element.append("div")
            .attr("class", css.background)
            .on("click", function() {
              d3.event.stopPropagation();
              _this.toggle()
            });

          this.wrapperOuter = this.element
            .append('div')
            .classed(css.wrapper_outer, true)
            .classed(css.noTransition, true);

          this.wrapper = this.wrapperOuter
            .append('div')
            .classed(css.wrapper, true)
            .classed(css.noTransition, true)
            .classed("vzb-dialog-scrollable", true);

          this.wrapper
            .on("click", function() {
              d3.event.stopPropagation();
            })

          this.wrapper.append("div")
            .attr("class", css.close)
            .html(iconClose)
            .on("click", function() {
              d3.event.stopPropagation();
              _this.toggle()
            })
            .select("svg")
            .attr("width", "0px")
            .attr("height", "0px")
            .attr("class", css.close + '-icon');

          this.wrapper.append('div')
            .classed(css.scaletypes, true)
            .append('span');
          this.wrapper.append('div')
            .classed(css.title, true)
            .append('span');

          this.wrapper.append('div')
            .classed(css.search_wrap, true)
            .append('input')
            .classed(css.search, true)
            .attr('type', 'search')
            .attr('id', css.search);


          //init functions
          d3.select('body').on('mousemove', _this._mousemoveDocument);
          this.wrapper.on('mouseleave', function() {
            //if(_this.menuEntity.direction != MENU_VERTICAL) _this.menuEntity.closeAllChildren();
          });

          _this._enableSearch();

          _this.resize();
        },

        //happens on resizing of the container
        resize: function() {
          var _this = this;

          this.profiles = {
            "small": {
              col_width: 200
            },
            "medium": {
              col_width: 200
            },
            "large": {
              col_width: 200
            }
          };

          this.wrapper.classed(css.noTransition, true);
          this.wrapper.node().scrollTop = 0;

          this.activeProfile = this.profiles[this.getLayoutProfile()];
          OPTIONS$3.IS_MOBILE = this.getLayoutProfile() === "small";

          if (this.menuEntity) {
            this.menuEntity.setWidth(this.activeProfile.col_width, true, true);

            if (OPTIONS$3.IS_MOBILE) {
              if (this.menuEntity.direction != MENU_VERTICAL) {
                this.menuEntity.setDirection(MENU_VERTICAL, true);
              }
            } else {
              if (this.menuEntity.direction != MENU_HORIZONTAL) {
                this.menuEntity.setDirection(MENU_HORIZONTAL, true);
              }
            }
          }

          this.width = _this.element.node().offsetWidth;
          this.height = _this.element.node().offsetHeight;
          var rect = this.wrapperOuter.node().getBoundingClientRect();
          var containerWidth = rect.width;
          var containerHeight = rect.height;
          if (containerWidth) {
            if(OPTIONS$3.IS_MOBILE) {
              this.clearPos();
            } else {
              if(top$1 || left$1) {
                if(this.wrapperOuter.node().offsetTop < 10) {
                  this.wrapperOuter.style('top', '10px');
                }
                if(this.height - _this.wrapperOuter.node().offsetTop - containerHeight < 0) {
                  if(containerHeight > this.height) {
                    containerHeight = this.height - 20;
                  }
                  this.wrapperOuter.style({'top' : (this.height - containerHeight - 10) + 'px', 'bottom' : 'auto'});
                }
                if(top$1) top$1 = _this.wrapperOuter.node().offsetTop;
              }
              
              var maxHeight;
              if(this.wrapperOuter.classed(css.alignYb)) {
                maxHeight = this.wrapperOuter.node().offsetTop + this.wrapperOuter.node().offsetHeight;
              } else {
                maxHeight = this.height - this.wrapperOuter.node().offsetTop;
              }
              this.wrapper.style('max-height', (maxHeight - 10) + 'px');
            
              this.wrapperOuter.classed(css.alignXc, alignX === "center");
              this.wrapperOuter.style("margin-left",alignX === "center"? "-" + containerWidth/2 + "px" : null);
              if (alignX === "center") {
                OPTIONS$3.MAX_MENU_WIDTH = this.width/2 - containerWidth * 0.5 - 10;
              } else {
                OPTIONS$3.MAX_MENU_WIDTH = this.width - this.wrapperOuter.node().offsetLeft - containerWidth - 10; // 10 - padding around wrapper
              }

              var minMenuWidth = this.activeProfile.col_width + OPTIONS$3.MIN_COL_WIDTH * 2;
              var leftPos = this.wrapperOuter.node().offsetLeft;
              OPTIONS$3.MENU_OPEN_LEFTSIDE = OPTIONS$3.MAX_MENU_WIDTH < minMenuWidth && leftPos > (OPTIONS$3.MAX_MENU_WIDTH + 10);
              if(OPTIONS$3.MENU_OPEN_LEFTSIDE) {
                if(leftPos <  (minMenuWidth + 10)) leftPos = (minMenuWidth + 10);
                OPTIONS$3.MAX_MENU_WIDTH = leftPos - 10; // 10 - padding around wrapper        
              } else {
                if (OPTIONS$3.MAX_MENU_WIDTH < minMenuWidth) { 
                  leftPos = leftPos - (minMenuWidth - OPTIONS$3.MAX_MENU_WIDTH);
                  OPTIONS$3.MAX_MENU_WIDTH = minMenuWidth;
                } 
              }
             
              if(left$1) {
                left$1 = leftPos;
              } else {
                if(leftPos != this.wrapperOuter.node().offsetLeft) {
                  this.wrapperOuter.style({'left': 'auto', 'right': (this.width - leftPos - rect.width) + 'px'}); 
                }
              }
              
              if(left$1 || top$1) this.setPos();
              
              this.wrapperOuter.classed('vzb-treemenu-open-left-side', !OPTIONS$3.IS_MOBILE && OPTIONS$3.MENU_OPEN_LEFTSIDE);        
            }
          }

          this.wrapper.node().offsetHeight;
          this.wrapper.classed(css.noTransition, false);

          return this;
        },

        toggle: function() {
          var _this = this;
          var hidden = !this.element.classed(css.hidden);
          this.element.classed(css.hidden, hidden);

          if(hidden) {
            this.clearPos();
            this.menuEntity.marqueeToggle(false);
          } else {
            if(top$1 || left$1) this.setPos();
            this.resize();
            this.scrollToSelected();
          }

          this.wrapper.classed(css.noTransition, hidden);

          this.parent.components.forEach(function(c) {
            if(c.name == "gapminder-dialogs") {
              d3.select(c.placeholder.parentNode).classed("vzb-blur", !hidden);
            } else
              if(c.element.classed) {
                c.element.classed("vzb-blur", c != _this && !hidden);
              } else {
                d3.select(c.element).classed("vzb-blur", c != _this && !hidden);
              }
          });

          this.width = _this.element.node().offsetWidth;
        },

        scrollToSelected: function() {
          var _this = this;
          var scrollToItem = function(listNode, itemNode) {
            listNode.scrollTop = 0;
            var rect = listNode.getBoundingClientRect();
            var itemRect = itemNode.getBoundingClientRect();
            var scrollTop = itemRect.bottom - rect.top - listNode.offsetHeight + 10;
            listNode.scrollTop = scrollTop;
          }

          if (this.menuEntity.direction == MENU_VERTICAL) {
            scrollToItem(this.wrapper.node(), selectedNode);
            _this.menuEntity.marqueeToggleAll(true);
          } else {
            var selectedItem = this.menuEntity.findItemByName(d3.select(selectedNode).select('span').text());
            selectedItem.submenu.calculateMissingWidth(0, function() {
              _this.menuEntity.marqueeToggleAll(true);
            });

            var parent = selectedNode;
            var listNode;
            while(!(hasClass(parent, css.list_top_level))) {
              if(parent.tagName == 'LI') {
                listNode = hasClass(parent.parentNode, css.list_top_level) ? parent.parentNode.parentNode : parent.parentNode;
                scrollToItem(listNode , parent);
              }
              parent = parent.parentNode;
            }
          }
        },

        setPos: function() {
          var rect = this.wrapperOuter.node().getBoundingClientRect();

          if(top$1) {
            this.wrapperOuter.style({'top': top$1 + 'px', 'bottom': 'auto'});
            this.wrapperOuter.classed(css.absPosVert, top$1);
          }
          if(left$1) {
            var right = this.element.node().offsetWidth - left$1 - rect.width;
            right = right < 10 ? 10 : right;
            this.wrapperOuter.style({'right': right + 'px', 'left': 'auto'});
            this.wrapperOuter.classed(css.absPosHoriz, right);
          }

        },

        clearPos: function() {
          top$1 = '';
          left$1 = '';
          this.wrapperOuter.attr("style", "");
          this.wrapperOuter.classed(css.absPosVert, '');
          this.wrapperOuter.classed(css.absPosHoriz, '');
          this.wrapperOuter.classed(css.menuOpenLeftSide, '');
          this.wrapper.style('max-height', '');
        },
        //search listener
        _enableSearch: function() {
          var _this = this;

          var input = this.wrapper.select('.' + css.search);

          //it forms the array of possible queries
          var getMatches = function(value) {
            var matches = {
              _id: 'root',
              children: []
            };

            //translation integration
            var translationMatch = function(value, data, i) {
              var languageId = _this.model.language.id;

              if(_this.langStrings()) {
                var translate = _this.langStrings()[languageId]['indicator/' + data[i][OPTIONS$3.SEARCH_PROPERTY]] ||
                  _this.langStrings()[languageId]['indicator' + '/' + _this.model.marker[markerID]._type + '/' + data[i][OPTIONS$3.SEARCH_PROPERTY]];
                if(translate && translate.toLowerCase().indexOf(value.toLowerCase()) >= 0) return true;
              };
              return false;
            };

            var matching = function(data) {
              for(var i = 0; i < data.length; i++) {
                var match = false;
                match =  translationMatch(value, data, i);
                if(match) {
                  matches.children.push(data[i]);
                }
                if(!match && data[i][OPTIONS$3.SUBMENUS]) {
                  matching(data[i][OPTIONS$3.SUBMENUS]);
                }
              }
            };
            matching(_this.dataFiltered.children);
            return matches;
          };
          
          var searchValueNonEmpty = false;

          var searchIt = debounce(function() {
              var value = input.node().value;
              
              //Protection from unwanted IE11 input events.
              //IE11 triggers an 'input' event when 'placeholder' attr is set to input element and
              //on 'focusin' and on 'focusout', if nothing has been entered into the input.  
              if(!searchValueNonEmpty && value == "") return;        
              searchValueNonEmpty = value != "";

              if(value.length >= OPTIONS$3.SEARCH_MIN_STR) {
                _this.redraw(getMatches(value), true);  
              } else {
                _this.redraw();
              }
            }, 250);

          input.on('input', searchIt);
        },

        _selectIndicator: function(value) {
          callback("which", value, markerID);
          this.toggle();
        },


        //function is redrawing data and built structure
        redraw: function(data, useDataFiltered) {
          var _this = this;

          var dataFiltered;
          
          var indicatorsDB = _this.model.marker.getConceptprops();

          var hookType = _this.model.marker[markerID]._type;

          if(useDataFiltered) {
            dataFiltered = data;
          } else {
            if(data == null) data = tree;

            var allowedIDs = keys(indicatorsDB).filter(function(f) {
              //check if indicator is denied to show with allow->names->!indicator
              if(_this.model.marker[markerID].allow && _this.model.marker[markerID].allow.names
                && _this.model.marker[markerID].allow.names.indexOf('!' + f) != -1) return false;
              //keep indicator if nothing is specified in tool properties
              if(!_this.model.marker[markerID].allow || !_this.model.marker[markerID].allow.scales) return true;
              //keep indicator if any scale is allowed in tool properties
              if(_this.model.marker[markerID].allow.scales[0] == "*") return true;

              // if no scales defined, all are allowed
              if (!indicatorsDB[f].scales) return true

              //check if there is an intersection between the allowed tool scale types and the ones of indicator
              for(var i = indicatorsDB[f].scales.length - 1; i >= 0; i--) {
                if(_this.model.marker[markerID].allow.scales.indexOf(indicatorsDB[f].scales[i]) > -1) return true;
              }

              return false;
            })

            dataFiltered = pruneTree(data, function(f) {
              return allowedIDs.indexOf(f.id) > -1
            });
            
            this.dataFiltered = dataFiltered;
          }

          this.wrapper.select('ul').remove();
       
          this.element.select('.' + css.title).select("span")
            .text(this.translator("buttons/" + markerID));

          this.element.select('.' + css.search)
            .attr("placeholder", this.translator("placeholder/search") + "...");
       
          var createSubmeny = function(select, data, toplevel) {
            if(!data.children) return;
            var _select = toplevel ? select : select.append('div')
              .classed(css.list_outer, true);

            var li = _select.append('ul')
              .classed(css.list, !toplevel)
              .classed(css.list_top_level, toplevel)
              .classed("vzb-dialog-scrollable", true)
              .selectAll('li')
              .data(data.children, function(d) {
                return d['id'];
              })
              .enter()
              .append('li');

            li.append('span')
              .classed(css.list_item_label, true)
              // .attr("info", function(d) {
              //   return d.id;
              // })
              .attr("children", function(d) {
                return d.children ? "true" : null;
              })
              .on('click', function(d) {
                var view = d3.select(this);
                //only for leaf nodes
                if(view.attr("children")) return;
                d3.event.stopPropagation();
                _this._selectIndicator(d.id);
              })
              .append('span')
              .text(function(d) {
                //Let the indicator "_default" in tree menu be translated differnetly for every hook type
                var translated = _this.translator("indicator" + (d.id==="_default" ? "/" + hookType : "") + "/" + d.id);
                if(translated.indexOf("indicator/")!==-1)warn("translation missing: " + translated);
                return translated;
              });
            
            li.classed(css.list_item, true)
              .classed(css.hasChild, function(d) {
                return d['children'];
              })
              .classed(css.isSpecial, function(d) {
                return d['special'];
              })
              .each(function(d) {
                var view = d3.select(this);

                //deepLeaf
                if(!d.children) {
                  var deepLeaf = view.append('div').attr('class', css.menuHorizontal + ' ' + css.list_outer + ' ' + css.list_item_leaf);
                  deepLeaf.on('click', function(d) {
                    _this._selectIndicator(d.id);
                  });
                  var deepLeafContent = deepLeaf.append('div').classed(css.leaf + ' ' + css.leaf_content + " vzb-dialog-scrollable", true);
                  deepLeafContent.append('span').classed(css.leaf_content_item + ' ' + css.leaf_content_item_title, true)
                    .text(function(d) {
                      //Let the indicator "_default" in tree menu be translated differnetly for every hook type
                      var translated = _this.translator("indicator" + (d.id === "_default" ? "/" + hookType : "") + "/" + d.id);
                      if(translated.indexOf("indicator/") !== -1) warn("translation missing: " + translated);
                      return translated;
                    });
                  var hideUnits;
                  var units = deepLeafContent.append('span').classed(css.leaf_content_item, true)
                    .text(function(d) {
                      //Let the indicator "_default" in tree menu be translated differnetly for every hook type
                      var translated = _this.translator("unit" + (d.id==="_default" ? "/" + hookType : "") + "/" + d.id);
                      hideUnits = translated.indexOf("unit/") !== -1 || translated === ''; 
                      if(translated.indexOf("unit/") !== -1) warn("translation missing: " + translated);
                      return _this.translator('hints/units') + ': ' + translated;
                    });
                  units.classed('vzb-hidden', hideUnits);
                  var hideDescription;
                  var description = deepLeafContent.append('span').classed(css.leaf_content_item + ' ' + css.leaf_content_item_descr, true)
                    .text(function(d) {
                      //Let the indicator "_default" in tree menu be translated differnetly for every hook type
                      var translated = _this.translator("description" + (d.id === "_default" ? "/" + hookType : "") + "/" + d.id);
                      hideDescription = translated.indexOf("description/") !== -1; 
                      if(hideDescription) warn("translation missing: " + translated);
                      return (hideUnits && hideDescription) ? _this.translator("hints/nodescr") : translated;
                    });
                  description.classed('vzb-hidden', hideDescription && !hideUnits);
                }
                
                if(d.id == _this.model.marker[markerID].which) {
                  var parent = this.parentNode;
                  d3.select(this).classed('item-active', true)
                    .select('.' + css.list_item_leaf).classed('active', true);
                  while(!(hasClass(parent, css.list_top_level))) {
                    if(parent.tagName == 'UL') {
                      d3.select(parent.parentNode)
                        .classed('active', true);
                    }
                    if(parent.tagName == 'LI') {
                      d3.select(parent).classed('item-active', true);
                    }
                    parent = parent.parentNode;
                  }
                  selectedNode = this;
                }
                createSubmeny(view, d);
              });
          };
          
          if(OPTIONS$3.IS_MOBILE) {
            OPTIONS$3.MENU_DIRECTION = MENU_VERTICAL;
          } else {
            OPTIONS$3.MENU_DIRECTION = MENU_HORIZONTAL;
          }
          createSubmeny(this.wrapper, dataFiltered, true);
          this.menuEntity = new Menu(null, this.wrapper.selectAll('.' + css.list_top_level));
          if(this.menuEntity) this.menuEntity.setDirection(OPTIONS$3.MENU_DIRECTION);
          if(this.menuEntity) this.menuEntity.setWidth(this.activeProfile.col_width, true, true);
          
          if(!useDataFiltered) {
            var pointer = "_default";
            if(allowedIDs.indexOf(this.model.marker[markerID].which) > -1) pointer = this.model.marker[markerID].which;
            if(!indicatorsDB[pointer].scales) {
              this.element.select('.' + css.scaletypes).classed(css.hidden, true);
              return true;
            }
            var scaleTypesData = indicatorsDB[pointer].scales.filter(function(f) {
              if(!_this.model.marker[markerID].allow || !_this.model.marker[markerID].allow.scales) return true;
              if(_this.model.marker[markerID].allow.scales[0] == "*") return true;
              return _this.model.marker[markerID].allow.scales.indexOf(f) > -1;
            });
            if(scaleTypesData.length == 0) {
              this.element.select('.' + css.scaletypes).classed(css.hidden, true);
            } else {

              var scaleTypes = this.element.select('.' + css.scaletypes).classed(css.hidden, false).selectAll("span")
                  .data(scaleTypesData, function(d){return d});

              scaleTypes.exit().remove();

              scaleTypes.enter().append("span")
                .on("click", function(d){
                  d3.event.stopPropagation();
                  _this._setModel("scaleType", d, markerID)
                });

              scaleTypes
                .classed(css.scaletypesDisabled, scaleTypesData.length < 2)
                .classed(css.scaletypesActive, function(d){
                  return d == _this.model.marker[markerID].scaleType && scaleTypesData.length > 1;
                })
                .text(function(d){
                  return _this.translator("scaletype/" + d);
                });
            }

          }

          return this;
        },






        updateView: function() {
          var _this = this;
          var languageID = _this.model.language.id;

          if(!markerID) return;

          this.wrapperOuter.classed(css.absPosVert, top$1);
          this.wrapperOuter.classed(css.alignYt, alignY === "top");
          this.wrapperOuter.classed(css.alignYb, alignY === "bottom");
          this.wrapperOuter.classed(css.absPosHoriz, left$1);
          this.wrapperOuter.classed(css.alignXl, alignX === "left");
          this.wrapperOuter.classed(css.alignXr, alignX === "right");


          var strings = langStrings ? langStrings : {};
          strings[languageID] = _this.model.language.strings[languageID];

          this.translator = this.model.language.getTFunction();

          var setModel = this._setModel.bind(this);
          this.langStrings(strings)
            .lang(languageID)
            .callback(setModel)
            .tree(this.model.marker.getIndicatorsTree())
            .redraw();

          this.wrapper.select('.' + css.search).node().value = "";

          return this;
        },

        _setModel: function(what, value, markerID) {

          var indicatorsDB = this.model.marker.getConceptprops();

          var mdl = this.model.marker[markerID];

          var obj = {};

          obj[what] = value;

          if(what == "which") {
            obj.use = indicatorsDB[value].use;

            if(indicatorsDB[value].scales) {
              obj.scaleType = indicatorsDB[value].scales[0];
            }
          }

          if(mdl.getType() === 'axis' || mdl.getType() === 'size') {
            obj.domainMin = null;
            obj.domainMax = null;
            obj.zoomedMin = null;
            obj.zoomedMax = null;
          }

          mdl.set(obj);

        }


      });

      var precision = 1;

      //constants
      var class_playing = "vzb-playing";
      var class_loading = "vzb-ts-loading";
      var class_hide_play = "vzb-ts-hide-play-button";
      var class_dragging = "vzb-ts-dragging";
      var class_axis_aligned = "vzb-ts-axis-aligned";
      var class_show_value = "vzb-ts-show-value";
      var class_show_value_when_drag_play = "vzb-ts-show-value-when-drag-play";

      //margins for slider
      var profiles$2 = {
        small: {
          margin: {
            top: 7,
            right: 15,
            bottom: 10,
            left: 15
          },
          radius: 8,
          label_spacing: 10
        },
        medium: {
          margin: {
            top: 16,
            right: 15,
            bottom: 10,
            left: 15
          },
          radius: 9,
          label_spacing: 12
        },
        large: {
          margin: {
            top: 14,
            right: 15,
            bottom: 10,
            left: 15
          },
          radius: 11,
          label_spacing: 14
        }
      };


      var presentationProfileChanges = {
        "medium": {
          margin: {
            top: 9
          }
        },
        "large": {
          margin: {
          }
        }
      }

      var TimeSlider = Component.extend({
        /**
         * Initializes the timeslider.
         * Executed once before any template is rendered.
         * @param model The model passed to the component
         * @param context The component's parent
         */
        init: function(model, context) {

          this.name = "gapminder-timeslider";
          this.template = this.template || "timeslider.html";
          this.prevPosition = null;
          //define expected models/hooks for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }];

          var _this = this;

          //starts as splash if this is the option
          this._splash = model.ui.splash;

          //binds methods to this model
          this.model_binds = {
            'change:time': function(evt, path) {

              //TODO: readyOnce CANNOT be run twice
              if(_this._splash !== _this.model.time.splash) {
                _this._splash = _this.model.time.splash;
                _this.readyOnce();
                _this.ready();
              }

              if(!_this._splash && _this.slide) {

                if((['time.start', 'time.end']).indexOf(path) !== -1) {
                  if (!_this.xScale) return;  
                  _this.changeLimits();
                }
                _this._optionClasses();
              }
            },
            'change:time.value': function(evt, path) {
              if(!_this._splash && _this.slide) {
                //only set handle position if change is external
                if(!_this.model.time.dragging) _this._setHandle(_this.model.time.playing);
              }
            },
            'change:time.start': function(evt, path) {
              if(!_this._splash && _this.slide) {
                //only set handle position if change is external
                if(!_this.model.time.dragging) _this._setHandle(_this.model.time.playing);
              }
            },
            'change:time.end': function(evt, path) {
              if(!_this._splash && _this.slide) {
                //only set handle position if change is external
                if(!_this.model.time.dragging) _this._setHandle(_this.model.time.playing);
              }
            },
            'change:time.startSelected': function(evt, path) {
              if(!_this._splash && _this.slide) {
                _this.updateSelectedStartLimiter();
              }
            },
            'change:time.endSelected': function(evt, path) {
              if(!_this._splash && _this.slide) {
                _this.updateSelectedEndLimiter();
              }
            },
            'change:entities.select': function(evt, path) {
              _this.setSelectedLimits();
            }
          };

          this.ui = extend({
            show_limits: false,
            show_value: false,
            show_value_when_drag_play: true,
            show_button: true,
            class_axis_aligned: false
          }, model.ui, this.ui);

          // Same constructor as the superclass
          this._super(model, context);

          //defaults
          this.width = 0;
          this.height = 0;

          this.getValueWidth = memoize(this.getValueWidth);
          this._setTime = throttle(this._setTime, 50);
        },

        //template is ready
        readyOnce: function () {

          if(this._splash) return;

          var _this = this;

          //DOM to d3
          //TODO: remove this ugly hack
          this.element = isArray(this.element) ? this.element : d3.select(this.element);
          this.element.classed(class_loading, false);

          //html elements
          this.slider_outer = this.element.select(".vzb-ts-slider");
          this.slider = this.slider_outer.select("g");
          this.axis = this.element.select(".vzb-ts-slider-axis");
          this.select = this.element.select(".vzb-ts-slider-select");
          this.slide = this.element.select(".vzb-ts-slider-slide");
          this.handle = this.slide.select(".vzb-ts-slider-handle");
          this.valueText = this.slide.select('.vzb-ts-slider-value');
          //Scale
          this.xScale = d3.time.scale.utc()
            .clamp(true);

          //Axis
          this.xAxis = d3.svg.axis()
            .orient("bottom")
            .tickSize(0);
          //Value
          this.valueText.attr("text-anchor", "middle").attr("dy", "-0.7em");

          var brushed = _this._getBrushed(),
            brushedEnd = _this._getBrushedEnd();

          //Brush for dragging
          this.brush = d3.svg.brush()
            .x(this.xScale)
            .extent([0, 0])
            .on("brush", function () {
              brushed.call(this);
            })
            .on("brushend", function () {
              brushedEnd.call(this);
            });

          //Slide
          this.slide.call(this.brush);

          this.slider_outer.on("mousewheel", function () {
              //do nothing and dont pass the event on if we are currently dragging the slider
              if(_this.model.time.dragging){
                  d3.event.stopPropagation();
                  d3.event.preventDefault();
                  d3.event.returnValue = false;
                  return false;
              }
          });

          this.slide.selectAll(".extent,.resize")
            .remove();

          this._setSelectedLimitsId = 0; //counter for setSelectedLimits
          this._needRecalcSelectedLimits = true;
          
          forEach(_this.model.marker.getSubhooks(), function(hook) {
            if(hook._important) hook.on('change:which', function() {
              _this._needRecalcSelectedLimits = true;
              _this.model.time.startSelected = _this.model.time.start;
              _this.model.time.endSelected = _this.model.time.end; 
            });
          });
          
          this.root.on('ready', function() {     
            if(_this._needRecalcSelectedLimits) {
              _this._needRecalcSelectedLimits = false;
              _this.setSelectedLimits(true);
            }      
          });

          if(this.model.time.startSelected > this.model.time.start) {
            _this.updateSelectedStartLimiter();
          }
         
          if(this.model.time.endSelected < this.model.time.end) {
            _this.updateSelectedEndLimiter();
          }
              
          this.parent.on('myEvent', function (evt, arg) {
            var layoutProfile = _this.getLayoutProfile();

            if (arg.profile && arg.profile.margin) {
              profiles$2[layoutProfile].margin = arg.profile.margin;
            }

            // set the right margin that depends on longest label width
            _this.element.select(".vzb-ts-slider-wrapper")
              .style("right", (arg.mRight - profiles$2[layoutProfile].margin.right) + "px");

            _this.xScale.range([0, arg.rangeMax]);      
            _this.resize();
          });
        },

        //template and model are ready
        ready: function () {
          if(this._splash) return;

          var play = this.element.select(".vzb-ts-btn-play");
          var pause = this.element.select(".vzb-ts-btn-pause");
          var _this = this;
          var time = this.model.time;

          play.on('click', function () {

            _this.model.time.play();
          });

          pause.on('click', function () {
            _this.model.time.pause("soft");
          });

          this.changeLimits();
          this.changeTime();
          this.resize();

        },

        changeLimits: function() {
          var minValue = this.model.time.start;
          var maxValue = this.model.time.end;
          //scale
          this.xScale.domain([minValue, maxValue]);
          //axis
          this.xAxis.tickValues([minValue, maxValue])
            .tickFormat(this.model.time.timeFormat);
        },

        changeTime: function() {
          this.ui.format = this.model.time.unit;
          //time slider should always receive a time model
          var time = this.model.time.value;
          //special classes
          this._optionClasses();
        },

        /**
         * Executes everytime the container or vizabi is resized
         * Ideally,it contains only operations related to size
         */
        resize: function () {

          this.model.time.pause();

          this.profile = this.getActiveProfile(profiles$2, presentationProfileChanges);

          var slider_w = parseInt(this.slider_outer.style("width"), 10) || 0;
          var slider_h = parseInt(this.slider_outer.style("height"), 10) || 0;
          this.width = slider_w - this.profile.margin.left - this.profile.margin.right;
          this.height = slider_h - this.profile.margin.bottom - this.profile.margin.top;
          var _this = this;

          //translate according to margins
          this.slider.attr("transform", "translate(" + this.profile.margin.left + "," + this.profile.margin.top + ")");

          //adjust scale width if it was not set manually before
          if (this.xScale.range()[1] = 1) this.xScale.range([0, this.width]);

          //adjust axis with scale
          this.xAxis = this.xAxis.scale(this.xScale)
            .tickPadding(this.profile.label_spacing);

          this.axis.attr("transform", "translate(0," + this.height / 2 + ")")
            .call(this.xAxis);

          this.select.attr("transform", "translate(0," + this.height / 2 + ")");

          this.slide.select(".background")
            .attr("height", this.height);

          //size of handle
          this.handle.attr("transform", "translate(0," + this.height / 2 + ")")
            .attr("r", this.profile.radius);

          this.sliderWidth = _this.slider.node().getBoundingClientRect().width;

          this.resizeSelectedLimiters();
          
          this._setHandle();

        },
        
        setSelectedLimits: function(force) {
          var _this = this;
          this._setSelectedLimitsId++;
          var _setSelectedLimitsId = this._setSelectedLimitsId;

          var select = _this.model.entities.select;
          if(select.length == 0) 
          {
            _this.model.time.startSelected = new Date(_this.model.time.start);
            _this.model.time.endSelected = new Date(_this.model.time.end);
            return;
          }

          var KEY = _this.model.entities.getDimension();
          var timePoints = _this.model.time.getAllSteps();
          var selectedEdgeTimes = [];
          var hooks = [];
          forEach(_this.model.marker.getSubhooks(), function(hook) {
            if(hook.use == "constant") return;
            if(hook._important) hooks.push(hook._name);
          });
          
          var findEntityWithCompleteHooks = function(values) {
            for(var k = 0, l = select.length; k < l; k++) {
              var complete = 0;
              for(var i = 0, j = hooks.length; i < j; i++) {
                if(values[hooks[i]][select[k][KEY]] || values[hooks[i]][select[k][KEY]]===0) complete++;        
              }
              if(complete == hooks.length) return true;
            }
            return false;
          }
          
          var findSelectedTime = function(iterator, findCB) {
            var point = iterator();
            if(point == null) return;
            _this.model.marker.getFrame(timePoints[point], function(values) {
              if(findEntityWithCompleteHooks(values)) {
                findCB(point);
              } else {
                findSelectedTime(iterator, findCB);
              }
            });
          }
          
          var promises = [];
          
          promises.push(new Promise());

          //find startSelected time 
          findSelectedTime(function(){
            var max = timePoints.length;
            var i = 0;
            return function() {
              return i < max ? i++ : null;
            };
          }(), function(point){
            selectedEdgeTimes[0] = timePoints[point];
            promises[0].resolve();
          });
          
          promises.push(new Promise());
          
          //find endSelected time
          findSelectedTime(function(){
            var min = 0;
            var i = timePoints.length - 1;
            return function() {
              return i >= 0 ? i-- : null;
            };
          }(), function(point){
            selectedEdgeTimes[1] = timePoints[point];
            promises[1].resolve();
          });
          
          Promise.all(promises).then(function() {
            //if another setSelectedLimits was started after this 
            //then return without setup values
            if(_setSelectedLimitsId != _this._setSelectedLimitsId) return;
            _this.model.time.set(
              {"startSelected": selectedEdgeTimes[0],"endSelected": selectedEdgeTimes[1]}, force);
          });

        },

        updateSelectedStartLimiter: function() {
          this.select.select('#clip-start').remove();
          this.select.select(".selected-start").remove();
          if(this.model.time.startSelected > this.model.time.start) {
            this.select.append("clipPath")
              .attr("id", "clip-start")
              .append('rect')
            this.select.append('path')
              .attr("clip-path", "url(" + location.pathname + "#clip-start)")
              .classed('selected-start', true);
            this.resizeSelectedLimiters();
          }    
        },

        updateSelectedEndLimiter: function() {
          this.select.select('#clip-end').remove();
          this.select.select(".selected-end").remove();
          if(this.model.time.endSelected < this.model.time.end) {
            this.select.append("clipPath")
              .attr("id", "clip-end")
              .append('rect')
            this.select.append('path')
              .attr("clip-path", "url(" + location.pathname + "#clip-end)")
              .classed('selected-end', true);
            this.resizeSelectedLimiters();
          }              
        },

        resizeSelectedLimiters: function() {
          this.select.select('.selected-start')              
            .attr('d', "M0,0H" + this.xScale(this.model.time.startSelected));
          this.select.select("#clip-start").select('rect')
            .attr("x", -this.height / 2)
            .attr("y", -this.height / 2)
            .attr("height", this.height)
            .attr("width", this.xScale(this.model.time.startSelected) + this.height / 2);
          this.select.select('.selected-end')              
            .attr('d', "M" + this.xScale(this.model.time.endSelected) + ",0H" + this.xScale(this.model.time.end));
          this.select.select("#clip-end").select('rect')
            .attr("x", this.xScale(this.model.time.endSelected))
            .attr("y", -this.height / 2)
            .attr("height", this.height)
            .attr("width", this.xScale(this.model.time.end) - this.xScale(this.model.time.endSelected) + this.height / 2);
        },
        

        /**
         * Returns width of slider text value.
         * Parameters in this function needed for memoize function, so they are not redundant.
         */
        getValueWidth: function(layout, value) {
          return this.valueText.node().getBoundingClientRect().width;
        },

        /**
         * Gets brushed function to be executed when dragging
         * @returns {Function} brushed function
         */
        _getBrushed: function() {
          var _this = this;
          return function() {

            if (_this.model.time.playing)
              _this.model.time.pause();

            _this._optionClasses();
            _this.element.classed(class_dragging, true);

            var value = _this.brush.extent()[0];

            //set brushed properties

            if(d3.event.sourceEvent) {
              // Prevent window scrolling on cursor drag in Chrome/Chromium.
              d3.event.sourceEvent.preventDefault();

              _this.model.time.dragStart();
              var posX = roundStep(Math.round(d3.mouse(this)[0]), precision);
              value = _this.xScale.invert(posX);
              var maxPosX = _this.width;

              if(posX > maxPosX) {
                posX = maxPosX;
              } else if(posX < 0) {
                posX = 0;
              }

              //set handle position
              _this.handle.attr("cx", posX);
              _this.valueText.attr("transform", "translate(" + posX + "," + (_this.height / 2) + ")");
              _this.valueText.text(_this.model.time.timeFormat(value));
            }

            //set time according to dragged position
            if(value - _this.model.time.value !== 0) {
              _this._setTime(value);
            }
          };
        },

        /**
         * Gets brushedEnd function to be executed when dragging ends
         * @returns {Function} brushedEnd function
         */
        _getBrushedEnd: function() {
          var _this = this;
          return function() {
            _this._setTime.recallLast();
            _this.element.classed(class_dragging, false);
            _this.model.time.dragStop();
            _this.model.time.snap();
          };
        },

        /**
         * Sets the handle to the correct position
         * @param {Boolean} transition whether to use transition or not
         */
        _setHandle: function(transition) {
          var _this = this;
          var value = this.model.time.value;
          this.slide.call(this.brush.extent([value, value]));
            
          this.element.classed("vzb-ts-disabled", this.model.time.end <= this.model.time.start);
      //    this.valueText.text(this.model.time.timeFormat(value));

      //    var old_pos = this.handle.attr("cx");
          var new_pos = this.xScale(value);
          if(_this.prevPosition == null) _this.prevPosition = new_pos;
          var delayAnimations = new_pos > _this.prevPosition ? this.model.time.delayAnimations : 0;
          if(transition) {
            this.handle.attr("cx", _this.prevPosition)
              .transition()
              .duration(delayAnimations)
              .ease("linear")
              .attr("cx", new_pos);

            this.valueText.attr("transform", "translate(" + _this.prevPosition + "," + (this.height / 2) + ")")
              .transition('text')
              .delay(delayAnimations)
              .text(this.model.time.timeFormat(value));
            this.valueText
              .transition()
              .duration(delayAnimations)
              .ease("linear")
              .attr("transform", "translate(" + new_pos + "," + (this.height / 2) + ")");
          } else {
            this.handle
              //cancel active transition
              .interrupt()
              .attr("cx", new_pos);

            this.valueText
              //cancel active transition
              .interrupt()
              .interrupt('text')
              .transition('text');
            this.valueText
              .attr("transform", "translate(" + new_pos + "," + (this.height / 2) + ")")
              .text(this.model.time.timeFormat(value));
          }
          _this.prevPosition = new_pos;

        },

        /**
         * Sets the current time model to time
         * @param {number} time The time
         */
        _setTime: function(time) {
          //update state
          var _this = this;
          //  frameRate = 50;

          //avoid updating more than once in "frameRate"
          //var now = new Date();
          //if (this._updTime != null && now - this._updTime < frameRate) return;
          //this._updTime = now;
          var persistent = !this.model.time.dragging && !this.model.time.playing;
          _this.model.time.getModelObject('value').set(time, false, persistent); // non persistent
        },


        /**
         * Applies some classes to the element according to options
         */
        _optionClasses: function() {
          //show/hide classes

          var show_limits = this.ui.show_limits;
          var show_value = this.ui.show_value;
          var show_value_when_drag_play = this.ui.show_value_when_drag_play;
          var axis_aligned = this.ui.axis_aligned;
          var show_play = (this.ui.show_button) && (this.model.time.playable);

          if(!show_limits) {
            this.xAxis.tickValues([]).ticks(0);
          }

          this.element.classed(class_hide_play, !show_play);
          this.element.classed(class_playing, this.model.time.playing);
          this.element.classed(class_show_value, show_value);
          this.element.classed(class_show_value_when_drag_play, show_value_when_drag_play);
          this.element.classed(class_axis_aligned, axis_aligned);
        }
      });

      /*!
       * VIZABI BUBBLE SIZE slider
       * Reusable bubble size slider
       */

      var OPTIONS$2 = {
        EXTENT_MIN: 0,
        EXTENT_MAX: 1,
        TEXT_PARAMS: { TOP: 18, LEFT: 10, MAX_WIDTH: 42, MAX_HEIGHT: 16 },
        BAR_WIDTH: 6,
        THUMB_RADIUS: 10,
        THUMB_STROKE_WIDTH: 4,
        INTRO_DURATION: 250,
        MARGIN: { TOP: 2, LEFT: 5, RIGHT:5}  
      }

      var profiles$1 = {
          "small": {
            minLabelTextSize: 7,
            maxLabelTextSize: 21,
            defaultLabelTextSize: 12
          },
          "medium": {
            minLabelTextSize: 7,
            maxLabelTextSize: 30,
            defaultLabelTextSize: 15
          },
          "large": {
            minLabelTextSize: 6,
            maxLabelTextSize: 48,
            defaultLabelTextSize: 20
          }
      };


      var SizeSlider = Component.extend({

        /**
         * Initializes the timeslider.
         * Executed once before any template is rendered.
         * @param config The options passed to the component
         * @param context The component's parent
         */
        init: function (config, context) {

          this.name = 'sizeslider';

          this.template = this.template || "sizeslider.html";

          this.propertyName = config.propertyname;

          this.model_expects = [{
            name: "size",
            type: "size"
          },{
            name: "language",
            type: "language"
          }];

          var _this = this;
          this.model_binds = {
            'change:size.domainMin': changeMinMaxHandler,
            'change:size.domainMax': changeMinMaxHandler,
            'change:size.extent': changeMinMaxHandler,        
            'ready': readyHandler
          };

          function changeMinMaxHandler(evt, path) {
            var size = _this.model.size.extent||[OPTIONS$2.EXTENT_MIN, OPTIONS$2.EXTENT_MAX];
            //_this._updateArcs(size);
            _this._updateLabels(size);
            _this.sliderEl.call(_this.brush.extent(size));
            if(size[0] == size[1]){
              _this.sliderEl.selectAll(".resize")
                .style("display", "block");
            }
          }
          
          function readyHandler(evt) {
            _this.modelUse = _this.model.size.use; 
            var size = _this.model.size.extent||[OPTIONS$2.EXTENT_MIN, OPTIONS$2.EXTENT_MAX];
            if(_this.modelUse != 'constant') {
              _this.sizeScaleMinMax = _this.model.size.getScale().domain();
              _this.sliderEl.selectAll('.w').classed('vzb-hidden', false);
              _this.sliderEl.select('.extent').classed('vzb-hidden', false);
              _this.sliderEl.select('.background').classed('vzb-pointerevents-none', false);
              _this._setLabelsText();
            } else {
              _this.sliderEl.selectAll('.w').classed('vzb-hidden', true);
              _this.sliderEl.select('.extent').classed('vzb-hidden', true);
              _this.sliderEl.select('.background').classed('vzb-pointerevents-none', true);
              if(!_this.model.size.which) {
                var p = _this.propertyActiveProfile;
                size[1] = (p.default - p.min) / (p.max - p.min);
                _this.model.size.which = '_default';
              }      
            }
            _this.sliderEl.call(_this.brush.extent([size[0], size[1]]));
            _this.sliderEl.call(_this.brush.event);      
          }

          this._setModel = throttle(this._setModel, 50);
          //contructor is the same as any component
          this._super(config, context);
        },

        /**
         * Executes after the template is loaded and rendered.
         * Ideally, it contains HTML instantiations related to template
         * At this point, this.element and this.placeholder are available as a d3 object
         */
        readyOnce: function () {
          var _this = this;
          var values = _this.model.size.extent||[OPTIONS$2.EXTENT_MIN, OPTIONS$2.EXTENT_MAX];
          this.element = d3.select(this.element);
          this.sliderSvg = this.element.select(".vzb-szs-svg");
          this.sliderWrap = this.sliderSvg.select(".vzb-szs-slider-wrap");
          this.sliderEl = this.sliderWrap.select(".vzb-szs-slider");

          var
            textMargin = {v: OPTIONS$2.TEXT_PARAMS.TOP, h: OPTIONS$2.TEXT_PARAMS.LEFT},
            textMaxWidth = OPTIONS$2.TEXT_PARAMS.MAX_WIDTH,
            textMaxHeight = OPTIONS$2.TEXT_PARAMS.MAX_HEIGHT,
            barWidth = OPTIONS$2.BAR_WIDTH,
            thumbRadius = OPTIONS$2.THUMB_RADIUS,
            thumbStrokeWidth = OPTIONS$2.THUMB_STROKE_WIDTH,
            padding = {
              top: OPTIONS$2.MARGIN.TOP + barWidth * 1.25,
              left: thumbRadius,
              right: thumbRadius,
              bottom: barWidth + textMaxHeight
            }
          
          var componentWidth = this.element.node().offsetWidth; 

          this.padding = padding;
          
          this.propertyActiveProfile = this.getPropertyActiveProfile();
          this.translator = this.model.language.getTFunction();

          this.propertyScale = d3.scale.linear()
            .domain([OPTIONS$2.EXTENT_MIN, OPTIONS$2.EXTENT_MAX])
            .range([this.propertyActiveProfile.min, this.propertyActiveProfile.max])
            .clamp(true)

          this.xScale = d3.scale.linear()
            .domain([OPTIONS$2.EXTENT_MIN, OPTIONS$2.EXTENT_MAX])
            .range([0, componentWidth - padding.left - padding.right])
            .clamp(true)

          this.brush = d3.svg.brush()
            .x(this.xScale)
            .extent([OPTIONS$2.EXTENT_MIN, OPTIONS$2.EXTENT_MAX])
            .on("brush", function () {
              _this._setFromExtent(true, false, false); // non persistent change
            })
            .on("brushend", function () {
               _this.sliderEl.selectAll(".resize")
               .style("display", null);

              _this._setFromExtent(true, true); // force a persistent change
            });

          this.sliderEl
            .call(_this.brush);
            
          this.sliderEl.selectAll('.background').attr('style','');

          //For return to round thumbs
          //var thumbArc = d3.svg.arc()
          //  .outerRadius(thumbRadius)
          //  .startAngle(0)
          //  .endAngle(2 * Math.PI)

          this.sliderThumbs = this.sliderEl.selectAll(".resize").sort(d3.descending)
            .classed("vzb-szs-slider-thumb", true)

          this.sliderThumbs.append("g")
            .attr("class", "vzb-szs-slider-thumb-badge")
            .append("path")
            .attr('d', function(d,i) {
              return "M0 " + (barWidth * .5) + "l" + (-thumbRadius) + " " + (thumbRadius * 1.5) + "h" + (thumbRadius * 2) + "Z";
            })

      //

          this.sliderThumbs.append("path")
            .attr("class", "vzb-szs-slider-thumb-arc")
          this.sliderEl.selectAll("text").data([0,0]).enter()
            .append("text")
            .attr("class", function(d, i) {
              return "vzb-szs-slider-thumb-label " + (i ? 'e' : 'w');})
            .attr("dy", (-barWidth * 1.25) + 'px')
            .attr("text-anchor", function(d, i) {
              return 1 - i ? "start" : "end"})

          this.sliderLabelsEl = this.sliderEl.selectAll("text.vzb-szs-slider-thumb-label");

          this.sliderEl.selectAll("rect")
            .attr("height", barWidth)
            .attr("rx", barWidth * 0.25)
            .attr("ry", barWidth * 0.25)
            .attr("transform", "translate(0," + (-barWidth * 0.5) + ")")
          this.sliderEl.select(".extent")
            .classed("vzb-szs-slider-extent", true)

          this.on("resize", function() {
            //console.log("EVENT: resize");
            _this.propertyActiveProfile = _this.getPropertyActiveProfile();
            _this.propertyScale.range([_this.propertyActiveProfile.min, _this.propertyActiveProfile.max])
            
            var componentWidth = _this.element.node().offsetWidth; 

             _this.xScale.range([0, componentWidth - _this.padding.left - _this.padding.right])
             _this._updateSize();

             _this.sliderEl
               .call(_this.brush.extent(_this.brush.extent()))
             _this._setFromExtent(false, false, false); // non persistent change

          });

          this._updateSize();
          
          this.sliderEl
            .call(this.brush.extent(values))
          _this._setFromExtent(false, false, false); // non persistent change

          _this.sizeScaleMinMax = _this.model.size.getScale().domain();

          if(_this.sizeScaleMinMax) {
            _this._setLabelsText();
          }
        },
        
        getPropertyActiveProfile: function() {
          var profile = profiles$1[this.getLayoutProfile()];
          return { min: profile['min' + this.propertyName], max: profile['max' + this.propertyName], default: profile['default' + this.propertyName]};
        },

        /*
         * RESIZE:
         * Executed whenever the container is resized
         */
        _updateSize: function() {
          this.sliderSvg
            .attr("height", this.propertyActiveProfile.max + this.padding.top + this.padding.bottom)
            .attr("width", '100%')
          this.sliderWrap
            .attr("transform", "translate(" + this.padding.left + "," + (this.propertyActiveProfile.max + this.padding.top) + ")")
        },

      //   _updateArcs: function(s) {
      //     var _this = this;
      //     var valueArc = d3.svg.arc()
      //       .outerRadius(function (d) { return _this.xScale(d) * 0.5 })
      //       .innerRadius(function (d) { return _this.xScale(d) * 0.5 })
      //       .startAngle(-Math.PI * 0.5)
      //       .endAngle(Math.PI * 0.5);
      // 
      //     this.sliderThumbs.select('.vzb-szs-slider-thumb-arc').data(s)
      //       .attr("d", valueArc)
      //       .attr("transform", function (d) {return "translate(" + (-_this.xScale(d) * 0.25) + ",0)"; })
      //   },
      // 
        _updateLabels: function(s) {
          var _this = this;
          var arcLabelTransform = function(d, i) {
            var dX = _this.xScale(i),
                dY = 0;//i ? -textMargin.v : 0;
            return "translate(" + (dX) + "," + (dY) + ")";
          }
          this.sliderLabelsEl.data(s)
            .attr("transform", arcLabelTransform)
            .attr("font-size", function(d, i) {
              return _this.propertyScale(d);
            })
          if(_this.model.size.use === 'constant')
            this.sliderLabelsEl.data(s).text(function(d) {
              return ~~(_this.propertyScale(d)) + (_this.translator(_this.ui.constantUnit)||"");
            })    
        },

        _setLabelsText: function() {
            var _this = this;
            _this.sliderLabelsEl
              .data([_this.model.size.getTickFormatter()(_this.sizeScaleMinMax[0]),_this.model.size.getTickFormatter()(_this.sizeScaleMinMax[1])])
              .text(function (d) { return d; });
        },

        /**
         * Prepares setting of the current model with the values from extent.
         * @param {boolean} set model
         * @param {boolean} force force firing the change event
         * @param {boolean} persistent sets the persistency of the change event
         */
        _setFromExtent: function(setModel, force, persistent) {
          var s = this.brush.extent();
      //    this._updateArcs(s);
          this._updateLabels(s);
          if(setModel) this._setModel(s, force, persistent);
        },

        /**
         * Sets the current value in model. avoid updating more than once in framerate
         * @param {number} value
         * @param {boolean} force force firing the change event
         * @param {boolean} persistent sets the persistency of the change event
         */
        _setModel: function (value, force, persistent) {
          value = [+value[0].toFixed(2), +value[1].toFixed(2)];
          this.model.size.set({"extent": value}, force, persistent);
        }

      });

      /*!
       * VIZABI GENERIC SLIDER CONTROL
       * Reusable SLIDER
       */

      var SimpleSlider = Component.extend({

          init: function (config, context) {
            this.template = '<div class="vzb-ss-holder"><input type="range" id="vzb-ss-slider" class="vzb-ss-slider" step="1"></div>';

            this.model_expects = [{
              name: "submodel"
            }];

            var _this = this;
            this.name = 'gapminder-simpleSlider';

            this.arg = config.arg;
            this.thumb_size = config.thumb_size;
            this.slider_properties = config.properties;

            this.model_binds = {};
            this.model_binds["change:submodel." + this.arg] = function (evt) {
              _this.updateView();
            };

            //contructor is the same as any component
            this._super(config, context);
              
            this._setModel = throttle(this._setModel, 50);
          },

          /**
           * Executes after the template is loaded and rendered.
           * Ideally, it contains HTML instantiations related to template
           * At this point, this.element and this.placeholder are available as a d3 object
           */
          readyOnce: function () {

            //default values
            var min = 0;
            var max = 1;
            var step = 0.1;
            var value = min;

            //selecting elements
            var _this = this;
            this.element = d3.select(this.element);
            this.slider = this.element.selectAll('#vzb-ss-slider');

            this.elementSize = this.element.node().getBoundingClientRect();
            this.sliderSize = this.slider.node().getBoundingClientRect();
            this.slider.style('left', (this.elementSize.left - this.sliderSize.left) + 'px');

            //TODO: replace this with utils.extend
            if(this.slider_properties){
              if(this.slider_properties.min != null) min = this.slider_properties.min;
              if(this.slider_properties.max != null) max = this.slider_properties.max;
              if(this.slider_properties.step != null) step = this.slider_properties.step;

              if(this.slider_properties.scale){
                value = this.slider_properties.scale(min);
              }
            }
              
            //step also defines the rounding of values that willbe sent to model: 0.1 --> 1 digit, 0.01 --> 2, 1 and up --> 0
            this.roundTo = step > 1 ? 0 : Math.round(Math.abs(Math.log(step)/Math.LN10));

            //check and change the slider's thumb size
            if(this.thumb_size){
              this.slider.classed('vzb-ss-slider', false);
              this.slider.classed('vzb-ss-slider-'+this.thumb_size, true);
            }

            this.slider
              .attr('min', min)
              .attr('max', max)
              .attr('step', step)
              .attr('value', value)
              .on('input', function () {
                var value = +d3.event.target.value;
                _this._setModel(value, false, false); // on drag - non-persistent changes while dragging
              })
              .on('change', function() {
                var value = +d3.event.target.value;
                _this._setModel(value, true); // on drag end - value is probably same as last 'input'-event, so force change
              });

            this.updateView();
          },

          updateView: function () {
            var value = this.model.submodel[this.arg];
            var slider_properties = this.slider_properties;
            var scale;

            if(slider_properties){
              scale = slider_properties.scale;
            }
            if (scale){
              value = scale.invert(value);
            }

            //this.slider.attr('value', value);
            this.slider.node().value = value;
          },

          _setModel: function (value, force, persistent) {
            // rescale value if scale is supplied in slider_properties 
            if(this.slider_properties && this.slider_properties.scale) value = this.slider_properties.scale(value);
            
            this.model.submodel.getModelObject(this.arg).set(value.toFixed(this.roundTo), force, persistent);
          }

        });

      var simplecheckbox = Component.extend({

        init: function(config, context) {
          this.template =
            '<span class="vzb-sc-holder vzb-dialog-checkbox"><input type="checkbox"><label></label></span>';
          var _this = this;
          this.name = 'gapminder-simplecheckbox';

          this.checkbox = config.checkbox;
          this.submodel = config.submodel;

          this.model_expects = [{
            name: "mdl"
              //TODO: learn how to expect model "axis" or "size" or "color"
          }, {
            name: "language",
            type: "language"
          }];


          this.model_binds = {
            "change:mdl": function(evt) {
              _this.updateView();
            },
            "change:language.strings": function(evt) {
              _this.updateView();
            }
          };

          var submodel = (this.submodel) ? this.submodel + ':' : '';
          this.model_binds["change:mdl." + submodel + this.checkbox] = function() {
            _this.updateView();
          };

          //contructor is the same as any component
          this._super(config, context);
        },

        ready: function() {
          this.parentModel = (this.submodel) ? this.model.mdl[this.submodel] : this.model.mdl;
          this.updateView();
        },

        readyOnce: function() {
          var _this = this;
          this.element = d3.select(this.element);
          var id = "-check-" + Math.random() * 1000;
          this.labelEl = this.element.select('label').attr("for", id);
          this.checkEl = this.element.select('input').attr("id", id)
            .on("change", function() {
              _this._setModel(d3.select(this).property("checked"));
            });
        },

        updateView: function() {
          this.translator = this.model.language.getTFunction();
          this.labelEl.text(this.translator("check/" + this.checkbox));
          this.checkEl.property("checked", !!this.parentModel[this.checkbox]);
        },

        _setModel: function(value) {
          this.parentModel[this.checkbox] = value;
        }

      });

      /*!
       * VIZABI MIN MAX INPUT FIELDS
       */

      var DOMAINMIN = "domainMin";
      var DOMAINMAX = "domainMax";
      var ZOOMEDMIN = "zoomedMin";
      var ZOOMEDMAX = "zoomedMax";

      var MinMaxInputs = Component.extend({

          /**
           * Initializes the Component.
           * Executed once before any template is rendered.
           * @param config The options passed to the component
           * @param context The component's parent
           */
          init: function(config, context) {

              this.name = 'gapminder-minmaxinputs';
              this.template = 'minmaxinputs.html';

              var _this = this;

              this.model_expects = [{
                  name: "marker",
                  type: "model"
              }, {
                  name: "time",
                  type: "time"
              }, {
                  name: "language",
                  type: "language"
              }];

              this.markerID = config.markerID;
              if(!config.markerID) warn("minmaxinputs.js complains on 'markerID' property: " + config.markerID);

              this.model_binds = {};
              this.model_binds["change:language.strings"] = function(evt) {
                  _this.updateView();
              };
              this.model_binds["change:marker." + this.markerID] = function(evt) {
                  _this.updateView();
              };
              this.model_binds["ready"] = function(evt) {
                  _this.updateView();
              };

              //contructor is the same as any component
              this._super(config, context);

              this.ui = extend({
                  selectDomainMinMax: false,
                  selectZoomedMinMax: false
              }, this.ui.getPlainObject());

          },

          ready: function() {
              this.updateView();
          },

          readyOnce: function() {
              var _this = this;

              this.element = d3.select(this.element);

              this.el_domain_labelMin = this.element.select('.vzb-mmi-domainmin-label');
              this.el_domain_labelMax = this.element.select('.vzb-mmi-domainmax-label');
              this.el_domain_fieldMin = this.element.select('.vzb-mmi-domainmin');
              this.el_domain_fieldMax = this.element.select('.vzb-mmi-domainmax');

              this.el_break = this.element.select('.vzb-mmi-break');
              
              this.el_zoomed_labelMin = this.element.select('.vzb-mmi-zoomedmin-label');
              this.el_zoomed_labelMax = this.element.select('.vzb-mmi-zoomedmax-label');
              this.el_zoomed_fieldMin = this.element.select('.vzb-mmi-zoomedmin');
              this.el_zoomed_fieldMax = this.element.select('.vzb-mmi-zoomedmax');


              _this.el_domain_fieldMin.on("change", function() {
                  _this._setModel(DOMAINMIN, this.value)
              });
              _this.el_domain_fieldMax.on("change", function() {
                  _this._setModel(DOMAINMAX, this.value)
              });

              _this.el_zoomed_fieldMin.on("change", function() {
                  _this._setModel(ZOOMEDMIN, this.value)
              });
              _this.el_zoomed_fieldMax.on("change", function() {
                  _this._setModel(ZOOMEDMAX, this.value)
              });
              
              this.element.selectAll("input")
                  .on("keypress", function(e) {
                      if(d3.event.which == 13) document.activeElement.blur();
                  });
          },

          updateView: function() {
            var _this = this;
            this.translator = this.model.language.getTFunction();

            this.el_domain_labelMin.text(this.translator("min") + ":");
            this.el_domain_labelMax.text(this.translator("max") + ":");
            this.el_zoomed_labelMin.text(this.translator("min") + ":");
            this.el_zoomed_labelMax.text(this.translator("max") + ":");

            this.el_domain_labelMin.classed('vzb-hidden', !this.ui.selectDomainMinMax);
            this.el_domain_labelMax.classed('vzb-hidden', !this.ui.selectDomainMinMax);
            this.el_domain_fieldMin.classed('vzb-hidden', !this.ui.selectDomainMinMax);
            this.el_domain_fieldMax.classed('vzb-hidden', !this.ui.selectDomainMinMax);

            this.el_break.classed('vzb-hidden', !(this.ui.selectDomainMinMax && this.ui.selectZoomedMinMax));

            this.el_zoomed_labelMin.classed('vzb-hidden', !this.ui.selectZoomedMinMax);
            this.el_zoomed_labelMax.classed('vzb-hidden', !this.ui.selectZoomedMinMax);
            this.el_zoomed_fieldMin.classed('vzb-hidden', !this.ui.selectZoomedMinMax);
            this.el_zoomed_fieldMax.classed('vzb-hidden', !this.ui.selectZoomedMinMax);

            var formatter = function(n) { 
              if(!n && n!==0) return n;
              if(isDate(n)) return _this.model.time.timeFormat(n);
              return d3.format(".2r")(n);
            }
            
            this.el_domain_fieldMin.property("value", formatter(this.model.marker[this.markerID].getScale().domain()[0]));
            this.el_domain_fieldMax.property("value", formatter(this.model.marker[this.markerID].getScale().domain()[1]));
            this.el_zoomed_fieldMin.property("value", formatter(this.model.marker[this.markerID].zoomedMin));
            this.el_zoomed_fieldMax.property("value", formatter(this.model.marker[this.markerID].zoomedMax));
          },

          _setModel: function(what, value) {
              this.model.marker[this.markerID][what] = strToFloat(value);
          }

      });

      var label = function(context) {

        return function d3_label() {
        
          var _this = context;

          var _cssPrefix;
          label.setCssPrefix = function(cssPrefix) {
            _cssPrefix = cssPrefix;
            return label;
          }    

          var labelDragger = d3.behavior.drag()
            .on("dragstart", function(d, i) {
              d3.event.sourceEvent.stopPropagation();
              var KEY = _this.KEY;
            })
            .on("drag", function(d, i) {
              var KEY = _this.KEY;
              if(!_this.model.ui.chart.labels.dragging) return;
              if(!this.druging) _this.druging = d[KEY];
              var cache = _this.cached[d[KEY]];
              cache.labelFixed = true;
              
              var viewWidth = _this._toolContext.width;       
              var viewHeight = _this._toolContext.height;       

              cache.labelX_ += d3.event.dx / viewWidth;
              cache.labelY_ += d3.event.dy / viewHeight;

              var resolvedX = _this.xScale(cache.labelX0) + cache.labelX_ * viewWidth;
              var resolvedY = _this.yScale(cache.labelY0) + cache.labelY_ * viewHeight;

              var resolvedX0 = _this.xScale(cache.labelX0);
              var resolvedY0 = _this.yScale(cache.labelY0);

              var lineGroup = _this.entityLines.filter(function(f) {
                return f[KEY] == d[KEY];
              });

              label._repositionLabels(d, i, this, resolvedX, resolvedY, resolvedX0, resolvedY0, 0, null, lineGroup);
            })
            .on("dragend", function(d, i) {
              var KEY = _this.KEY;
              if(_this.druging) {
                var cache = _this.cached[d[KEY]];
                _this.druging = null;
                cache.labelOffset[0] = cache.labelX_;
                cache.labelOffset[1] = cache.labelY_;
                _this.model.entities.setLabelOffset(d, [cache.labelX_, cache.labelY_]);
              }
            });
          
          function label(container) {
            container
              .call(labelDragger)
              .each(function(d, index) {
                var view = d3.select(this);

        // Ola: Clicking bubble label should not zoom to countries boundary #811
        // It's too easy to accidentally zoom
        // This feature will be activated later, by making the label into a "context menu" where users can click Split, or zoom,.. hide others etc....

                view.append("rect")
                  .attr("class","vzb-label-glow")
                  .attr("filter", "url(" + location.pathname + "#vzb-glow-filter)");
                view.append("rect")
                  .attr("class","vzb-label-fill vzb-tooltip-border");
        //          .on("click", function(d, i) {
        //            //default prevented is needed to distinguish click from drag
        //            if(d3.event.defaultPrevented) return;
        //
        //            var maxmin = _this.cached[d[KEY]].maxMinValues;
        //            var radius = utils.areaToRadius(_this.sScale(maxmin.valueSmax));
        //            _this._panZoom._zoomOnRectangle(_this.element,
        //              _this.xScale(maxmin.valueXmin) - radius,
        //              _this.yScale(maxmin.valueYmin) + radius,
        //              _this.xScale(maxmin.valueXmax) + radius,
        //              _this.yScale(maxmin.valueYmax) - radius,
        //              false, 500);
        //          });

                view.append("text").attr("class", _cssPrefix + "-label-content vzb-label-shadow");

                view.append("text").attr("class", _cssPrefix + "-label-content");

                var cross = view.append("g").attr("class", _cssPrefix + "-label-x vzb-transparent");
                setIcon(cross, iconClose);

                cross.insert("circle", "svg");

                cross.select("svg")
                  .attr("class", _cssPrefix + "-label-x-icon")
                  .attr("width", "0px")
                  .attr("height", "0px");

                cross.on("click", function() {
                  _this.model.entities.clearHighlighted();
                  //default prevented is needed to distinguish click from drag
                  if(d3.event.defaultPrevented) return;
                  _this.model.entities.selectEntity(d);
                });

              })
              .on("mouseover", function(d) {
                if(isTouchDevice()) return;
                _this.model.entities.highlightEntity(d, null, null, true);
                var KEY = _this.KEY || _this.model.entities.getDimension();
                // hovered label should be on top of other labels: if "a" is not the hovered element "d", send "a" to the back
                _this.entityLabels.sort(function (a, b) { return a[KEY] != d[KEY]? -1 : 1; });
                d3.select(this).selectAll("." + _cssPrefix + "-label-x")
                  .classed("vzb-transparent", false);
              })
              .on("mouseout", function(d) {
                if(isTouchDevice()) return;
                _this.model.entities.clearHighlighted();
                d3.select(this).selectAll("." + _cssPrefix + "-label-x")
                  .classed("vzb-transparent", true);
              })
              .on("click", function(d) {
                if (!isTouchDevice()) return;
                var cross = d3.select(this).selectAll("." + _cssPrefix + "-label-x");
                cross.classed("vzb-transparent", !cross.classed("vzb-transparent"));
              });
          
            return label;  
          };

          label.line = function(container) {
            container.append("line").attr("class", _cssPrefix + "-label-line");
          };
                  



          label._repositionLabels = _repositionLabels;
          function _repositionLabels(d, i, labelContext, _X, _Y, _X0, _Y0, duration, showhide, lineGroup) {

            var cache = _this.cached[d[_this.KEY]];

            var labelGroup = d3.select(labelContext);

            //protect label and line from the broken data
            var brokenInputs = !_X && _X !==0 || !_Y && _Y !==0 || !_X0 && _X0 !==0 || !_Y0 && _Y0 !==0;
            if(brokenInputs) {
                labelGroup.classed("vzb-invisible", brokenInputs);
                lineGroup.classed("vzb-invisible", brokenInputs);
                return;
            }
            
            var viewWidth = _this._toolContext.width;       
            var viewHeight = _this._toolContext.height;       
            var rectBBox = cache.rectBBox;
            var width = rectBBox.width;
            var height = rectBBox.height;

            //apply limits so that the label doesn't stick out of the visible field
            if(_X - width <= 0) { //check left
              _X = width;
              cache.labelX_ = (_X - _this.xScale(cache.labelX0)) / viewWidth;
            } else if(_X + 5 > viewWidth) { //check right
              _X = viewWidth - 5; 
              cache.labelX_ = (_X - _this.xScale(cache.labelX0)) / viewWidth;
            }
            if(_Y - height * .75 <= 0) { // check top
              _Y = height * .75;
              cache.labelY_ = (_Y - _this.yScale(cache.labelY0)) / viewHeight;
            } else if(_Y + height * .35 > viewHeight) { //check bottom
              _Y = viewHeight - height * .35;
              cache.labelY_ = (_Y - _this.yScale(cache.labelY0)) / viewHeight;
            }

            if(duration == null) duration = _this._toolContext.duration;
            if(duration) {
              if(showhide && !d.hidden){
                  //if need to show label
                
                  labelGroup.classed("vzb-invisible", d.hidden);
                  labelGroup
                      .attr("transform", "translate(" + _X + "," + _Y + ")")
                      .style("opacity", 0)
                      .transition().duration(duration).ease("exp")
                      .style("opacity", 1)
                      //i would like to set opactiy to null in the end of transition. 
                      //but then fade in animation is not working for some reason
                      .each("interrupt", function(){
                          labelGroup
                              .style("opacity", 1)
                      });
                  lineGroup.classed("vzb-invisible", d.hidden);
                  lineGroup
                      .attr("transform", "translate(" + _X + "," + _Y + ")")
                      .style("opacity", 0)
                      .transition().duration(duration).ease("exp")
                      .style("opacity", 1)
                      //i would like to set opactiy to null in the end of transition. 
                      //but then fade in animation is not working for some reason
                      .each("interrupt", function(){
                          lineGroup
                              .style("opacity", 1)
                      });
                  
              } else if(showhide && d.hidden) {
                  //if need to hide label
                  
                  labelGroup
                      .style("opacity", 1)
                      .transition().duration(duration).ease("exp")
                      .style("opacity", 0)
                      .each("end", function(){
                          labelGroup
                              .style("opacity", 1) //i would like to set it to null. but then fade in animation is not working for some reason
                              .classed("vzb-invisible", d.hidden);
                      })
                  lineGroup
                      .style("opacity", 1)
                      .transition().duration(duration).ease("exp")
                      .style("opacity", 0)
                      .each("end", function(){
                          lineGroup
                              .style("opacity", 1) //i would like to set it to null. but then fade in animation is not working for some reason
                              .classed("vzb-invisible", d.hidden);
                      })      
                  
              } else {
                  // just update the position
                  
                  labelGroup
                      .transition().duration(duration).ease("linear")
                      .attr("transform", "translate(" + _X + "," + _Y + ")");
                  lineGroup
                      .transition().duration(duration).ease("linear")
                      .attr("transform", "translate(" + _X + "," + _Y + ")");
              }
                
            } else {
              labelGroup
                  .interrupt()
                  .attr("transform", "translate(" + _X + "," + _Y + ")");
              lineGroup
                  .interrupt()
                  .attr("transform", "translate(" + _X + "," + _Y + ")");
              if(showhide) labelGroup.classed("vzb-invisible", d.hidden);
              if(showhide) lineGroup.classed("vzb-invisible", d.hidden);
            }

            var diffX1 = _X0 - _X;
            var diffY1 = _Y0 - _Y;
            var textBBox = labelGroup.select('text').node().getBBox();
            var diffX2 = -textBBox.width * .5;
            var diffY2 = -height * .2;
            var labels = _this.model.ui.chart.labels;

            var bBox = labels.removeLabelBox ? textBBox : rectBBox;
            
            var FAR_COEFF = _this.activeProfile.labelLeashCoeff||0;

            var lineHidden = circleRectIntersects({x: diffX1, y: diffY1, r: cache.scaledS0},
              {x: diffX2, y: diffY2, width: (bBox.height * 2 * FAR_COEFF + bBox.width), height: (bBox.height * (2 * FAR_COEFF + 1))});
            lineGroup.select('line').classed("vzb-invisible", lineHidden);
            if(lineHidden) return;

            if(labels.removeLabelBox) {
              var angle = Math.atan2(diffX1 - diffX2, diffY1 - diffY2) * 180 / Math.PI;
              var deltaDiffX2 = (angle >= 0 && angle <= 180) ? (bBox.width * .5) : (-bBox.width * .5);
              var deltaDiffY2 = (Math.abs(angle) <= 90) ? (bBox.height * .55) : (-bBox.height * .45);
              diffX2 += Math.abs(diffX1 - diffX2) > textBBox.width * .5 ? deltaDiffX2 : 0;
              diffY2 += Math.abs(diffY1 - diffY2) > textBBox.height * .5 ? deltaDiffY2 : (textBBox.height * .05);
            }

            var longerSideCoeff = Math.abs(diffX1) > Math.abs(diffY1) ? Math.abs(diffX1) / viewWidth : Math.abs(diffY1) / viewHeight;
            lineGroup.select("line").style("stroke-dasharray", "0 " + (cache.scaledS0) + " " + ~~(longerSideCoeff + 2) + "00%");

            lineGroup.selectAll("line")
              .attr("x1", diffX1)
              .attr("y1", diffY1)
              .attr("x2", diffX2)
              .attr("y2", diffY2);

          }
        
          /*
          * Adapted from 
          * http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection
          * 
          * circle { 
          *  x: center X 
          *  y: center Y
          *  r: radius
          * }
          * 
          * rect {
          *  x: center X
          *  y: center Y
          *  width: width
          *  height: height
          * }
          */
          function circleRectIntersects(circle, rect) {
            var circleDistanceX = Math.abs(circle.x - rect.x);
            var circleDistanceY = Math.abs(circle.y - rect.y);    
            var halfRectWidth = rect.width * .5;
            var halfRectHeight = rect.height * .5;

            if (circleDistanceX > (halfRectWidth + circle.r)) { return false; }
            if (circleDistanceY > (halfRectHeight + circle.r)) { return false; }

            if (circleDistanceX <= halfRectWidth) { return true; } 
            if (circleDistanceY <= halfRectHeight) { return true; }

            var cornerDistance_sq = Math.pow(circleDistanceX - halfRectWidth, 2) +
                                Math.pow(circleDistanceY - halfRectHeight, 2);

            return (cornerDistance_sq <= Math.pow(circle.r,2));
          }

          return label;
        }();
      }

      var OPTIONS$1 = {
        TOOL_CONTEXT: null,
        LABELS_CONTAINER_CLASS: '',
        LINES_CONTAINER_CLASS: '',
        CSS_PREFIX: ''
      }; 

      var Labels = Component.extend({

        init: function(config, context) {
          var _this = this;

          this.name = 'gapminder-labels';

          this.model_expects = [{
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "ui",
            type: "model"
          }];

          this.context = context;

          this.model_binds = {
            "change:entities.select": function() {
              if(!_this._readyOnce) return;
              //console.log("EVENT change:entities:select");
              _this.selectDataPoints();
            }
          }
          if(context.model.state.marker.size_label)
            this.model_binds['change:marker.size_label.extent'] = function(evt, path) {
              //console.log("EVENT change:marker:size:max");
              if(!_this._readyOnce) return;
              _this.updateLabelSizeLimits();
              _this.updateLabelsOnlyTextSize();
            }
          if(context.model.ui.chart.labels.hasOwnProperty('removeLabelBox'))
            this.model_binds['change:ui.chart.labels.removeLabelBox'] = function(evt, path) {
              //console.log("EVENT change:marker:size:max");
              if(!_this._readyOnce) return;
              _this.updateLabelsOnlyTextSize();
            }

          //contructor is the same as any component
          this._super(config, context);

          this.ui = extend({
            //...add properties here
          }, this.ui);

          this.label = label(this);
          this._xScale = null;
          this._yScale = null;
          this._closeCrossHeight = 0;
          this.labelSizeTextScale = null;
        },

        ready: function() {
          this.updateLabelSizeLimits();
          this.updateIndicators();
          //this.updateLabelsOnlyTextSize();
        },

        readyOnce: function() {
          var _this = this;
          
          this.KEY = this.model.entities.getDimension();
          
          this.cached = {};

          this._toolContext = OPTIONS$1.TOOL_CONTEXT;
          this._cssPrefix = OPTIONS$1.CSS_PREFIX;
          this.label.setCssPrefix(OPTIONS$1.CSS_PREFIX);
          
          this.rootEl = this.root.element instanceof Array? this.root.element : d3.select(this.root.element);
          this.labelsContainer = this.rootEl.select("." + OPTIONS$1.LABELS_CONTAINER_CLASS);
          this.linesContainer = this.rootEl.select("." + OPTIONS$1.LINES_CONTAINER_CLASS);
          this.updateIndicators();
          this.updateSize();
          this.selectDataPoints();
        },
        
        config: function(newOptions) {
          extend(OPTIONS$1, newOptions);
        },

        updateLabelSizeLimits: function() {
          var _this = this;
          if (!this.model.marker.size_label) return;
          var extent = this.model.marker.size_label.extent || [0,1];

          var minLabelTextSize = this.activeProfile.minLabelTextSize;
          var maxLabelTextSize = this.activeProfile.maxLabelTextSize;
          var minMaxDelta = maxLabelTextSize - minLabelTextSize;

          this.minLabelTextSize = Math.max(minLabelTextSize + minMaxDelta * extent[0], minLabelTextSize);
          this.maxLabelTextSize = Math.max(minLabelTextSize + minMaxDelta * extent[1], minLabelTextSize);

          if(this.model.marker.size_label.use == 'constant') {
            // if(!this.model.marker.size_label.which) {
            //   this.maxLabelTextSize = this.activeProfile.defaultLabelTextSize;
            //   this.model.marker.size_label.set({'domainMax': (this.maxLabelTextSize - minLabelTextSize) / minMaxDelta, 'which': '_default'});
            //   return; 
            // }
            this.minLabelTextSize = this.maxLabelTextSize;
          } 

          if(this.model.marker.size_label.scaleType !== "ordinal" || this.model.marker.size_label.use == 'constant') {
            this.labelSizeTextScale.range([_this.minLabelTextSize, _this.maxLabelTextSize]);
          } else {
            this.labelSizeTextScale.rangePoints([_this.minLabelTextSize, _this.maxLabelTextSize], 0).range();
          }

        },
        
        updateIndicators: function() {
          var _this = this;

          //scales
          if(this.model.marker.size_label) {
            this.labelSizeTextScale = this.model.marker.size_label.getScale();
          }
        },
        
        setScales: function(xScale, yScale) {
          if(!this._readyOnce) return;
          this._xScale = xScale;
          this._yScale = yScale;
        },
        
        setCloseCrossHeight: function(closeCrossHeight) {
          this._closeCrossHeight = closeCrossHeight;
        },
       
        xScale: function(x) {
          return this._xScale ? this._xScale(x) : (x * this._toolContext.width);
        },

        yScale: function(y) {
          return this._yScale ? this._yScale(y) : (y * this._toolContext.height);
        },

        selectDataPoints: function() {
          var _this = this;
          var KEY = this.KEY;
          var _cssPrefix = this._cssPrefix;

          this.entityLabels = this.labelsContainer.selectAll("." + _cssPrefix + "-entity")
            .data(_this.model.entities.select, function(d) {
              return(d[KEY]);
            });
          this.entityLines = this.linesContainer.selectAll("." + _cssPrefix + "-entity")
            .data(_this.model.entities.select, function(d) {
              return(d[KEY]);
            });

          this.entityLabels.exit()
            .each(function(d) {
              if(_this.cached[d[KEY]] != null) {
                  _this.cached[d[KEY]] = void 0;
              }
            })
            .remove();
          this.entityLines.exit()
            .remove();
          this.entityLines
            .enter().append('g')
            .attr("class", function(d, index){return _cssPrefix + "-entity line-" + d[KEY]})
            .each(function(d, index) {
              _this.label.line(d3.select(this));
            });

          this.entityLabels
            .enter().append("g")
            .attr("class", function(d, index){return _cssPrefix + "-entity label-" + d[KEY]})
            .each(function(d, index) {
              _this.cached[d[KEY]] = {};      
              _this.label(d3.select(this));
            });
        },
        
        showCloseCross: function(d, show) {
          var KEY = this.KEY; 
          //show the little cross on the selected label
          this.entityLabels
              .filter(function(f){return f[KEY] == d[KEY]})
              .select("." + this._cssPrefix + "-label-x")
              .classed("vzb-transparent", !show);
        },
        
        highlight: function(d, highlight) {
          var KEY = this.KEY; 
          var labels = this.entityLabels; 
          if(d) {
            labels = labels.filter(function(f) {
                return f[KEY] == d[KEY]
              });
          }
          labels.classed("vzb-highlighted", highlight);
        },
        
        updateLabel: function(d, index, cache, valueX, valueY, valueS, valueC, valueL, valueLST, duration, showhide) {
          var _this = this;
          var KEY = this.KEY;
          if(d[KEY] == _this.druging)
            return;

          var _cssPrefix = OPTIONS$1.CSS_PREFIX;
          var _context = OPTIONS$1.TOOL_CONTEXT;

          // only for selected entities
          if(_this.model.entities.isSelected(d) && _this.entityLabels != null) {
            if(_this.cached[d[KEY]] == null) this.selectDataPoints();
            
            var cached = _this.cached[d[KEY]];
            if(cache) extend(cached, cache);


            if(cached.scaledS0 == null || cached.labelX0 == null || cached.labelY0 == null) { //initialize label once
              if(valueS) cached.scaledS0 = areaToRadius(this._toolContext.sScale(valueS));
              cached.labelX0 = valueX;
              cached.labelY0 = valueY;
              cached.valueLST = valueLST;
              cached.scaledC0 = valueC!=null?this._toolContext.cScale(valueC):this._toolContext.COLOR_WHITEISH;
            }

            if(cached.labelX_ == null || cached.labelY_ == null)
            {            
              var select = find(_this.model.entities.select, function(f) {
                return f[KEY] == d[KEY]
              });
              cached.labelOffset = select.labelOffset || [0,0];
            }

            var brokenInputs = !cached.labelX0 && cached.labelX0 !==0 || !cached.labelY0 && cached.labelY0 !==0 || !cached.scaledS0 && cached.scaledS0 !==0;

            var lineGroup = _this.entityLines.filter(function(f) {
              return f[KEY] == d[KEY];
            });
            // reposition label
            _this.entityLabels.filter(function(f) {
                return f[KEY] == d[KEY]
              })
              .each(function(groupData) {

                var labelGroup = d3.select(this);

                if (brokenInputs) {
                  labelGroup.classed("vzb-invisible", brokenInputs);
                  lineGroup.classed("vzb-invisible", brokenInputs);
                  return;
                }

                var text = labelGroup.selectAll("." + _cssPrefix + "-label-content")
                  .text(valueL);                       
                
                _this._updateLabelSize(d, index, labelGroup, valueLST, text);          
                
                _this.positionLabel(d, index, this, duration, showhide, lineGroup);
              });
          }
        },
        
        _updateLabelSize: function(d, index, labelGroup, valueLST, text) { 
          var _this = this;
          var KEY = this.KEY;
          var cached = _this.cached[d[KEY]];

          
          var _cssPrefix = OPTIONS$1.CSS_PREFIX;
          var _context = OPTIONS$1.TOOL_CONTEXT;

                         
          var labels = _this.model.ui.chart.labels || {};
          labelGroup.classed('vzb-label-boxremoved', labels.removeLabelBox);
          
          var _text = text || labelGroup.selectAll("." + _cssPrefix + "-label-content"); 
          
          if(valueLST != null && _this.labelSizeTextScale) {
            var range = _this.labelSizeTextScale.range();
            var fontSize = range[0] + Math.sqrt((_this.labelSizeTextScale(valueLST) - range[0]) * (range[1] - range[0]));
            _text.attr('font-size', fontSize + 'px');
          }

          var contentBBox = _text[0][0].getBBox();
          
          var rect = labelGroup.selectAll("rect");
          
          if(!cached.textWidth || cached.textWidth != contentBBox.width) {
            cached.textWidth = contentBBox.width;

            var labelCloseHeight = _this._closeCrossHeight || contentBBox.height;//_this.activeProfile.infoElHeight * 1.2;//contentBBox.height;

            var labelCloseGroup = labelGroup.select("." + _cssPrefix + "-label-x")
              .attr('transform', 'translate(' + 4 + ',' + (-contentBBox.height * .85) + ')');
              //.attr("x", /*contentBBox.height * .0 + */ 4)
              //.attr("y", contentBBox.height * -1);

            labelCloseGroup.select("circle")
              .attr("cx", /*contentBBox.height * .0 + */ 0)
              .attr("cy", 0)
              .attr("r", labelCloseHeight * .5);

            labelCloseGroup.select("svg")
              .attr("x", -labelCloseHeight * .5 )
              .attr("y", labelCloseHeight * -.5)
              .attr("width", labelCloseHeight)
              .attr("height", labelCloseHeight)
        
            rect.attr("width", contentBBox.width + 8)
              .attr("height", contentBBox.height * 1.2)
              .attr("x", -contentBBox.width - 4)
              .attr("y", -contentBBox.height * .85)
              .attr("rx", contentBBox.height * .2)
              .attr("ry", contentBBox.height * .2);

            //cache label bound rect for reposition
            cached.rectBBox = rect.node().getBBox();
            //cached.moveX = 5;
            //cached.moveY = contentBBox.height * .3;
          }
          
          var glowRect = labelGroup.select(".vzb-label-glow")
          if(glowRect.attr("stroke") !== cached.scaledC0) {
            glowRect.attr("stroke", cached.scaledC0);
          }
        },
          
        updateLabelsOnlyTextSize: function() {
          var _this = this;
          var KEY = this.KEY;
          
          this.entityLabels.each(function(d, index) {
            var cached = _this.cached[d[KEY]];
              _this._updateLabelSize(d, index, d3.select(this), _this._toolContext.frame.size_label[d[KEY]]);
              var lineGroup = _this.entityLines.filter(function(f) {
                return f[KEY] == d[KEY];
              });
              _this.positionLabel(d, index, this, 0, null, lineGroup);
            });
        },
        
        updateLabelOnlyPosition: function(d, index, cache) {
          var _this = this;
          var KEY = this.KEY;
          var cached = this.cached[d[KEY]];
          if(cache) extend(cached, cache);

          var lineGroup = _this.entityLines.filter(function(f) {
            return f[KEY] == d[KEY];
          });
          
          this.entityLabels.filter(function(f) {
              return f[KEY] == d[KEY]
            })
            .each(function(groupData) {
              _this.positionLabel(d, index, this, 0, null, lineGroup);
            });
        },

        updateLabelOnlyColor: function(d, index, cache) {
          var _this = this;
          var KEY = this.KEY;
          var cached = this.cached[d[KEY]];
          if(cache) extend(cached, cache);

          var labelGroup = _this.entityLabels.filter(function(f) {
            return f[KEY] == d[KEY];
          });
         
          _this._updateLabelSize(d, index, labelGroup, null);
          
        },
        
        positionLabel: function(d, index, context, duration, showhide, lineGroup) {
          var KEY = this.KEY;
          var cached = this.cached[d[KEY]];

          var viewWidth = this._toolContext.width;       
          var viewHeight = this._toolContext.height;       

          var resolvedX0 = this.xScale(cached.labelX0);
          var resolvedY0 = this.yScale(cached.labelY0);
          
          if(!cached.labelOffset) cached.labelOffset = [0,0];
          cached.labelX_ = cached.labelOffset[0] || (-cached.scaledS0 * .75 - 5) / viewWidth;
          cached.labelY_ = cached.labelOffset[1] || (-cached.scaledS0 * .75 - 11) / viewHeight;
          
          //check default label position and switch to mirror position if position 
          //does not bind to visible field

          var resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
          if(cached.labelOffset[0] == 0) {
            if(resolvedX - cached.rectBBox.width <= 0) { //check left
              cached.labelX_ = (cached.scaledS0 * .75 + cached.rectBBox.width) / viewWidth;
              resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
            } else if(resolvedX + 15 > viewWidth) { //check right
              cached.labelX_ = (viewWidth - 15 - resolvedX0) / viewWidth;
              resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
            }
          }
          var resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
          if(cached.labelOffset[1] == 0) {
            if(resolvedY - cached.rectBBox.height <= 0) { // check top 
              cached.labelY_ = (cached.scaledS0 * .75 + cached.rectBBox.height) / viewHeight;
              resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
            } else if(resolvedY + 10 > viewHeight) { //check bottom
              cached.labelY_ = (viewHeight - 10 - resolvedY0) / viewHeight;
              resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
            }
          }
          this.label._repositionLabels(d, index, context, resolvedX, resolvedY, resolvedX0, resolvedY0, duration, showhide, lineGroup);
        },
        
        updateSize: function() {
          var profiles = {
            small: {
              minLabelTextSize: 7,
              maxLabelTextSize: 21,
              defaultLabelTextSize: 12,
              labelLeashCoeff: 0.4
            },
            medium: {
              minLabelTextSize: 7,
              maxLabelTextSize: 30,
              defaultLabelTextSize: 15,
              labelLeashCoeff: 0.3
            },
            large: {
              minLabelTextSize: 6,
              maxLabelTextSize: 48,
              defaultLabelTextSize: 20,
              labelLeashCoeff: 0.2
            }
          };

          var _this = this;

          this.activeProfile = this.getActiveProfile(profiles);
          
          this.updateLabelSizeLimits();
        }

      });

      /*!
       * VIZABI INDICATOR PICKER
       * Reusable indicator picker component
       */

      var IndPicker = Component.extend({

          /**
           * Initializes the Indicator Picker.
           * Executed once before any template is rendered.
           * @param config The options passed to the component
           * @param context The component's parent
           */
          init: function(config, context) {

              this.name = 'gapminder-indicatorpicker';
              this.template = '<span class="vzb-ip-holder"><span class="vzb-ip-select"></span><span class="vzb-ip-info"></span></span>';

              var _this = this;

              this.model_expects = [{
                  name: "marker",
                  type: "model"
              }, {
                  name: "language",
                  type: "language"
              }];

              this.markerID = config.markerID;
              if(!config.markerID) warn("indicatorpicker.js complains on 'markerID' property: " + config.markerID);

              this.model_binds = {
                  "change:language.strings": function(evt) {
                      _this.updateView();
                  },
                  "ready": function(evt) {
                      _this.updateView();
                  }
              };
              
              if(this.markerID) {
                this.model_binds["change:marker." + this.markerID + ".which"] = function(evt) {
                    _this.updateView();
                  } 
              }

              //contructor is the same as any component
              this._super(config, context);
          },

          ready: function() {
              this.updateView();
          },


          readyOnce: function() {
              var _this = this;

              this.el_select = d3.select(this.element).select('.vzb-ip-select');

              this.el_select.on("click", function() {
                  var rect = _this.el_select.node().getBoundingClientRect();
                  var rootEl = _this.root.element instanceof Array? _this.root.element : d3.select(_this.root.element);
                  var rootRect = rootEl.node().getBoundingClientRect();
                  var treemenuComp = _this.root.findChildByName("gapminder-treemenu");
                  var treemenuColWidth = treemenuComp.activeProfile.col_width; 
                  var treemenuPaddLeft = parseInt(treemenuComp.wrapper.style('padding-left'), 10) || 0; 
                  var treemenuPaddRight = parseInt(treemenuComp.wrapper.style('padding-right'), 10) || 0; 
                  var topPos = rect.bottom - rootRect.top;
                  var leftPos = rect.left - rootRect.left - (treemenuPaddLeft + treemenuPaddRight + treemenuColWidth - rect.width) * .5;
              
                  treemenuComp
                      .markerID(_this.markerID)
                      .alignX("left")
                      .alignY("top")
                      .top(topPos)
                      .left(leftPos)
                      .updateView()
                      .toggle();
              });

              this.infoEl = d3.select(this.element).select('.vzb-ip-info');
              setIcon(this.infoEl, iconQuestion)
                .select("svg").attr("width", "0px").attr("height", "0px");
                
              this.infoEl.on("click", function() {
                _this.root.findChildByName("gapminder-datanotes").pin();
              })
              this.infoEl.on("mouseover", function() {
                var rect = _this.el_select.node().getBoundingClientRect();
                var rootRect = _this.root.element.getBoundingClientRect();
                var topPos = rect.bottom - rootRect.top;
                var leftPos = rect.left - rootRect.left + rect.width;
                
                _this.root.findChildByName("gapminder-datanotes").setHook(_this.markerID).show().setPos(leftPos, topPos);
              })
              this.infoEl.on("mouseout", function() {
                _this.root.findChildByName("gapminder-datanotes").hide();
              })


          },

          
          updateView: function() {
              if(!this._readyOnce) return;

              var _this = this;
              var translator = this.model.language.getTFunction();
              
              var which = this.model.marker[this.markerID].which;
              var type = this.model.marker[this.markerID]._type;
              
              //Let the indicator "_default" in tree menu be translated differnetly for every hook type
              this.el_select.text(translator("indicator" + (which==="_default" ? "/" + type : "") + "/" + which));
              
              // hide info el if no data is available for it to make sense
              var hideInfoEl = ((translator("description/" + which) == "description/" + which)
                  && (translator("sourceName/" + which) == "sourceName/" + which)
                  && !_this.model.marker[_this.markerID].getConceptprops().sourceLink); 
              this.infoEl.classed("vzb-hidden", hideInfoEl);
          }
          
      });

      var DraggableList = Component.extend({

        init: function(config, context) {
          this.template = '<span class="vzb-dl-holder"><ul class="vzb-draggable list vzb-dialog-scrollable"></ul></span>';
          var _this = this;
          this.name = 'draggableList';

          this.dataArrFn = config.dataArrFn;
          this.lang = config.lang;

          this.model_expects = [{
            name: "group",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }, {
            name: "chart",
            type: "model"
          }];
          
          this.groupID = config.groupID;
          this.isEnabled = config.isEnabled;
          this.draggable = true; 

          if(!config.groupID) warn("draggablelist.js complains on 'groupID' property: " + config.groupID);

          this.model_binds = {
            "change:language.strings": function(evt) {
              _this.updateView();
            }
          };
          
          this.model_binds["change:group." + this.groupID] = function(evt) {
              _this.updateView();
          };
          this.model_binds["change:chart." + this.isEnabled] = function(evt) {
            _this.draggable = _this.model.chart[_this.isEnabled];
            _this.updateView();
          };
          

          this._super(config, context);

          this.updateData = debounce(this.updateData, 1000);
          
          this.itemDragger = d3.behavior.drag()
            .on('dragstart', function(draggedData, i) {
              if(_this.dataUpdateFlag || !_this.draggable) return;
              d3.event.sourceEvent.stopPropagation();
              _this.parentBoundRect = _this.element.node().getBoundingClientRect();
              _this.element
                .selectAll('div')
                .each(function(d, i) {
                  var boundRect = this.getBoundingClientRect();
                  d._y = boundRect.top;
                  d._top = 0; 
                  if(draggedData.data === d.data) {
                    d._height = boundRect.height;
                    _this.selectedNode = this;
                  }
                })
              d3.select(_this.selectedNode)
                .classed('dragged', true)
            })
            
            .on('drag', function(draggedData, draggedIndex) {
              if(_this.dataUpdateFlag || !_this.draggable) return;
              draggedData._top += d3.event.dy;
              var newDraggedY = draggedData._y + draggedData._top;
              if(newDraggedY > _this.parentBoundRect.top 
                && newDraggedY + draggedData._height < _this.parentBoundRect.top + _this.parentBoundRect.height)
              {
                _this.itemsEl
                  .style('top', function(d, i) {
                    var top = 0;
                    
                    if (i < draggedIndex && d._y + draggedData._height * .5 > newDraggedY) {
                      top = draggedData._height;
                    }
                    else if(i > draggedIndex && d._y - draggedData._height * .5 < newDraggedY) {
                      top = -draggedData._height;
                    }
                    
                    if (i != draggedIndex) d._top = top;
                    return d._top + "px";
                 })
              }
            })
            
            .on('dragend', function(d, i) {
              if(_this.dataUpdateFlag || !_this.draggable) return;
              _this.getData();     
            })
            
        },

        ready: function() {
          var _this = this;

          this.updateView();

          this.itemsEl = this.element
            .selectAll('div')
          
          this.itemsEl
            .call(_this.itemDragger);
            
          var test = this.itemsEl.select('li')
            .on('mouseover', function() {
              d3.select(this).classed('hover', true);
            })
            .on('mouseout', function() {
              d3.select(this).classed('hover', false);        
            })
            .on('touchstart', function() {
              d3.event.preventDefault();
            })
            
        },

        updateView: function() {
          var _this = this;
          this.translator = this.model.language.getTFunction();

          this.items = this.element.selectAll('div').data(function() {
            return _this.dataArrFn().map( function(d) { return {data:d};})});
          var draggable = _this.draggable?true:null;
          this.items.enter()
            .append('div')
            .append('li');
          this.items.select('li').classed('hover', false).each(function(val, index) {
              d3.select(this).attr('data', val['data']).text(_this.translator(_this.lang + val['data']));
            });
          this.items.exit().remove();
          this.element.selectAll('div')
            .style('top', '')
            .attr('draggable', draggable)
            .classed('dragged', false);
          this.dataUpdateFlag = false;
           
        },
        
        getData: function() {
          var dataArr = [];
          var data = this.element
            .selectAll('div').data();

          dataArr = data
            .sort(function(a, b) {
              return (a._y + a._top) - (b._y + b._top);
            })
            .map(function(d) {
              return d.data        
            })
          if(arrayEquals(this.dataArrFn(), dataArr)) {
            this.updateView();
          } else {
            this.dataUpdateFlag = true;
            this.updateData(dataArr);
          }
        },
        
        updateData: function(dataArr) {
          this.dataArrFn(dataArr);    
        },

        readyOnce: function() {
          var _this = this;

          this.element = d3.select(this.element).select('.list');
          
        }

      });

      /*!
       * VIZABI DIALOG
       * Reusable Dialog component
       */

      var Dialog = Component.extend({
        /**
         * Initializes the dialog
         * @param {Object} config Initial config, with name and placeholder
         * @param {Object} parent Reference to tool
         */
        init: function(config, parent) {
          this.name = this.name || '';

          this.model_expects = this.model_expects || [{
            name: "state",
            type: "model"
          }, {
            name: "ui",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];

          this.template = this.name + '.html';

          this._super(config, parent);
        },

        /**
         * Executed when the dialog has been rendered
         */
        readyOnce: function() {
          this.element = d3.select(this.element);
          this.titleEl = this.element.selectAll('.vzb-top-dialog > .vzb-dialog-modal > .vzb-dialog-title');
          this.buttonsEl = this.element.selectAll('.vzb-top-dialog > .vzb-dialog-modal > .vzb-dialog-buttons');
          this.contentEl = this.element.selectAll('.vzb-top-dialog > .vzb-dialog-modal > .vzb-dialog-content');
        },

        ready: function() {
          var _this = this;
          this.placeholderEl = d3.select(this.placeholder);
          this.rootEl = this.root.element instanceof Array? this.root.element : d3.select(this.root.element)
          this.dragHandler = this.placeholderEl.select("[data-click='dragDialog']");
          this.dragHandler.html(iconDrag);
          this.pinIcon = this.placeholderEl.select("[data-click='pinDialog']");
          this.pinIcon.html(iconPin);
          this.dragContainerEl = d3.select('.vzb-tool');
          this.topPos = '';
          var profile = this.getLayoutProfile();

          var dg = dialogDrag(this.placeholderEl, this.dragContainerEl, 10);
          var dragBehavior = d3.behavior.drag()
            .on('dragstart', function D3dialogDragStart() {
              var topPos = _this.placeholderEl.node().offsetTop;
              _this.placeholderEl.style({'top': topPos + 'px', 'bottom': 'auto'});
              _this.trigger('dragstart');
              dg.dragStart(d3.event);
            })
            .on('drag', function D3dialogDrag() {
              _this.trigger('drag');
              dg.drag(d3.event);
            })
            .on('dragend', function D3dialogDrag() {
              _this.rightPos = _this.placeholderEl.style('right');
              _this.topPos = _this.placeholderEl.style('top');
              _this.trigger('dragend');
            });
          this.dragHandler.call(dragBehavior);

          this.dragHandler.classed("vzb-hidden", profile === 'small');
          this.pinIcon.classed("vzb-hidden", profile === 'small');
          this.resize();
        },

        resize: function() {
          if(this.placeholderEl && this.dragContainerEl && this.placeholderEl.classed('vzb-top-dialog')) {
            this.placeholderEl.classed('notransition', true);

            var profile = this.getLayoutProfile();

            if(profile !== 'small') {
              var chartWidth = parseInt(this.dragContainerEl.style('width'), 10);
              var dialogRight = parseInt(this.rightPos, 10);
              var chartHeight = parseInt(this.rootEl.style('height'), 10);
              var dialogTop = parseInt(this.topPos, 10);
              var dialogWidth = parseInt(this.placeholderEl.style('width'), 10);
              var dialogHeight = parseInt(this.placeholderEl.style('height'), 10);
              var dialogRightMargin = parseInt(this.placeholderEl.style('margin-right'), 10) || 0;
              if(isNumber(dialogRight) && dialogRight > chartWidth - dialogWidth - dialogRightMargin) {
                if(this.rightPos) {
                  this.rightPos = (chartWidth - dialogWidth - dialogRightMargin) + 'px';
                  if(this.isOpen) this.placeholderEl.style('right', this.rightPos);
                }
              }
              if(isNumber(dialogTop) && isNumber(dialogHeight) && dialogTop >= 0 && dialogTop > chartHeight - dialogHeight) {
                if(this.topPos) {
                  this.topPos = ((chartHeight - dialogHeight) > 0 ? (chartHeight - dialogHeight) : 0)  + 'px';
                  if(this.isOpen) this.placeholderEl.style('top', this.topPos);
                }
              }
              
              if(this.topPos && (this.getLayoutProfile() === 'large' && this.rootEl.classed("vzb-dialog-expand-true"))) {
                  this.placeholderEl.style('bottom', 'auto');
              }

              if(this.rootEl.classed('vzb-landscape')) {
                // var contentHeight = parseInt(this.rootEl.style('height'));
                // var placeholderHeight = parseInt(this.placeholderEl.style('height'));
                // if (contentHeight < placeholderHeight) {
                //   this.topPos = (-contentHeight + 50) + 'px';
                //   this.rightPos = '';
                //   this.placeholderEl.style('right', this.rightPos);
                //   this.placeholderEl.style('bottom', 'auto');
                // } else {
                //   //this.topPos = '';
                //   this.placeholderEl.style('bottom', '');
                // }
              }
              //this.placeholderEl.style('top', this.topPos);
              this.element.style('max-height', '');
            } else {
              this.rightPos = '';
              this.topPos = '';
              this.placeholderEl.attr('style', '');
              // var totalHeight = this.root.element.offsetHeight;
              // if(this.rootEl.classed('vzb-portrait')) totalHeight = totalHeight - 50;
              // this.element.style('max-height', (totalHeight - 10) + 'px');
            }

            this.dragHandler.classed("vzb-hidden", profile === 'small');
            this.pinIcon.classed("vzb-hidden", profile === 'small');

            this._setMaxHeight();
          }
        },

        _setMaxHeight: function() {
          var totalHeight = this.root.element.offsetHeight;
          if(this.getLayoutProfile() !== 'small') {
            if(!this.topPos && (this.getLayoutProfile() === 'large' && this.rootEl.classed("vzb-dialog-expand-true"))) {
              var dialogBottom = parseInt(this.placeholderEl.style('bottom'), 10);
              totalHeight = totalHeight - dialogBottom;
            } else {
              var topPos = this.topPos ? parseInt(this.topPos, 10) : this.placeholderEl[0][0].offsetTop; 
              totalHeight = totalHeight - topPos;
            }
          } else {
              totalHeight = this.rootEl.classed('vzb-portrait') ? totalHeight - 50 : totalHeight - 10;
          }

          this.element.style('max-height', totalHeight + 'px');
          
          //set 'max-height' to content for IE11
          var contentHeight = totalHeight - this.titleEl.node().offsetHeight - this.buttonsEl.node().offsetHeight;
          this.contentEl.style('max-height', contentHeight + 'px');
        },

        beforeOpen: function() {
          var _this = this;
          
          this.transitionEvents = ['webkitTransitionEnd', 'transitionend', 'msTransitionEnd', 'oTransitionEnd'];
          this.transitionEvents.forEach(function(event) {
            _this.placeholderEl.on(event, _this.transitionEnd.bind(_this, event));
          });

          this.placeholderEl.classed('notransition', true);
          
          this.placeholderEl.style({'top': '', 'bottom': ''}); // issues: 369 & 442
          
          if(this.topPos && this.getLayoutProfile() === 'large' && this.rootEl.classed("vzb-dialog-expand-true")) {
            var topPos = this.placeholderEl.node().offsetTop;
            this.placeholderEl.style({'top': topPos + 'px', 'bottom': 'auto'}); // issues: 369 & 442
          } else if(this.getLayoutProfile() !== 'small') {
            //if(this.rightPos) this.placeholderEl.style('right', this.rightPos);
          }

          this.placeholderEl.node().offsetTop;            
          this.placeholderEl.classed('notransition', false);

          if(this.getLayoutProfile() === 'small') {
            this.placeholderEl.style('top', ''); // issues: 369 & 442
          } else if(this.rootEl.classed('vzb-landscape')) { // need to recalculate popup position (Safari 8 bug)
            // var contentHeight = parseInt(this.rootEl.style('height'));
            // var placeholderHeight = parseInt(this.placeholderEl.style('height'));
            // if (contentHeight < placeholderHeight) {
            //   this.topPos = (-contentHeight + 50) + 'px';
            //   this.rightPos = '';
            //   this.placeholderEl.style('right', this.rightPos);
            //   this.placeholderEl.style('bottom', 'auto');
            // } else {
            //   this.topPos = '';
            //   this.placeholderEl.style('bottom', '');
            // }
            //this.placeholderEl.style('top', this.topPos);
          }
          
        },

        /**
         * User has clicked to open this dialog
         */
        open: function() {
          this.isOpen = true;
          if(this.getLayoutProfile() !== 'small') {
            if(this.topPos) {
              this.placeholderEl.style('top', this.topPos);
              this.placeholderEl.style('right', this.rightPos);
            }
          }
        },

        beforeClose: function() {
      //issues: 369 & 442
          if(this.rootEl.classed('vzb-portrait') && this.getLayoutProfile() === 'small') {
            this.placeholderEl.style('top', 'auto'); // issues: 369 & 442
          } 
          if(this.getLayoutProfile() === 'large' && this.rootEl.classed("vzb-dialog-expand-true")) {
            this.topPos0 = this.topPos ? (this.placeholderEl.node().parentNode.offsetHeight - this.placeholderEl.node().offsetHeight) + 'px' : '';
          }   
          this.placeholderEl.classed('notransition', false);
          this.placeholderEl.node().offsetHeight; // trigger a reflow (flushing the css changes)
        },

        /**
         * User has closed this dialog
         */
        close: function() {
      //issues: 369 & 442
          if(!(this.rootEl.classed('vzb-portrait') && this.getLayoutProfile() === 'small')) {
            this.placeholderEl.style('top', ''); // issues: 369 & 442
            this.placeholderEl.style('right', ''); // issues: 369 & 442
          }
          
          if(this.getLayoutProfile() === 'large' && this.rootEl.classed("vzb-dialog-expand-true")) {
            this.placeholderEl.style({'top' : this.topPos0, 'right' : ''});    
          }
          this.isOpen = false;
          this.trigger('close');
        },


        transitionEnd: function(eventName) {
          var _this = this;

          this.transitionEvents.forEach(function(event) {
            _this.placeholderEl.on(event, null);
          });
          if(this.isOpen) {
            this.placeholderEl.classed('notransition', true);
          }
        }

      });

      function dialogDrag(element, container, xOffset) {
        var posX, posY, divTop, divRight, marginRight, eWi, eHe, cWi, cHe, diffX, diffY;

        return {
          move: function(x, y) {
            element.style('right', x + 'px');
            element.style('top', y + 'px');
          },

          dragStart: function(evt) {
            if(!isTouchDevice()) {
              posX = evt.sourceEvent.clientX;
              posY = evt.sourceEvent.clientY;
            } else {
              var touchCoord = d3.touches(container.node());
              posX = touchCoord[0][0];
              posY = touchCoord[0][1];
            }
            divTop = parseInt(element.style('top')) || 0;
            divRight = parseInt(element.style('right')) || 0;
            marginRight = parseInt(element.style('margin-right')) || 0;
            eWi = parseInt(element.style('width'));
            eHe = parseInt(element.style('height'));
            cWi = parseInt(container.style('width')) - marginRight;
            cHe = parseInt(container.style('height'));
            diffX = posX + divRight;
            diffY = posY - divTop;
          },

          drag: function(evt) {
            if(!isTouchDevice()) {
              posX = evt.sourceEvent.clientX;
              posY = evt.sourceEvent.clientY;
            } else {
              var touchCoord = d3.touches(container.node());
              posX = touchCoord[0][0];
              posY = touchCoord[0][1];
            }
            var aX = -posX + diffX,
              aY = posY - diffY;
            if(aX < -xOffset) aX = -xOffset;
            if(aY < 0) aY = 0;
            if(aX + eWi > cWi) aX = cWi - eWi;
            if(aY + eHe > cHe) aY = cHe - eHe;

            this.move(aX, aY);
          }
        }
      }

      /*
       * Zoom dialog
       */

      var Zoom = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'zoom';

        // in dialog, this.model_expects = ["state", "data"];

        this.components = [{
          component: ZoomButtonList,
          placeholder: '.vzb-dialog-zoom-buttonlist',
          model: ["state", "ui", "language"]
        }, {
          component: simplecheckbox,
          placeholder: '.vzb-zoomonscrolling-switch',
          model: ["ui", "language"],
          checkbox: 'zoomOnScrolling'
        }, {
          component: simplecheckbox,
          placeholder: '.vzb-adaptminmaxzoom-switch',
          model: ["ui", "language"],
          checkbox: 'adaptMinMaxZoom'
        }];

        this._super(config, parent);
      }
      });

      /*
       * stack dialog
       */

      var Stack = Dialog.extend({

          /**
           * Initializes the dialog component
           * @param config component configuration
           * @param context component context (parent)
           */
          init: function(config, parent) {
              this.name = 'stack';
              var _this = this;

              // in dialog, this.model_expects = ["state", "data"];

              this.components = [{
                  component: DraggableList,
                  placeholder: '.vzb-dialog-draggablelist',
                  model: ["state.marker.group", "language", "ui.chart"],
                  groupID: "manualSorting",
                  isEnabled: "manualSortingEnabled",
                  dataArrFn: _this.manualSorting.bind(_this),
                  lang: 'entity/geo.world_4region/'
              }];

              this.model_binds = {
                  'change:state.marker.stack': function(evt) {
                      //console.log("stack change " + evt);
                      _this.updateView();
                  },
                  'change:state.marker.group': function(evt) {
                      //console.log("group change " + evt);
                      _this.updateView();
                  }
              };

              this._super(config, parent);
          },


          readyOnce: function() {
            this._super();

            var _this = this;
            this.group = this.model.state.marker.group;
            this.stack = this.model.state.marker.stack;

            this.howToStackEl = this.element.select('.vzb-howtostack').selectAll("input")
                .on("change", function() {
                    _this.setModel("stack", d3.select(this).node().value);
                })
            this.howToMergeEl = this.element.select('.vzb-howtomerge').selectAll("input")
                .on("change", function() {
                    _this.setModel("merge", d3.select(this).node().value);
                })

            this.updateView();
          },

          updateView: function() {
              var _this = this;

              this.howToStackEl
                  .property('checked', function() {
                      return d3.select(this).node().value === _this.stack.which;
                  });
              
              _this.ui.chart.manualSortingEnabled = _this.stack.which == "all";
              
              this.howToMergeEl
                  .property('checked', function() {
                      if(d3.select(this).node().value === "none")  return !_this.group.merge && !_this.stack.merge;
                      if(d3.select(this).node().value === "grouped") return _this.group.merge;
                      if(d3.select(this).node().value === "stacked") return _this.stack.merge;
                  })
                  .attr('disabled', function(){
                      if(d3.select(this).node().value === "none")  return null; // always enabled
                      if(d3.select(this).node().value === "grouped") return _this.stack.which === "none" ? true : null;
                      if(d3.select(this).node().value === "stacked") return _this.stack.which === "all" ? null : true;
                  });


          },

          manualSorting: function(value) {
              if(arguments.length === 0) return this.model.state.marker.group.manualSorting;
              this.model.state.marker.group.manualSorting = value;
          },

          setModel: function(what, value) {

              var obj = {stack: {}, group: {}};

              if(what === "merge") {
                  switch (value){
                      case "none":
                          obj.group.merge = false;
                          obj.stack.merge = false;
                          break;
                      case "grouped":
                          obj.group.merge = true;
                          obj.stack.merge = false;
                          break;
                      case "stacked":
                          obj.group.merge = false;
                          obj.stack.merge = true;
                          break;
                  }
              }
              if(what === "stack") {

                  obj.stack.which = value;

                  //validate use of stack hook
                  if(value !== "all" && value !== "none"){
                      obj.stack.use = "property";
                  } else {
                      obj.stack.use = "constant";
                  }

                  //validate possible merge values in group and stack hooks
                  if(value === "none" && this.group.merge) obj.group.merge = false;
                  if(value !== "all" && this.stack.merge) obj.stack.merge = false;
              }

              this.model.state.marker.set(obj);
          }
      });

      /*
       * Size dialog
       */

      var Speed = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'speed';

        // in dialog, this.model_expects = ["state", "data"];

        this.components = [
        {
          component: SimpleSlider,
          placeholder: '.vzb-dialog-placeholder',
          model: ["state.time"],
          arg: "delay",
          properties: {min:1, max:5, step:0.1, scale: d3.scale.linear()
            .domain([1,2,3,4,5])
            .range([1200,900,450,200,75])
          }
        }
        ];

        this._super(config, parent);
      }
      });

      /*
       * Size dialog
       */

      var Size = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'size';

        // in dialog, this.model_expects = ["state", "data"];

        this.components = [
        {
          component: IndPicker,
          placeholder: '.vzb-saxis-selector',
          model: ["state.marker", "language"],
          markerID: "size"
        }
        ];
        if (!config.ui.chart || config.ui.chart.sizeSelectorActive !== 0) {
          this.components.push(  {
            component: BubbleSize,
            placeholder: '.vzb-dialog-bubblesize',
            model: ["state.marker.size"],
            ui: {
              show_button: false
            }
          })
        }

        this._super(config, parent);
      }
      });

      /*!
       * VIZABI SHOW CONTROL
       * Reusable show dialog
       */

      var Show = Dialog.extend({

        init: function(config, parent) {
          this.name = 'show';
          var _this = this;

          this.model_binds = {
            "change:state.entities.show": function(evt) {
              _this.redraw();
            }
          }

          this._super(config, parent);
        },

        /**
         * Grab the list div
         */
        readyOnce: function() {
          this._super();
          this.list = this.element.select(".vzb-show-list");
          this.input_search = this.element.select("#vzb-show-search");
          this.deselect_all = this.element.select("#vzb-show-deselect");

          this.KEY = this.model.state.entities.getDimension();
          this.TIMEDIM = this.model.state.time.getDimension();

          var _this = this;
          this.input_search.on("input", function() {
            _this.showHideSearch();
          });

          this.deselect_all.on("click", function() {
            _this.deselectEntities();
          });


          //make sure it refreshes when all is reloaded
          this.root.on('ready', function() {
            _this.redraw();
          })
        },

        open: function() {
          this._super();

          this.input_search.node().value = "";
          this.showHideSearch();
        },

        ready: function() {
          this._super();
          this.redraw();
          preventAncestorScrolling(this.element.select('.vzb-dialog-scrollable'));

        },

        redraw: function(){

          var _this = this;
          this.translator = this.model.language.getTFunction();

          this.model.state.marker_allpossible.getFrame(this.model.state.time.value, function(values) {
          if(!values) return;
          var data = keys(values.label)
              .map(function(d){
                  var result = {};
                  result[_this.KEY] = d;
                  result["label"] = values.label[d];
                  return result;
              });

          //sort data alphabetically
          data.sort(function(a, b) {
            return(a.label < b.label) ? -1 : 1;
          });

            _this.list.html("");

          var items = _this.list.selectAll(".vzb-show-item")
            .data(data)
            .enter()
            .append("div")
            .attr("class", "vzb-show-item vzb-dialog-checkbox")

          items.append("input")
            .attr("type", "checkbox")
            .attr("class", "vzb-show-item")
            .attr("id", function(d) {
              return "-show-" + d[_this.KEY];
            })
            .property("checked", function(d) {
              return _this.model.state.entities.isShown(d);
            })
            .on("change", function(d) {
              _this.model.state.entities.showEntity(d);
              _this.showHideDeselect();
            });

          items.append("label")
            .attr("for", function(d) {
              return "-show-" + d[_this.KEY];
            })
            .text(function(d) {
              return d.label;
            });

            _this.input_search.attr("placeholder", _this.translator("placeholder/search") + "...");

            _this.showHideSearch();
            _this.showHideDeselect();

          });
        },

        showHideSearch: function() {

          var search = this.input_search.node().value || "";
          search = search.toLowerCase();

          this.list.selectAll(".vzb-show-item")
            .classed("vzb-hidden", function(d) {
              var lower = d.label.toLowerCase();
              return(lower.indexOf(search) === -1);
            });
        },

        showHideDeselect: function() {
          var show = this.model.state.entities.show[this.KEY];
          this.deselect_all.classed('vzb-hidden', !show || show[0]==="*");
        },

        deselectEntities: function() {
          this.model.state.entities.clearShow();
          this.showHideDeselect();
        },

        transitionEnd: function(event) {
          this._super(event);

          if(!isTouchDevice()) this.input_search.node().focus();
        }

      });

      /*
       * Size dialog
       */

      var Presentation = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'presentation';

        // in dialog, this.model_expects = ["state", "data"];

        this.components = [
        {
          component: simplecheckbox,
          placeholder: '.vzb-presentationmode-switch',
          model: ["ui", "language"],
          checkbox: 'presentation'
        }];

        this._super(config, parent);
      }
      });

      /*
       * Size dialog
       */

      var Opacity = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'opacity';

        // in dialog, this.model_expects = ["state", "data"];

        this.components = [
        {
          component: SimpleSlider,
          placeholder: '.vzb-dialog-bubbleopacity-regular',
          model: ["state.entities"],
          arg: "opacityRegular",
          properties: {step: 0.01}
        }, {
          component: SimpleSlider,
          placeholder: '.vzb-dialog-bubbleopacity-selectdim',
          model: ["state.entities"],
          arg: "opacitySelectDim",
          properties: {step: 0.01}
        }
        ];

        this._super(config, parent);
      }
      });

      /*!
       * VIZABI BUTTONLIST
       * Reusable buttonlist component
       */

      //default existing buttons
      var class_active = "vzb-active";
      var class_hidden = "vzb-hidden";
      var class_active_locked = "vzb-active-locked";
      var class_unavailable = "vzb-unavailable";
      var class_vzb_fullscreen = "vzb-force-fullscreen";
      var class_container_fullscreen = "vzb-container-fullscreen";

      var ButtonList = Component.extend({

        /**
         * Initializes the buttonlist
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, context) {

          //set properties
          var _this = this;
          this.name = this.name || 'gapminder-buttonlist';
      //    this.template = '<div class="vzb-buttonlist"></div>';

          this.model_expects = [{
            name: "state",
            type: "model"
          }, {
            name: "ui",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];

          this._available_buttons = {
            'find': {
              title: "buttons/find",
              icon: "search",
              required: false
            },
            'show': {
              title: "buttons/show",
              icon: "asterisk",
              required: false
            },
            'moreoptions': {
              title: "buttons/more_options",
              icon: "gear",
              required: true
            },
            'colors': {
              title: "buttons/colors",
              icon: "paintbrush",
              required: false
            },
            'size': {
              title: "buttons/size",
              icon: "circle",
              required: false
            },
            'fullscreen': {
              title: "buttons/expand",
              icon: "expand",
              func: this.toggleFullScreen.bind(this),
              required: true
            },
            'trails': {
              title: "buttons/trails",
              icon: "trails",
              func: this.toggleBubbleTrails.bind(this),
              required: false,
              statebind: "ui.chart.trails",
              statebindfunc: this.setBubbleTrails.bind(this)
            },
            'lock': {
              title: "buttons/lock",
              icon: "lock",
              func: this.toggleBubbleLock.bind(this),
              required: false,
              statebind: "ui.chart.lockNonSelected",
              statebindfunc: this.setBubbleLock.bind(this)
            },
            'inpercent': {
              title: "buttons/inpercent",
              icon: "percent",
              func: this.toggleInpercent.bind(this),
              required: false,
              statebind: "ui.chart.inpercent",
              statebindfunc: this.setInpercent.bind(this)
            },
            'presentation': {
              title: "buttons/presentation",
              icon: "presentation",
              func: this.togglePresentationMode.bind(this),
              required: false,
              statebind: "ui.presentation",
              statebindfunc: this.setPresentationMode.bind(this)
            },
            'about': {
              title: "buttons/about",
              icon: "about",
              required: false
            },
            'axes': {
              title: "buttons/axes",
              icon: "axes",
              required: false
            },
            'axesmc': {
              title: "buttons/axesmc",
              icon: "axes",
              required: false
            },
            'stack': {
              title: "buttons/stack",
              icon: "stack",
              required: false
            },
            '_default': {
              title: "Button",
              icon: "asterisk",
              required: false
            }
          };

          this._active_comp = false;

          this.model_binds = {
            "change:state.entities.select": function(evt) {
              if(!_this._readyOnce) return;

              _this.setBubbleTrails();
              _this.setBubbleLock();
              _this._toggleButtons();


              //scroll button list to end if bottons appeared or disappeared
              // if(_this.entitiesSelected_1 !== (_this.model.state.entities.select.length > 0)) {
              //   _this.scrollToEnd();
              // }
              // _this.entitiesSelected_1 = _this.model.state.entities.select.length > 0;
            },
            "change:ui.chart": function(evt, path) {
              if(path.indexOf("lockActive") > -1) {
                _this.setBubbleLock();
              }
            }
          }      
              
          config.ui.buttons.forEach(function(buttonId) {
            var button = _this._available_buttons[buttonId];
            if(button && button.statebind) {
              _this.model_binds['change:' + button.statebind] = function(evt) {
                button.statebindfunc(buttonId, evt.source.value);
              }
            }
          });    


          
          this.validatePopupButtons(config.ui.buttons, config.ui.dialogs);

          this._super(config, context);

        },

        readyOnce: function() {
          var _this = this;
          
          this.element = d3.select(this.placeholder);
          this.element.selectAll("div").remove();
          
          this.root.findChildByName("gapminder-dialogs").on('close', function( evt, params) {
            _this.setButtonActive(params.id, false);
          });
          
          var button_expand = (this.model.ui.dialogs||{}).sidebar || [];
          
          // // if button_expand has been passed in with boolean param or array must check and covert to array
          // if (button_expand){
          //   this.model.ui.dialogs.sidebar = (button_expand === true) ? this.model.ui.buttons : button_expand;
          // }

          // if (button_expand && button_expand.length !== 0) {
          //     d3.select(this.root.element).classed("vzb-dialog-expand-true", true);
          // }
          
          var button_list = [].concat(this.model.ui.buttons);

          // (button_expand||[]).forEach(function(button) {
          //   if (button_list.indexOf(button) === -1) {
          //     button_list.push(button);
          //   }
          // });

          this.model.ui.buttons = button_list;

          //add buttons and render components
          this._addButtons(button_list, button_expand);

          //store body overflow
          this._prev_body_overflow = document.body.style.overflow;

          this.setBubbleTrails();
          this.setBubbleLock();
          this.setInpercent();
          this.setPresentationMode();

          this._toggleButtons();

        },
        
        proceedClick: function(id) {
          var _this = this;
          var btn = _this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']"),
            classes = btn.attr("class"),
            btn_config = _this._available_buttons[id];

          if(btn_config && btn_config.func) {
            btn_config.func(id);
          } else {
            var btn_active = classes.indexOf(class_active) === -1;

            btn.classed(class_active, btn_active);
            var evt = {};
            evt['id'] = id;
            evt['active'] = btn_active;
            _this.trigger('click', evt);
          }    
        },
        
        validatePopupButtons: function (buttons, dialogs) {
          var _this = this;
          
          var popupDialogs = dialogs.popup;
          var popupButtons = buttons.filter(function(d) {
            return (_this._available_buttons[d] && !_this._available_buttons[d].func); 
            });
          for(var i = 0, j = popupButtons.length; i < j; i++) {
             if(popupDialogs.indexOf(popupButtons[i]) == -1) {
                 return error$1('Buttonlist: bad buttons config: "' + popupButtons[i] + '" is missing in popups list');
             }
          }
          return false; //all good
        },

        /*
         * reset buttons show state
         */
        _showAllButtons: function() {
          // show all existing buttons
          var _this = this;
          var buttons = this.element.selectAll(".vzb-buttonlist-btn");
          buttons.each(function(d,i) {
            var button = d3.select(this);
            button.style('display', '');
          });
        },

        /*
        * determine which buttons are shown on the buttonlist
        */
        _toggleButtons: function() {
          var _this = this;
          var parent = this.parent.element.node ? this.parent.element : d3.select(this.parent.element);

          //HERE
          var button_expand = (this.model.ui.dialogs||{}).sidebar || [];
          _this._showAllButtons();

          var buttons = this.element.selectAll(".vzb-buttonlist-btn");

          var container = this.element.node().getBoundingClientRect();

          var not_required = [];
          var required = [];

          var button_width = 80;
          var button_height = 80;
          var container_width = this.element.node().getBoundingClientRect().width;
          var container_height = this.element.node().getBoundingClientRect().height;
          var buttons_width = 0;
          var buttons_height = 0;

          buttons.each(function(d,i) {
            var button_data = d;
            var button = d3.select(this);
            var expandable = button_expand.indexOf(button_data.id) !== -1;
            var button_margin = {top: parseInt(button.style("margin-top")), right: parseInt(button.style("margin-right")), left: parseInt(button.style("margin-left")), bottom: parseInt(button.style("margin-bottom"))};
            button_width = button.node().getBoundingClientRect().width + button_margin.right + button_margin.left;
            button_height = button.node().getBoundingClientRect().height + button_margin.top + button_margin.bottom;

            if(!button.classed(class_hidden)) {
              if(!expandable || (_this.getLayoutProfile() !== 'large')){
                buttons_width += button_width;
                buttons_height += button_height;
                //sort buttons between required and not required buttons.
                // Not required buttons will only be shown if there is space available
                if(button_data.required){
                  required.push(button);
                } else {
                  not_required.push(button);
                }
              } else {
                button.style("display", "none");
              }
            }
          });
          var width_diff = buttons_width - container_width;
          var height_diff = buttons_height - container_height;
          var number_of_buttons = 1;

          //check if container is landscape or portrait
          // if portrait small or large with expand, use width
          if(parent.classed("vzb-large") && parent.classed("vzb-dialog-expand-true")
          || parent.classed("vzb-small") && parent.classed("vzb-portrait")) {
            //check if the width_diff is small. If it is, add to the container
            // width, to allow more buttons in a way that is still usable
            if(width_diff > 0 && width_diff <=10){
              container_width += width_diff;
            }
            number_of_buttons = Math.floor(container_width / button_width) - required.length;
            if(number_of_buttons < 0){
              number_of_buttons = 0;
            }
          // else, use height
          } else {
            //check if the width_diff is small. If it is, add to the container
            // width, to allow more buttons in a way that is still usable
            if(height_diff > 0 && height_diff <=10){
              container_height += height_diff;
            }
            number_of_buttons = Math.floor(container_height / button_height) - required.length;
            if(number_of_buttons < 0){
              number_of_buttons = 0;
            }
          }
          //change the display property of non required buttons, from right to
          // left
          not_required.reverse();
          var hiddenButtons = [];
          for (var i = 0, j = not_required.length - number_of_buttons; i < j ; i++) {
              not_required[i].style("display", "none");
              hiddenButtons.push(not_required[i].attr("data-btn"));
          }
          
          var evt = {};
          evt['hiddenButtons'] = hiddenButtons;
          _this.trigger('toggle', evt);

        },

        /*
         * adds buttons configuration to the components and template_data
         * @param {Array} button_list list of buttons to be added
         */
        _addButtons: function(button_list, button_expand) {
          var _this = this;
          this._components_config = [];
          var details_btns = [];
          if(!button_list.length) return;
          //add a component for each button
          for(var i = 0; i < button_list.length; i++) {

            var btn = button_list[i];
            var btn_config = this._available_buttons[btn];

            //add template data
            var d = (btn_config) ? btn : "_default";
            var details_btn = clone(this._available_buttons[d]);

            details_btn.id = btn;
            details_btn.icon = iconset[details_btn.icon];
            details_btns.push(details_btn);
          };

          var t = this.getTranslationFunction(true);

          this.element.selectAll('button').data(details_btns)
            .enter().append("button")
            .attr('class', function (d) {
              var cls = 'vzb-buttonlist-btn';
              if (button_expand.length > 0) {
                if (button_expand.indexOf(d.id) > -1) {
                  cls += ' vzb-dialog-side-btn';
                }
              }

              return cls;
            })
            .attr('data-btn', function(d) {
              return d.id;
            })
            .html(function(btn) {
              return "<span class='vzb-buttonlist-btn-icon fa'>" +
                btn.icon + "</span><span class='vzb-buttonlist-btn-title'>" +
                t(btn.title) + "</span>";
            });

          var buttons = this.element.selectAll(".vzb-buttonlist-btn");

          //clicking the button
          buttons.on('click', function() {

            d3.event.preventDefault();
            d3.event.stopPropagation();
            
            var id = d3.select(this).attr("data-btn");
            _this.proceedClick(id);
          });

        },


        scrollToEnd: function() {
          var target = 0;
          var parent = d3.select(".vzb-tool");

          if(parent.classed("vzb-portrait") && parent.classed("vzb-small")) {
            if(this.model.state.entities.select.length > 0) target = this.element[0][0].scrollWidth
            this.element[0][0].scrollLeft = target;
          } else {
            if(this.model.state.entities.select.length > 0) target = this.element[0][0].scrollHeight
            this.element[0][0].scrollTop = target;
          }
        },


        /*
         * RESIZE:
         * Executed whenever the container is resized
         * Ideally, it contains only operations related to size
         */
        resize: function() {
          //TODO: what to do when resizing?

          //toggle presentaion off is switch to 'small' profile
          if(this.getLayoutProfile() === 'small' && this.model.ui.presentation) {
            this.togglePresentationMode();
          }

          this._toggleButtons();
        },

        setButtonActive: function(id, boolActive) {
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

          btn.classed(class_active, boolActive);
        },

        toggleBubbleTrails: function() {
          this.model.ui.chart.trails = !this.model.ui.chart.trails;
          this.setBubbleTrails();
        },
        setBubbleTrails: function() {
          var trails = (this.model.ui.chart||{}).trails;
          if(!trails && trails !== false) return; 
          var id = "trails";
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
          if(!btn.node()) return warn("setBubbleTrails: no button '" +id+ "' found in DOM. doing nothing");

          btn.classed(class_active_locked, trails);
          btn.classed(class_hidden, this.model.state.entities.select.length == 0);
        },
        toggleBubbleLock: function(id) {
          var active = (this.model.ui.chart||{}).lockActive;

          if(this.model.state.entities.select.length == 0 && !active) return;

          var locked = this.model.ui.chart.lockNonSelected;
          var time = this.model.state.time;
          locked = locked ? 0 : time.timeFormat(time.value);
          this.model.ui.chart.lockNonSelected = locked;

          this.setBubbleLock();
        },
        setBubbleLock: function() {
          var locked = (this.model.ui.chart||{}).lockNonSelected;
          var active = (this.model.ui.chart||{}).lockActive;
          if(!locked && locked !== 0) return;

          if(locked !== 0 && this.model.state.entities.select.length === 0 && !active) {
             locked = this.model.ui.chart.lockNonSelected = 0;
          }

          var id = "lock";
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
          if(!btn.node()) return warn("setBubbleLock: no button '" +id+ "' found in DOM. doing nothing");
            
          var translator = this.model.language.getTFunction();

          btn.classed(class_unavailable, this.model.state.entities.select.length == 0 && !active);
          if (typeof active == "undefined") {
            btn.classed(class_hidden, this.model.state.entities.select.length == 0);
          } else {
            btn.classed(class_hidden, !active);
          }

          btn.classed(class_active_locked, locked)
          btn.select(".vzb-buttonlist-btn-title")
            .text(locked ? locked : translator("buttons/lock"));

          btn.select(".vzb-buttonlist-btn-icon")
            .html(iconset[locked ? "lock" : "unlock"]);
        },
        toggleInpercent: function() {
          this.model.ui.chart.inpercent = !this.model.ui.chart.inpercent;
          this.setInpercent();
        },
        setInpercent: function() {
          var id = 'inpercent';
          var translator = this.model.language.getTFunction();
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

          btn.classed(class_active_locked, this.model.ui.chart.inpercent);
        },
        togglePresentationMode: function() {
          this.model.ui.presentation = !this.model.ui.presentation;
          this.setPresentationMode();
        },
        setPresentationMode: function() {
          var id = 'presentation';
          var translator = this.model.language.getTFunction();
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

          btn.classed(class_active_locked, this.model.ui.presentation);
        },
        toggleFullScreen: function(id) {

          if(!window) return;

          var component = this;
          var pholder = component.placeholder;
          var pholder_found = false;
          var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
          var fs = !this.model.ui.fullscreen;
          var body_overflow = (fs) ? "hidden" : this._prev_body_overflow;

          while(!(pholder_found = hasClass(pholder, 'vzb-placeholder'))) {
            component = component.parent;
            pholder = component.placeholder;
          }

          //TODO: figure out a way to avoid fullscreen resize delay in firefox
          if(fs) {
            launchIntoFullscreen(pholder);
            subscribeFullscreenChangeEvent.call(this, this.toggleFullScreen.bind(this, id));
          } else {
            exitFullscreen.call(this);
          }
          classed(pholder, class_vzb_fullscreen, fs);
          if (typeof container != 'undefined') {
            classed(container, class_container_fullscreen, fs);
          }

          this.model.ui.fullscreen = fs;
          var translator = this.model.language.getTFunction();
          btn.classed(class_active_locked, fs);

          btn.select(".vzb-buttonlist-btn-icon").html(iconset[fs ? "unexpand" : "expand"]);

          btn.select(".vzb-buttonlist-btn-title>span").text(
            translator("buttons/" + (fs ? "unexpand" : "expand"))
          )
          .attr("data-vzb-translate", "buttons/" + (fs ? "unexpand" : "expand"));

          //restore body overflow
          document.body.style.overflow = body_overflow;

          this.root.layout.resizeHandler();

          //force window resize event
          // utils.defer(function() {
          //   event = window.document.createEvent("HTMLEvents");
          //   event.initEvent("resize", true, true);
          //   event.eventName = "resize";
          //   window.dispatchEvent(event);
          // });
        }

      });

      function isFullscreen() {
        if(!window) return false;
        if(window.document.webkitIsFullScreen !== undefined)
          return window.document.webkitIsFullScreen;
        if(window.document.mozFullScreen !== undefined)
          return window.document.mozFullScreen;
        if(window.document.msFullscreenElement !== undefined)
          return window.document.msFullscreenElement;

        return false;
      }

      function exitHandler(emulateClickFunc) {
        if(!isFullscreen()) {
          emulateClickFunc();
        }
      }

      function subscribeFullscreenChangeEvent(exitFunc) {
        if(!window) return;
        var doc = window.document;

        this.exitFullscreenHandler = exitHandler.bind(this, exitFunc);
        doc.addEventListener('webkitfullscreenchange', this.exitFullscreenHandler, false);
        doc.addEventListener('mozfullscreenchange', this.exitFullscreenHandler, false);
        doc.addEventListener('fullscreenchange', this.exitFullscreenHandler, false);
        doc.addEventListener('MSFullscreenChange', this.exitFullscreenHandler, false);
      }

      function removeFullscreenChangeEvent() {
        var doc = window.document;

        doc.removeEventListener('webkitfullscreenchange', this.exitFullscreenHandler);
        doc.removeEventListener('mozfullscreenchange', this.exitFullscreenHandler);
        doc.removeEventListener('fullscreenchange', this.exitFullscreenHandler);
        doc.removeEventListener('MSFullscreenChange', this.exitFullscreenHandler);
      }

      function launchIntoFullscreen(elem) {
        if(elem.requestFullscreen) {
          elem.requestFullscreen();
        } else if(elem.msRequestFullscreen) {
          elem.msRequestFullscreen();
        } else if(elem.mozRequestFullScreen) {
          elem.mozRequestFullScreen();
        } else if(elem.webkitRequestFullscreen) {
          if (!(navigator.vendor && navigator.vendor.indexOf('Apple') > -1 &&
          navigator.userAgent && !navigator.userAgent.match('CriOS'))) {
            elem.webkitRequestFullscreen();
          }

        }
      }

      function exitFullscreen() {
        removeFullscreenChangeEvent.call(this);

        if(document.exitFullscreen) {
          document.exitFullscreen();
        } else if(document.msExitFullscreen) {
          document.msExitFullscreen();
        } else if(document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if(document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        }
      }

      /*!
       * VIZABI OPTIONSBUTTONLIST
       * Reusable optionsbuttonlist component
       */

      //default existing buttons
      var class_active$3 = "vzb-active";
      // var class_active_locked = "vzb-active-locked";
      // var class_expand_dialog = "vzb-dialog-side";
      // var class_hide_btn = "vzb-dialog-side-btn";
      // var class_unavailable = "vzb-unavailable";
      // var class_vzb_fullscreen = "vzb-force-fullscreen";
      // var class_container_fullscreen = "vzb-container-fullscreen";

      var OptionsButtonList = ButtonList.extend({

        /**
         * Initializes the buttonlist
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, context) {

          //set properties
          var _this = this;
          this.name = 'gapminder-optionsbuttonlist';
          
          this._super(config, context);
        },
        
        readyOnce: function() {
          var _this = this;
          Object.keys(this._available_buttons).forEach(function(buttonId) {
            var button = _this._available_buttons[buttonId];
            button.required = !button.required;
          });
          
          this.buttonListComp = this.root.findChildByName("gapminder-buttonlist");
          
          this.buttonListComp.on("click", function(evt, button) {
            var btn = _this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + button.id + "']");
            btn.classed(class_active$3, button.active);
          });
          
          this.buttonListComp.on("toggle", function(evt, params) {
            var btn = _this.element.selectAll(".vzb-buttonlist-btn");
            var visibleButton = 0;
            btn.each(function(d) {
              var button = d3.select(this);
              var isHidden = params.hiddenButtons.indexOf(d.id) == -1;
              button.style('display', isHidden ? 'none' : '');
              if(!isHidden) visibleButton++; 
            });
          });

          this._super();
        },  
        
        proceedClick: function(id) {
          var _this = this;
          this.buttonListComp.proceedClick(id);
          var btn_data = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']").datum();
          if(btn_data.func) {
            delay(function() {
              _this.root.findChildByName("gapminder-dialogs").closeAllDialogs();
            }, 200);
          }
        },
         
        _toggleButtons: function() {
          //
        }
        
      });

      /*
       * More options dialog
       */

      var MoreOptions = Dialog.extend({

        /**
         * Initializes the dialog component
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, parent) {
          this.name = 'moreoptions';
          
          //specifying components
          this.components = [{
            component: OptionsButtonList,
            placeholder: '.vzb-dialog-options-buttonlist',
            model: ['state', 'ui', 'language']
          }];

          this._super(config, parent);
        },

        readyOnce: function() {
          this._super();
          
          var _this = this;
          this.accordionEl = this.contentEl.select('.vzb-accordion');

          this.on('dragend', function() {
            _this._setMaxHeight();
          });
              
          var dialog_popup = (this.model.ui.dialogs||{}).popup || [];
          var dialog_moreoptions = (this.model.ui.dialogs||{}).moreoptions || [];
                  
          // if dialog_moreoptions has been passed in with boolean param or array must check and covert to array
          if (dialog_moreoptions === true) {
            dialog_moreoptions = dialog_popup;
            (this.model.ui.dialogs||{}).moreoptions = dialog_moreoptions;
          }
          
          this._addDialogs(dialog_moreoptions);
          
          //accordion
          if(this.accordionEl) {
            var titleEl = this.accordionEl.selectAll('.vzb-accordion-section')
              .select('.vzb-dialog-title>span:first-child')
            titleEl.on('click', function(d) {
              var element = _this.components[d.component].element;
              var sectionEl = _this.components[d.component].placeholderEl;
              var activeEl = _this.accordionEl.select('.vzb-accordion-active');
              if(activeEl) {
                activeEl.classed('vzb-accordion-active', false);
              }
              if(sectionEl.node() !== activeEl.node()) {
                sectionEl.classed('vzb-accordion-active', true);
              }
            })
          }
        },
        
        _addDialogs: function(dialog_list) {
          this._components_config = [];
          var details_dlgs = [];
          if(!dialog_list.length) return;
          //add a component for each dialog
          for(var i = 0; i < dialog_list.length; i++) {

            //check moreoptions in dialog.moreoptions
            if(dialog_list[i] === "moreoptions") continue;
            
            var dlg = dialog_list[i];
            var dlg_config = deepClone(this.parent._available_dialogs[dlg]);

            //if it's a dialog, add component
            if(dlg_config && dlg_config.dialog) {
              var comps = this._components_config;

              //add corresponding component
              comps.push({
                component: dlg_config.dialog,
                placeholder: '.vzb-dialogs-dialog[data-dlg="' + dlg + '"]',
                model: ["state", "ui", "language"]
              });

              dlg_config.component = comps.length - 1;
            
              dlg_config.id = dlg;
              details_dlgs.push(dlg_config);
            }
          };

          this.accordionEl.selectAll('div').data(details_dlgs)
            .enter().append("div")
            .attr('class', function (d) {
              var cls = 'vzb-dialogs-dialog vzb-moreoptions vzb-accordion-section';
              return cls;
            })
            .attr('data-dlg', function(d) {
              return d.id;
            });

          this.loadComponents();

          var _this = this;
          //render each subcomponent
          forEach(this.components, function(subcomp) {
            subcomp.render();
            _this.on('resize', function() {
              subcomp.trigger('resize');
            });
          });
        }
      });

      /*
       * Label dialog
       */

      var Label = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'label';

        // in dialog, this.model_expects = ["state", "data"];

        this.components = [
        {
          component: SizeSlider,
          placeholder: '.vzb-dialog-sizeslider',
          model: ["state.marker.size_label",  "language"],
          propertyname: 'LabelTextSize',
          ui: {
            constantUnit: "unit/pixels"
          }
        },
        {
          component: IndPicker,
          placeholder: '.vzb-saxis-selector',
          model: ["state.marker", "language"],
          markerID: "size_label"
        },
        {
          component: simplecheckbox,
          placeholder: '.vzb-removelabelbox-switch',
          model: ["ui.chart", "language"],
          checkbox: 'removeLabelBox',
          submodel: 'labels'
        }
        ];

        this._super(config, parent);
      }
      });

      /*!
       * VIZABI FIND CONTROL
       * Reusable find dialog
       */

      var Find = Dialog.extend({

        init: function(config, parent) {
          this.name = 'find';
          var _this = this;

          this.components = [{
            component: SimpleSlider,
            placeholder: '.vzb-dialog-bubbleopacity',
            model: ["state.entities"],
            arg: "opacitySelectDim",
            properties: {step: 0.01}
          }];

          this.model_binds = {
            "change:state.entities.select": function(evt) {
              _this.selectDataPoints();
              _this.showHideDeselect();
            },
            "change:state.time.playing": function(evt) {
              if(!_this.model.state.time.playing) {
                _this.time = _this.model.state.time.value;
            
                _this.model.state.marker.getFrame(_this.time, function(values) {
                  if (!values) return;          
                  _this.redrawDataPoints(values);
                });
              }
            },
            "change:state.time.value": function(evt) {
              // hide changes if the dialog is not visible
              if(!_this.placeholderEl.classed('vzb-active') && !_this.placeholderEl.classed('vzb-sidebar')) return;
              
              _this.time = _this.model.state.time.value;
            
              _this.model.state.marker.getFrame(_this.time, function(values) {
                if (!values) return;          
                _this.redrawDataPoints(values);
              });
            },
            "change:language.strings": function() {
              _this.translator = _this.model.language.getTFunction();
              _this.input_search.attr("placeholder", _this.translator("placeholder/search") + "...");
            }
          }

          this._super(config, parent);
        },

        /**
         * Grab the list div
         */
        readyOnce: function() {
          this._super();

          this.list = this.element.select(".vzb-find-list");
          this.input_search = this.element.select("#vzb-find-search");
          this.deselect_all = this.element.select("#vzb-find-deselect");
          this.opacity_nonselected = this.element.select(".vzb-dialog-bubbleopacity");

          this.KEY = this.model.state.entities.getDimension();

          var _this = this;

          this.input_search.on("keyup", function() {
            var event = d3.event;
            if(event.keyCode == 13 && _this.input_search.node().value == "select all") {
              _this.input_search.node().value = "";
              //clear highlight so it doesn't get in the way when selecting an entity
              if(!isTouchDevice()) _this.model.state.entities.clearHighlighted();        
              _this.model.state.entities.selectAll();
            }
          });

          this.input_search.on("input", function() {
            _this.showHideSearch();
          });

          this.deselect_all.on("click", function() {
            _this.deselectEntities();
          });

          this.translator = this.model.language.getTFunction();
          this.input_search.attr("placeholder", this.translator("placeholder/search") + "...");

          //make sure it refreshes when all is reloaded
          this.root.on('ready', function() {
            _this.ready();
          })

        },

        open: function() {
          var _this = this;
          this._super();

          this.input_search.node().value = "";
          this.showHideSearch();
            
          this.time = this.model.state.time.value;
            
          this.model.state.marker.getFrame(this.time, function(values) {
            if (!values) return;          
            _this.redrawDataPoints(values);
          });      
        },

        /**
         * Build the list everytime it updates
         */
        //TODO: split update in render and update methods
        ready: function() {
          this._super();

          var _this = this;
          var KEY = this.KEY;
          
          this.time = this.model.state.time.value;
          this.model.state.marker.getFrame(this.time, function(values) {
            if (!values) return;
              
            var data = _this.model.state.marker.getKeys().map(function(d) {
              var pointer = {};
              pointer[KEY] = d[KEY];
              pointer.brokenData = false;
              pointer.name = values.label[d[KEY]];
                
              return pointer;
            });

            //sort data alphabetically
            data.sort(function(a, b) {
              return(a.name < b.name) ? -1 : 1;
            });

            _this.list.html("");

            _this.items = _this.list.selectAll(".vzb-find-item")
              .data(data)
              .enter()
              .append("div")
              .attr("class", "vzb-find-item vzb-dialog-checkbox")

            _this.items.append("input")
              .attr("type", "checkbox")
              .attr("class", "vzb-find-item")
              .attr("id", function(d) {
                return "-find-" + d[KEY];
              })
              .on("change", function(d) {
                //clear highlight so it doesn't get in the way when selecting an entity
                if(!isTouchDevice()) _this.model.state.entities.clearHighlighted();        
                _this.model.state.entities.selectEntity(d);        
                //return to highlighted state
                if(!isTouchDevice() && !d.brokenData) _this.model.state.entities.highlightEntity(d); 
              });

            _this.items.append("label")
              .attr("for", function(d) {
                return "-find-" + d[KEY];
              })
              .text(function(d){return d.name})
              .on("mouseover", function(d) {
                if(!isTouchDevice() && !d.brokenData) _this.model.state.entities.highlightEntity(d);
              })
              .on("mouseout", function(d) {
                if(!isTouchDevice()) _this.model.state.entities.clearHighlighted();
              });
              preventAncestorScrolling(_this.element.select('.vzb-dialog-scrollable'));
              
              _this.redrawDataPoints(values);
              _this.selectDataPoints();
              _this.showHideSearch();
              _this.showHideDeselect();
              
          });
        },
          
        redrawDataPoints: function(values){
          var _this = this;
          var KEY = this.KEY;
              
          _this.items
            .each(function(d){
              var view = d3.select(this).select("label");
            
              d.brokenData = false;
              forEach(values, function(hook, name) {
                //TODO: remove the hack with hardcoded hook names (see discussion in #1389)
                if(name!=="color" && name!=="size_label" && _this.model.state.marker[name].use!=="constant" && !hook[d[KEY]] && hook[d[KEY]] !== 0) {
                  d.brokenData = true;
                }
              });
          
              view
                .classed("vzb-find-item-brokendata", d.brokenData)
                .attr("title", d.brokenData? _this.model.state.time.timeFormat(_this.time) + ": " + _this.translator("hints/nodata") : "");
            })
        },
          
        selectDataPoints: function(){
          var KEY = this.KEY;
          var selected = this.model.state.entities.getSelected();
          this.items.selectAll("input")
              .property("checked", function(d) {
                return(selected.indexOf(d[KEY]) !== -1);
              });
        },
          
        showHideSearch: function() {
          var search = this.input_search.node().value || "";
          search = search.toLowerCase();

          this.list.selectAll(".vzb-find-item")
            .classed("vzb-hidden", function(d) {
              var lower = (d.name||"").toLowerCase();
              return(lower.indexOf(search) === -1);
            });
        },

        showHideDeselect: function() {
          var someSelected = !!this.model.state.entities.select.length;
          this.deselect_all.classed('vzb-hidden', !someSelected);
          this.opacity_nonselected.classed('vzb-hidden', !someSelected);
        },

        deselectEntities: function() {
          this.model.state.entities.clearSelected();
        },

        transitionEnd: function(event) {
          this._super(event);

          if(!isTouchDevice()) this.input_search.node().focus();
        }

      });

      /*!
       * VIZABI COLOR DIALOG
       */

      var Colors = Dialog.extend({

        /**
         * Initializes the dialog component
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, parent) {
          this.name = 'colors';

          this.components = [{
            component: IndPicker,
            placeholder: '.vzb-caxis-selector',
            model: ["state.marker", "language"],
            markerID: "color"
          }, {
            component: ColorLegend,
            placeholder: '.vzb-clegend-container',
            model: ["state", "language"]
          }];


          this._super(config, parent);
        }

      });

      /*
       * Axes dialog
       */


      var Axes$1 = Dialog.extend({

        /**
         * Initializes the dialog component
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, parent) {
          this.name = 'axesmc'; 
          var _this = this;

          this.model_binds = {
            'change:ui.chart.xLogStops': function() {
              _this.updateView();
            },
            'change:ui.chart.yMaxMethod': function() {
              _this.updateView();
            }
          };

          this.components = [{
            component: MinMaxInputs,
            placeholder: '.vzb-xlimits-container',
            model: ["state.marker", "state.time", "language"],
            markerID: "axis_x",
            ui: {
              selectDomainMinMax: false,
              selectZoomedMinMax: true 
            }
          }]


          this._super(config, parent);
        },

        readyOnce: function() {
          this._super();

          var _this = this;

          this.yMaxRadio = this.element.select('.vzb-yaxis-container').selectAll('input')
            .on("change", function() {
              _this.setModel("yMaxMethod", d3.select(this).node().value);
            })

          this.xLogStops = this.element.select('.vzb-xaxis-container').selectAll('input')
            .on("change", function() {
              _this.setModel("xLogStops", d3.select(this).node().value);
            })

          this.probeFieldEl = this.element.select(".vzb-probe-field")
            .on("change", function() {
              var result = parseFloat(this.value.replace(",", "."));
              if(!result || result <= _this.model.state.marker.axis_x.tailCutX) {
                this.value = _this.model.ui.chart.probeX;
                return;
              } else if(result > _this.model.state.marker.axis_x.domainMax) {
                result = _this.model.state.marker.axis_x.domainMax;
              }
              this.value = result;
              _this.setModel("probeX", result);
            });

          this.updateView();

        },

        updateView: function() {
          var _this = this;

          this.yMaxRadio.property('checked', function() {
            return d3.select(this).node().value === _this.model.ui.chart.yMaxMethod;
          })
          this.xLogStops.property('checked', function() {
            return _this.model.ui.chart.xLogStops.indexOf(+d3.select(this).node().value) !== -1;
          })
          this.probeFieldEl.property("value", this.model.ui.chart.probeX);
        },

        setModel: function(what, value) {
          var result;

          if(what == "yMaxMethod") {
            result = value;
          }
          if(what == "xLogStops") {
            result = [];
            this.xLogStops.each(function() {
              if(d3.select(this).property('checked')) result.push(+d3.select(this).node().value);
            })
          }
          if(what == "probeX") {
            result = value;
          }

          this.model.ui.chart[what] = result;
        }
      });

      /*
       * Axes dialog
       */

      var Axes = Dialog.extend({

        /**
         * Initializes the dialog component
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, parent) {
          this.name = 'axes';
          var _this = this;

          this.components = [{
            component: IndPicker,
            placeholder: '.vzb-xaxis-selector',
            model: ["state.marker", "language"],
            markerID: "axis_x"
          },{
            component: MinMaxInputs,
            placeholder: '.vzb-xaxis-minmax',
            model: ["state.marker", "state.time", "language"],
            markerID: "axis_x",
            ui: {
              selectDomainMinMax: false,
              selectZoomedMinMax: true
            }
          }, {
            component: IndPicker,
            placeholder: '.vzb-yaxis-selector',
            model: ["state.marker", "language"],
            markerID: "axis_y"
          }, {
            component: MinMaxInputs,
            placeholder: '.vzb-yaxis-minmax',
            model: ["state.marker", "state.time", "language"],
            markerID: "axis_y",
            ui: {
              selectDomainMinMax: false,
              selectZoomedMinMax: true
            }
          }];

          this._super(config, parent);
        }
      });

      /*
       * Size dialog
       */

      var About = Dialog.extend({

      /**
       * Initializes the dialog component
       * @param config component configuration
       * @param context component context (parent)
       */
      init: function(config, parent) {
        this.name = 'about';

        this._super(config, parent);
      },
          
      readyOnce: function(){
        var version = globals.version;
        var updated = new Date(parseInt(globals.build));
          
        this.element = d3.select(this.element);
        this.element.select(".vzb-about-text0")
            .html("This chart is made with Vizabi,")
        this.element.select(".vzb-about-text1")
            .html("a project by <a href='http://gapminder.org'>Gapminder Foundation</a>")
        this.element.select(".vzb-about-version")
            .html("<a href='https://github.com/Gapminder/vizabi/releases/tag/v"+version+"'>Version: "+version+" (alpha)</a>");  
        this.element.select(".vzb-about-updated")
            .html("Build: " + d3.time.format("%Y-%m-%d at %H:%M")(updated));    
        this.element.select(".vzb-about-text2")
            .html("Alpha version: don't expect too much!");
        this.element.select(".vzb-about-report")
            .html("<a href='https://getsatisfaction.com/gapminder/'>Report a problem</a>");
        this.element.select(".vzb-about-credits")
            .html("<a href='https://github.com/Gapminder/vizabi/graphs/contributors'>Contributors</a>");
      }
          
          
      });

      /*!
       * VIZABI DIALOGS
       * Reusable dialogs component
       */

      //default existing dialogs
      var class_active$1 = "vzb-active";
      var Dialogs = Component.extend({

        /**
         * Initializes the dialogs
         * @param config component configuration
         * @param context component context (parent)
         */
        init: function(config, context) {

          //set properties
          var _this = this;
          this.name = 'gapminder-dialogs';
          this._curr_dialog_index = 20;


          this.model_expects = [{
            name: "state",
            type: "model"
          }, {
            name: "ui",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];

          this._available_dialogs = {
            'find': {
              dialog: Find,
            },
            'show': {
              dialog: Show,
            },
            'moreoptions': {
              dialog: MoreOptions,
            },
            'colors': {
              dialog: Colors,
            },
            'size': {
              dialog: Size,
            },
            'label': {
              dialog: Label,
            },
            'zoom': {
              dialog: Zoom,
            },
            'axes': {
              dialog: Axes,
            },
            'axesmc': {
              dialog: Axes$1,
            },
            'stack': {
              dialog: Stack,
            },
            'speed': {
              dialog: Speed
            },
            'opacity': {
              dialog: Opacity
            },
            'presentation': {
              dialog: Presentation
            },
            'about': {
              dialog: About
            }
          };

          this._super(config, context);

        },
        
        domReady: function() {
          var dialog_popup = (this.model.ui.dialogs||{}).popup || [];
          var dialog_sidebar = (this.model.ui.dialogs||{}).sidebar || [];
          
          this.rootEl = this.root.element instanceof Array? this.root.element : d3.select(this.root.element);
          
          // if dialog_sidebar has been passed in with boolean param or array must check and covert to array
          if (dialog_sidebar === true) {
            dialog_sidebar = dialog_popup;
            (this.model.ui.dialogs||{}).sidebar = dialog_sidebar;
          }
          if (dialog_sidebar.length !== 0) {
            this.rootEl.classed("vzb-dialog-expand-true", true);
          }
          this.dialog_popup = dialog_popup;
          this.dialog_sidebar = dialog_sidebar;
        },

        readyOnce: function() {
          var _this = this;

          this.element = d3.select(this.placeholder);
          this.element.selectAll("div").remove();

          this._addDialogs(this.dialog_popup, this.dialog_sidebar);

          this.resize();

          if(this.dialog_popup.length !== 0) {
            this.root.findChildByName("gapminder-buttonlist")
              .on("click", function(evt, button) {
                if(!_this._available_dialogs[button.id]) return;

                if(button.active) {
                  _this.openDialog(button.id)
                } else {
                  _this.closeDialog(button.id)
                }
              });

            var popupDialogs = this.element.selectAll(".vzb-top-dialog").filter(function(d) {return _this.dialog_popup.indexOf(d.id) > -1});

            var close_buttons = popupDialogs.select(".vzb-top-dialog>.vzb-dialog-modal>.vzb-dialog-buttons>[data-click='closeDialog']");
            close_buttons.on('click', function(d, i) {
              _this.closeDialog(d.id);
            });

            var pinDialog = popupDialogs.select(".vzb-top-dialog>.vzb-dialog-modal>[data-click='pinDialog']");
            pinDialog.on('click', function(d, i) {
              _this.pinDialog(d.id);
            });

            this.rootEl.node().addEventListener('click', function() {
              _this.closeAllDialogs();
            });

            this.rootEl.on("mousedown", function(e) {
              if(!this._active_comp) return; //don't do anything if nothing is open

              var target = d3.event.target;
              var closeDialog = true;
              while(target) {
                if(target.classList.contains("vzb-dialog-modal")) {
                  closeDialog = false;
                  break;
                }
                target = target.parentElement;
              }
              if(closeDialog) {
                _this.closeAllDialogs();
              }
            });
          }

          this.element.on('click', function() {
            d3.event.stopPropagation();
          });

        },

        resize: function() {
          var _this = this;
          var profile = this.getLayoutProfile();

          this.element.selectAll(".vzb-top-dialog").each(function(d) {
            var dialogEl = d3.select(this);
            var cls = dialogEl.attr('class').replace(' vzb-popup','').replace(' vzb-sidebar','');

            if (profile === 'large' && _this.dialog_sidebar.indexOf(d.id) > -1) {
              cls += ' vzb-sidebar';
            } else if(_this.dialog_popup.indexOf(d.id) > -1) {
              cls += ' vzb-popup';
            }

            dialogEl.attr('class', cls);
          });

        },

        /*
         * adds dialogs configuration to the components and template_data
         * @param {Array} dialog_list list of dialogs to be added
         */
        _addDialogs: function(dialog_popup, dialog_sidebar) {

          var profile = this.getLayoutProfile();
          var dialog_list = [];

          dialog_list = dialog_popup ? dialog_list.concat(dialog_popup) : dialog_list;
          dialog_list = dialog_sidebar ? dialog_list.concat(dialog_sidebar) : dialog_list;

          dialog_list = unique(dialog_list);

          this._components_config = [];
          var details_dlgs = [];
          if(!dialog_list.length) return;
          //add a component for each dialog
          for(var i = 0; i < dialog_list.length; i++) {

            var dlg = dialog_list[i];
            var dlg_config = this._available_dialogs[dlg];

            //if it's a dialog, add component
            if(dlg_config && dlg_config.dialog) {
              var comps = this._components_config;

              //add corresponding component
              comps.push({
                component: dlg_config.dialog,
                placeholder: '.vzb-dialogs-dialog[data-dlg="' + dlg + '"]',
                model: ["state", "ui", "language"]
              });

              dlg_config.component = comps.length - 1;
            }

            dlg_config.id = dlg;
            details_dlgs.push(dlg_config);
          };

          this.element.selectAll('div').data(details_dlgs)
            .enter().append("div")
            .attr('data-dlg', function(d) {
              return d.id;
            })
            .attr('class', 'vzb-top-dialog vzb-dialogs-dialog vzb-dialog-shadow');

          this.loadComponents();

          var _this = this;
          //render each subcomponent
          forEach(this.components, function(subcomp) {
            subcomp.render();
            _this.on('resize', function() {
              subcomp.trigger('resize');
            });
            subcomp.on('dragstart', function() {
              _this.bringForward(subcomp.name);
            });
            subcomp.on('close', function() {
              this.placeholderEl.each( function(d) {
                var evt = {};
                evt.id = d.id;
                _this.trigger('close', evt);
              });
            });
          });

        },

        bringForward: function(id) {
          var dialog = this.element.select(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");
          dialog.style('z-index', this._curr_dialog_index);
          this._curr_dialog_index += 10;
        },

        //TODO: make opening/closing a dialog via update and model
        /*
         * Activate a dialog
         * @param {String} id dialog id
         */
        openDialog: function(id) {
          //close pinned dialogs for small profile
          var forceClose = this.getLayoutProfile() === 'small' ? true : false;
          this.closeAllDialogs(forceClose);

          var dialog = this.element.selectAll(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");

          this._active_comp = this.components[this._available_dialogs[id].component];

          this._active_comp.beforeOpen();
          //add classes
          dialog.classed(class_active$1, true);

          this.bringForward(id);

          //call component function
          this._active_comp.open();
        },


        pinDialog: function(id) {
          var dialog = this.element.select(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");

          if(this._available_dialogs[id].ispin) {
            dialog.classed('pinned', false);
            this._available_dialogs[id].ispin = false;
          } else {
            dialog.classed('pinned', true);
            this._available_dialogs[id].ispin = true;
          }
        },


        /*
         * Closes a dialog
         * @param {String} id dialog id
         */
        closeDialog: function(id) {
          var dialog = this.element.selectAll(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");

          this._active_comp = this.components[this._available_dialogs[id].component];

          if(this._active_comp && !this._active_comp.isOpen) return;

          if(this._available_dialogs[id].ispin)
            this.pinDialog(id);

          if(this._active_comp) {
            this._active_comp.beforeClose();
          }
          //remove classes
          dialog.classed(class_active$1, false);

          //call component close function
          if(this._active_comp) {
            this._active_comp.close();
          }
          this._active_comp = false;

        },

        /*
         * Close all dialogs
         */
        closeAllDialogs: function(forceclose) {
          var _this = this;
          //remove classes
          var dialogClass = forceclose ? ".vzb-popup.vzb-dialogs-dialog.vzb-active" : ".vzb-popup.vzb-dialogs-dialog.vzb-active:not(.pinned)";
          var all_dialogs = this.element.selectAll(dialogClass);
            all_dialogs.each(function(d) {
              _this.closeDialog(d.id)
            });
        }

      });

      var hidden$1 = true;

      var DataWarning = Component.extend({

        init: function(config, context) {
          var _this = this;

          this.name = 'gapminder-datawarning';

          this.model_expects = [{
            name: "language",
            type: "language"
          }];

          this.context = context;

          this.model_binds = {
            "change:language.strings": function(evt) {
              _this.ready();
            }
          }

          //contructor is the same as any component
          this._super(config, context);

          this.ui = extend({
            //...add properties here
          }, this.ui);

        },

        ready: function() {},

        readyOnce: function() {
          var _this = this;
          this.element = d3.select(this.placeholder);
          this.translator = this.model.language.getTFunction();

          this.element.selectAll("div").remove();

          this.element.append("div")
            .attr("class", "vzb-data-warning-background")
            .on("click", function() {
              _this.toggle(true)
            });

          var container = this.element.append("div")
            .attr("class", "vzb-data-warning-box");

          container.append("div")
            .html(iconClose)
            .on("click", function() {
              _this.toggle()
            })
            .select("svg")
            .attr("width", "0px")
            .attr("height", "0px")
            .attr("class", "vzb-data-warning-close");

          var icon = container.append("div")
            .attr("class", "vzb-data-warning-link")
            .html(iconWarn)

          icon.append("div")
            .text("Data doubts");

          if(this.parent.datawarning_content.title) {
            container.append("div")
              .attr("class", "vzb-data-warning-title")
              .html(this.parent.datawarning_content.title);
          }

          container.append("div")
            .attr("class", "vzb-data-warning-body vzb-dialog-scrollable")
            .html(this.parent.datawarning_content.body);

        },

        toggle: function(arg) {
          if(arg == null) arg = !hidden$1;
          hidden$1 = arg;
          this.element.classed("vzb-hidden", hidden$1);

          var _this = this;
          this.parent.components.forEach(function(c) {
            c.element.classed("vzb-blur", c != _this && !hidden$1);
          })
        }

      });

      var hidden = true;
      var showNotes = false;
      var pin = false;
      var left = 0;
      var top = 0;
      var hookName = null;
      var newHookName = null;

      var DataNotes = Component.extend({

        init: function(config, context) {
          var _this = this;

          this.name = 'gapminder-datanotes';

          this.model_expects = [{
            name: "marker",
            type: "model"
          },{
            name: "language",
            type: "language"
          }];

          this.context = context;

          this.model_binds = {
            "change:language.strings": function(evt) {
              _this.ready();
            }
          }

          //contructor is the same as any component
          this._super(config, context);

          this.ui = extend({
            //...add properties here
          }, this.ui);

          this.close = this.close.bind(this);
        },

        ready: function() {
          this.translator = this.model.language.getTFunction();
          //this.setValues();
        },

        readyOnce: function() {
          var _this = this;
          this.element = d3.select(this.placeholder);

          this.element.selectAll("div").remove();

          var container = this.element;

          container.append("div")
            .html(iconClose)
            .on("click", function() {
              d3.event.stopPropagation();
              _this.close();
            })
            .select("svg")
            .attr("width", "0px")
            .attr("height", "0px")
            .attr("class", "vzb-data-notes-close")
            .classed('vzb-hidden', true);

          container.append("div")
            .attr("class", "vzb-data-notes-body vzb-dialog-scrollable")

          container.append("div")
            .attr("class", "vzb-data-notes-link")

        },

        resize: function() {
          this.close();
        },

        close: function() {
          if(!hidden) {
            this.pin(false).hide();
          }
        },

        setHook: function(_hookName) {
          if(!this._readyOnce) return this; 
          if(pin) {
            newHookName = _hookName;
            return this;
          }
          if(hookName) this.model.marker[hookName].off('change:which', this.close);
          hookName = newHookName = _hookName;
          this.model.marker[hookName].on('change:which', this.close);
          
          this.setValues();

          return this;
        },

        setValues: function() {
          if(!hookName) return;
          var hook = this.model.marker[hookName];
          var description = this.translator('description/' + hook.which);
          var showDescription = description != ('description/' + hook.which);
          if(showDescription) this.element.select('.vzb-data-notes-body').text(description);
          this.element.select('.vzb-data-notes-body').classed('vzb-hidden', !showDescription);
         
          var sourceLink = hook.getConceptprops().sourceLink;
          this.element.select('.vzb-data-notes-link').classed('vzb-hidden', !sourceLink);

          if(sourceLink) {
            var _source = this.translator('hints/source');
            var sourceName = this.translator('sourceName/' + hook.which);
            var showSourceName = sourceName != ('sourceName/' + hook.which);
            this.element.select('.vzb-data-notes-link').html('<span>' + (showSourceName ? (_source + ':') : '') +
              '<a href="' + sourceLink + '" target="_blank">' + (showSourceName ? sourceName : _source) + '</a></span>');
          }
          showNotes = sourceLink != null || showDescription;
        },

        setPos: function(_left, _top, force) {
          left = _left;
          top = _top;
          if(pin && !force) return this;
          var parentHeight = this.parent.element.offsetHeight;
          var width = this.element.node().offsetWidth;
          var height = this.element.node().offsetHeight;
          var leftMove;
          var topMove;
          var leftPos = left - width;
          var topPos = top;
          if(leftPos < 10) {
            leftPos = 10;
            leftMove = true;
          }
          if((topPos + height + 10) > parentHeight) {
            topPos = parentHeight - height - 10;
            topMove = true;
          }

          if(leftMove && topMove) {
            topPos = top - height - 30;
          }

          this.element.style({'top': topPos + 'px', 'left': leftPos + 'px'});

          return this;
        },

        pin: function(arg) {
          if(hidden) return this;
          pin = !pin;
          if(arg != null) pin = arg;
          this.element.select('.vzb-data-notes-close').classed('vzb-hidden', !pin);
          this.element.classed('vzb-data-notes-pinned', pin);
          if(hookName != newHookName) this.setHook(newHookName);  
          this.element.select('.vzb-data-notes-body').node().scrollTop = 0;
          if(!showNotes) {
            return this.hide();
          } else {
            return this.setPos(left, top, true);      
          }
        },

        toggle: function(arg) {
          if(pin || !hookName) return this;
          if(arg == null) arg = !hidden;
          hidden = arg;
          this.element.classed("vzb-hidden", hidden || !showNotes);
          return this;
        },

        show: function() {
          return this.toggle(false);
        },

        hide: function() {
          return this.toggle(true);
        }

      });

      //d3.svg.colorPicker


      var instance = null;

      function colorPicker() {


        return function getInstance() {
          if (instance == null) {
            instance = d3_color_picker();
          }
          return instance;
        }();

        function d3_color_picker() {
          // tuning defaults
          var nCellsH = 15;
          // number of cells by hues (angular)
          var minH = 0;
          // which hue do we start from: 0 to 1 instead of 0 to 365
          var nCellsL = 4;
          // number of cells by lightness (radial)
          var minL = .5;
          // which lightness to start from: 0 to 1. Recommended .3...0.5
          var satConstant = .7;
          // constant saturation for color wheel: 0 to 1. Recommended .7...0.8
          var outerL_display = .4;
          // ecxeptional saturation of the outer circle. the one displayed 0 to 1
          var outerL_meaning = .3;
          // ecxeptional saturation of the outer circle. the one actually ment 0 to 1
          var firstAngleSat = 0;
          // exceptional saturation at first angular segment. Set 0 to have shades of grey
          var minRadius = 15;
          //radius of the central hole in color wheel: px
          var maxWidth = 280;
          var maxHeight = 323;
          var margin = {
            top: .1,
            bottom: .1,
            left: .1,
            right: .1
          };
          //margins in % of container's width and height
          var colorOld = '#000';
          var colorDef = '#000';
          var colorWhite = '#f8f8f8';
          // names of CSS classes
          var css = {
            INVISIBLE: 'vzb-invisible',
            COLOR_POINTER: 'vzb-colorpicker-pointer',
            COLOR_BUTTON: 'vzb-colorpicker-cell',
            COLOR_DEFAULT: 'vzb-colorpicker-default',
            COLOR_SAMPLE: 'vzb-colorpicker-sample',
            COLOR_PICKER: 'vzb-colorpicker-svg',
            COLOR_CIRCLE: 'vzb-colorpicker-circle',
            COLOR_CIRCLES: 'vzb-colorpicker-circles',
            COLOR_SEGMENT: 'vzb-colorpicker-segment',
            COLOR_BACKGR: 'vzb-colorpicker-background'
          };
          var colorData = [];
          //here we store color data. formatted as follows:
          /*
           [
           [ // outer circle
           {display: "#123456", meaning: "#123456"}, // first angle
           ...
           {display: "#123456", meaning: "#123456"} // last angle, clockwise
           ],
           [ // next circle
           {display: "#123456", meaning: "#123456"}, // first angle
           ...
           {display: "#123456", meaning: "#123456"} // last angle, clockwise
           ],

           ...

           [ // inner circle
           {display: "#123456", meaning: "#123456"}, // first angle
           ...
           {display: "#123456", meaning: "#123456"} // last angle, clockwise
           ]
           ]
           */
          var arc = d3.svg.arc();
          var pie = d3.layout.pie().sort(null).value(function(d) {
            return 1;
          });
          var svg = null;
          var container = null;
          var colorPointer = null;
          var showColorPicker = false;
          var sampleRect = null;
          var sampleText = null;
          var background = null;
          var callback = function(value) {
            console.info('Color picker callback example. Setting color to ' + value);
          };

          function _generateColorData() {
            var result = [];
            // loop across circles
            for(var l = 0; l < nCellsL; l++) {
              var lightness = minL + (1 - minL) / nCellsL * l;
              // new circle of cells
              result.push([]);
              // loop across angles
              for(var h = 0; h <= nCellsH; h++) {
                var hue = minH + (1 - minH) / nCellsH * h;
                // new cell
                result[l].push({
                  display: _hslToRgb(hue, h == 0 ? firstAngleSat : satConstant, l == 0 ? outerL_display : lightness),
                  meaning: _hslToRgb(hue, h == 0 ? firstAngleSat : satConstant, l == 0 ? outerL_meaning : lightness)
                });
              }
            }
            return result;
          }

          function _hslToRgb(h, s, l) {
            var r, g, b;
            if(s == 0) {
              r = g = b = l; // achromatic
            } else {
              var _hue2rgb = function _hue2rgb(p, q, t) {
                if(t < 0)
                  t += 1;
                if(t > 1)
                  t -= 1;
                if(t < 1 / 6)
                  return p + (q - p) * 6 * t;
                if(t < 1 / 2)
                  return q;
                if(t < 2 / 3)
                  return p + (q - p) * (2 / 3 - t) * 6;
                return p;
              };
              var q = l < .5 ? l * (1 + s) : l + s - l * s;
              var p = 2 * l - q;
              r = _hue2rgb(p, q, h + 1 / 3);
              g = _hue2rgb(p, q, h);
              b = _hue2rgb(p, q, h - 1 / 3);
            }
            return '#' + Math.round(r * 255).toString(16) + Math.round(g * 255).toString(16) + Math.round(b * 255).toString(
              16);
          }

          // this is init function. call it once after you are satisfied with parameters tuning
          // container should be a D3 selection that has a div where we want to render color picker
          // that div should have !=0 width and height in its style
          function colorPicker(container) {
            colorPicker.container = container;
            svg = container.select('.' + css.COLOR_PICKER);
            if(!svg.empty()) {
              return;
            }
            container.on('click', function() {
              colorPicker.show(false);
              d3.event.stopPropagation();
            });
            colorData = _generateColorData();

            svg = container.append('svg')
              .style('position', 'absolute')
              .style('top', '0')
              .style('left', '0')
              .style('width', '100%')
              .style('max-width', maxWidth + "px")
              .style('height', '100%')
              .style('max-height', maxHeight + "px")
              .style('z-index', 9999)
              .attr('class', css.COLOR_PICKER + " vzb-dialog-shadow")
              .classed(css.INVISIBLE, !showColorPicker)
              .on('mouseout', function(d) { _cellHover(colorOld); });

            var width = parseInt(svg.style('width'));
            var height = parseInt(svg.style('height'));
            var maxRadius = width / 2 * (1 - margin.left - margin.right);
            background = svg.append('rect')
              .attr('width', width)
              .attr('height', maxHeight)
              .attr('class', css.COLOR_BUTTON +' '+ css.COLOR_BACKGR)
              .on('mouseover',
                function(d) {
                  _cellHover(colorOld);
                });          
            var circles = svg.append('g')
              .attr('class', css.COLOR_CIRCLES)
              .attr('transform', 'translate(' + (maxRadius + width * margin.left) +
              ',' + (maxRadius + height * margin.top) + ')');

            svg.append('rect')
              .attr('class', css.COLOR_SAMPLE)
              .attr('width', width / 2)
              .attr('height', height * margin.top / 2);

            sampleRect = svg.append('rect')
              .attr('class', css.COLOR_SAMPLE)
              .attr('width', width / 2)
              .attr('x', width / 2)
              .attr('height', height * margin.top / 2);

            svg.append('text')
              .attr('x', width * margin.left)
              .attr('y', height * margin.top / 2)
              .attr('dy', '1.3em')
              .attr('class', css.COLOR_SAMPLE)
              .style('text-anchor', 'start');

            sampleText = svg.append('text').attr('x', width * (1 - margin.right))
              .attr('y', height * margin.top / 2)
              .attr('dy', '1.3em')
              .attr('class', css.COLOR_SAMPLE)
              .style('text-anchor', 'end');

            svg.append('text')
              .attr('x', width * .1)
              .attr('y', height * (1 - margin.bottom))
              .attr('dy', '1.2em')
              .attr('class', "vzb-default-label")
              .style('text-anchor', 'start')
              .text('default');

            svg.append('circle')
              .attr('class', css.COLOR_DEFAULT + ' ' + css.COLOR_BUTTON)
              .attr('r', width * margin.left / 2)
              .attr('cx', width * margin.left * 1.5)
              .attr('cy', height * (1 - margin.bottom * 1.5))
              .on('mouseover',
                function() {
                  d3.select(this).style('stroke', '#444');
                  _cellHover(colorDef);
              })
              .on('mouseout', function() {
                d3.select(this).style('stroke', 'none');
              });

            circles.selectAll('.' + css.COLOR_CIRCLE)
              .data(colorData).enter().append('g')
                .attr('class', css.COLOR_CIRCLE)
                  .each(
                    function(circleData, index) {
                      arc.outerRadius(minRadius + (maxRadius - minRadius) / nCellsL *
                        (nCellsL - index)).innerRadius(minRadius +
                        (maxRadius - minRadius) / nCellsL * (nCellsL - index - 1));
                      var segment = d3.select(this).selectAll('.' + css.COLOR_SEGMENT)
                        .data(pie(circleData)).enter().append('g')
                          .attr('class', css.COLOR_SEGMENT);

                    segment.append('path')
                      .attr('class', css.COLOR_BUTTON)
                      .attr('d', arc)
                      .style('fill', function(d) {
                        return d.data.display;
                      })
                      .style('stroke', function(d) {
                        return d.data.display;
                      })
                      .on('mouseover', function(d) {
                        _cellHover(d.data.meaning, this);
                      })
                      .on('mouseout', function(d) {
                        _cellUnHover();
                      });
                  });

            circles.append('circle')
              .attr('r', minRadius)
              .attr('fill', colorWhite)
              .attr('class', css.COLOR_BUTTON)
              .on('mouseover',
                function() {
                  d3.select(this).style('stroke', "#555");
                  _cellHover(colorWhite);
              })
              .on('mouseout', function() {
                d3.select(this).style('stroke', 'none');
              });        

            colorPointer = circles.append('path')
              .attr('class', css.COLOR_POINTER + ' ' + css.INVISIBLE);

            svg.selectAll('.' + css.COLOR_BUTTON)
              .on('click', function() {
                d3.event.stopPropagation();
                _this.show(false);
              });
            _doTheStyling(svg);
            colorPicker.resize(svg);
          }

          var _doTheStyling = function(svg) {
            //styling
            svg.select('.' + css.COLOR_BACKGR)
              .style('fill', 'white');

            svg.select('.' + css.COLOR_POINTER)
              .style('stroke-width', 2)
              .style('stroke', colorWhite)
              .style('pointer-events', 'none')
              .style('fill', 'none');

            svg.selectAll('.' + css.COLOR_BUTTON)
              .style('cursor', 'pointer');

            svg.selectAll('text')
              .style('fill', '#D9D9D9')
              .style('font-size', '0.7em')
              .style('text-transform', 'uppercase');

            svg.selectAll('circle.' + css.COLOR_BUTTON)
              .style('stroke-width', 2);
          };

          var _this = colorPicker;
          var _cellHover = function(value, view) {
            // show color pointer if the view is set (a cell of colorwheel)
            if(view != null)
              colorPointer.classed(css.INVISIBLE, false)
                .attr('d', d3.select(view)
                .attr('d'));

            sampleRect.style('fill', value);
            sampleText.text(value);
            callback(value);
          };
          var _cellUnHover = function() {
            colorPointer.classed(css.INVISIBLE, true);
          };
          //Use this function to hide or show the color picker
          //true = show, false = hide, "toggle" or TOGGLE = toggle
          var TOGGLE = 'toggle';
          colorPicker.show = function(arg) {
            if(!arguments.length)
              return showColorPicker;
            if(svg == null)
              console.warn('Color picker is missing SVG element. Was init sequence performed?');
            showColorPicker = arg == TOGGLE ? !showColorPicker : arg;
            if (!showColorPicker) {
              callback = function() {};
            }
            svg.classed(css.INVISIBLE, !showColorPicker);
          };
          // getters and setters
          colorPicker.nCellsH = function(arg) {
            if(!arguments.length)
              return nCellsH;
            nCellsH = arg;
            return colorPicker;
          };
          colorPicker.minH = function(arg) {
            if(!arguments.length)
              return minH;
            minH = arg;
            return colorPicker;
          };
          colorPicker.nCellsL = function(arg) {
            if(!arguments.length)
              return nCellsL;
            nCellsL = arg;
            return colorPicker;
          };
          colorPicker.minL = function(arg) {
            if(!arguments.length)
              return minL;
            minL = arg;
            return colorPicker;
          };
          colorPicker.outerL_display = function(arg) {
            if(!arguments.length)
              return outerL_display;
            outerL_display = arg;
            return colorPicker;
          };
          colorPicker.outerL_meaning = function(arg) {
            if(!arguments.length)
              return outerL_meaning;
            outerL_meaning = arg;
            return colorPicker;
          };
          colorPicker.satConstant = function(arg) {
            if(!arguments.length)
              return satConstant;
            satConstant = arg;
            return colorPicker;
          };
          colorPicker.firstAngleSat = function(arg) {
            if(!arguments.length)
              return firstAngleSat;
            firstAngleSat = arg;
            return colorPicker;
          };
          colorPicker.minRadius = function(arg) {
            if(!arguments.length)
              return minRadius;
            minRadius = arg;
            return colorPicker;
          };
          colorPicker.margin = function(arg) {
            if(!arguments.length)
              return margin;
            margin = arg;
            return colorPicker;
          };
          colorPicker.callback = function(arg) {
            if(!arguments.length)
              return callback;
            callback = arg;
            return colorPicker;
          };
          colorPicker.colorDef = function(arg) {
            if(!arguments.length)
              return colorDef;
            if (typeof arg !== 'undefined') {
              colorDef = arg;
            }
            if(svg == null)
              console.warn('Color picker is missing SVG element. Was init sequence performed?');
            svg.select('.' + css.COLOR_DEFAULT).style('fill', colorDef);
            return colorPicker;
          };
          /**
           * @param {ClientRect} screen parent element
           * @param {int[]} arg [x,y] of color picker position
           */
          colorPicker.fitToScreen = function(arg) {
            var screen = colorPicker.container.node().getBoundingClientRect();
            var xPos, yPos;

            var width = parseInt(svg.style('width'));
            var height = parseInt(svg.style('height'));

            if (!arg) {
              xPos = screen.width - parseInt(svg.style('right')) - width;
              yPos = parseInt(svg.style('top'));
            } else {
              xPos = arg[0] - screen.left;
              yPos = arg[1] - screen.top;
            }

            var styles = {left: ''};
            if (screen.width * 0.8 <= width) {
              styles.right = (screen.width - width) * 0.5 + "px";
            } else if (xPos + width > screen.width) {
              styles.right = Math.min(screen.width * 0.1, 20) + "px";
            } else {
              styles.right = screen.width - xPos - width + "px";
            }
            if (screen.height * 0.8 <= height) {
              styles.top = (screen.height - height) * 0.5 + "px";
            } else if (yPos + height * 1.2 > screen.height) {
              styles.top = screen.height * 0.9 - height + "px";
            } else {
              styles.top = yPos + "px";
            }

            svg.style(styles);
            return colorPicker;
          };
          colorPicker.colorOld = function(arg) {
            if(!arguments.length)
              return colorOld;
            colorOld = arg;
            if(svg == null)
              console.warn('Color picker is missing SVG element. Was init sequence performed?');
            svg.select('rect.' + css.COLOR_SAMPLE).style('fill', colorOld);
            svg.select('text.' + css.COLOR_SAMPLE).text(colorOld);
            return colorPicker;
          };

          colorPicker.resize = function(arg) {

            if(!arguments.length)
              return resize;
            if (typeof arg !== 'undefined') {
              var svg = arg;
              var width = parseInt(svg.style('width'));
              var height = parseInt(svg.style('height'));
              var maxRadius = width / 2 * (1 - margin.left - margin.right);
              var selectedColor = svg.select('.'+css.COLOR_DEFAULT);
              var defaultLabel = svg.select('.vzb-default-label');
              var circles = svg.select('.' + css.COLOR_CIRCLES);
             
              var hPos = maxRadius + height * margin.top;
              var hPosCenter = (1 + margin.top * .5) * height * .5;
              hPos = hPos > hPosCenter ? hPosCenter : hPos; 
              circles.attr('transform', 'translate(' + (maxRadius + width * margin.left) +
              ',' + hPos + ')');
              selectedColor.attr('cx', width * margin.left * 1.5)
                           .attr('cy', height * (1 - margin.bottom * 1.5));
              defaultLabel.attr('x', width * .1)
                          .attr('y', height * (1 - margin.bottom));
            }
            colorPicker.fitToScreen();

            return colorPicker;
          };
          return colorPicker;
        };
      };

      /*!
       * VIZABI BUBBLE COLOR LEGEND COMPONENT
       */

      var OPACITY_REGULAR = 0.8;
      var OPACITY_DIM = 0.5;
      var OPACITY_HIGHLIGHT = 1;

      var ColorLegend = Component.extend({

        init: function(config, context) {
          var _this = this;
          this.template = '<div class="vzb-cl-outer"></div>';
          this.name = 'colorlegend';

          this.model_expects = [{
            name: "state",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];

          this.needsUpdate = false;
          this.which_1 = false;
          this.scaleType_1 = false;

          this.model_binds = {
            "change:state.marker.color.scaleType": function(evt, path) {
              if(!_this._readyOnce) return;
              _this.updateView();
            },
            "change:state.marker.color.which": function(evt, path) {
              if(!_this._readyOnce) return;
              if(_this.model.state.entities_minimap) {
                _this.forwardModelUpdate();
              }else{
                _this.updateView();
              }
            },
            "change:state.marker.color.palette": function(evt, path) {
              if(!_this._readyOnce) return;
              _this.updateView();
            },
            "change:language.strings": function(evt) {
              this.translator = this.model.language.getTFunction();
              _this.updateView();
            }
          }
          
          //contructor is the same as any component
          this._super(config, context);
        },
        
        forwardModelUpdate: function(){
          if(this.colorModel.use === "property"){
            this.model.state.entities_minimap.show[this.KEY + ".cat"] = [this.colorModel.which.replace(this.KEY+".","")];
          }
        },


        readyOnce: function() {
          var _this = this;
          this.element = d3.select(this.element);
          
          this.translator = this.model.language.getTFunction();
          
          this.markerModel = this.model.state.marker_minimap ? this.model.state.marker_minimap : this.model.state.marker;
          this.listColorsEl = this.element
            .append("div").attr("class", "vzb-cl-holder")
            .append("div").attr("class","vzb-cl-colorlist");
          this.rainbowEl = this.listColorsEl.append("div").attr("class", "vzb-cl-rainbow");
          this.minimapEl = this.listColorsEl.append("div").attr("class", "vzb-cl-minimap");
          this.labelScaleEl = this.listColorsEl.append("div").attr("class", "vzb-cl-labelscale");
          this.labelScaleSVG = this.labelScaleEl.append("svg");
          this.labelScaleG = this.labelScaleSVG.append("g");
          this.unitDiv = this.labelScaleEl.append("div").attr("class", "vzb-cl-unit");
          this.unitText = this.unitDiv.append("text").attr("class", "vzb-cl-unit-text");

          this.minimapSVG = this.minimapEl.append("svg");
          this.minimapG = this.minimapSVG.append("g");

          this.colorPicker = colorPicker();
          
          // append color picker to the tool DOM. need to check if element is already a d3 selection to not do it twice
          this.root.element instanceof Array? this.root.element : d3.select(this.root.element)
            .call(this.colorPicker);

          this.KEY = this.model.state.entities.getDimension();
          this.colorModel = this.model.state.marker.color;
          
          OPACITY_REGULAR = this.model.state.entities.opacityRegular;
          OPACITY_DIM = this.model.state.entities.opacitySelectDim;
          OPACITY_HIGHLIGHT = 1;
          
        },
        
        
        ready: function(){
          var _this = this;
          if(this.model.state.marker_minimap){
            var minimapDim = this.model.state.marker_minimap._getFirstDimension();
            var timeModel = this.model.state.time;
            var filter = {};
            filter[timeModel.getDimension()] = timeModel.value;
            _this.frame = this.model.state.marker_minimap.getValues(filter,[minimapDim]);
          }
          _this.updateView();
        },


        updateView: function() {
          var _this = this;
          var KEY = this.KEY;

          var palette = this.colorModel.getPalette();
          var canShowMap = keys((this.frame||{}).geoshape||{}).length && this.colorModel.use == "property";

          var minimapKeys = [];

          if(this.model.state.marker_minimap){
            var minimapDim = this.model.state.marker_minimap._getFirstDimension();
            var minimapKeys = this.model.state.marker_minimap.getKeys(minimapDim);
          }
          
          minimapKeys.forEach(function(d){
            if(!((_this.frame||{}).geoshape||{})[d[_this.KEY]]) canShowMap = false;
          });
          
          this.labelScaleEl.classed("vzb-hidden", true); 

          var colorOptions = this.listColorsEl.selectAll(".vzb-cl-option");
          
          //Hide and show elements of the color legend
          //Hide color legend entries if showing minimap or if color hook is a constant
          colorOptions.classed("vzb-hidden", canShowMap || this.colorModel.which == "_default");
          //Hide rainbow element if showing minimap or if color is discrete
          //TODO: indocators-properties are incorrectly used here.
          this.rainbowEl.classed("vzb-hidden", canShowMap || this.colorModel.use !== "indicator");
          //Hide minimap if no data to draw it
          this.minimapEl.classed("vzb-hidden", !canShowMap);
          
          //Check if geoshape is provided
          if(!canShowMap) {
            if(this.colorModel.which == "_default") {
              colorOptions = colorOptions.data([]); 
            }else if(this.colorModel.use == "indicator" || !minimapKeys.length) {
              colorOptions = colorOptions.data(keys(this.colorModel.getScale().range()), function(d) {return d});
            }else{
              colorOptions = colorOptions.data(minimapKeys, function(d) {return d[minimapDim]});
            }

            colorOptions.exit().remove();
            
            colorOptions.enter().append("div").attr("class", "vzb-cl-option")
              .each(function() {
                d3.select(this).append("div").attr("class", "vzb-cl-color-sample");
                d3.select(this).append("div").attr("class", "vzb-cl-color-legend");
              })
              .on("mouseover", _this._interact().mouseover)
              .on("mouseout", _this._interact().mouseout)
              .on("click", _this._interact().click);

            colorOptions.each(function(d, index) {
              d3.select(this).select(".vzb-cl-color-sample")
                .style("background-color", palette[d[_this.KEY]||d[minimapDim]||d])
                .style("border", "1px solid " + palette[d[_this.KEY]||d[minimapDim]||d]);
            }); 
            
            if(this.colorModel.use == "indicator") {
              
              var gradientWidth = this.rainbowEl.node().getBoundingClientRect().width;
              var paletteKeys = Object.keys(palette).map(parseFloat);
              
              var domain;
              var range;
              var labelScale;
              var formatter = this.colorModel.getTickFormatter();
              var fitIntoScale = null;
                
              var paletteLabels = this.colorModel.paletteLabels;

              if(paletteLabels) {

                fitIntoScale = "optimistic";
                
                domain = paletteLabels.map(function(val) {
                  return parseFloat(val);
                });
                var paletteMax = d3.max(domain);
                range = domain.map(function(val) {
                  return val / paletteMax * gradientWidth;
                });  

              } else {

                domain = _this.colorModel.getScale().domain();
                var paletteMax = d3.max(paletteKeys);
                range = paletteKeys.map(function(val) {
                  return val / paletteMax * gradientWidth;
                });

              }
                
              labelScale = d3.scale[this.colorModel.scaleType == "time" ? "linear" : this.colorModel.scaleType]()
                .domain(domain)
                .range(range);
                
              var marginLeft = parseInt(this.rainbowEl.style('left') || 0, 10);
              var marginRight = parseInt(this.rainbowEl.style('right') || 0, 10);

              this.labelScaleSVG.style("width", marginLeft + gradientWidth + marginRight + "px");
              this.labelScaleG.attr("transform","translate(" + marginLeft + ",0)");

              var labelsAxis = axisSmart();
              labelsAxis.scale(labelScale)
                .orient("bottom")
                //.tickFormat(formatter)
                .tickSize(6, 0)
                .tickSizeMinor(3, 0)
                .labelerOptions({
                  scaleType: this.colorModel.scaleType,
                  toolMargin: {
                    right: marginRight,
                    left: marginLeft
                  },
                  showOuter: true,
                  //bump: this.activeProfile.maxRadius/2,
                  //constantRakeLength: gradientWidth,
                  formatter: formatter,
                  cssFontSize: "11px",
                  fitIntoScale: fitIntoScale
                });
            
              
              this.labelScaleEl.classed("vzb-hidden", false);
              this.labelScaleG.call(labelsAxis);

              var colorRange = _this.colorModel.getScale().range();
              var gColors = paletteKeys.map(function(val, i) {
                return colorRange[i] + " " + d3.format("%")(val * .01);
              }).join(", ");

              //Calculate the hight for the rainbow gradient
              // var gradientHeight;
              // if(colorOptions && colorOptions[0]) {
              //   var firstOptionSize = colorOptions[0][0].getBoundingClientRect();
              //   var  = colorOptions[0][colorOptions[0].length - 1].getBoundingClientRect();
              //   gradientHeight = lastOptionSize.bottom - firstOptionSize.top;
              // }
              // if(!isFinite(gradientHeight)) gradientHeight = utils.keys(palette).length * 25 + 5;
              
              this.rainbowEl
                .style("background", "linear-gradient(90deg," + gColors + ")");
              
              var unit = this.translator("unit/" + this.colorModel.which)
              
              this.unitDiv.classed("vzb-hidden", unit == "");
              this.unitText.text(unit);

              //Apply names as formatted numbers 
              // colorOptions.each(function(d, index) {
              //   d3.select(this).select(".vzb-cl-color-legend")
              //     .text(_this.colorModel.getTickFormatter()(domain[index]))
              // });
              colorOptions.classed("vzb-hidden", true);

            } else {
              
              //Apply names to color legend entries if color is a property
              colorOptions.each(function(d, index) {
                d3.select(this).select(".vzb-cl-color-legend")
                  .text(_this.frame.label[d[_this.KEY]||d[minimapDim]]);
              });
              
              
              //if using a discrete palette that is not supplied from concept properties but from defaults
              colorOptions.classed("vzb-cl-compact", !(this.colorModel.getConceptprops().color||{}).palette );
            }
            

          }else{
            
            //Drawing a minimap from the hook data
            
            var tempdivEl = this.minimapEl.append("div").attr("class","vzb-temp");
            
            this.minimapSVG.attr("viewBox",null)
            this.minimapSVG.selectAll("g").remove()
            this.minimapG = this.minimapSVG.append("g");
            this.minimapG.selectAll("path")
              .data(minimapKeys, function(d) {return d[KEY]})
              .enter().append("path")
              .style("opacity", OPACITY_REGULAR)
              .on("mouseover", _this._interact().mouseover)
              .on("mouseout", _this._interact().mouseout)
              .on("click", _this._interact().click)
              .each(function(d){
                tempdivEl.html(_this.frame.geoshape[d[_this.KEY]]);
                var color = palette[d[_this.KEY]];
                
                d3.select(this)
                  .attr("d", tempdivEl.select("svg").select("path").attr("d"))
                  .style("fill", isArray(color)? color[0] : color)
              
                tempdivEl.html("");
              })
            
            var gbbox = this.minimapG.node().getBBox();
            this.minimapSVG.attr("viewBox", "0 0 " + gbbox.width*1.05 + " " + gbbox.height*1.05);
            tempdivEl.remove();
          }
            
        },
        
        
        _interact: function() {
          var _this = this;
          var KEY = this.KEY;
          var palette = this.colorModel.getPalette();
          var paletteDefault = this.colorModel.getDefaultPalette();

          return {
            mouseover: function(d, i) {
              //disable interaction if so stated in concept properties
              if(_this.colorModel.use === "indicator") return;
              
              var view = d3.select(this);
              var target = d[KEY];
              _this.listColorsEl.selectAll(".vzb-cl-option").style("opacity", OPACITY_DIM);
              _this.minimapG.selectAll("path").style("opacity", OPACITY_DIM);
              view.style("opacity", OPACITY_HIGHLIGHT);

              var filtered = _this.colorModel.getNestedItems([KEY]);
              var highlight = values(filtered)
                //returns a function over time. pick the last time-value
                .map(function(d) {
                  return d[d.length - 1]
                })
                //filter so that only countries of the correct target remain
                .filter(function(f) {
                  return f[_this.colorModel.which] == target
                })
                //fish out the "key" field, leave the rest behind
                .map(function(d) {
                  return clone(d, [KEY])
                });

              _this.model.state.entities.setHighlight(highlight);
            },

            mouseout: function(d, i) {
              //disable interaction if so stated in concept properties
              if(_this.colorModel.use === "indicator") return;

              _this.listColorsEl.selectAll(".vzb-cl-option").style("opacity", OPACITY_REGULAR);
              _this.minimapG.selectAll("path").style("opacity", OPACITY_REGULAR);
              _this.model.state.entities.clearHighlighted();
            },
            click: function(d, i) {
              //disable interaction if so stated in concept properties
              if(!_this.colorModel.isUserSelectable()) return;
              var view = d3.select(this);
              var target = _this.colorModel.use === "indicator"? d : (d[KEY]||d);

              _this.colorPicker
                .colorOld(palette[target])
                .colorDef(paletteDefault[target])
                .callback(function(value) {
                  _this.colorModel.setColor(value, target)
                })
                .fitToScreen([d3.event.pageX, d3.event.pageY])
                .show(true);
            }
          }
        },
        

        resize: function() {
          this.colorPicker.resize(d3.select('.vzb-colorpicker-svg'));
        }

      });

      /*!
       * VIZABI BUBBLE SIZE slider
       * Reusable bubble size slider
       */

      var OPTIONS = {
        EXTENT_MIN: 0,
        EXTENT_MAX: 1,
        TEXT_PARAMS: { TOP: 11, LEFT: 10, MAX_WIDTH: 42, MAX_HEIGHT: 16 },
        BAR_WIDTH: 6,
        THUMB_RADIUS: 10,
        THUMB_STROKE_WIDTH: 4,
        INTRO_DURATION: 250
      }

      var profiles = {
          "small": {
            minRadius: 0.5,
            maxRadius: 40
          },
          "medium": {
            minRadius: 1,
            maxRadius: 55
          },
          "large": {
            minRadius: 1,
            maxRadius: 65
          }
      };


      var BubbleSize = Component.extend({

        /**
         * Initializes the timeslider.
         * Executed once before any template is rendered.
         * @param config The options passed to the component
         * @param context The component's parent
         */
        init: function (config, context) {

          this.name = 'bubblesize';

          this.template = this.template || "bubblesize.html";

          this.model_expects = [{
            name: "size",
            type: "size"
          }];

          var _this = this;
          this.model_binds = {
            'change:size.domainMin': changeMinMaxHandler,
            'change:size.domainMax': changeMinMaxHandler,
            'change:size.extent': changeMinMaxHandler,
            'ready': readyHandler
          };
          function changeMinMaxHandler(evt, path) {
            var size = _this.model.size.extent||[OPTIONS.EXTENT_MIN, OPTIONS.EXTENT_MAX];
            _this._updateLabels(size);
            _this.sliderEl.call(_this.brush.extent(size));
            if(size[0] == size[1]){
              _this.sliderEl.selectAll(".resize")
                .style("display", "block");
            }
          }
          function readyHandler(evt) {
              _this.sizeScaleMinMax = _this.model.size.getScale().domain();
              _this._setLabelsText();
          }

          this._setModel = throttle(this._setModel, 50);
          //contructor is the same as any component
          this._super(config, context);
        },

        /**
         * Executes after the template is loaded and rendered.
         * Ideally, it contains HTML instantiations related to template
         * At this point, this.element and this.placeholder are available as a d3 object
         */
        readyOnce: function () {
          var _this = this;
          var values = _this.model.size.extent||[OPTIONS.EXTENT_MIN, OPTIONS.EXTENT_MAX];
          this.showArcs = _this.model.size.showArcs !== false;

          this.element = d3.select(this.element);
          this.sliderSvg = this.element.select(".vzb-bs-svg");
          this.sliderWrap = this.sliderSvg.select(".vzb-bs-slider-wrap");
          this.sliderEl = this.sliderWrap.select(".vzb-bs-slider");

          var
            textMargin = { v: OPTIONS.TEXT_PARAMS.TOP, h: OPTIONS.TEXT_PARAMS.LEFT },
            textMaxWidth = OPTIONS.TEXT_PARAMS.MAX_WIDTH,
            textMaxHeight = OPTIONS.TEXT_PARAMS.MAX_HEIGHT,
            barWidth = OPTIONS.BAR_WIDTH,
            thumbRadius = OPTIONS.THUMB_RADIUS,
            thumbStrokeWidth = OPTIONS.THUMB_STROKE_WIDTH,
            padding = {
              top: thumbStrokeWidth,
              left: textMargin.h + textMaxWidth,
              right: textMargin.h + textMaxWidth,
              bottom: barWidth + textMaxHeight
            }

          this.padding = padding;

          var minMaxBubbleRadius = this.getMinMaxBubbleRadius();

          this.xScale = d3.scale.linear()
            .domain([OPTIONS.EXTENT_MIN, OPTIONS.EXTENT_MAX])
            .range([minMaxBubbleRadius.min * 2, minMaxBubbleRadius.max * 2])
            .clamp(true)

          this.brush = d3.svg.brush()
            .x(this.xScale)
            .extent([OPTIONS.EXTENT_MIN, OPTIONS.EXTENT_MIN])
            .on("brush", function () {
              _this._setFromExtent(true, false, false); // non persistent change
            })
            .on("brushend", function () {
               _this.sliderEl.selectAll(".resize")
                .style("display", null);

              _this._setFromExtent(true, true); // force a persistent change
            });

          this.sliderEl
            .call(_this.brush);
            
          this.sliderEl.selectAll('.background').attr('style','');

          //For return to round thumbs
          //var thumbArc = d3.svg.arc()
          //  .outerRadius(thumbRadius)
          //  .startAngle(0)
          //  .endAngle(2 * Math.PI)

          this.sliderThumbs = this.sliderEl.selectAll(".resize").sort(d3.descending)
            .classed("vzb-bs-slider-thumb", true)

          this.sliderThumbs.append("g")
            .attr("class", "vzb-bs-slider-thumb-badge")
            .append("path")
            .attr("d", "M0 " + (barWidth * .5) + "l" + (-thumbRadius) + " " + (thumbRadius * 1.5) + "h" + (thumbRadius * 2) + "Z")

            //For return to circles
            //.attr("d", "M0 0 l" + (thumbRadius * 2) + " " + (-thumbRadius) + "v" + (thumbRadius * 2) + "Z")

            //For return to round thumbs
            //.attr("d", thumbArc)

          if (_this.showArcs) {
            this.sliderThumbs.append("path")
              .attr("class", "vzb-bs-slider-thumb-arc")
          }
          this.sliderEl.selectAll("text").data([0,0]).enter()
            .append("text")
            .attr("class", "vzb-bs-slider-thumb-label")
            .attr("text-anchor", function(d, i) {
              return i ? "start" : "end"})
            .attr("dy", function(d, i) {
              return i ? "-0.7em" : "1.4em"})

          this.sliderLabelsEl = this.sliderEl.selectAll("text.vzb-bs-slider-thumb-label");

          this.sliderEl.selectAll("rect")
            .attr("height", barWidth)
            .attr("rx", barWidth * 0.25)
            .attr("ry", barWidth * 0.25)
            .attr("transform", "translate(0," + (-barWidth * 0.5) + ")")
          this.sliderEl.select(".extent")
            .classed("vzb-bs-slider-extent", true)

          //For return to circles
          // var circleLabelTransform = function(d, i) {
          //    var dX = i ? textMargin.h + _this.xScale(d) : -textMargin.h,
          //        dY = -textMargin.v;
          //    return "translate(" + (dX) + "," + (dY) + ")";
          // }

          this.on("resize", function() {
            //console.log("EVENT: resize");

            _this.xScale.range([_this.getMinMaxBubbleRadius().min * 2, _this.getMinMaxBubbleRadius().max * 2]);
            _this._updateSize();

            _this.sliderEl
              .call(_this.brush.extent(_this.brush.extent()));
            _this._setFromExtent(false, false, false); // non persistent change
          });

          this._updateSize();
          this.sliderEl
            .call(this.brush.extent(values));
          _this._setFromExtent(false, false, false); // non persistent change

          _this.sizeScaleMinMax = _this.model.size.getScale().domain();

          if(_this.sizeScaleMinMax) {
            _this._setLabelsText();
          }
        },

        getMinMaxBubbleRadius: function() {
          return { min: profiles[this.getLayoutProfile()].minRadius, max: profiles[this.getLayoutProfile()].maxRadius};
        },

        /*
         * RESIZE:
         * Executed whenever the container is resized
         */
        _updateSize: function() {
          var maxBubbleRadius = this.showArcs ? this.getMinMaxBubbleRadius().max : OPTIONS.TEXT_PARAMS.TOP * 2;
          this.sliderSvg
            .attr("height", maxBubbleRadius + this.padding.top + this.padding.bottom)
            .attr("width", this.getMinMaxBubbleRadius().max * 2 + this.padding.left + this.padding.right)
          this.sliderWrap
            .attr("transform", "translate(" + this.padding.left + "," + (maxBubbleRadius + this.padding.top) + ")")
        },

        _updateArcs: function(s) {
          if (!this.showArcs) return;
          var _this = this;
          var valueArc = d3.svg.arc()
            .outerRadius(function (d) { return _this.xScale(d) * 0.5 })
            .innerRadius(function (d) { return _this.xScale(d) * 0.5 })
            .startAngle(-Math.PI * 0.5)
            .endAngle(Math.PI * 0.5);
          this.sliderThumbs.select('.vzb-bs-slider-thumb-arc').data(s)
            .attr("d", valueArc)
            .attr("transform", function (d) {return "translate(" + (-_this.xScale(d) * 0.5) + ",0)"; })
        },

        _updateLabels: function(s) {
          var _this = this;
          var arcLabelTransform = function(d, i) {
            var textMargin = { v: OPTIONS.TEXT_PARAMS.TOP, h: OPTIONS.TEXT_PARAMS.LEFT },
                dX = textMargin.h * (i ? .5 : -1.0) + _this.xScale(d),
                dY = 0;
             return "translate(" + (dX) + "," + (dY) + ")";
          }
          this.sliderLabelsEl.data(s)
            .attr("transform", arcLabelTransform);
        },

        _setLabelsText: function() {
            var _this = this;
            _this.sliderLabelsEl
              .data([_this.model.size.getTickFormatter()(_this.sizeScaleMinMax[0]),_this.model.size.getTickFormatter()(_this.sizeScaleMinMax[1])])
              .text(function (d) { return d; });
        },

        /**
         * Prepares setting of the current model with the values from extent.
         * @param {boolean} set model
         * @param {boolean} force force firing the change event
         * @param {boolean} persistent sets the persistency of the change event
         */
        _setFromExtent: function(setModel, force, persistent) {
          var s = this.brush.extent();
          this._updateArcs(s);
          this._updateLabels(s);
          if(setModel) this._setModel(s, force, persistent);
        },

        /**
         * Sets the current value in model. avoid updating more than once in framerate
         * @param {number} value
         * @param {boolean} force force firing the change event
         * @param {boolean} persistent sets the persistency of the change event
         */
        _setModel: function (value, force, persistent) {
          value = [+value[0].toFixed(2), +value[1].toFixed(2)];
          this.model.size.set({"extent": value}, force, persistent);
        }

      });

      var _index$2 = {
      bubblesize : BubbleSize,
      buttonlist : ButtonList,
      colorlegend : ColorLegend,
      datanotes : DataNotes,
      datawarning : DataWarning,
      _dialog : Dialog,
      dialogs : Dialogs,
      draggablelist : DraggableList,
      indicatorpicker : IndPicker,
      labels : Labels,
      minmaxinputs : MinMaxInputs,
      simplecheckbox : simplecheckbox,
      simpleslider : SimpleSlider,
      sizeslider : SizeSlider,
      timeslider : TimeSlider,
      treemenu : TreeMenu,
      zoombuttonlist : ZoomButtonList,
      };

      var components = Object.freeze({
      	bubblesize: BubbleSize,
      	buttonlist: ButtonList,
      	colorlegend: ColorLegend,
      	datanotes: DataNotes,
      	datawarning: DataWarning,
      	_dialog: Dialog,
      	dialogs: Dialogs,
      	draggablelist: DraggableList,
      	indicatorpicker: IndPicker,
      	labels: Labels,
      	minmaxinputs: MinMaxInputs,
      	simplecheckbox: simplecheckbox,
      	simpleslider: SimpleSlider,
      	sizeslider: SizeSlider,
      	timeslider: TimeSlider,
      	treemenu: TreeMenu,
      	zoombuttonlist: ZoomButtonList,
      	default: _index$2
      });

      //BAR CHART TOOL
      var BarChart = Tool.extend('BarChart', {

        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "barchart";

          //specifying components
          this.components = [{
            component: BarComponent,
            placeholder: '.vzb-tool-viz',
            model: ["state.time", "state.entities", "state.marker", "language"] //pass models to component
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        },

        default_model: {
          state: {
            time: {},
            entities: {
              dim: "geo",
              show: {
                _defs_: {
                  "geo": ["*"],
                  "geo.cat": ["region"]
                }
              }
            },
            marker: {
              space: ["entities", "time"],
              label: {
                use: "property",
                which: "geo.name"
              },
              axis_y: {
                use: "indicator",
                which: "lex"
              },
              axis_x: {
                use: "property",
                which: "geo.name"
              },
              color: {
                use: "property",
                which: "geo.world_4region"
              }
            }
          }
        }
      });

      var DynamicBackground = Class.extend({

        init: function(context, conditions) {
          this.context = context;
          this.width = 0;
          this.height = 0;
          this.topOffset = 0;
          this.leftOffset = 0;
          this.bottomOffset = 0;
          this.rightOffset = 0;
          this.fontSize = 0;
          this.fontWidth = 0;
          this.fontHeight = 0;
          this.xAlign = 'center';
          this.yAlign = 'center';
          this.symbols = [];
          if (conditions) {
            this.setConditions(conditions);
          }
        },

        setConditions: function(conditions) {
          if (!isNaN(parseFloat(conditions.rightOffset)) && isFinite(conditions.rightOffset)) {
            this.rifgtOffset = conditions.rightOffset;
          }
          if (!isNaN(parseFloat(conditions.leftOffset)) && isFinite(conditions.leftOffset)) {
            this.leftOffset = conditions.leftOffset;
          }
          if (!isNaN(parseFloat(conditions.topOffset)) && isFinite(conditions.topOffset)) {
            this.topOffset = conditions.topOffset;
          }
          if (!isNaN(parseFloat(conditions.bottomOffset)) && isFinite(conditions.bottomOffset)) {
            this.bottomOffset = conditions.bottomOffset;
          }
          if (conditions.xAlign) {
            this.xAlign = conditions.xAlign;
          }
          if (conditions.yAlign) {
            this.yAlign = conditions.yAlign;
          }
          return this;
        },

        resize: function(width, height, fontSize, topOffset, leftOffset) {
          this.width = width;
          this.height = height;
          this.fontSize = fontSize;
          if (topOffset) {
            this.topOffset = topOffset;
          }
          if (leftOffset) {
            this.leftOffset = leftOffset;
          }
          if (this.fontSize > this.height) {
            this.fontSize = this.height;
          }
          var sample = this.context.append("text").text("0").style("font-size", this.fontSize + "px");
          this.fontWidth = sample[0][0].getBBox().width;
          this.fontHeight = this.fontSize*0.72;

          d3.select(sample[0][0]).remove();
          this.__resizeText();
        },

        setText: function(text, resize) {
          var _this = this;
          var newSymbols = text.split('');
          if (newSymbols.length != this.symbols.length) {
            resize = true;
          }
          this.symbols = text.split('');

          this.context.selectAll("text")
            .data(this.symbols).exit().remove();
          this.context.selectAll("text")
            .data(this.symbols)
            .enter()
            .append("text")
            .text(function(d){return d;});

          this.context.selectAll("text").each(function (d, i) {
              d3.select(this).text(d);
          });
          if (resize) {
            return this.__resizeText();
          } else {
            return this;
          }

        },

        __resizeText: function() {
          var _this = this;
          this.context.attr("transform", "translate(" + this.__getLeftOffset() + "," + this.__getTopOffset() + ")");
          this.context.selectAll("text").each(function(d, i) {
              d3.select(this)
                .attr("x", _this.fontWidth * i)
                .style("font-size", _this.fontSize + 'px')
                .style("text-anchor", "middle");
            });
          return this;
        },
        __getLeftOffset: function() {
          switch (this.xAlign) {
            case 'right':
              return this.width - this.fontWidth * this.symbols.length + this.fontWidth/2;
              break;
            case 'left':
              return this.fontWidth/2;
              break;
            default :
              return this.fontWidth/2 + (this.width - this.fontWidth * this.symbols.length)/2;
          }
        },
        __getTopOffset: function() {
          //console.log(this.topOffset);
          switch (this.yAlign) {
            case 'top':
              return this.fontHeight + this.topOffset;
              break;
            case 'bottom':
              return this.height - this.bottomOffset;
              break;
            default :
              return this.fontHeight + (this.height - this.fontHeight)/2 + this.topOffset;
          }
        }

      });

      /*!
       * VIZABI POP BY AGE Component
       */


      //POP BY AGE CHART COMPONENT
      var BarRankChart$1 = Component.extend({

        /**
         * Initializes the component (Bar Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The config passed to the component
         * @param {Object} context The component's parent
         */
        init: function(config, context) {

          this.name = 'barrankchart-component';
          this.template = 'barrank.html';

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }, {
            name: "ui",
            type: "model"
          }];

          var _this = this;
          this.model_binds = {
            "change:time.value": function(evt) {
              if(!_this._readyOnce) return;
              _this.onTimeChange();
            },
            "change:entities.select": function(evt) {
              if(!_this._readyOnce) return;
              _this.selectBars();
            },
            "change:marker.axis_x.scaleType": function(evt) {
              if(!_this._readyOnce) return;
              _this.draw();
            },
            'change:marker.color.palette': function() {
              //console.log("EVENT change:marker:color:palette");
              //_this.drawColors();
            },
          };

          //contructor is the same as any component
          this._super(config, context);

          // set up the scales
          this.xScale = null;
          this.cScale = d3.scale.category10();

          // set up the axes
          this.xAxis = axisSmart();
        },

        onTimeChange: function() {
          //this.year.setText(this.model.time.timeFormat(this.model.time.value));
          var _this = this;
          this.model.marker.getFrame(this.model.time.value, function(values) {
            _this.values = values;
            _this.loadData();
            _this.draw();
          });
        },

        /**
         * DOM and model are ready
         */
        readyOnce: function() {
          this.element = d3.select(this.element);

          // reference elements
          //this.graph = this.element.select('.vzb-br-graph');
          //this.yearEl = this.element.select('.vzb-br-year');
          //this.year = new DynamicBackground(this.yearEl);
          this.header = this.element.select('.vzb-br-header');
          this.barViewport = this.element.select('.barsviewport');
          this.barSvg = this.element.select('.vzb-br-bars-svg');
          this.barContainer = this.element.select('.vzb-br-bars');

          // set up formatters
          this.xAxis.tickFormat(this.model.marker.axis_x.getTickFormatter());

          this.ready();

          this.selectBars();

        },

        readyRuns: 0,

        /*
         * Both model and DOM are ready
         */
        ready: function() {
          var _this = this;
          // hack: second run is right after readyOnce (in which ready() is also called)
          // then it's not necessary to run ready()
          // (without hack it's impossible to run things in readyOnce áfter ready has ran)
          if (++this.readyRuns == 2) return;
          this.model.marker.getFrame(this.model.time.value, function(values) {
            _this.values =values;
            _this.loadData();
            _this.draw();
          });
        },

        resize: function() {
          this.draw();
        },

        loadData: function() {

          // get data, for the active year. Nest them using the entity of the graph


          // sort the data (also sets this.total)
          this.sortedEntities = this.sortByIndicator(this.values.axis_x);

          // change header titles for new data
          var translator = this.model.language.getTFunction();
          this.header.select('.vzb-br-title')
            .text(translator("indicator/" + this.model.marker.axis_x.which) + ' ' + this.model.time.timeFormat(this.model.time.value))
          this.header.select('.vzb-br-total')
            .text('Σ = ' + this.model.marker.axis_x.getTickFormatter()(this.total))

          // new scales and axes
          this.xScale = this.model.marker.axis_x.getScale(false);
          this.cScale = this.model.marker.color.getScale();

        },

        draw: function() {
          //return if drawAxes exists with error
          if(this.drawAxes()) return;
          this.drawData();
        },

        /*
        * draw the chart/stage
        */
        drawAxes: function() {

          // these should go in some style-config
          this.barHeight = 20; 
          var margin = {top: 60, bottom: 40, left: 90, right: 20}; // need right margin for scroll bar

          // draw the stage - copied from popbyage, should figure out what it exactly does and what is necessary.
          this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
            
          if(this.height<=0 || this.width<=0) return warn("Bar rank chart drawAxes() abort: vizabi container is too little or has display:none");

          this.barContainer.attr('transform', 'translate(' + margin.left + ', 0)');
          this.barViewport.style('height', this.height + 'px');

          // header
          this.header
            .attr('height', margin.top)
            .select('.vzb-br-title')
              .attr('dominant-baseline', 'middle')
              .attr('y', margin.top/2)
              .attr('x', margin.left);
          this.header
            .select('.vzb-br-total')
              .attr('text-anchor', 'end')
              .attr('dominant-baseline', 'middle')
              .attr('y', margin.top/2)
              .attr('x', this.width + margin.left);


          // although axes are not drawn, need the xScale for bar width
          if(this.model.marker.axis_x.scaleType !== "ordinal") {
            this.xScale.range([0, this.width]);
          } else {
            this.xScale.rangePoints([0, this.width]).range();
          }

          // redraw the limits
          var limits = this.model.marker.axis_x.getLimits(this.model.marker.axis_x.which);
          this.xScale = this.xScale.domain([limits.min, limits.max]);

        },

        drawData: function() {

          var _this = this;
          var bar_margin = 2; // should go in some config
          var duration = (this.model.time.playing) ? this.model.time.delayAnimations : 0;

          // apply the current data to the bars (including ordering)
          var updatedBars = this.barContainer
            .selectAll('.vzb-br-bar')
            .data(this.sortedEntities, getDataKey)
            .order();

          // update the shown bars for new data-set
          this.createAndDeleteBars(updatedBars);

         
          this.barContainer
            .selectAll('.vzb-br-bar') 
            .data(this.sortedEntities, getDataKey)
            .order()
            .each(function (d, i) {

              var bar = d3.select(this);
              var barWidth = _this.xScale(d.value);
              var xValue = _this.model.marker.axis_x.getTickFormatter()(d.value);
              
              // save the current index in the bar datum
              d.index = i;

              // set width of the bars
              bar.selectAll('rect')
                .transition().duration(duration).ease("linear")
                .attr("width", (barWidth > 0) ? barWidth : 0)

              // set positions of the bar-values
              bar.selectAll('.vzb-br-value')
                .text(xValue)

              // set title (tooltip)
              bar.selectAll('title')
                .text(_this.values.label[d.entity] + ' (' + xValue + ')');

            })
            .transition().duration(duration).ease("linear")
            .attr("transform", function(d, i) {
              return 'translate(0, '+ getBarPosition(d,i) + ')'
            })
            .call(endAll, function() {
              // when all the transitions have ended

              // set the height of the svg so it resizes according to its children
              var height = _this.barContainer.node().getBoundingClientRect().height
              _this.barSvg.attr('height', height + "px");

              // move along with a selection if playing
              if (_this.model.time.playing) {
                var follow = _this.barContainer.select('.vzb-selected');
                if (!follow.empty()) {
                  var d = follow.datum();
                  var yPos = getBarPosition(d, d.index);

                  var currentTop = _this.barViewport.node().scrollTop;
                  var currentBottom = currentTop + _this.height;

                  var scrollTo = false;
                  if (yPos < currentTop)
                    scrollTo = yPos;
                  if ((yPos + _this.barHeight) > currentBottom)
                    scrollTo = yPos + _this.barHeight - _this.height;

                  if (scrollTo)
                    _this.barViewport.transition().duration(duration)
                      .tween('scrollfor' + d.entity, scrollTopTween(scrollTo));

                }

              }

              function scrollTopTween(scrollTop) {
                return function() {
                  var i = d3.interpolateNumber(this.scrollTop, scrollTop);
                  return function(t) { this.scrollTop = i(t); };
                };
              }

            });


          // helper functions
          function getBarPosition(d, i) {
              return (_this.barHeight+bar_margin)*i;
          }
          function getDataKey(d) {          
            return d.entity;  
          } 
          // http://stackoverflow.com/questions/10692100/invoke-a-callback-at-the-end-of-a-transition
          function endAll(transition, callback) { 
            if (transition.size() === 0) { callback() }
            var n = 0; 
            transition 
                .each(function() { ++n; }) 
                .each("end", function() { if (!--n) callback.apply(this, arguments); }); 
          } 

        },

        createAndDeleteBars: function(updatedBars) {

          var _this = this;

          // remove groups for entities that are gone
          updatedBars.exit().remove();

          // make the groups for the entities which were not drawn yet (.data.enter() does this)
          var newGroups = updatedBars.enter().append("g")
              .attr("class", 'vzb-br-bar')
              .attr("id", function(d) {
                return "vzb-br-bar-" + d.entity;
              })
              .on("mousemove", function(bar) { _this.setHover(bar, true)  })
              .on("mouseout",  function(bar) { _this.setHover(bar, false) })
              .on("click", function(d) {

                forEach(_this.model.marker.space, function(entity) {
                  if (_this.model[entity].getDimension() !== 'time')
                    _this.model[entity].selectEntity(d); // this will trigger a change in the model, which the tool listens to
                });

              });

          // draw new bars per group
          newGroups.append('rect')
              .attr("x", 0)
              .attr("rx", this.barHeight/4)
              .attr("ry", this.barHeight/4)
              .attr("stroke", "white")
              .attr("stroke-opacity", 0)
              .attr("stroke-width", 2)
              .attr("height", this.barHeight)
              .style("fill", function(d) {
                var color = _this.cScale(_this.values.color[d.entity]);
                return d3.rgb(color);
              });

          // draw new labels per group
          newGroups.append('text')
              .attr("class", "vzb-br-label") 
              .attr("x", -5)
              .attr("y", this.barHeight/2)
              .attr("text-anchor", "end")
              .attr("dominant-baseline", "middle")
              .text(function(d, i) {
                var label = _this.values.label[d.entity];
                return label.length < 12 ? label : label.substring(0, 9) + '...';
              })
              .style("fill", function(d) {
                var color = _this.cScale(_this.values.color[d.entity]);
                return d3.rgb(color).darker(2);
              })
              .append('title'); // watch out: might be overwritten if changing the labeltext later on

          // draw new values on each bar
          newGroups.append('text')
              .attr("class", "vzb-br-value") 
              .attr("x", 5)
              .attr("y", this.barHeight/2)
              .attr("dominant-baseline", "middle")
              .style("fill", function(d) {
                var color = _this.cScale(_this.values.color[d.entity]);
                return d3.rgb(color).darker(2);
              });
        },

        drawColors: function() {
          var _this = this;

          this.barContainer.selectAll('.vzb-br-bar>rect')
            .style("fill", getColor);
          this.barContainer.selectAll('.vzb-br-bar>text')
            .style("fill", getDarkerColor);

          function getColor(d) {
            var color = _this.cScale(_this.values.color[d.entity]);
            return d3.rgb(color);
          }
          function getDarkerColor(d) {
            return getColor(d).darker(2);
          }
        },


        /**
        * DATA HELPER FUNCTIONS
        */  

        sortByIndicator: function(values) {

          var _this = this;
          var data_array = [];
          this.total = 0; // setting this.total for efficiency at the same time

          // first put the data in an array (objects aren't sortable)
          forEach(values, function(indicator_value, entity) {
            var row = { entity: entity, value: indicator_value };
            row[_this.model.entities.dim] = entity;
            data_array.push(row);

            // setting this.total for efficiency at the same time
            _this.total += indicator_value; 
          });
          data_array.sort(function(a, b) {
            // if a is bigger, a comes first, i.e. descending sort
            return b.value - a.value;
          });  
          return data_array;  
        },

        /**
        * UI METHODS
        */

        /**
         * setting hover
         */
        setHover: function(bar, hover) {
          this.barContainer.classed('vzb-dimmed', hover);
          this.barContainer.select("#vzb-br-bar-" + bar.entity).classed('vzb-hovered', hover);
        },

        /**
         * Select Entities
         */
        selectBars: function() {
          var _this = this;
          var entityDim = this.model.entities.dim;
          var selected = this.model.entities.select;

          // unselect all bars
          this.barContainer.classed('vzb-dimmed-selected', false);
          this.barContainer.selectAll('.vzb-br-bar.vzb-selected').classed('vzb-selected', false);

          // select the selected ones
          if(selected.length) {
            this.barContainer.classed('vzb-dimmed-selected', true);
            forEach(selected, function(selectedBar) {
              _this.barContainer.select("#vzb-br-bar-" + selectedBar[entityDim]).classed('vzb-selected', true);
            });
          }

        },

      });

      var BarRankChart = Tool.extend('BarRankChart', {

        //Run when the tool is created
        init: function(placeholder, external_model) {

          this.name = "barrankchart";

          this.components = [{
            component: BarRankChart$1, 
            placeholder: '.vzb-tool-viz', 
            model: ["state.time", "state.entities", "state.marker", "language", "ui"] 
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        }

      });

      // topojson
      var topojson = (function() {
        var topojson = {
          version: "1.6.19",
          mesh: function(topology) {
             return object(topology, meshArcs.apply(this, arguments));
          },
          meshArcs: meshArcs,
          merge: function(topology) {
            return object(topology, mergeArcs.apply(this, arguments));
          },
          mergeArcs: mergeArcs,
          feature: featureOrCollection,
          neighbors: neighbors,
          presimplify: presimplify
        };

        function stitchArcs(topology, arcs) {
          var stitchedArcs = {},
            fragmentByStart = {},
            fragmentByEnd = {},
            fragments = [],
            emptyIndex = -1;

          // Stitch empty arcs first, since they may be subsumed by other arcs.
          arcs.forEach(function(i, j) {
            var arc = topology.arcs[i < 0 ? ~i : i],
              t;
            if(arc.length < 3 && !arc[1][0] && !arc[1][1]) {
              t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
            }
          });

          arcs.forEach(function(i) {
            var e = ends(i),
              start = e[0],
              end = e[1],
              f, g;

            if(f = fragmentByEnd[start]) {
              delete fragmentByEnd[f.end];
              f.push(i);
              f.end = end;
              if(g = fragmentByStart[end]) {
                delete fragmentByStart[g.start];
                var fg = g === f ? f : f.concat(g);
                fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
              } else {
                fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
              }
            } else if(f = fragmentByStart[end]) {
              delete fragmentByStart[f.start];
              f.unshift(i);
              f.start = start;
              if(g = fragmentByEnd[start]) {
                delete fragmentByEnd[g.end];
                var gf = g === f ? f : g.concat(f);
                fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
              } else {
                fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
              }
            } else {
              f = [i];
              fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
            }
          });

          function ends(i) {
            var arc = topology.arcs[i < 0 ? ~i : i],
              p0 = arc[0],
              p1;
            if(topology.transform) p1 = [0, 0], arc.forEach(function(dp) {
              p1[0] += dp[0], p1[1] += dp[1];
            });
            else p1 = arc[arc.length - 1];
            return i < 0 ? [p1, p0] : [p0, p1];
          }

          function flush(fragmentByEnd, fragmentByStart) {
            for(var k in fragmentByEnd) {
              var f = fragmentByEnd[k];
              delete fragmentByStart[f.start];
              delete f.start;
              delete f.end;
              f.forEach(function(i) {
                stitchedArcs[i < 0 ? ~i : i] = 1;
              });
              fragments.push(f);
            }
          }

          flush(fragmentByEnd, fragmentByStart);
          flush(fragmentByStart, fragmentByEnd);
          arcs.forEach(function(i) {
            if(!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
          });

          return fragments;
        }

        function meshArcs(topology, o, filter) {
          var arcs = [];

          function arc(i) {
            var j = i < 0 ? ~i : i;
            (geomsByArc[j] || (geomsByArc[j] = [])).push({
              i: i,
              g: geom
            });
          }

          function line(arcs) {
            arcs.forEach(arc);
          }

          function polygon(arcs) {
            arcs.forEach(line);
          }

          function geometry(o) {
            if(o.type === "GeometryCollection") o.geometries.forEach(geometry);
            else if(o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
          }

          if(arguments.length > 1) {
            var geomsByArc = [],
              geom;

            var geometryType = {
              LineString: line,
              MultiLineString: polygon,
              Polygon: polygon,
              MultiPolygon: function(arcs) {
                arcs.forEach(polygon);
              }
            };

            geometry(o);

            geomsByArc.forEach(arguments.length < 3 ? function(geoms) {
              arcs.push(geoms[0].i);
            } : function(geoms) {
              if(filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
            });
          } else {
            for(var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
          }

          return {
            type: "MultiLineString",
            arcs: stitchArcs(topology, arcs)
          };
        }

        function mergeArcs(topology, objects) {
          var polygonsByArc = {},
            polygons = [],
            components = [];

          objects.forEach(function(o) {
            if(o.type === "Polygon") register(o.arcs);
            else if(o.type === "MultiPolygon") o.arcs.forEach(register);
          });

          function register(polygon) {
            polygon.forEach(function(ring) {
              ring.forEach(function(arc) {
                (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
              });
            });
            polygons.push(polygon);
          }

          function exterior(ring) {
            return cartesianRingArea(object(topology, {
              type: "Polygon",
              arcs: [ring]
            }).coordinates[0]) > 0; // TODO allow spherical?
          }

          polygons.forEach(function(polygon) {
            if(!polygon._) {
              var component = [],
                neighbors = [polygon];
              polygon._ = 1;
              components.push(component);
              while(polygon = neighbors.pop()) {
                component.push(polygon);
                polygon.forEach(function(ring) {
                  ring.forEach(function(arc) {
                    polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
                      if(!polygon._) {
                        polygon._ = 1;
                        neighbors.push(polygon);
                      }
                    });
                  });
                });
              }
            }
          });

          polygons.forEach(function(polygon) {
            delete polygon._;
          });

          return {
            type: "MultiPolygon",
            arcs: components.map(function(polygons) {
              var arcs = [];

              // Extract the exterior (unique) arcs.
              polygons.forEach(function(polygon) {
                polygon.forEach(function(ring) {
                  ring.forEach(function(arc) {
                    if(polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
                      arcs.push(arc);
                    }
                  });
                });
              });

              // Stitch the arcs into one or more rings.
              arcs = stitchArcs(topology, arcs);

              // If more than one ring is returned,
              // at most one of these rings can be the exterior;
              // this exterior ring has the same winding order
              // as any exterior ring in the original polygons.
              if((n = arcs.length) > 1) {
                var sgn = exterior(polygons[0][0]);
                for(var i = 0, t; i < n; ++i) {
                  if(sgn === exterior(arcs[i])) {
                    t = arcs[0], arcs[0] = arcs[i], arcs[i] = t;
                    break;
                  }
                }
              }

              return arcs;
            })
          };
        }

        function featureOrCollection(topology, o) {
          return o.type === "GeometryCollection" ? {
            type: "FeatureCollection",
            features: o.geometries.map(function(o) {
              return feature(topology, o);
            })
          } : feature(topology, o);
        }

        function feature(topology, o) {
          var f = {
            type: "Feature",
            id: o.id,
            properties: o.properties || {},
            geometry: object(topology, o)
          };
          if(o.id == null) delete f.id;
          return f;
        }

        function object(topology, o) {
          var absolute = transformAbsolute(topology.transform),
            arcs = topology.arcs;

          function arc(i, points) {
            if(points.length) points.pop();
            for(var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
              points.push(p = a[k].slice());
              absolute(p, k);
            }
            if(i < 0) reverse(points, n);
          }

          function point(p) {
            p = p.slice();
            absolute(p, 0);
            return p;
          }

          function line(arcs) {
            var points = [];
            for(var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
            if(points.length < 2) points.push(points[0].slice());
            return points;
          }

          function ring(arcs) {
            var points = line(arcs);
            while(points.length < 4) points.push(points[0].slice());
            return points;
          }

          function polygon(arcs) {
            return arcs.map(ring);
          }

          function geometry(o) {
            var t = o.type;
            return t === "GeometryCollection" ? {
              type: t,
              geometries: o.geometries.map(geometry)
            } : t in geometryType ? {
              type: t,
              coordinates: geometryType[t](o)
            } : null;
          }

          var geometryType = {
            Point: function(o) {
              return point(o.coordinates);
            },
            MultiPoint: function(o) {
              return o.coordinates.map(point);
            },
            LineString: function(o) {
              return line(o.arcs);
            },
            MultiLineString: function(o) {
              return o.arcs.map(line);
            },
            Polygon: function(o) {
              return polygon(o.arcs);
            },
            MultiPolygon: function(o) {
              return o.arcs.map(polygon);
            }
          };

          return geometry(o);
        }

        function reverse(array, n) {
          var t, j = array.length,
            i = j - n;
          while(i < --j) t = array[i], array[i++] = array[j], array[j] = t;
        }

        function bisect(a, x) {
          var lo = 0,
            hi = a.length;
          while(lo < hi) {
            var mid = lo + hi >>> 1;
            if(a[mid] < x) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        }

        function neighbors(objects) {
          var indexesByArc = {}, // arc index -> array of object indexes
            neighbors = objects.map(function() {
              return [];
            });

          function line(arcs, i) {
            arcs.forEach(function(a) {
              if(a < 0) a = ~a;
              var o = indexesByArc[a];
              if(o) o.push(i);
              else indexesByArc[a] = [i];
            });
          }

          function polygon(arcs, i) {
            arcs.forEach(function(arc) {
              line(arc, i);
            });
          }

          function geometry(o, i) {
            if(o.type === "GeometryCollection") o.geometries.forEach(function(o) {
              geometry(o, i);
            });
            else if(o.type in geometryType) geometryType[o.type](o.arcs, i);
          }

          var geometryType = {
            LineString: line,
            MultiLineString: polygon,
            Polygon: polygon,
            MultiPolygon: function(arcs, i) {
              arcs.forEach(function(arc) {
                polygon(arc, i);
              });
            }
          };

          objects.forEach(geometry);

          for(var i in indexesByArc) {
            for(var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
              for(var k = j + 1; k < m; ++k) {
                var ij = indexes[j],
                  ik = indexes[k],
                  n;
                if((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
                if((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
              }
            }
          }

          return neighbors;
        }

        function presimplify(topology, triangleArea) {
          var absolute = transformAbsolute(topology.transform),
            relative = transformRelative(topology.transform),
            heap = minAreaHeap();

          if(!triangleArea) triangleArea = cartesianTriangleArea;

          topology.arcs.forEach(function(arc) {
            var triangles = [],
              maxArea = 0,
              triangle;

            // To store each point鈥檚 effective area, we create a new array rather than
            // extending the passed-in point to workaround a Chrome/V8 bug (getting
            // stuck in smi mode). For midpoints, the initial effective area of
            // Infinity will be computed in the next step.
            for(var i = 0, n = arc.length, p; i < n; ++i) {
              p = arc[i];
              absolute(arc[i] = [p[0], p[1], Infinity], i);
            }

            for(var i = 1, n = arc.length - 1; i < n; ++i) {
              triangle = arc.slice(i - 1, i + 2);
              triangle[1][2] = triangleArea(triangle);
              triangles.push(triangle);
              heap.push(triangle);
            }

            for(var i = 0, n = triangles.length; i < n; ++i) {
              triangle = triangles[i];
              triangle.previous = triangles[i - 1];
              triangle.next = triangles[i + 1];
            }

            while(triangle = heap.pop()) {
              var previous = triangle.previous,
                next = triangle.next;

              // If the area of the current point is less than that of the previous point
              // to be eliminated, use the latter's area instead. This ensures that the
              // current point cannot be eliminated without eliminating previously-
              // eliminated points.
              if(triangle[1][2] < maxArea) triangle[1][2] = maxArea;
              else maxArea = triangle[1][2];

              if(previous) {
                previous.next = next;
                previous[2] = triangle[2];
                update(previous);
              }

              if(next) {
                next.previous = previous;
                next[0] = triangle[0];
                update(next);
              }
            }

            arc.forEach(relative);
          });

          function update(triangle) {
            heap.remove(triangle);
            triangle[1][2] = triangleArea(triangle);
            heap.push(triangle);
          }

          return topology;
        };

        function cartesianRingArea(ring) {
          var i = -1,
            n = ring.length,
            a,
            b = ring[n - 1],
            area = 0;

          while(++i < n) {
            a = b;
            b = ring[i];
            area += a[0] * b[1] - a[1] * b[0];
          }

          return area * .5;
        }

        function cartesianTriangleArea(triangle) {
          var a = triangle[0],
            b = triangle[1],
            c = triangle[2];
          return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
        }

        function compareArea(a, b) {
          return a[1][2] - b[1][2];
        }

        function minAreaHeap() {
          var heap = {},
            array = [],
            size = 0;

          heap.push = function(object) {
            up(array[object._ = size] = object, size++);
            return size;
          };

          heap.pop = function() {
            if(size <= 0) return;
            var removed = array[0],
              object;
            if(--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
            return removed;
          };

          heap.remove = function(removed) {
            var i = removed._,
              object;
            if(array[i] !== removed) return; // invalid request
            if(i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] =
              object, i);
            return i;
          };

          function up(object, i) {
            while(i > 0) {
              var j = ((i + 1) >> 1) - 1,
                parent = array[j];
              if(compareArea(object, parent) >= 0) break;
              array[parent._ = i] = parent;
              array[object._ = i = j] = object;
            }
          }

          function down(object, i) {
            while(true) {
              var r = (i + 1) << 1,
                l = r - 1,
                j = i,
                child = array[j];
              if(l < size && compareArea(array[l], child) < 0) child = array[j = l];
              if(r < size && compareArea(array[r], child) < 0) child = array[j = r];
              if(j === i) break;
              array[child._ = i] = child;
              array[object._ = i = j] = object;
            }
          }

          return heap;
        }

        function transformAbsolute(transform) {
          if(!transform) return noop;
          var x0,
            y0,
            kx = transform.scale[0],
            ky = transform.scale[1],
            dx = transform.translate[0],
            dy = transform.translate[1];
          return function(point, i) {
            if(!i) x0 = y0 = 0;
            point[0] = (x0 += point[0]) * kx + dx;
            point[1] = (y0 += point[1]) * ky + dy;
          };
        }

        function transformRelative(transform) {
          if(!transform) return noop;
          var x0,
            y0,
            kx = transform.scale[0],
            ky = transform.scale[1],
            dx = transform.translate[0],
            dy = transform.translate[1];
          return function(point, i) {
            if(!i) x0 = y0 = 0;
            var x1 = (point[0] - dx) / kx | 0,
              y1 = (point[1] - dy) / ky | 0;
            point[0] = x1 - x0;
            point[1] = y1 - y0;
            x0 = x1;
            y0 = y1;
          };
        }

        function noop() {}

        return topojson;
      }());

      (function(exports) {

        /*
         * d3.cartogram is a d3-friendly implementation of An Algorithm to Construct
         * Continuous Area Cartograms:
         *
         * <http://chrisman.scg.ulaval.ca/G360/dougenik.pdf>
         *
         * It requires topojson to decode TopoJSON-encoded topologies:
         *
         * <http://github.com/mbostock/topojson/>
         *
         * Usage:
         *
         * var cartogram = d3.cartogram()
         *  .projection(d3.geo.albersUsa())
         *  .value(function(d) {
         *    return Math.random() * 100;
         *  });
         * d3.json("path/to/topology.json", function(topology) {
         *  var features = cartogram(topology, topology.objects.OBJECTNAME.geometries);
         *  d3.select("svg").selectAll("path")
         *    .data(features)
         *    .enter()
         *    .append("path")
         *      .attr("d", cartogram.path);
         * });
         */
        d3.cartogram = function() {

          function carto(topology, geometries, totalValue) {

            var calculateObjectsMeta = function(objects, values, path) {
              return new Promise(function(resolve, reject) {
                var areas = objects.map(path.area);
                var totalArea = d3.sum(areas),
                  sizeErrorsTot =0,
                  sizeErrorsNum=0;
                
                var calculateMeta = function(index, cb) {
                  var area = Math.abs(areas[index]), // XXX: why do we have negative areas?
                    v = + values[index],
                    desired = totalArea * v / totalValue,
                    radius = Math.sqrt(area / Math.PI),
                    mass = Math.sqrt(desired / Math.PI) - radius,
                    sizeError = Math.max(area, desired) / Math.min(area, desired);
                  // console.log(o.id, "@", j, "area:", area, "value:", v, "->", desired, radius, mass, sizeError);
                  cb( {
                    id:         objects[index].id,
                    area:       area,
                    centroid:   path.centroid(objects[index]),
                    value:      v,
                    desired:    desired,
                    radius:     radius,
                    mass:       mass,
                    sizeError:  sizeError
                  });
                };
                var calculateMetaSequence = function(index) {
                  if (index >= objects.length) {
                    return resolve({meta: meta, sizeError: (sizeErrorsTot/sizeErrorsNum)})
                  }
                  calculateMeta(index, function(response) {
                    meta.push(response);
                    sizeErrorsTot+=response.sizeError;
                    sizeErrorsNum++;
                    if (index % 400 == 0) {
                      defer(function() {
                        calculateMetaSequence(++index);
                      });
                    } else {
                      calculateMetaSequence(++index);
                    }
                  });
                };
                var meta = [];
                calculateMetaSequence(0);
              });
            };
            // copy it first
            return new Promise(function(resolve, reject) {
              topology = copy(topology);

              // objects are projected into screen coordinates

              // project the arcs into screen space
              var tf = transformer(topology.transform),x,y,len1,i1,out1,len2=topology.arcs.length,i2=0,
                projectedArcs = new Array(len2);
              var projectedArcsDefer = new Promise();
              var generateTopologySegment = function(segmentIndex, segmentLength) {
                return new Promise(function(resolve, reject) {
                  i1 = 0;
                  while(i1<segmentLength){
                    topology.arcs[segmentIndex][i1][0] = (x += topology.arcs[segmentIndex][i1][0]);
                    topology.arcs[segmentIndex][i1][1] = (y += topology.arcs[segmentIndex][i1][1]);
                    out1[i1] = projection === null ? tf(topology.arcs[segmentIndex][i1]) : projection(tf(topology.arcs[segmentIndex][i1]));
                    i1++;
                  }
                  resolve(out1);
                });
                
              };
              var generateTopologyArcs = function(index, totalLength) {
                if (index >= totalLength) {
                  return projectedArcsDefer.resolve(projectedArcs);
                }
                x = 0;
                y = 0;
                len1 = topology.arcs[index].length;
                i1 = 0;
                out1 = new Array(len1);

                generateTopologySegment(index, len1).then(function(segment) {
                  projectedArcs[index++]=segment;
                  if (index % 400 == 0) {
                    defer(function() {
                      generateTopologyArcs(index, totalLength);
                    })
                  } else {
                    generateTopologyArcs(index, totalLength);
                  }
                });
              };
              generateTopologyArcs(0, len2);

              projectedArcsDefer.then(function(projectedArcs) {
                // path with identity projection
                var path = d3.geo.path()
                  .projection(null);
                var objects = object(projectedArcs, {type: "GeometryCollection", geometries: geometries})
                  .geometries.map(function(geom) {
                    return {
                      type: "Feature",
                      id: geom.id,
                      properties: properties.call(null, geom, topology),
                      geometry: geom
                    };
                  });
                var values = objects.map(value);
                if (!totalValue) {
                  totalValue = d3.sum(values);
                }
                // no iterations; just return the features
                if (iterations <= 0) {
                  resolve( {
                    features: objects,
                    arcs: projectedArcs
                  });
                }
                var i = 0;
                var resizeSegments = function(index, iterations) {
                  if (index >= iterations) {
                    return iterationsDefer.resolve();
                  }
                  calculateObjectsMeta(objects, values, path).then(function(response) {
                    var forceReductionFactor = 1 / (1 + response.sizeError);

                    // console.log("meta:", meta);
                    // console.log("  total area:", totalArea);
                    // console.log("  force reduction factor:", forceReductionFactor, "mean error:", sizeError);
                    var delta,centroid,mass,radius,rSquared,dx,dy,distSquared,dist,Fij;
                    var updatePoint = function(i2, len2) {
                      var len1,i1,delta,len3,i3,centroid,mass,radius,rSquared,dx,dy,distSquared,dist,Fij;
                      while(i2<len2){
                        len1=projectedArcs[i2].length;
                        i1=0;
                        while(i1<len1){
                          // create an array of vectors: [x, y]
                          delta = [0,0];
                          len3 = response.meta.length;
                          i3=0;
                          while(i3<len3) {
                            centroid =  response.meta[i3].centroid;
                            mass =      response.meta[i3].mass;
                            radius =    response.meta[i3].radius;
                            rSquared = (radius*radius);
                            dx = projectedArcs[i2][i1][0] - centroid[0];
                            dy = projectedArcs[i2][i1][1] - centroid[1];
                            distSquared = dx * dx + dy * dy;
                            dist=Math.sqrt(distSquared);
                            Fij = (dist > radius)
                              ? mass * radius / dist
                              : mass *
                            (distSquared / rSquared) *
                            (4 - 3 * dist / radius);
                            delta[0]+=(Fij * cosArctan(dy,dx));
                            delta[1]+=(Fij * sinArctan(dy,dx));
                            i3++;
                          }
                          projectedArcs[i2][i1][0] += (delta[0]*forceReductionFactor);
                          projectedArcs[i2][i1][1] += (delta[1]*forceReductionFactor);
                          i1++;
                        }
                        i2++;
                      }              
                    };
                    var updatePointSequence = function(start) {
                      if (start >= projectedArcs.length) {
                        if (response.sizeError <= 1) {
                          resizeSegments(iterations, iterations);
                          return;
                        }
                        defer(function() {
                          resizeSegments(++index, iterations);
                        })
                        return;
                      } 
                      var end = Math.min(start + 400, projectedArcs.length);
                      updatePoint(start, end);
                      defer(function() {
                        updatePointSequence(end);
                      });
                    };
                    updatePointSequence(0);
                    // break if we hit the target size error
                  });
                };
                var iterationsDefer = new Promise();

                resizeSegments(0, iterations);
                iterationsDefer.then(function() {
                  resolve( {
                    features: objects,
                    arcs: projectedArcs
                  });
                });
              });

      /*
              while(i2<len2){
                x = 0;
                y = 0;
                len1 = topology.arcs[i2].length;
                i1 = 0;
                out1 = new Array(len1);
                while(i1<len1){
                  topology.arcs[i2][i1][0] = (x += topology.arcs[i2][i1][0]);
                  topology.arcs[i2][i1][1] = (y += topology.arcs[i2][i1][1]);
                  out1[i1] = projection === null ? tf(topology.arcs[i2][i1]) : projection(tf(topology.arcs[i2][i1]));
                  i1++;
                }
                projectedArcs[i2++]=out1;

              }
      */
            });
            
          }

          var iterations = 8,
              projection = d3.geo.albers(),
              properties = function(id) {
                return {};
              },
              value = function(d) {
                return 1;
              };

          // for convenience
          carto.path = d3.geo.path()
            .projection(null);

          carto.iterations = function(i) {
            if (arguments.length) {
              iterations = i;
              return carto;
            } else {
              return iterations;
            }
          };

          carto.value = function(v) {
            if (arguments.length) {
              value = d3.functor(v);
              return carto;
            } else {
              return value;
            }
          };

          carto.projection = function(p) {
            if (arguments.length) {
              projection = p;
              return carto;
            } else {
              return projection;
            }
          };

          carto.feature = function(topology, geom) {
            return {
              type: "Feature",
              id: geom.id,
              properties: properties.call(null, geom, topology),
              geometry: {
                type: geom.type,
                coordinates: topojson.feature(topology, geom).geometry.coordinates
              }
            };
          };
          
          carto.meshArcs = function(topology, o, filter) {
            var arcs = [];

            function arc(i) {
              var j = i < 0 ? ~i : i;
              (geomsByArc[j] || (geomsByArc[j] = [])).push({
                i: i,
                g: geom
              });
            }

            function line(arcs) {
              arcs.forEach(arc);
            }

            function polygon(arcs) {
              arcs.forEach(line);
            }

            function geometry(o) {
              if(o.type === "GeometryCollection") o.geometries.forEach(geometry);
              else if(o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
            }

            if(arguments.length > 1) {
              var geomsByArc = [],
                geom;

              var geometryType = {
                LineString: line,
                MultiLineString: polygon,
                Polygon: polygon,
                MultiPolygon: function(arcs) {
                  arcs.forEach(polygon);
                }
              };

              geometry(o);

              geomsByArc.forEach(arguments.length < 3 ? function(geoms) {
                arcs.push(geoms[0].i);
              } : function(geoms) {
                if(filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
              });
            } else {
              for(var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
            }

            return arcs;
          };

          carto.stitchArcs = function(topology, arcs) {
            var stitchedArcs = {},
              fragmentByStart = {},
              fragmentByEnd = {},
              fragments = [],
              emptyIndex = -1;

            // Stitch empty arcs first, since they may be subsumed by other arcs.
            arcs.forEach(function(i, j) {
              var arc = topology.arcs[i < 0 ? ~i : i],
                t;
              if(arc.length < 3 && !arc[1][0] && !arc[1][1]) {
                t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
              }
            });

            arcs.forEach(function(i) {
              var e = ends(i),
                start = e[0],
                end = e[1],
                f, g;

              if(f = fragmentByEnd[start]) {
                delete fragmentByEnd[f.end];
                f.push(i);
                f.end = end;
                if(g = fragmentByStart[end]) {
                  delete fragmentByStart[g.start];
                  var fg = g === f ? f : f.concat(g);
                  fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
                } else {
                  fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
                }
              } else if(f = fragmentByStart[end]) {
                delete fragmentByStart[f.start];
                f.unshift(i);
                f.start = start;
                if(g = fragmentByEnd[start]) {
                  delete fragmentByEnd[g.end];
                  var gf = g === f ? f : g.concat(f);
                  fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
                } else {
                  fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
                }
              } else {
                f = [i];
                fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
              }
            });

            function ends(i) {
              var arc = topology.arcs[i < 0 ? ~i : i],
                p0 = arc[0],
                p1;
              if(topology.transform) p1 = [0, 0], arc.forEach(function(dp) {
                p1[0] += dp[0], p1[1] += dp[1];
              });
              else p1 = arc[arc.length - 1];
              return i < 0 ? [p1, p0] : [p0, p1];
            }

            function flush(fragmentByEnd, fragmentByStart) {
              for(var k in fragmentByEnd) {
                var f = fragmentByEnd[k];
                delete fragmentByStart[f.start];
                delete f.start;
                delete f.end;
                f.forEach(function(i) {
                  stitchedArcs[i < 0 ? ~i : i] = 1;
                });
                fragments.push(f);
              }
            }

            flush(fragmentByEnd, fragmentByStart);
            flush(fragmentByStart, fragmentByEnd);
            arcs.forEach(function(i) {
              if(!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
            });

            return object(topology, {
              type: "MultiLineString",
              arcs: fragments
            })
          };
          
          carto.features = function(topo, geometries) {
            return geometries.map(function(f) {
              return carto.feature(topo, f);
            });
          };

          carto.properties = function(props) {
            if (arguments.length) {
              properties = d3.functor(props);
              return carto;
            } else {
              return properties;
            }
          };

          return carto;
        };

        var transformer = d3.cartogram.transformer = function(tf) {
          var kx = tf.scale[0],
              ky = tf.scale[1],
              dx = tf.translate[0],
              dy = tf.translate[1];

          function transform(c) {
            return [c[0] * kx + dx, c[1] * ky + dy];
          }

          transform.invert = function(c) {
            return [(c[0] - dx) / kx, (c[1]- dy) / ky];
          };

          return transform;
        };

        function angle(a, b) {
          return Math.atan2(b[1] - a[1], b[0] - a[0]);
        }

        function distance(a, b) {
          var dx = b[0] - a[0],
              dy = b[1] - a[1];
          return Math.sqrt(dx * dx + dy * dy);
        }

        function projector(proj) {
          var types = {
            Point: proj,
            LineString: function(coords) {
              return coords.map(proj);
            },
            MultiLineString: function(arcs) {
              return arcs.map(types.LineString);
            },
            Polygon: function(rings) {
              return rings.map(types.LineString);
            },
            MultiPolygon: function(rings) {
              return rings.map(types.Polygon);
            }
          };
          return function(geom) {
            return types[geom.type](geom.coordinates);
          };
        }
        function cosArctan(dx,dy){
          if (dy===0) return 0;
          var div = dx/dy;
          return (dy>0)?
            (1/Math.sqrt(1+(div*div))):
            (-1/Math.sqrt(1+(div*div)));
        }
        function sinArctan(dx,dy){
          if (dy===0) return 1;
          var div = dx/dy;
          return (dy>0)?
            (div/Math.sqrt(1+(div*div))):
            (-div/Math.sqrt(1+(div*div)));
        }
        function copy(o) {
          return (o instanceof Array)
            ? o.map(copy)
            : (typeof o === "string" || typeof o === "number")
              ? o
              : copyObject(o);
        }
        
        function copyObject(o) {
          var obj = {};
          for (var k in o) obj[k] = copy(o[k]);
          return obj;
        }

        function object(topology, o) {
          var arcs = topology.arcs ? topology.arcs : topology;
          function arc(i, points) {
            if (points.length) points.pop();
            if (!arcs[i < 0 ? ~i : i]) {
              console.log("fail");
            }
            for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
              points.push(a[k]);
            }
            if (i < 0) reverse(points, n);
          }

          function line(arcs) {
            var points = [];
            for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
            return points;
          }

          function polygon(arcs) {
            return arcs.map(line);
          }

          function geometry(o) {
            o = Object.create(o);
            o.coordinates = geometryType[o.type](o.arcs);
            return o;
          }
          var geometryType = {
            LineString: line,
            MultiLineString: polygon,
            Polygon: polygon,
            MultiPolygon: function(arcs) { return arcs.map(polygon); }
          };

          return o.type === "GeometryCollection"
              ? (o = Object.create(o), o.geometries = o.geometries.map(geometry), o)
              : geometry(o);
        }

        function reverse(array, n) {
          var t, j = array.length, i = j - n; while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
        }

      })(this);

      function d3_geo_projection() {
        d3.geo.project = function(object, projection) {
          var stream = projection.stream;
          if (!stream) throw new Error("not yet supported");
          return (object && d3_geo_projectObjectType.hasOwnProperty(object.type) ? d3_geo_projectObjectType[object.type] : d3_geo_projectGeometry)(object, stream);
        };
        function d3_geo_projectFeature(object, stream) {
          return {
            type: "Feature",
            id: object.id,
            properties: object.properties,
            geometry: d3_geo_projectGeometry(object.geometry, stream)
          };
        }
        function d3_geo_projectGeometry(geometry, stream) {
          if (!geometry) return null;
          if (geometry.type === "GeometryCollection") return {
            type: "GeometryCollection",
            geometries: object.geometries.map(function(geometry) {
              return d3_geo_projectGeometry(geometry, stream);
            })
          };
          if (!d3_geo_projectGeometryType.hasOwnProperty(geometry.type)) return null;
          var sink = d3_geo_projectGeometryType[geometry.type];
          d3.geo.stream(geometry, stream(sink));
          return sink.result();
        }
        var d3_geo_projectObjectType = {
          Feature: d3_geo_projectFeature,
          FeatureCollection: function(object, stream) {
            return {
              type: "FeatureCollection",
              features: object.features.map(function(feature) {
                return d3_geo_projectFeature(feature, stream);
              })
            };
          }
        };
        var d3_geo_projectPoints = [], d3_geo_projectLines = [];
        var d3_geo_projectPoint = {
          point: function(x, y) {
            d3_geo_projectPoints.push([ x, y ]);
          },
          result: function() {
            var result = !d3_geo_projectPoints.length ? null : d3_geo_projectPoints.length < 2 ? {
              type: "Point",
              coordinates: d3_geo_projectPoints[0]
            } : {
              type: "MultiPoint",
              coordinates: d3_geo_projectPoints
            };
            d3_geo_projectPoints = [];
            return result;
          }
        };
        var d3_geo_projectLine = {
          lineStart: d3_geo_projectNoop,
          point: function(x, y) {
            d3_geo_projectPoints.push([ x, y ]);
          },
          lineEnd: function() {
            if (d3_geo_projectPoints.length) d3_geo_projectLines.push(d3_geo_projectPoints), 
            d3_geo_projectPoints = [];
          },
          result: function() {
            var result = !d3_geo_projectLines.length ? null : d3_geo_projectLines.length < 2 ? {
              type: "LineString",
              coordinates: d3_geo_projectLines[0]
            } : {
              type: "MultiLineString",
              coordinates: d3_geo_projectLines
            };
            d3_geo_projectLines = [];
            return result;
          }
        };
        var d3_geo_projectPolygon = {
          polygonStart: d3_geo_projectNoop,
          lineStart: d3_geo_projectNoop,
          point: function(x, y) {
            d3_geo_projectPoints.push([ x, y ]);
          },
          lineEnd: function() {
            var n = d3_geo_projectPoints.length;
            if (n) {
              do d3_geo_projectPoints.push(d3_geo_projectPoints[0].slice()); while (++n < 4);
              d3_geo_projectLines.push(d3_geo_projectPoints), d3_geo_projectPoints = [];
            }
          },
          polygonEnd: d3_geo_projectNoop,
          result: function() {
            if (!d3_geo_projectLines.length) return null;
            var polygons = [], holes = [];
            d3_geo_projectLines.forEach(function(ring) {
              if (d3_geo_projectClockwise(ring)) polygons.push([ ring ]); else holes.push(ring);
            });
            holes.forEach(function(hole) {
              var point = hole[0];
              polygons.some(function(polygon) {
                if (d3_geo_projectContains(polygon[0], point)) {
                  polygon.push(hole);
                  return true;
                }
              }) || polygons.push([ hole ]);
            });
            d3_geo_projectLines = [];
            return !polygons.length ? null : polygons.length > 1 ? {
              type: "MultiPolygon",
              coordinates: polygons
            } : {
              type: "Polygon",
              coordinates: polygons[0]
            };
          }
        };
        var d3_geo_projectGeometryType = {
          Point: d3_geo_projectPoint,
          MultiPoint: d3_geo_projectPoint,
          LineString: d3_geo_projectLine,
          MultiLineString: d3_geo_projectLine,
          Polygon: d3_geo_projectPolygon,
          MultiPolygon: d3_geo_projectPolygon,
          Sphere: d3_geo_projectPolygon
        };
        function d3_geo_projectNoop() {}
        function d3_geo_projectClockwise(ring) {
          if ((n = ring.length) < 4) return false;
          var i = 0, n, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
          while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
          return area <= 0;
        }
        function d3_geo_projectContains(ring, point) {
          var x = point[0], y = point[1], contains = false;
          for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
            var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
            if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;
          }
          return contains;
        }
        var ε = 1e-6, ε2 = ε * ε, π = Math.PI, halfπ = π / 2, sqrtπ = Math.sqrt(π), radians = π / 180, degrees = 180 / π;
        function sinci(x) {
          return x ? x / Math.sin(x) : 1;
        }
        function sgn(x) {
          return x > 0 ? 1 : x < 0 ? -1 : 0;
        }
        function asin(x) {
          return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
        }
        function acos(x) {
          return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
        }
        function asqrt(x) {
          return x > 0 ? Math.sqrt(x) : 0;
        }
        var projection = d3.geo.projection, projectionMutator = d3.geo.projectionMutator;
        d3.geo.interrupt = function(project) {
          var lobes = [ [ [ [ -π, 0 ], [ 0, halfπ ], [ π, 0 ] ] ], [ [ [ -π, 0 ], [ 0, -halfπ ], [ π, 0 ] ] ] ];
          var bounds;
          function forward(λ, φ) {
            var sign = φ < 0 ? -1 : +1, hemilobes = lobes[+(φ < 0)];
            for (var i = 0, n = hemilobes.length - 1; i < n && λ > hemilobes[i][2][0]; ++i) ;
            var coordinates = project(λ - hemilobes[i][1][0], φ);
            coordinates[0] += project(hemilobes[i][1][0], sign * φ > sign * hemilobes[i][0][1] ? hemilobes[i][0][1] : φ)[0];
            return coordinates;
          }
          function reset() {
            bounds = lobes.map(function(hemilobes) {
              return hemilobes.map(function(lobe) {
                var x0 = project(lobe[0][0], lobe[0][1])[0], x1 = project(lobe[2][0], lobe[2][1])[0], y0 = project(lobe[1][0], lobe[0][1])[1], y1 = project(lobe[1][0], lobe[1][1])[1], t;
                if (y0 > y1) t = y0, y0 = y1, y1 = t;
                return [ [ x0, y0 ], [ x1, y1 ] ];
              });
            });
          }
          if (project.invert) forward.invert = function(x, y) {
            var hemibounds = bounds[+(y < 0)], hemilobes = lobes[+(y < 0)];
            for (var i = 0, n = hemibounds.length; i < n; ++i) {
              var b = hemibounds[i];
              if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {
                var coordinates = project.invert(x - project(hemilobes[i][1][0], 0)[0], y);
                coordinates[0] += hemilobes[i][1][0];
                return pointEqual(forward(coordinates[0], coordinates[1]), [ x, y ]) ? coordinates : null;
              }
            }
          };
          var projection = d3.geo.projection(forward), stream_ = projection.stream;
          projection.stream = function(stream) {
            var rotate = projection.rotate(), rotateStream = stream_(stream), sphereStream = (projection.rotate([ 0, 0 ]), 
            stream_(stream));
            projection.rotate(rotate);
            rotateStream.sphere = function() {
              d3.geo.stream(sphere(), sphereStream);
            };
            return rotateStream;
          };
          projection.lobes = function(_) {
            if (!arguments.length) return lobes.map(function(lobes) {
              return lobes.map(function(lobe) {
                return [ [ lobe[0][0] * 180 / π, lobe[0][1] * 180 / π ], [ lobe[1][0] * 180 / π, lobe[1][1] * 180 / π ], [ lobe[2][0] * 180 / π, lobe[2][1] * 180 / π ] ];
              });
            });
            lobes = _.map(function(lobes) {
              return lobes.map(function(lobe) {
                return [ [ lobe[0][0] * π / 180, lobe[0][1] * π / 180 ], [ lobe[1][0] * π / 180, lobe[1][1] * π / 180 ], [ lobe[2][0] * π / 180, lobe[2][1] * π / 180 ] ];
              });
            });
            reset();
            return projection;
          };
          function sphere() {
            var ε = 1e-6, coordinates = [];
            for (var i = 0, n = lobes[0].length; i < n; ++i) {
              var lobe = lobes[0][i], λ0 = lobe[0][0] * 180 / π, φ0 = lobe[0][1] * 180 / π, φ1 = lobe[1][1] * 180 / π, λ2 = lobe[2][0] * 180 / π, φ2 = lobe[2][1] * 180 / π;
              coordinates.push(resample([ [ λ0 + ε, φ0 + ε ], [ λ0 + ε, φ1 - ε ], [ λ2 - ε, φ1 - ε ], [ λ2 - ε, φ2 + ε ] ], 30));
            }
            for (var i = lobes[1].length - 1; i >= 0; --i) {
              var lobe = lobes[1][i], λ0 = lobe[0][0] * 180 / π, φ0 = lobe[0][1] * 180 / π, φ1 = lobe[1][1] * 180 / π, λ2 = lobe[2][0] * 180 / π, φ2 = lobe[2][1] * 180 / π;
              coordinates.push(resample([ [ λ2 - ε, φ2 - ε ], [ λ2 - ε, φ1 + ε ], [ λ0 + ε, φ1 + ε ], [ λ0 + ε, φ0 - ε ] ], 30));
            }
            return {
              type: "Polygon",
              coordinates: [ d3.merge(coordinates) ]
            };
          }
          function resample(coordinates, m) {
            var i = -1, n = coordinates.length, p0 = coordinates[0], p1, dx, dy, resampled = [];
            while (++i < n) {
              p1 = coordinates[i];
              dx = (p1[0] - p0[0]) / m;
              dy = (p1[1] - p0[1]) / m;
              for (var j = 0; j < m; ++j) resampled.push([ p0[0] + j * dx, p0[1] + j * dy ]);
              p0 = p1;
            }
            resampled.push(p1);
            return resampled;
          }
          function pointEqual(a, b) {
            return Math.abs(a[0] - b[0]) < ε && Math.abs(a[1] - b[1]) < ε;
          }
          return projection;
        };
        function airy(β) {
          var tanβ_2 = Math.tan(.5 * β), B = 2 * Math.log(Math.cos(.5 * β)) / (tanβ_2 * tanβ_2);
          function forward(λ, φ) {
            var cosλ = Math.cos(λ), cosφ = Math.cos(φ), sinφ = Math.sin(φ), cosz = cosφ * cosλ, K = -((1 - cosz ? Math.log(.5 * (1 + cosz)) / (1 - cosz) : -.5) + B / (1 + cosz));
            return [ K * cosφ * Math.sin(λ), K * sinφ ];
          }
          forward.invert = function(x, y) {
            var ρ = Math.sqrt(x * x + y * y), z = β * -.5, i = 50, δ;
            if (!ρ) return [ 0, 0 ];
            do {
              var z_2 = .5 * z, cosz_2 = Math.cos(z_2), sinz_2 = Math.sin(z_2), tanz_2 = Math.tan(z_2), lnsecz_2 = Math.log(1 / cosz_2);
              z -= δ = (2 / tanz_2 * lnsecz_2 - B * tanz_2 - ρ) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - B / (2 * cosz_2 * cosz_2));
            } while (Math.abs(δ) > ε && --i > 0);
            var sinz = Math.sin(z);
            return [ Math.atan2(x * sinz, ρ * Math.cos(z)), asin(y * sinz / ρ) ];
          };
          return forward;
        }
        function airyProjection() {
          var β = halfπ, m = projectionMutator(airy), p = m(β);
          p.radius = function(_) {
            if (!arguments.length) return β / π * 180;
            return m(β = _ * π / 180);
          };
          return p;
        }
        (d3.geo.airy = airyProjection).raw = airy;
        function aitoff(λ, φ) {
          var cosφ = Math.cos(φ), sinciα = sinci(acos(cosφ * Math.cos(λ /= 2)));
          return [ 2 * cosφ * Math.sin(λ) * sinciα, Math.sin(φ) * sinciα ];
        }
        aitoff.invert = function(x, y) {
          if (x * x + 4 * y * y > π * π + ε) return;
          var λ = x, φ = y, i = 25;
          do {
            var sinλ = Math.sin(λ), sinλ_2 = Math.sin(λ / 2), cosλ_2 = Math.cos(λ / 2), sinφ = Math.sin(φ), cosφ = Math.cos(φ), sin_2φ = Math.sin(2 * φ), sin2φ = sinφ * sinφ, cos2φ = cosφ * cosφ, sin2λ_2 = sinλ_2 * sinλ_2, C = 1 - cos2φ * cosλ_2 * cosλ_2, E = C ? acos(cosφ * cosλ_2) * Math.sqrt(F = 1 / C) : F = 0, F, fx = 2 * E * cosφ * sinλ_2 - x, fy = E * sinφ - y, δxδλ = F * (cos2φ * sin2λ_2 + E * cosφ * cosλ_2 * sin2φ), δxδφ = F * (.5 * sinλ * sin_2φ - E * 2 * sinφ * sinλ_2), δyδλ = F * .25 * (sin_2φ * sinλ_2 - E * sinφ * cos2φ * sinλ), δyδφ = F * (sin2φ * cosλ_2 + E * sin2λ_2 * cosφ), denominator = δxδφ * δyδλ - δyδφ * δxδλ;
            if (!denominator) break;
            var δλ = (fy * δxδφ - fx * δyδφ) / denominator, δφ = (fx * δyδλ - fy * δxδλ) / denominator;
            λ -= δλ, φ -= δφ;
          } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
          return [ λ, φ ];
        };
        (d3.geo.aitoff = function() {
          return projection(aitoff);
        }).raw = aitoff;
        function armadillo(φ0) {
          var sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sφ0 = φ0 > 0 ? 1 : -1, tanφ0 = Math.tan(sφ0 * φ0), k = (1 + sinφ0 - cosφ0) / 2;
          function forward(λ, φ) {
            var cosφ = Math.cos(φ), cosλ = Math.cos(λ /= 2);
            return [ (1 + cosφ) * Math.sin(λ), (sφ0 * φ > -Math.atan2(cosλ, tanφ0) - .001 ? 0 : -sφ0 * 10) + k + Math.sin(φ) * cosφ0 - (1 + cosφ) * sinφ0 * cosλ ];
          }
          forward.invert = function(x, y) {
            var λ = 0, φ = 0, i = 50;
            do {
              var cosλ = Math.cos(λ), sinλ = Math.sin(λ), cosφ = Math.cos(φ), sinφ = Math.sin(φ), A = 1 + cosφ, fx = A * sinλ - x, fy = k + sinφ * cosφ0 - A * sinφ0 * cosλ - y, δxδλ = .5 * A * cosλ, δxδφ = -sinλ * sinφ, δyδλ = .5 * sinφ0 * A * sinλ, δyδφ = cosφ0 * cosφ + sinφ0 * cosλ * sinφ, denominator = δxδφ * δyδλ - δyδφ * δxδλ, δλ = .5 * (fy * δxδφ - fx * δyδφ) / denominator, δφ = (fx * δyδλ - fy * δxδλ) / denominator;
              λ -= δλ, φ -= δφ;
            } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
            return sφ0 * φ > -Math.atan2(Math.cos(λ), tanφ0) - .001 ? [ λ * 2, φ ] : null;
          };
          return forward;
        }
        function armadilloProjection() {
          var φ0 = π / 9, sφ0 = φ0 > 0 ? 1 : -1, tanφ0 = Math.tan(sφ0 * φ0), m = projectionMutator(armadillo), p = m(φ0), stream_ = p.stream;
          p.parallel = function(_) {
            if (!arguments.length) return φ0 / π * 180;
            tanφ0 = Math.tan((sφ0 = (φ0 = _ * π / 180) > 0 ? 1 : -1) * φ0);
            return m(φ0);
          };
          p.stream = function(stream) {
            var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), 
            stream_(stream));
            p.rotate(rotate);
            rotateStream.sphere = function() {
              sphereStream.polygonStart(), sphereStream.lineStart();
              for (var λ = sφ0 * -180; sφ0 * λ < 180; λ += sφ0 * 90) sphereStream.point(λ, sφ0 * 90);
              while (sφ0 * (λ -= φ0) >= -180) {
                sphereStream.point(λ, sφ0 * -Math.atan2(Math.cos(λ * radians / 2), tanφ0) * degrees);
              }
              sphereStream.lineEnd(), sphereStream.polygonEnd();
            };
            return rotateStream;
          };
          return p;
        }
        (d3.geo.armadillo = armadilloProjection).raw = armadillo;
        function tanh(x) {
          x = Math.exp(2 * x);
          return (x - 1) / (x + 1);
        }
        function sinh(x) {
          return .5 * (Math.exp(x) - Math.exp(-x));
        }
        function cosh(x) {
          return .5 * (Math.exp(x) + Math.exp(-x));
        }
        function arsinh(x) {
          return Math.log(x + asqrt(x * x + 1));
        }
        function arcosh(x) {
          return Math.log(x + asqrt(x * x - 1));
        }
        function august(λ, φ) {
          var tanφ = Math.tan(φ / 2), k = asqrt(1 - tanφ * tanφ), c = 1 + k * Math.cos(λ /= 2), x = Math.sin(λ) * k / c, y = tanφ / c, x2 = x * x, y2 = y * y;
          return [ 4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2) ];
        }
        august.invert = function(x, y) {
          x *= 3 / 8, y *= 3 / 8;
          if (!x && Math.abs(y) > 1) return null;
          var x2 = x * x, y2 = y * y, s = 1 + x2 + y2, sin3η = Math.sqrt(.5 * (s - Math.sqrt(s * s - 4 * y * y))), η = asin(sin3η) / 3, ξ = sin3η ? arcosh(Math.abs(y / sin3η)) / 3 : arsinh(Math.abs(x)) / 3, cosη = Math.cos(η), coshξ = cosh(ξ), d = coshξ * coshξ - cosη * cosη;
          return [ sgn(x) * 2 * Math.atan2(sinh(ξ) * cosη, .25 - d), sgn(y) * 2 * Math.atan2(coshξ * Math.sin(η), .25 + d) ];
        };
        (d3.geo.august = function() {
          return projection(august);
        }).raw = august;
        var bakerφ = Math.log(1 + Math.SQRT2);
        function baker(λ, φ) {
          var φ0 = Math.abs(φ);
          return φ0 < π / 4 ? [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ] : [ λ * Math.cos(φ0) * (2 * Math.SQRT2 - 1 / Math.sin(φ0)), sgn(φ) * (2 * Math.SQRT2 * (φ0 - π / 4) - Math.log(Math.tan(φ0 / 2))) ];
        }
        baker.invert = function(x, y) {
          if ((y0 = Math.abs(y)) < bakerφ) return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
          var sqrt8 = Math.sqrt(8), φ = π / 4, i = 25, δ, y0;
          do {
            var cosφ_2 = Math.cos(φ / 2), tanφ_2 = Math.tan(φ / 2);
            φ -= δ = (sqrt8 * (φ - π / 4) - Math.log(tanφ_2) - y0) / (sqrt8 - .5 * cosφ_2 * cosφ_2 / tanφ_2);
          } while (Math.abs(δ) > ε2 && --i > 0);
          return [ x / (Math.cos(φ) * (sqrt8 - 1 / Math.sin(φ))), sgn(y) * φ ];
        };
        (d3.geo.baker = function() {
          return projection(baker);
        }).raw = baker;
        var berghausAzimuthalEquidistant = d3.geo.azimuthalEquidistant.raw;
        function berghaus(n) {
          var k = 2 * π / n;
          function forward(λ, φ) {
            var p = berghausAzimuthalEquidistant(λ, φ);
            if (Math.abs(λ) > halfπ) {
              var θ = Math.atan2(p[1], p[0]), r = Math.sqrt(p[0] * p[0] + p[1] * p[1]), θ0 = k * Math.round((θ - halfπ) / k) + halfπ, α = Math.atan2(Math.sin(θ -= θ0), 2 - Math.cos(θ));
              θ = θ0 + asin(π / r * Math.sin(α)) - α;
              p[0] = r * Math.cos(θ);
              p[1] = r * Math.sin(θ);
            }
            return p;
          }
          forward.invert = function(x, y) {
            var r = Math.sqrt(x * x + y * y);
            if (r > halfπ) {
              var θ = Math.atan2(y, x), θ0 = k * Math.round((θ - halfπ) / k) + halfπ, s = θ > θ0 ? -1 : 1, A = r * Math.cos(θ0 - θ), cotα = 1 / Math.tan(s * Math.acos((A - π) / Math.sqrt(π * (π - 2 * A) + r * r)));
              θ = θ0 + 2 * Math.atan((cotα + s * Math.sqrt(cotα * cotα - 3)) / 3);
              x = r * Math.cos(θ), y = r * Math.sin(θ);
            }
            return berghausAzimuthalEquidistant.invert(x, y);
          };
          return forward;
        }
        function berghausProjection() {
          var n = 5, m = projectionMutator(berghaus), p = m(n), stream_ = p.stream, ε = .01, cr = -Math.cos(ε * radians), sr = Math.sin(ε * radians);
          p.lobes = function(_) {
            if (!arguments.length) return n;
            return m(n = +_);
          };
          p.stream = function(stream) {
            var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), 
            stream_(stream));
            p.rotate(rotate);
            rotateStream.sphere = function() {
              sphereStream.polygonStart(), sphereStream.lineStart();
              for (var i = 0, δ = 360 / n, δ0 = 2 * π / n, φ = 90 - 180 / n, φ0 = halfπ; i < n; ++i, 
              φ -= δ, φ0 -= δ0) {
                sphereStream.point(Math.atan2(sr * Math.cos(φ0), cr) * degrees, asin(sr * Math.sin(φ0)) * degrees);
                if (φ < -90) {
                  sphereStream.point(-90, -180 - φ - ε);
                  sphereStream.point(-90, -180 - φ + ε);
                } else {
                  sphereStream.point(90, φ + ε);
                  sphereStream.point(90, φ - ε);
                }
              }
              sphereStream.lineEnd(), sphereStream.polygonEnd();
            };
            return rotateStream;
          };
          return p;
        }
        (d3.geo.berghaus = berghausProjection).raw = berghaus;
        function mollweideBromleyθ(Cp) {
          return function(θ) {
            var Cpsinθ = Cp * Math.sin(θ), i = 30, δ;
            do θ -= δ = (θ + Math.sin(θ) - Cpsinθ) / (1 + Math.cos(θ)); while (Math.abs(δ) > ε && --i > 0);
            return θ / 2;
          };
        }
        function mollweideBromley(Cx, Cy, Cp) {
          var θ = mollweideBromleyθ(Cp);
          function forward(λ, φ) {
            return [ Cx * λ * Math.cos(φ = θ(φ)), Cy * Math.sin(φ) ];
          }
          forward.invert = function(x, y) {
            var θ = asin(y / Cy);
            return [ x / (Cx * Math.cos(θ)), asin((2 * θ + Math.sin(2 * θ)) / Cp) ];
          };
          return forward;
        }
        var mollweideθ = mollweideBromleyθ(π), mollweide = mollweideBromley(Math.SQRT2 / halfπ, Math.SQRT2, π);
        (d3.geo.mollweide = function() {
          return projection(mollweide);
        }).raw = mollweide;
        function boggs(λ, φ) {
          var k = 2.00276, θ = mollweideθ(φ);
          return [ k * λ / (1 / Math.cos(φ) + 1.11072 / Math.cos(θ)), (φ + Math.SQRT2 * Math.sin(θ)) / k ];
        }
        boggs.invert = function(x, y) {
          var k = 2.00276, ky = k * y, θ = y < 0 ? -π / 4 : π / 4, i = 25, δ, φ;
          do {
            φ = ky - Math.SQRT2 * Math.sin(θ);
            θ -= δ = (Math.sin(2 * θ) + 2 * θ - π * Math.sin(φ)) / (2 * Math.cos(2 * θ) + 2 + π * Math.cos(φ) * Math.SQRT2 * Math.cos(θ));
          } while (Math.abs(δ) > ε && --i > 0);
          φ = ky - Math.SQRT2 * Math.sin(θ);
          return [ x * (1 / Math.cos(φ) + 1.11072 / Math.cos(θ)) / k, φ ];
        };
        (d3.geo.boggs = function() {
          return projection(boggs);
        }).raw = boggs;
        function parallel1Projection(projectAt) {
          var φ0 = 0, m = projectionMutator(projectAt), p = m(φ0);
          p.parallel = function(_) {
            if (!arguments.length) return φ0 / π * 180;
            return m(φ0 = _ * π / 180);
          };
          return p;
        }
        function sinusoidal(λ, φ) {
          return [ λ * Math.cos(φ), φ ];
        }
        sinusoidal.invert = function(x, y) {
          return [ x / Math.cos(y), y ];
        };
        (d3.geo.sinusoidal = function() {
          return projection(sinusoidal);
        }).raw = sinusoidal;
        function bonne(φ0) {
          if (!φ0) return sinusoidal;
          var cotφ0 = 1 / Math.tan(φ0);
          function forward(λ, φ) {
            var ρ = cotφ0 + φ0 - φ, E = ρ ? λ * Math.cos(φ) / ρ : ρ;
            return [ ρ * Math.sin(E), cotφ0 - ρ * Math.cos(E) ];
          }
          forward.invert = function(x, y) {
            var ρ = Math.sqrt(x * x + (y = cotφ0 - y) * y), φ = cotφ0 + φ0 - ρ;
            return [ ρ / Math.cos(φ) * Math.atan2(x, y), φ ];
          };
          return forward;
        }
        (d3.geo.bonne = function() {
          return parallel1Projection(bonne).parallel(45);
        }).raw = bonne;
        var bromley = mollweideBromley(1, 4 / π, π);
        (d3.geo.bromley = function() {
          return projection(bromley);
        }).raw = bromley;
        function chamberlin(points) {
          points = points.map(function(p) {
            return [ p[0], p[1], Math.sin(p[1]), Math.cos(p[1]) ];
          });
          for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {
            b = points[i];
            a.v = chamberlinDistanceAzimuth(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);
            a.point = [ 0, 0 ];
          }
          var β0 = chamberlinAngle(points[0].v[0], points[2].v[0], points[1].v[0]), β1 = chamberlinAngle(points[0].v[0], points[1].v[0], points[2].v[0]), β2 = π - β0;
          points[2].point[1] = 0;
          points[0].point[0] = -(points[1].point[0] = .5 * points[0].v[0]);
          var mean = [ points[2].point[0] = points[0].point[0] + points[2].v[0] * Math.cos(β0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * Math.sin(β0)) ];
          function forward(λ, φ) {
            var sinφ = Math.sin(φ), cosφ = Math.cos(φ), v = new Array(3);
            for (var i = 0; i < 3; ++i) {
              var p = points[i];
              v[i] = chamberlinDistanceAzimuth(φ - p[1], p[3], p[2], cosφ, sinφ, λ - p[0]);
              if (!v[i][0]) return p.point;
              v[i][1] = chamberlinLongitude(v[i][1] - p.v[1]);
            }
            var point = mean.slice();
            for (var i = 0; i < 3; ++i) {
              var j = i == 2 ? 0 : i + 1;
              var a = chamberlinAngle(points[i].v[0], v[i][0], v[j][0]);
              if (v[i][1] < 0) a = -a;
              if (!i) {
                point[0] += v[i][0] * Math.cos(a);
                point[1] -= v[i][0] * Math.sin(a);
              } else if (i == 1) {
                a = β1 - a;
                point[0] -= v[i][0] * Math.cos(a);
                point[1] -= v[i][0] * Math.sin(a);
              } else {
                a = β2 - a;
                point[0] += v[i][0] * Math.cos(a);
                point[1] += v[i][0] * Math.sin(a);
              }
            }
            point[0] /= 3, point[1] /= 3;
            return point;
          }
          return forward;
        }
        function chamberlinProjection() {
          var points = [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ], m = projectionMutator(chamberlin), p = m(points), rotate = p.rotate;
          delete p.rotate;
          p.points = function(_) {
            if (!arguments.length) return points;
            points = _;
            var origin = d3.geo.centroid({
              type: "MultiPoint",
              coordinates: points
            }), r = [ -origin[0], -origin[1] ];
            rotate.call(p, r);
            return m(points.map(d3.geo.rotation(r)).map(chamberlinRadians));
          };
          return p.points([ [ -150, 55 ], [ -35, 55 ], [ -92.5, 10 ] ]);
        }
        function chamberlinDistanceAzimuth(dφ, c1, s1, c2, s2, dλ) {
          var cosdλ = Math.cos(dλ), r;
          if (Math.abs(dφ) > 1 || Math.abs(dλ) > 1) {
            r = acos(s1 * s2 + c1 * c2 * cosdλ);
          } else {
            var sindφ = Math.sin(.5 * dφ), sindλ = Math.sin(.5 * dλ);
            r = 2 * asin(Math.sqrt(sindφ * sindφ + c1 * c2 * sindλ * sindλ));
          }
          if (Math.abs(r) > ε) {
            return [ r, Math.atan2(c2 * Math.sin(dλ), c1 * s2 - s1 * c2 * cosdλ) ];
          }
          return [ 0, 0 ];
        }
        function chamberlinAngle(b, c, a) {
          return acos(.5 * (b * b + c * c - a * a) / (b * c));
        }
        function chamberlinLongitude(λ) {
          return λ - 2 * π * Math.floor((λ + π) / (2 * π));
        }
        function chamberlinRadians(point) {
          return [ point[0] * radians, point[1] * radians ];
        }
        (d3.geo.chamberlin = chamberlinProjection).raw = chamberlin;
        function collignon(λ, φ) {
          var α = asqrt(1 - Math.sin(φ));
          return [ 2 / sqrtπ * λ * α, sqrtπ * (1 - α) ];
        }
        collignon.invert = function(x, y) {
          var λ = (λ = y / sqrtπ - 1) * λ;
          return [ λ > 0 ? x * Math.sqrt(π / λ) / 2 : 0, asin(1 - λ) ];
        };
        (d3.geo.collignon = function() {
          return projection(collignon);
        }).raw = collignon;
        function craig(φ0) {
          var tanφ0 = Math.tan(φ0);
          function forward(λ, φ) {
            return [ λ, (λ ? λ / Math.sin(λ) : 1) * (Math.sin(φ) * Math.cos(λ) - tanφ0 * Math.cos(φ)) ];
          }
          forward.invert = tanφ0 ? function(x, y) {
            if (x) y *= Math.sin(x) / x;
            var cosλ = Math.cos(x);
            return [ x, 2 * Math.atan2(Math.sqrt(cosλ * cosλ + tanφ0 * tanφ0 - y * y) - cosλ, tanφ0 - y) ];
          } : function(x, y) {
            return [ x, asin(x ? y * Math.tan(x) / x : y) ];
          };
          return forward;
        }
        (d3.geo.craig = function() {
          return parallel1Projection(craig);
        }).raw = craig;
        function craster(λ, φ) {
          var sqrt3 = Math.sqrt(3);
          return [ sqrt3 * λ * (2 * Math.cos(2 * φ / 3) - 1) / sqrtπ, sqrt3 * sqrtπ * Math.sin(φ / 3) ];
        }
        craster.invert = function(x, y) {
          var sqrt3 = Math.sqrt(3), φ = 3 * asin(y / (sqrt3 * sqrtπ));
          return [ sqrtπ * x / (sqrt3 * (2 * Math.cos(2 * φ / 3) - 1)), φ ];
        };
        (d3.geo.craster = function() {
          return projection(craster);
        }).raw = craster;
        function cylindricalEqualArea(φ0) {
          var cosφ0 = Math.cos(φ0);
          function forward(λ, φ) {
            return [ λ * cosφ0, Math.sin(φ) / cosφ0 ];
          }
          forward.invert = function(x, y) {
            return [ x / cosφ0, asin(y * cosφ0) ];
          };
          return forward;
        }
        (d3.geo.cylindricalEqualArea = function() {
          return parallel1Projection(cylindricalEqualArea);
        }).raw = cylindricalEqualArea;
        function cylindricalStereographic(φ0) {
          var cosφ0 = Math.cos(φ0);
          function forward(λ, φ) {
            return [ λ * cosφ0, (1 + cosφ0) * Math.tan(φ * .5) ];
          }
          forward.invert = function(x, y) {
            return [ x / cosφ0, Math.atan(y / (1 + cosφ0)) * 2 ];
          };
          return forward;
        }
        (d3.geo.cylindricalStereographic = function() {
          return parallel1Projection(cylindricalStereographic);
        }).raw = cylindricalStereographic;
        function eckert1(λ, φ) {
          var α = Math.sqrt(8 / (3 * π));
          return [ α * λ * (1 - Math.abs(φ) / π), α * φ ];
        }
        eckert1.invert = function(x, y) {
          var α = Math.sqrt(8 / (3 * π)), φ = y / α;
          return [ x / (α * (1 - Math.abs(φ) / π)), φ ];
        };
        (d3.geo.eckert1 = function() {
          return projection(eckert1);
        }).raw = eckert1;
        function eckert2(λ, φ) {
          var α = Math.sqrt(4 - 3 * Math.sin(Math.abs(φ)));
          return [ 2 / Math.sqrt(6 * π) * λ * α, sgn(φ) * Math.sqrt(2 * π / 3) * (2 - α) ];
        }
        eckert2.invert = function(x, y) {
          var α = 2 - Math.abs(y) / Math.sqrt(2 * π / 3);
          return [ x * Math.sqrt(6 * π) / (2 * α), sgn(y) * asin((4 - α * α) / 3) ];
        };
        (d3.geo.eckert2 = function() {
          return projection(eckert2);
        }).raw = eckert2;
        function eckert3(λ, φ) {
          var k = Math.sqrt(π * (4 + π));
          return [ 2 / k * λ * (1 + Math.sqrt(1 - 4 * φ * φ / (π * π))), 4 / k * φ ];
        }
        eckert3.invert = function(x, y) {
          var k = Math.sqrt(π * (4 + π)) / 2;
          return [ x * k / (1 + asqrt(1 - y * y * (4 + π) / (4 * π))), y * k / 2 ];
        };
        (d3.geo.eckert3 = function() {
          return projection(eckert3);
        }).raw = eckert3;
        function eckert4(λ, φ) {
          var k = (2 + halfπ) * Math.sin(φ);
          φ /= 2;
          for (var i = 0, δ = Infinity; i < 10 && Math.abs(δ) > ε; i++) {
            var cosφ = Math.cos(φ);
            φ -= δ = (φ + Math.sin(φ) * (cosφ + 2) - k) / (2 * cosφ * (1 + cosφ));
          }
          return [ 2 / Math.sqrt(π * (4 + π)) * λ * (1 + Math.cos(φ)), 2 * Math.sqrt(π / (4 + π)) * Math.sin(φ) ];
        }
        eckert4.invert = function(x, y) {
          var A = .5 * y * Math.sqrt((4 + π) / π), k = asin(A), c = Math.cos(k);
          return [ x / (2 / Math.sqrt(π * (4 + π)) * (1 + c)), asin((k + A * (c + 2)) / (2 + halfπ)) ];
        };
        (d3.geo.eckert4 = function() {
          return projection(eckert4);
        }).raw = eckert4;
        function eckert5(λ, φ) {
          return [ λ * (1 + Math.cos(φ)) / Math.sqrt(2 + π), 2 * φ / Math.sqrt(2 + π) ];
        }
        eckert5.invert = function(x, y) {
          var k = Math.sqrt(2 + π), φ = y * k / 2;
          return [ k * x / (1 + Math.cos(φ)), φ ];
        };
        (d3.geo.eckert5 = function() {
          return projection(eckert5);
        }).raw = eckert5;
        function eckert6(λ, φ) {
          var k = (1 + halfπ) * Math.sin(φ);
          for (var i = 0, δ = Infinity; i < 10 && Math.abs(δ) > ε; i++) {
            φ -= δ = (φ + Math.sin(φ) - k) / (1 + Math.cos(φ));
          }
          k = Math.sqrt(2 + π);
          return [ λ * (1 + Math.cos(φ)) / k, 2 * φ / k ];
        }
        eckert6.invert = function(x, y) {
          var j = 1 + halfπ, k = Math.sqrt(j / 2);
          return [ x * 2 * k / (1 + Math.cos(y *= k)), asin((y + Math.sin(y)) / j) ];
        };
        (d3.geo.eckert6 = function() {
          return projection(eckert6);
        }).raw = eckert6;
        function eisenlohr(λ, φ) {
          var s0 = Math.sin(λ /= 2), c0 = Math.cos(λ), k = Math.sqrt(Math.cos(φ)), c1 = Math.cos(φ /= 2), t = Math.sin(φ) / (c1 + Math.SQRT2 * c0 * k), c = Math.sqrt(2 / (1 + t * t)), v = Math.sqrt((Math.SQRT2 * c1 + (c0 + s0) * k) / (Math.SQRT2 * c1 + (c0 - s0) * k));
          return [ eisenlohrK * (c * (v - 1 / v) - 2 * Math.log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * Math.atan(t)) ];
        }
        eisenlohr.invert = function(x, y) {
          var p = d3.geo.august.raw.invert(x / 1.2, y * 1.065);
          if (!p) return null;
          var λ = p[0], φ = p[1], i = 20;
          x /= eisenlohrK, y /= eisenlohrK;
          do {
            var _0 = λ / 2, _1 = φ / 2, s0 = Math.sin(_0), c0 = Math.cos(_0), s1 = Math.sin(_1), c1 = Math.cos(_1), cos1 = Math.cos(φ), k = Math.sqrt(cos1), t = s1 / (c1 + Math.SQRT2 * c0 * k), t2 = t * t, c = Math.sqrt(2 / (1 + t2)), v0 = Math.SQRT2 * c1 + (c0 + s0) * k, v1 = Math.SQRT2 * c1 + (c0 - s0) * k, v2 = v0 / v1, v = Math.sqrt(v2), vm1v = v - 1 / v, vp1v = v + 1 / v, fx = c * vm1v - 2 * Math.log(v) - x, fy = c * t * vp1v - 2 * Math.atan(t) - y, δtδλ = s1 && Math.SQRT1_2 * k * s0 * t2 / s1, δtδφ = (Math.SQRT2 * c0 * c1 + k) / (2 * (c1 + Math.SQRT2 * c0 * k) * (c1 + Math.SQRT2 * c0 * k) * k), δcδt = -.5 * t * c * c * c, δcδλ = δcδt * δtδλ, δcδφ = δcδt * δtδφ, A = (A = 2 * c1 + Math.SQRT2 * k * (c0 - s0)) * A * v, δvδλ = (Math.SQRT2 * c0 * c1 * k + cos1) / A, δvδφ = -(Math.SQRT2 * s0 * s1) / (k * A), δxδλ = vm1v * δcδλ - 2 * δvδλ / v + c * (δvδλ + δvδλ / v2), δxδφ = vm1v * δcδφ - 2 * δvδφ / v + c * (δvδφ + δvδφ / v2), δyδλ = t * vp1v * δcδλ - 2 * δtδλ / (1 + t2) + c * vp1v * δtδλ + c * t * (δvδλ - δvδλ / v2), δyδφ = t * vp1v * δcδφ - 2 * δtδφ / (1 + t2) + c * vp1v * δtδφ + c * t * (δvδφ - δvδφ / v2), denominator = δxδφ * δyδλ - δyδφ * δxδλ;
            if (!denominator) break;
            var δλ = (fy * δxδφ - fx * δyδφ) / denominator, δφ = (fx * δyδλ - fy * δxδλ) / denominator;
            λ -= δλ;
            φ = Math.max(-halfπ, Math.min(halfπ, φ - δφ));
          } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
          return Math.abs(Math.abs(φ) - halfπ) < ε ? [ 0, φ ] : i && [ λ, φ ];
        };
        var eisenlohrK = 3 + 2 * Math.SQRT2;
        (d3.geo.eisenlohr = function() {
          return projection(eisenlohr);
        }).raw = eisenlohr;
        function fahey(λ, φ) {
          var t = Math.tan(φ / 2);
          return [ λ * faheyK * asqrt(1 - t * t), (1 + faheyK) * t ];
        }
        fahey.invert = function(x, y) {
          var t = y / (1 + faheyK);
          return [ x ? x / (faheyK * asqrt(1 - t * t)) : 0, 2 * Math.atan(t) ];
        };
        var faheyK = Math.cos(35 * radians);
        (d3.geo.fahey = function() {
          return projection(fahey);
        }).raw = fahey;
        function foucaut(λ, φ) {
          var k = φ / 2, cosk = Math.cos(k);
          return [ 2 * λ / sqrtπ * Math.cos(φ) * cosk * cosk, sqrtπ * Math.tan(k) ];
        }
        foucaut.invert = function(x, y) {
          var k = Math.atan(y / sqrtπ), cosk = Math.cos(k), φ = 2 * k;
          return [ x * sqrtπ * .5 / (Math.cos(φ) * cosk * cosk), φ ];
        };
        (d3.geo.foucaut = function() {
          return projection(foucaut);
        }).raw = foucaut;
        d3.geo.gilbert = function(projection) {
          var e = d3.geo.equirectangular().scale(degrees).translate([ 0, 0 ]);
          function gilbert(coordinates) {
            return projection([ coordinates[0] * .5, asin(Math.tan(coordinates[1] * .5 * radians)) * degrees ]);
          }
          if (projection.invert) gilbert.invert = function(coordinates) {
            coordinates = projection.invert(coordinates);
            coordinates[0] *= 2;
            coordinates[1] = 2 * Math.atan(Math.sin(coordinates[1] * radians)) * degrees;
            return coordinates;
          };
          gilbert.stream = function(stream) {
            stream = projection.stream(stream);
            var s = e.stream({
              point: function(λ, φ) {
                stream.point(λ * .5, asin(Math.tan(-φ * .5 * radians)) * degrees);
              },
              lineStart: function() {
                stream.lineStart();
              },
              lineEnd: function() {
                stream.lineEnd();
              },
              polygonStart: function() {
                stream.polygonStart();
              },
              polygonEnd: function() {
                stream.polygonEnd();
              }
            });
            s.sphere = function() {
              stream.sphere();
            };
            s.valid = false;
            return s;
          };
          return gilbert;
        };
        var gingeryAzimuthalEquidistant = d3.geo.azimuthalEquidistant.raw;
        function gingery(ρ, n) {
          var k = 2 * π / n, ρ2 = ρ * ρ;
          function forward(λ, φ) {
            var p = gingeryAzimuthalEquidistant(λ, φ), x = p[0], y = p[1], r2 = x * x + y * y;
            if (r2 > ρ2) {
              var r = Math.sqrt(r2), θ = Math.atan2(y, x), θ0 = k * Math.round(θ / k), α = θ - θ0, ρcosα = ρ * Math.cos(α), k_ = (ρ * Math.sin(α) - α * Math.sin(ρcosα)) / (halfπ - ρcosα), s_ = arcLength_(α, k_), e = (π - ρ) / gingeryIntegrate(s_, ρcosα, π);
              x = r;
              var i = 50, δ;
              do {
                x -= δ = (ρ + gingeryIntegrate(s_, ρcosα, x) * e - r) / (s_(x) * e);
              } while (Math.abs(δ) > ε && --i > 0);
              y = α * Math.sin(x);
              if (x < halfπ) y -= k_ * (x - halfπ);
              var s = Math.sin(θ0), c = Math.cos(θ0);
              p[0] = x * c - y * s;
              p[1] = x * s + y * c;
            }
            return p;
          }
          forward.invert = function(x, y) {
            var r2 = x * x + y * y;
            if (r2 > ρ2) {
              var r = Math.sqrt(r2), θ = Math.atan2(y, x), θ0 = k * Math.round(θ / k), dθ = θ - θ0, x = r * Math.cos(dθ);
              y = r * Math.sin(dθ);
              var x_halfπ = x - halfπ, sinx = Math.sin(x), α = y / sinx, δ = x < halfπ ? Infinity : 0, i = 10;
              while (true) {
                var ρsinα = ρ * Math.sin(α), ρcosα = ρ * Math.cos(α), sinρcosα = Math.sin(ρcosα), halfπ_ρcosα = halfπ - ρcosα, k_ = (ρsinα - α * sinρcosα) / halfπ_ρcosα, s_ = arcLength_(α, k_);
                if (Math.abs(δ) < ε2 || !--i) break;
                α -= δ = (α * sinx - k_ * x_halfπ - y) / (sinx - x_halfπ * 2 * (halfπ_ρcosα * (ρcosα + α * ρsinα * Math.cos(ρcosα) - sinρcosα) - ρsinα * (ρsinα - α * sinρcosα)) / (halfπ_ρcosα * halfπ_ρcosα));
              }
              r = ρ + gingeryIntegrate(s_, ρcosα, x) * (π - ρ) / gingeryIntegrate(s_, ρcosα, π);
              θ = θ0 + α;
              x = r * Math.cos(θ);
              y = r * Math.sin(θ);
            }
            return gingeryAzimuthalEquidistant.invert(x, y);
          };
          return forward;
        }
        function arcLength_(α, k) {
          return function(x) {
            var y_ = α * Math.cos(x);
            if (x < halfπ) y_ -= k;
            return Math.sqrt(1 + y_ * y_);
          };
        }
        function gingeryProjection() {
          var n = 6, ρ = 30 * radians, cρ = Math.cos(ρ), sρ = Math.sin(ρ), m = projectionMutator(gingery), p = m(ρ, n), stream_ = p.stream, ε = .01, cr = -Math.cos(ε * radians), sr = Math.sin(ε * radians);
          p.radius = function(_) {
            if (!arguments.length) return ρ * degrees;
            cρ = Math.cos(ρ = _ * radians);
            sρ = Math.sin(ρ);
            return m(ρ, n);
          };
          p.lobes = function(_) {
            if (!arguments.length) return n;
            return m(ρ, n = +_);
          };
          p.stream = function(stream) {
            var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), 
            stream_(stream));
            p.rotate(rotate);
            rotateStream.sphere = function() {
              sphereStream.polygonStart(), sphereStream.lineStart();
              for (var i = 0, δ = 2 * π / n, φ = 0; i < n; ++i, φ -= δ) {
                sphereStream.point(Math.atan2(sr * Math.cos(φ), cr) * degrees, Math.asin(sr * Math.sin(φ)) * degrees);
                sphereStream.point(Math.atan2(sρ * Math.cos(φ - δ / 2), cρ) * degrees, Math.asin(sρ * Math.sin(φ - δ / 2)) * degrees);
              }
              sphereStream.lineEnd(), sphereStream.polygonEnd();
            };
            return rotateStream;
          };
          return p;
        }
        function gingeryIntegrate(f, a, b) {
          var n = 50, h = (b - a) / n, s = f(a) + f(b);
          for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);
          return s * .5 * h;
        }
        (d3.geo.gingery = gingeryProjection).raw = gingery;
        function ginzburgPolyconic(a, b, c, d, e, f, g, h) {
          if (arguments.length < 8) h = 0;
          function forward(λ, φ) {
            if (!φ) return [ a * λ / π, 0 ];
            var φ2 = φ * φ, xB = a + φ2 * (b + φ2 * (c + φ2 * d)), yB = φ * (e - 1 + φ2 * (f - h + φ2 * g)), m = (xB * xB + yB * yB) / (2 * yB), α = λ * Math.asin(xB / m) / π;
            return [ m * Math.sin(α), φ * (1 + φ2 * h) + m * (1 - Math.cos(α)) ];
          }
          forward.invert = function(x, y) {
            var λ = π * x / a, φ = y, δλ, δφ, i = 50;
            do {
              var φ2 = φ * φ, xB = a + φ2 * (b + φ2 * (c + φ2 * d)), yB = φ * (e - 1 + φ2 * (f - h + φ2 * g)), p = xB * xB + yB * yB, q = 2 * yB, m = p / q, m2 = m * m, dαdλ = Math.asin(xB / m) / π, α = λ * dαdλ;
              xB2 = xB * xB, dxBdφ = (2 * b + φ2 * (4 * c + φ2 * 6 * d)) * φ, dyBdφ = e + φ2 * (3 * f + φ2 * 5 * g), 
              dpdφ = 2 * (xB * dxBdφ + yB * (dyBdφ - 1)), dqdφ = 2 * (dyBdφ - 1), dmdφ = (dpdφ * q - p * dqdφ) / (q * q), 
              cosα = Math.cos(α), sinα = Math.sin(α), mcosα = m * cosα, msinα = m * sinα, dαdφ = λ / π * (1 / asqrt(1 - xB2 / m2)) * (dxBdφ * m - xB * dmdφ) / m2, 
              fx = msinα - x, fy = φ * (1 + φ2 * h) + m - mcosα - y, δxδφ = dmdφ * sinα + mcosα * dαdφ, 
              δxδλ = mcosα * dαdλ, δyδφ = 1 + dmdφ - (dmdφ * cosα - msinα * dαdφ), δyδλ = msinα * dαdλ, 
              denominator = δxδφ * δyδλ - δyδφ * δxδλ;
              if (!denominator) break;
              λ -= δλ = (fy * δxδφ - fx * δyδφ) / denominator;
              φ -= δφ = (fx * δyδλ - fy * δxδλ) / denominator;
            } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
            return [ λ, φ ];
          };
          return forward;
        }
        var ginzburg4 = ginzburgPolyconic(2.8284, -1.6988, .75432, -.18071, 1.76003, -.38914, .042555);
        (d3.geo.ginzburg4 = function() {
          return projection(ginzburg4);
        }).raw = ginzburg4;
        var ginzburg5 = ginzburgPolyconic(2.583819, -.835827, .170354, -.038094, 1.543313, -.411435, .082742);
        (d3.geo.ginzburg5 = function() {
          return projection(ginzburg5);
        }).raw = ginzburg5;
        var ginzburg6 = ginzburgPolyconic(5 / 6 * π, -.62636, -.0344, 0, 1.3493, -.05524, 0, .045);
        (d3.geo.ginzburg6 = function() {
          return projection(ginzburg6);
        }).raw = ginzburg6;
        function ginzburg8(λ, φ) {
          var λ2 = λ * λ, φ2 = φ * φ;
          return [ λ * (1 - .162388 * φ2) * (.87 - 952426e-9 * λ2 * λ2), φ * (1 + φ2 / 12) ];
        }
        ginzburg8.invert = function(x, y) {
          var λ = x, φ = y, i = 50, δ;
          do {
            var φ2 = φ * φ;
            φ -= δ = (φ * (1 + φ2 / 12) - y) / (1 + φ2 / 4);
          } while (Math.abs(δ) > ε && --i > 0);
          i = 50;
          x /= 1 - .162388 * φ2;
          do {
            var λ4 = (λ4 = λ * λ) * λ4;
            λ -= δ = (λ * (.87 - 952426e-9 * λ4) - x) / (.87 - .00476213 * λ4);
          } while (Math.abs(δ) > ε && --i > 0);
          return [ λ, φ ];
        };
        (d3.geo.ginzburg8 = function() {
          return projection(ginzburg8);
        }).raw = ginzburg8;
        var ginzburg9 = ginzburgPolyconic(2.6516, -.76534, .19123, -.047094, 1.36289, -.13965, .031762);
        (d3.geo.ginzburg9 = function() {
          return projection(ginzburg9);
        }).raw = ginzburg9;
        function quincuncialProjection(projectHemisphere) {
          var dx = projectHemisphere(halfπ, 0)[0] - projectHemisphere(-halfπ, 0)[0];
          function projection() {
            var quincuncial = false, m = projectionMutator(projectAt), p = m(quincuncial);
            p.quincuncial = function(_) {
              if (!arguments.length) return quincuncial;
              return m(quincuncial = !!_);
            };
            return p;
          }
          function projectAt(quincuncial) {
            var forward = quincuncial ? function(λ, φ) {
              var t = Math.abs(λ) < halfπ, p = projectHemisphere(t ? λ : λ > 0 ? λ - π : λ + π, φ);
              var x = (p[0] - p[1]) * Math.SQRT1_2, y = (p[0] + p[1]) * Math.SQRT1_2;
              if (t) return [ x, y ];
              var d = dx * Math.SQRT1_2, s = x > 0 ^ y > 0 ? -1 : 1;
              return [ s * x - sgn(y) * d, s * y - sgn(x) * d ];
            } : function(λ, φ) {
              var s = λ > 0 ? -.5 : .5, point = projectHemisphere(λ + s * π, φ);
              point[0] -= s * dx;
              return point;
            };
            if (projectHemisphere.invert) forward.invert = quincuncial ? function(x0, y0) {
              var x = (x0 + y0) * Math.SQRT1_2, y = (y0 - x0) * Math.SQRT1_2, t = Math.abs(x) < .5 * dx && Math.abs(y) < .5 * dx;
              if (!t) {
                var d = dx * Math.SQRT1_2, s = x > 0 ^ y > 0 ? -1 : 1, x1 = -s * (x0 + (y > 0 ? 1 : -1) * d), y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);
                x = (-x1 - y1) * Math.SQRT1_2;
                y = (x1 - y1) * Math.SQRT1_2;
              }
              var p = projectHemisphere.invert(x, y);
              if (!t) p[0] += x > 0 ? π : -π;
              return p;
            } : function(x, y) {
              var s = x > 0 ? -.5 : .5, location = projectHemisphere.invert(x + s * dx, y), λ = location[0] - s * π;
              if (λ < -π) λ += 2 * π; else if (λ > π) λ -= 2 * π;
              location[0] = λ;
              return location;
            };
            return forward;
          }
          projection.raw = projectAt;
          return projection;
        }
        function gringorten(λ, φ) {
          var sλ = sgn(λ), sφ = sgn(φ), cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(sφ * φ);
          λ = Math.abs(Math.atan2(y, z));
          φ = asin(x);
          if (Math.abs(λ - halfπ) > ε) λ %= halfπ;
          var point = gringortenHexadecant(λ > π / 4 ? halfπ - λ : λ, φ);
          if (λ > π / 4) z = point[0], point[0] = -point[1], point[1] = -z;
          return point[0] *= sλ, point[1] *= -sφ, point;
        }
        gringorten.invert = function(x, y) {
          var sx = sgn(x), sy = sgn(y), x0 = -sx * x, y0 = -sy * y, t = y0 / x0 < 1, p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0), λ = p[0], φ = p[1];
          if (t) λ = -halfπ - λ;
          var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ);
          return [ sx * (Math.atan2(y, -z) + π), sy * asin(x) ];
        };
        function gringortenHexadecant(λ, φ) {
          if (φ === halfπ) return [ 0, 0 ];
          var sinφ = Math.sin(φ), r = sinφ * sinφ, r2 = r * r, j = 1 + r2, k = 1 + 3 * r2, q = 1 - r2, z = asin(1 / Math.sqrt(j)), v = q + r * j * z, p2 = (1 - sinφ) / v, p = Math.sqrt(p2), a2 = p2 * j, a = Math.sqrt(a2), h = p * q;
          if (λ === 0) return [ 0, -(h + r * a) ];
          var cosφ = Math.cos(φ), secφ = 1 / cosφ, drdφ = 2 * sinφ * cosφ, dvdφ = (-3 * r + z * k) * drdφ, dp2dφ = (-v * cosφ - (1 - sinφ) * dvdφ) / (v * v), dpdφ = .5 * dp2dφ / p, dhdφ = q * dpdφ - 2 * r * p * drdφ, dra2dφ = r * j * dp2dφ + p2 * k * drdφ, μ = -secφ * drdφ, ν = -secφ * dra2dφ, ζ = -2 * secφ * dhdφ, Λ = 4 * λ / π;
          if (λ > .222 * π || φ < π / 4 && λ > .175 * π) {
            var x = (h + r * asqrt(a2 * (1 + r2) - h * h)) / (1 + r2);
            if (λ > π / 4) return [ x, x ];
            var x1 = x, x0 = .5 * x, i = 50;
            x = .5 * (x0 + x1);
            do {
              var g = Math.sqrt(a2 - x * x), f = x * (ζ + μ * g) + ν * asin(x / a) - Λ;
              if (!f) break;
              if (f < 0) x0 = x; else x1 = x;
              x = .5 * (x0 + x1);
            } while (Math.abs(x1 - x0) > ε && --i > 0);
          } else {
            var x = ε, i = 25, δ;
            do {
              var x2 = x * x, g = asqrt(a2 - x2), ζμg = ζ + μ * g, f = x * ζμg + ν * asin(x / a) - Λ, df = ζμg + (ν - μ * x2) / g;
              x -= δ = g ? f / df : 0;
            } while (Math.abs(δ) > ε && --i > 0);
          }
          return [ x, -h - r * asqrt(a2 - x * x) ];
        }
        function gringortenHexadecantInvert(x, y) {
          var x0 = 0, x1 = 1, r = .5, i = 50;
          while (true) {
            var r2 = r * r, sinφ = Math.sqrt(r), z = Math.asin(1 / Math.sqrt(1 + r2)), v = 1 - r2 + r * (1 + r2) * z, p2 = (1 - sinφ) / v, p = Math.sqrt(p2), a2 = p2 * (1 + r2), h = p * (1 - r2), g2 = a2 - x * x, g = Math.sqrt(g2), y0 = y + h + r * g;
            if (Math.abs(x1 - x0) < ε2 || --i === 0 || y0 === 0) break;
            if (y0 > 0) x0 = r; else x1 = r;
            r = .5 * (x0 + x1);
          }
          if (!i) return null;
          var φ = Math.asin(sinφ), cosφ = Math.cos(φ), secφ = 1 / cosφ, drdφ = 2 * sinφ * cosφ, dvdφ = (-3 * r + z * (1 + 3 * r2)) * drdφ, dp2dφ = (-v * cosφ - (1 - sinφ) * dvdφ) / (v * v), dpdφ = .5 * dp2dφ / p, dhdφ = (1 - r2) * dpdφ - 2 * r * p * drdφ, ζ = -2 * secφ * dhdφ, μ = -secφ * drdφ, ν = -secφ * (r * (1 + r2) * dp2dφ + p2 * (1 + 3 * r2) * drdφ);
          return [ π / 4 * (x * (ζ + μ * g) + ν * Math.asin(x / Math.sqrt(a2))), φ ];
        }
        d3.geo.gringorten = quincuncialProjection(gringorten);
        function ellipticJi(u, v, m) {
          if (!u) {
            var b = ellipticJ(v, 1 - m);
            return [ [ 0, b[0] / b[1] ], [ 1 / b[1], 0 ], [ b[2] / b[1], 0 ] ];
          }
          var a = ellipticJ(u, m);
          if (!v) return [ [ a[0], 0 ], [ a[1], 0 ], [ a[2], 0 ] ];
          var b = ellipticJ(v, 1 - m), denominator = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];
          return [ [ a[0] * b[2] / denominator, a[1] * a[2] * b[0] * b[1] / denominator ], [ a[1] * b[1] / denominator, -a[0] * a[2] * b[0] * b[2] / denominator ], [ a[2] * b[1] * b[2] / denominator, -m * a[0] * a[1] * b[0] / denominator ] ];
        }
        function ellipticJ(u, m) {
          var ai, b, φ, t, twon;
          if (m < ε) {
            t = Math.sin(u);
            b = Math.cos(u);
            ai = .25 * m * (u - t * b);
            return [ t - ai * b, b + ai * t, 1 - .5 * m * t * t, u - ai ];
          }
          if (m >= 1 - ε) {
            ai = .25 * (1 - m);
            b = cosh(u);
            t = tanh(u);
            φ = 1 / b;
            twon = b * sinh(u);
            return [ t + ai * (twon - u) / (b * b), φ - ai * t * φ * (twon - u), φ + ai * t * φ * (twon + u), 2 * Math.atan(Math.exp(u)) - halfπ + ai * (twon - u) / b ];
          }
          var a = [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], c = [ Math.sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0 ], i = 0;
          b = Math.sqrt(1 - m);
          twon = 1;
          while (Math.abs(c[i] / a[i]) > ε && i < 8) {
            ai = a[i++];
            c[i] = .5 * (ai - b);
            a[i] = .5 * (ai + b);
            b = asqrt(ai * b);
            twon *= 2;
          }
          φ = twon * a[i] * u;
          do {
            t = c[i] * Math.sin(b = φ) / a[i];
            φ = .5 * (asin(t) + φ);
          } while (--i);
          return [ Math.sin(φ), t = Math.cos(φ), t / Math.cos(φ - b), φ ];
        }
        function ellipticFi(φ, ψ, m) {
          var r = Math.abs(φ), i = Math.abs(ψ), sinhψ = sinh(i);
          if (r) {
            var cscφ = 1 / Math.sin(r), cotφ2 = 1 / (Math.tan(r) * Math.tan(r)), b = -(cotφ2 + m * sinhψ * sinhψ * cscφ * cscφ - 1 + m), c = (m - 1) * cotφ2, cotλ2 = .5 * (-b + Math.sqrt(b * b - 4 * c));
            return [ ellipticF(Math.atan(1 / Math.sqrt(cotλ2)), m) * sgn(φ), ellipticF(Math.atan(asqrt((cotλ2 / cotφ2 - 1) / m)), 1 - m) * sgn(ψ) ];
          }
          return [ 0, ellipticF(Math.atan(sinhψ), 1 - m) * sgn(ψ) ];
        }
        function ellipticF(φ, m) {
          if (!m) return φ;
          if (m === 1) return Math.log(Math.tan(φ / 2 + π / 4));
          var a = 1, b = Math.sqrt(1 - m), c = Math.sqrt(m);
          for (var i = 0; Math.abs(c) > ε; i++) {
            if (φ % π) {
              var dφ = Math.atan(b * Math.tan(φ) / a);
              if (dφ < 0) dφ += π;
              φ += dφ + ~~(φ / π) * π;
            } else φ += φ;
            c = (a + b) / 2;
            b = Math.sqrt(a * b);
            c = ((a = c) - b) / 2;
          }
          return φ / (Math.pow(2, i) * a);
        }
        function guyou(λ, φ) {
          var k_ = (Math.SQRT2 - 1) / (Math.SQRT2 + 1), k = Math.sqrt(1 - k_ * k_), K = ellipticF(halfπ, k * k), f = -1;
          var ψ = Math.log(Math.tan(π / 4 + Math.abs(φ) / 2)), r = Math.exp(f * ψ) / Math.sqrt(k_), at = guyouComplexAtan(r * Math.cos(f * λ), r * Math.sin(f * λ)), t = ellipticFi(at[0], at[1], k * k);
          return [ -t[1], (φ >= 0 ? 1 : -1) * (.5 * K - t[0]) ];
        }
        function guyouComplexAtan(x, y) {
          var x2 = x * x, y_1 = y + 1, t = 1 - x2 - y * y;
          return [ .5 * ((x >= 0 ? halfπ : -halfπ) - Math.atan2(t, 2 * x)), -.25 * Math.log(t * t + 4 * x2) + .5 * Math.log(y_1 * y_1 + x2) ];
        }
        function guyouComplexDivide(a, b) {
          var denominator = b[0] * b[0] + b[1] * b[1];
          return [ (a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator ];
        }
        guyou.invert = function(x, y) {
          var k_ = (Math.SQRT2 - 1) / (Math.SQRT2 + 1), k = Math.sqrt(1 - k_ * k_), K = ellipticF(halfπ, k * k), f = -1;
          var j = ellipticJi(.5 * K - y, -x, k * k), tn = guyouComplexDivide(j[0], j[1]), λ = Math.atan2(tn[1], tn[0]) / f;
          return [ λ, 2 * Math.atan(Math.exp(.5 / f * Math.log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfπ ];
        };
        d3.geo.guyou = quincuncialProjection(guyou);
        function hammerRetroazimuthal(φ0) {
          var sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), rotate = hammerRetroazimuthalRotation(φ0);
          rotate.invert = hammerRetroazimuthalRotation(-φ0);
          function forward(λ, φ) {
            var p = rotate(λ, φ);
            λ = p[0], φ = p[1];
            var sinφ = Math.sin(φ), cosφ = Math.cos(φ), cosλ = Math.cos(λ), z = acos(sinφ0 * sinφ + cosφ0 * cosφ * cosλ), sinz = Math.sin(z), K = Math.abs(sinz) > ε ? z / sinz : 1;
            return [ K * cosφ0 * Math.sin(λ), (Math.abs(λ) > halfπ ? K : -K) * (sinφ0 * cosφ - cosφ0 * sinφ * cosλ) ];
          }
          forward.invert = function(x, y) {
            var ρ = Math.sqrt(x * x + y * y), sinz = -Math.sin(ρ), cosz = Math.cos(ρ), a = ρ * cosz, b = -y * sinz, c = ρ * sinφ0, d = asqrt(a * a + b * b - c * c), φ = Math.atan2(a * c + b * d, b * c - a * d), λ = (ρ > halfπ ? -1 : 1) * Math.atan2(x * sinz, ρ * Math.cos(φ) * cosz + y * Math.sin(φ) * sinz);
            return rotate.invert(λ, φ);
          };
          return forward;
        }
        function hammerRetroazimuthalRotation(φ0) {
          var sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0);
          return function(λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ);
            return [ Math.atan2(y, x * cosφ0 - z * sinφ0), asin(z * cosφ0 + x * sinφ0) ];
          };
        }
        function hammerRetroazimuthalProjection() {
          var φ0 = 0, m = projectionMutator(hammerRetroazimuthal), p = m(φ0), rotate_ = p.rotate, stream_ = p.stream, circle = d3.geo.circle();
          p.parallel = function(_) {
            if (!arguments.length) return φ0 / π * 180;
            var r = p.rotate();
            return m(φ0 = _ * π / 180).rotate(r);
          };
          p.rotate = function(_) {
            if (!arguments.length) return _ = rotate_.call(p), _[1] += φ0 / π * 180, _;
            rotate_.call(p, [ _[0], _[1] - φ0 / π * 180 ]);
            circle.origin([ -_[0], -_[1] ]);
            return p;
          };
          p.stream = function(stream) {
            stream = stream_(stream);
            stream.sphere = function() {
              stream.polygonStart();
              var ε = .01, ring = circle.angle(90 - ε)().coordinates[0], n = ring.length - 1, i = -1, p;
              stream.lineStart();
              while (++i < n) stream.point((p = ring[i])[0], p[1]);
              stream.lineEnd();
              ring = circle.angle(90 + ε)().coordinates[0];
              n = ring.length - 1;
              stream.lineStart();
              while (--i >= 0) stream.point((p = ring[i])[0], p[1]);
              stream.lineEnd();
              stream.polygonEnd();
            };
            return stream;
          };
          return p;
        }
        (d3.geo.hammerRetroazimuthal = hammerRetroazimuthalProjection).raw = hammerRetroazimuthal;
        var hammerAzimuthalEqualArea = d3.geo.azimuthalEqualArea.raw;
        function hammer(A, B) {
          if (arguments.length < 2) B = A;
          if (B === 1) return hammerAzimuthalEqualArea;
          if (B === Infinity) return hammerQuarticAuthalic;
          function forward(λ, φ) {
            var coordinates = hammerAzimuthalEqualArea(λ / B, φ);
            coordinates[0] *= A;
            return coordinates;
          }
          forward.invert = function(x, y) {
            var coordinates = hammerAzimuthalEqualArea.invert(x / A, y);
            coordinates[0] *= B;
            return coordinates;
          };
          return forward;
        }
        function hammerProjection() {
          var B = 2, m = projectionMutator(hammer), p = m(B);
          p.coefficient = function(_) {
            if (!arguments.length) return B;
            return m(B = +_);
          };
          return p;
        }
        function hammerQuarticAuthalic(λ, φ) {
          return [ λ * Math.cos(φ) / Math.cos(φ /= 2), 2 * Math.sin(φ) ];
        }
        hammerQuarticAuthalic.invert = function(x, y) {
          var φ = 2 * asin(y / 2);
          return [ x * Math.cos(φ / 2) / Math.cos(φ), φ ];
        };
        (d3.geo.hammer = hammerProjection).raw = hammer;
        function hatano(λ, φ) {
          var c = Math.sin(φ) * (φ < 0 ? 2.43763 : 2.67595);
          for (var i = 0, δ; i < 20; i++) {
            φ -= δ = (φ + Math.sin(φ) - c) / (1 + Math.cos(φ));
            if (Math.abs(δ) < ε) break;
          }
          return [ .85 * λ * Math.cos(φ *= .5), Math.sin(φ) * (φ < 0 ? 1.93052 : 1.75859) ];
        }
        hatano.invert = function(x, y) {
          var θ = Math.abs(θ = y * (y < 0 ? .5179951515653813 : .5686373742600607)) > 1 - ε ? θ > 0 ? halfπ : -halfπ : asin(θ);
          return [ 1.1764705882352942 * x / Math.cos(θ), Math.abs(θ = ((θ += θ) + Math.sin(θ)) * (y < 0 ? .4102345310814193 : .3736990601468637)) > 1 - ε ? θ > 0 ? halfπ : -halfπ : asin(θ) ];
        };
        (d3.geo.hatano = function() {
          return projection(hatano);
        }).raw = hatano;
        var healpixParallel = 41 + 48 / 36 + 37 / 3600;
        function healpix(h) {
          var lambert = d3.geo.cylindricalEqualArea.raw(0), φ0 = healpixParallel * π / 180, dx0 = 2 * π, dx1 = d3.geo.collignon.raw(π, φ0)[0] - d3.geo.collignon.raw(-π, φ0)[0], y0 = lambert(0, φ0)[1], y1 = d3.geo.collignon.raw(0, φ0)[1], dy1 = d3.geo.collignon.raw(0, halfπ)[1] - y1, k = 2 * π / h;
          function forward(λ, φ) {
            var point, φ2 = Math.abs(φ);
            if (φ2 > φ0) {
              var i = Math.min(h - 1, Math.max(0, Math.floor((λ + π) / k)));
              λ += π * (h - 1) / h - i * k;
              point = d3.geo.collignon.raw(λ, φ2);
              point[0] = point[0] * dx0 / dx1 - dx0 * (h - 1) / (2 * h) + i * dx0 / h;
              point[1] = y0 + (point[1] - y1) * 4 * dy1 / dx0;
              if (φ < 0) point[1] = -point[1];
            } else {
              point = lambert(λ, φ);
            }
            point[0] /= 2;
            return point;
          }
          forward.invert = function(x, y) {
            x *= 2;
            var y2 = Math.abs(y);
            if (y2 > y0) {
              var i = Math.min(h - 1, Math.max(0, Math.floor((x + π) / k)));
              x = (x + π * (h - 1) / h - i * k) * dx1 / dx0;
              var point = d3.geo.collignon.raw.invert(x, .25 * (y2 - y0) * dx0 / dy1 + y1);
              point[0] -= π * (h - 1) / h - i * k;
              if (y < 0) point[1] = -point[1];
              return point;
            }
            return lambert.invert(x, y);
          };
          return forward;
        }
        function healpixProjection() {
          var n = 2, m = projectionMutator(healpix), p = m(n), stream_ = p.stream;
          p.lobes = function(_) {
            if (!arguments.length) return n;
            return m(n = +_);
          };
          p.stream = function(stream) {
            var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), 
            stream_(stream));
            p.rotate(rotate);
            rotateStream.sphere = function() {
              d3.geo.stream(sphere(), sphereStream);
            };
            return rotateStream;
          };
          function sphere() {
            var step = 180 / n;
            return {
              type: "Polygon",
              coordinates: [ d3.range(-180, 180 + step / 2, step).map(function(x, i) {
                return [ x, i & 1 ? 90 - 1e-6 : healpixParallel ];
              }).concat(d3.range(180, -180 - step / 2, -step).map(function(x, i) {
                return [ x, i & 1 ? -90 + 1e-6 : -healpixParallel ];
              })) ]
            };
          }
          return p;
        }
        (d3.geo.healpix = healpixProjection).raw = healpix;
        function hill(K) {
          var L = 1 + K, sinβ = Math.sin(1 / L), β = asin(sinβ), A = 2 * Math.sqrt(π / (B = π + 4 * β * L)), B, ρ0 = .5 * A * (L + Math.sqrt(K * (2 + K))), K2 = K * K, L2 = L * L;
          function forward(λ, φ) {
            var t = 1 - Math.sin(φ), ρ, ω;
            if (t && t < 2) {
              var θ = halfπ - φ, i = 25, δ;
              do {
                var sinθ = Math.sin(θ), cosθ = Math.cos(θ), β_β1 = β + Math.atan2(sinθ, L - cosθ), C = 1 + L2 - 2 * L * cosθ;
                θ -= δ = (θ - K2 * β - L * sinθ + C * β_β1 - .5 * t * B) / (2 * L * sinθ * β_β1);
              } while (Math.abs(δ) > ε2 && --i > 0);
              ρ = A * Math.sqrt(C);
              ω = λ * β_β1 / π;
            } else {
              ρ = A * (K + t);
              ω = λ * β / π;
            }
            return [ ρ * Math.sin(ω), ρ0 - ρ * Math.cos(ω) ];
          }
          forward.invert = function(x, y) {
            var ρ2 = x * x + (y -= ρ0) * y, cosθ = (1 + L2 - ρ2 / (A * A)) / (2 * L), θ = acos(cosθ), sinθ = Math.sin(θ), β_β1 = β + Math.atan2(sinθ, L - cosθ);
            return [ asin(x / Math.sqrt(ρ2)) * π / β_β1, asin(1 - 2 * (θ - K2 * β - L * sinθ + (1 + L2 - 2 * L * cosθ) * β_β1) / B) ];
          };
          return forward;
        }
        function hillProjection() {
          var K = 1, m = projectionMutator(hill), p = m(K);
          p.ratio = function(_) {
            if (!arguments.length) return K;
            return m(K = +_);
          };
          return p;
        }
        (d3.geo.hill = hillProjection).raw = hill;
        var sinuMollweideφ = .7109889596207567, sinuMollweideY = .0528035274542;
        function sinuMollweide(λ, φ) {
          return φ > -sinuMollweideφ ? (λ = mollweide(λ, φ), λ[1] += sinuMollweideY, λ) : sinusoidal(λ, φ);
        }
        sinuMollweide.invert = function(x, y) {
          return y > -sinuMollweideφ ? mollweide.invert(x, y - sinuMollweideY) : sinusoidal.invert(x, y);
        };
        (d3.geo.sinuMollweide = function() {
          return projection(sinuMollweide).rotate([ -20, -55 ]);
        }).raw = sinuMollweide;
        function homolosine(λ, φ) {
          return Math.abs(φ) > sinuMollweideφ ? (λ = mollweide(λ, φ), λ[1] -= φ > 0 ? sinuMollweideY : -sinuMollweideY, 
          λ) : sinusoidal(λ, φ);
        }
        homolosine.invert = function(x, y) {
          return Math.abs(y) > sinuMollweideφ ? mollweide.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidal.invert(x, y);
        };
        (d3.geo.homolosine = function() {
          return projection(homolosine);
        }).raw = homolosine;
        function kavrayskiy7(λ, φ) {
          return [ 3 * λ / (2 * π) * Math.sqrt(π * π / 3 - φ * φ), φ ];
        }
        kavrayskiy7.invert = function(x, y) {
          return [ 2 / 3 * π * x / Math.sqrt(π * π / 3 - y * y), y ];
        };
        (d3.geo.kavrayskiy7 = function() {
          return projection(kavrayskiy7);
        }).raw = kavrayskiy7;
        function lagrange(n) {
          function forward(λ, φ) {
            if (Math.abs(Math.abs(φ) - halfπ) < ε) return [ 0, φ < 0 ? -2 : 2 ];
            var sinφ = Math.sin(φ), v = Math.pow((1 + sinφ) / (1 - sinφ), n / 2), c = .5 * (v + 1 / v) + Math.cos(λ *= n);
            return [ 2 * Math.sin(λ) / c, (v - 1 / v) / c ];
          }
          forward.invert = function(x, y) {
            var y0 = Math.abs(y);
            if (Math.abs(y0 - 2) < ε) return x ? null : [ 0, sgn(y) * halfπ ];
            if (y0 > 2) return null;
            x /= 2, y /= 2;
            var x2 = x * x, y2 = y * y, t = 2 * y / (1 + x2 + y2);
            t = Math.pow((1 + t) / (1 - t), 1 / n);
            return [ Math.atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1)) ];
          };
          return forward;
        }
        function lagrangeProjection() {
          var n = .5, m = projectionMutator(lagrange), p = m(n);
          p.spacing = function(_) {
            if (!arguments.length) return n;
            return m(n = +_);
          };
          return p;
        }
        (d3.geo.lagrange = lagrangeProjection).raw = lagrange;
        function larrivee(λ, φ) {
          return [ λ * (1 + Math.sqrt(Math.cos(φ))) / 2, φ / (Math.cos(φ / 2) * Math.cos(λ / 6)) ];
        }
        larrivee.invert = function(x, y) {
          var x0 = Math.abs(x), y0 = Math.abs(y), π_sqrt2 = π / Math.SQRT2, λ = ε, φ = halfπ;
          if (y0 < π_sqrt2) φ *= y0 / π_sqrt2; else λ += 6 * acos(π_sqrt2 / y0);
          for (var i = 0; i < 25; i++) {
            var sinφ = Math.sin(φ), sqrtcosφ = asqrt(Math.cos(φ)), sinφ_2 = Math.sin(φ / 2), cosφ_2 = Math.cos(φ / 2), sinλ_6 = Math.sin(λ / 6), cosλ_6 = Math.cos(λ / 6), f0 = .5 * λ * (1 + sqrtcosφ) - x0, f1 = φ / (cosφ_2 * cosλ_6) - y0, df0dφ = sqrtcosφ ? -.25 * λ * sinφ / sqrtcosφ : 0, df0dλ = .5 * (1 + sqrtcosφ), df1dφ = (1 + .5 * φ * sinφ_2 / cosφ_2) / (cosφ_2 * cosλ_6), df1dλ = φ / cosφ_2 * (sinλ_6 / 6) / (cosλ_6 * cosλ_6), denom = df0dφ * df1dλ - df1dφ * df0dλ, dφ = (f0 * df1dλ - f1 * df0dλ) / denom, dλ = (f1 * df0dφ - f0 * df1dφ) / denom;
            φ -= dφ;
            λ -= dλ;
            if (Math.abs(dφ) < ε && Math.abs(dλ) < ε) break;
          }
          return [ x < 0 ? -λ : λ, y < 0 ? -φ : φ ];
        };
        (d3.geo.larrivee = function() {
          return projection(larrivee);
        }).raw = larrivee;
        function laskowski(λ, φ) {
          var λ2 = λ * λ, φ2 = φ * φ;
          return [ λ * (.975534 + φ2 * (-.119161 + λ2 * -.0143059 + φ2 * -.0547009)), φ * (1.00384 + λ2 * (.0802894 + φ2 * -.02855 + λ2 * 199025e-9) + φ2 * (.0998909 + φ2 * -.0491032)) ];
        }
        laskowski.invert = function(x, y) {
          var λ = sgn(x) * π, φ = y / 2, i = 50;
          do {
            var λ2 = λ * λ, φ2 = φ * φ, λφ = λ * φ, fx = λ * (.975534 + φ2 * (-.119161 + λ2 * -.0143059 + φ2 * -.0547009)) - x, fy = φ * (1.00384 + λ2 * (.0802894 + φ2 * -.02855 + λ2 * 199025e-9) + φ2 * (.0998909 + φ2 * -.0491032)) - y, δxδλ = .975534 - φ2 * (.119161 + 3 * λ2 * .0143059 + φ2 * .0547009), δxδφ = -λφ * (2 * .119161 + 4 * .0547009 * φ2 + 2 * .0143059 * λ2), δyδλ = λφ * (2 * .0802894 + 4 * 199025e-9 * λ2 + 2 * -.02855 * φ2), δyδφ = 1.00384 + λ2 * (.0802894 + 199025e-9 * λ2) + φ2 * (3 * (.0998909 - .02855 * λ2) - 5 * .0491032 * φ2), denominator = δxδφ * δyδλ - δyδφ * δxδλ, δλ = (fy * δxδφ - fx * δyδφ) / denominator, δφ = (fx * δyδλ - fy * δxδλ) / denominator;
            λ -= δλ, φ -= δφ;
          } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
          return i && [ λ, φ ];
        };
        (d3.geo.laskowski = function() {
          return projection(laskowski);
        }).raw = laskowski;
        function littrow(λ, φ) {
          return [ Math.sin(λ) / Math.cos(φ), Math.tan(φ) * Math.cos(λ) ];
        }
        littrow.invert = function(x, y) {
          var x2 = x * x, y2 = y * y, y2_1 = y2 + 1, cosφ = x ? Math.SQRT1_2 * Math.sqrt((y2_1 - Math.sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1) : 1 / Math.sqrt(y2_1);
          return [ asin(x * cosφ), sgn(y) * acos(cosφ) ];
        };
        (d3.geo.littrow = function() {
          return projection(littrow);
        }).raw = littrow;
        function loximuthal(φ0) {
          var cosφ0 = Math.cos(φ0), tanφ0 = Math.tan(π / 4 + φ0 / 2);
          function forward(λ, φ) {
            var y = φ - φ0, x = Math.abs(y) < ε ? λ * cosφ0 : Math.abs(x = π / 4 + φ / 2) < ε || Math.abs(Math.abs(x) - halfπ) < ε ? 0 : λ * y / Math.log(Math.tan(x) / tanφ0);
            return [ x, y ];
          }
          forward.invert = function(x, y) {
            var λ, φ = y + φ0;
            return [ Math.abs(y) < ε ? x / cosφ0 : Math.abs(λ = π / 4 + φ / 2) < ε || Math.abs(Math.abs(λ) - halfπ) < ε ? 0 : x * Math.log(Math.tan(λ) / tanφ0) / y, φ ];
          };
          return forward;
        }
        (d3.geo.loximuthal = function() {
          return parallel1Projection(loximuthal).parallel(40);
        }).raw = loximuthal;
        function miller(λ, φ) {
          return [ λ, 1.25 * Math.log(Math.tan(π / 4 + .4 * φ)) ];
        }
        miller.invert = function(x, y) {
          return [ x, 2.5 * Math.atan(Math.exp(.8 * y)) - .625 * π ];
        };
        (d3.geo.miller = function() {
          return projection(miller);
        }).raw = miller;
        function modifiedStereographic(C) {
          var m = C.length - 1;
          function forward(λ, φ) {
            var cosφ = Math.cos(φ), k = 2 / (1 + cosφ * Math.cos(λ)), zr = k * cosφ * Math.sin(λ), zi = k * Math.sin(φ), i = m, w = C[i], ar = w[0], ai = w[1], t;
            while (--i >= 0) {
              w = C[i];
              ar = w[0] + zr * (t = ar) - zi * ai;
              ai = w[1] + zr * ai + zi * t;
            }
            ar = zr * (t = ar) - zi * ai;
            ai = zr * ai + zi * t;
            return [ ar, ai ];
          }
          forward.invert = function(x, y) {
            var i = 20, zr = x, zi = y;
            do {
              var j = m, w = C[j], ar = w[0], ai = w[1], br = 0, bi = 0, t;
              while (--j >= 0) {
                w = C[j];
                br = ar + zr * (t = br) - zi * bi;
                bi = ai + zr * bi + zi * t;
                ar = w[0] + zr * (t = ar) - zi * ai;
                ai = w[1] + zr * ai + zi * t;
              }
              br = ar + zr * (t = br) - zi * bi;
              bi = ai + zr * bi + zi * t;
              ar = zr * (t = ar) - zi * ai - x;
              ai = zr * ai + zi * t - y;
              var denominator = br * br + bi * bi, δr, δi;
              zr -= δr = (ar * br + ai * bi) / denominator;
              zi -= δi = (ai * br - ar * bi) / denominator;
            } while (Math.abs(δr) + Math.abs(δi) > ε * ε && --i > 0);
            if (i) {
              var ρ = Math.sqrt(zr * zr + zi * zi), c = 2 * Math.atan(ρ * .5), sinc = Math.sin(c);
              return [ Math.atan2(zr * sinc, ρ * Math.cos(c)), ρ ? asin(zi * sinc / ρ) : 0 ];
            }
          };
          return forward;
        }
        var modifiedStereographicCoefficients = {
          alaska: [ [ .9972523, 0 ], [ .0052513, -.0041175 ], [ .0074606, .0048125 ], [ -.0153783, -.1968253 ], [ .0636871, -.1408027 ], [ .3660976, -.2937382 ] ],
          gs48: [ [ .98879, 0 ], [ 0, 0 ], [ -.050909, 0 ], [ 0, 0 ], [ .075528, 0 ] ],
          gs50: [ [ .984299, 0 ], [ .0211642, .0037608 ], [ -.1036018, -.0575102 ], [ -.0329095, -.0320119 ], [ .0499471, .1223335 ], [ .026046, .0899805 ], [ 7388e-7, -.1435792 ], [ .0075848, -.1334108 ], [ -.0216473, .0776645 ], [ -.0225161, .0853673 ] ],
          miller: [ [ .9245, 0 ], [ 0, 0 ], [ .01943, 0 ] ],
          lee: [ [ .721316, 0 ], [ 0, 0 ], [ -.00881625, -.00617325 ] ]
        };
        function modifiedStereographicProjection() {
          var coefficients = modifiedStereographicCoefficients.miller, m = projectionMutator(modifiedStereographic), p = m(coefficients);
          p.coefficients = function(_) {
            if (!arguments.length) return coefficients;
            return m(coefficients = typeof _ === "string" ? modifiedStereographicCoefficients[_] : _);
          };
          return p;
        }
        (d3.geo.modifiedStereographic = modifiedStereographicProjection).raw = modifiedStereographic;
        function mtFlatPolarParabolic(λ, φ) {
          var sqrt6 = Math.sqrt(6), sqrt7 = Math.sqrt(7), θ = Math.asin(7 * Math.sin(φ) / (3 * sqrt6));
          return [ sqrt6 * λ * (2 * Math.cos(2 * θ / 3) - 1) / sqrt7, 9 * Math.sin(θ / 3) / sqrt7 ];
        }
        mtFlatPolarParabolic.invert = function(x, y) {
          var sqrt6 = Math.sqrt(6), sqrt7 = Math.sqrt(7), θ = 3 * asin(y * sqrt7 / 9);
          return [ x * sqrt7 / (sqrt6 * (2 * Math.cos(2 * θ / 3) - 1)), asin(Math.sin(θ) * 3 * sqrt6 / 7) ];
        };
        (d3.geo.mtFlatPolarParabolic = function() {
          return projection(mtFlatPolarParabolic);
        }).raw = mtFlatPolarParabolic;
        function mtFlatPolarQuartic(λ, φ) {
          var k = (1 + Math.SQRT1_2) * Math.sin(φ), θ = φ;
          for (var i = 0, δ; i < 25; i++) {
            θ -= δ = (Math.sin(θ / 2) + Math.sin(θ) - k) / (.5 * Math.cos(θ / 2) + Math.cos(θ));
            if (Math.abs(δ) < ε) break;
          }
          return [ λ * (1 + 2 * Math.cos(θ) / Math.cos(θ / 2)) / (3 * Math.SQRT2), 2 * Math.sqrt(3) * Math.sin(θ / 2) / Math.sqrt(2 + Math.SQRT2) ];
        }
        mtFlatPolarQuartic.invert = function(x, y) {
          var sinθ_2 = y * Math.sqrt(2 + Math.SQRT2) / (2 * Math.sqrt(3)), θ = 2 * asin(sinθ_2);
          return [ 3 * Math.SQRT2 * x / (1 + 2 * Math.cos(θ) / Math.cos(θ / 2)), asin((sinθ_2 + Math.sin(θ)) / (1 + Math.SQRT1_2)) ];
        };
        (d3.geo.mtFlatPolarQuartic = function() {
          return projection(mtFlatPolarQuartic);
        }).raw = mtFlatPolarQuartic;
        function mtFlatPolarSinusoidal(λ, φ) {
          var A = Math.sqrt(6 / (4 + π)), k = (1 + π / 4) * Math.sin(φ), θ = φ / 2;
          for (var i = 0, δ; i < 25; i++) {
            θ -= δ = (θ / 2 + Math.sin(θ) - k) / (.5 + Math.cos(θ));
            if (Math.abs(δ) < ε) break;
          }
          return [ A * (.5 + Math.cos(θ)) * λ / 1.5, A * θ ];
        }
        mtFlatPolarSinusoidal.invert = function(x, y) {
          var A = Math.sqrt(6 / (4 + π)), θ = y / A;
          if (Math.abs(Math.abs(θ) - halfπ) < ε) θ = θ < 0 ? -halfπ : halfπ;
          return [ 1.5 * x / (A * (.5 + Math.cos(θ))), asin((θ / 2 + Math.sin(θ)) / (1 + π / 4)) ];
        };
        (d3.geo.mtFlatPolarSinusoidal = function() {
          return projection(mtFlatPolarSinusoidal);
        }).raw = mtFlatPolarSinusoidal;
        function naturalEarth(λ, φ) {
          var φ2 = φ * φ, φ4 = φ2 * φ2;
          return [ λ * (.8707 - .131979 * φ2 + φ4 * (-.013791 + φ4 * (.003971 * φ2 - .001529 * φ4))), φ * (1.007226 + φ2 * (.015085 + φ4 * (-.044475 + .028874 * φ2 - .005916 * φ4))) ];
        }
        naturalEarth.invert = function(x, y) {
          var φ = y, i = 25, δ;
          do {
            var φ2 = φ * φ, φ4 = φ2 * φ2;
            φ -= δ = (φ * (1.007226 + φ2 * (.015085 + φ4 * (-.044475 + .028874 * φ2 - .005916 * φ4))) - y) / (1.007226 + φ2 * (.015085 * 3 + φ4 * (-.044475 * 7 + .028874 * 9 * φ2 - .005916 * 11 * φ4)));
          } while (Math.abs(δ) > ε && --i > 0);
          return [ x / (.8707 + (φ2 = φ * φ) * (-.131979 + φ2 * (-.013791 + φ2 * φ2 * φ2 * (.003971 - .001529 * φ2)))), φ ];
        };
        (d3.geo.naturalEarth = function() {
          return projection(naturalEarth);
        }).raw = naturalEarth;
        function nellHammer(λ, φ) {
          return [ λ * (1 + Math.cos(φ)) / 2, 2 * (φ - Math.tan(φ / 2)) ];
        }
        nellHammer.invert = function(x, y) {
          var p = y / 2;
          for (var i = 0, δ = Infinity; i < 10 && Math.abs(δ) > ε; i++) {
            var c = Math.cos(y / 2);
            y -= δ = (y - Math.tan(y / 2) - p) / (1 - .5 / (c * c));
          }
          return [ 2 * x / (1 + Math.cos(y)), y ];
        };
        (d3.geo.nellHammer = function() {
          return projection(nellHammer);
        }).raw = nellHammer;
        var pattersonK1 = 1.0148, pattersonK2 = .23185, pattersonK3 = -.14499, pattersonK4 = .02406, pattersonC1 = pattersonK1, pattersonC2 = 5 * pattersonK2, pattersonC3 = 7 * pattersonK3, pattersonC4 = 9 * pattersonK4, pattersonYmax = 1.790857183;
        function patterson(λ, φ) {
          var φ2 = φ * φ;
          return [ λ, φ * (pattersonK1 + φ2 * φ2 * (pattersonK2 + φ2 * (pattersonK3 + pattersonK4 * φ2))) ];
        }
        patterson.invert = function(x, y) {
          if (y > pattersonYmax) y = pattersonYmax; else if (y < -pattersonYmax) y = -pattersonYmax;
          var yc = y, δ;
          do {
            var y2 = yc * yc;
            yc -= δ = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));
          } while (Math.abs(δ) > ε);
          return [ x, yc ];
        };
        (d3.geo.patterson = function() {
          return projection(patterson);
        }).raw = patterson;
        var peirceQuincuncialProjection = quincuncialProjection(guyou);
        (d3.geo.peirceQuincuncial = function() {
          return peirceQuincuncialProjection().quincuncial(true).rotate([ -90, -90, 45 ]).clipAngle(180 - 1e-6);
        }).raw = peirceQuincuncialProjection.raw;
        function polyconic(λ, φ) {
          if (Math.abs(φ) < ε) return [ λ, 0 ];
          var tanφ = Math.tan(φ), k = λ * Math.sin(φ);
          return [ Math.sin(k) / tanφ, φ + (1 - Math.cos(k)) / tanφ ];
        }
        polyconic.invert = function(x, y) {
          if (Math.abs(y) < ε) return [ x, 0 ];
          var k = x * x + y * y, φ = y * .5, i = 10, δ;
          do {
            var tanφ = Math.tan(φ), secφ = 1 / Math.cos(φ), j = k - 2 * y * φ + φ * φ;
            φ -= δ = (tanφ * j + 2 * (φ - y)) / (2 + j * secφ * secφ + 2 * (φ - y) * tanφ);
          } while (Math.abs(δ) > ε && --i > 0);
          tanφ = Math.tan(φ);
          return [ (Math.abs(y) < Math.abs(φ + 1 / tanφ) ? asin(x * tanφ) : sgn(x) * (acos(Math.abs(x * tanφ)) + halfπ)) / Math.sin(φ), φ ];
        };
        (d3.geo.polyconic = function() {
          return projection(polyconic);
        }).raw = polyconic;
        function rectangularPolyconic(φ0) {
          var sinφ0 = Math.sin(φ0);
          function forward(λ, φ) {
            var A = sinφ0 ? Math.tan(λ * sinφ0 / 2) / sinφ0 : λ / 2;
            if (!φ) return [ 2 * A, -φ0 ];
            var E = 2 * Math.atan(A * Math.sin(φ)), cotφ = 1 / Math.tan(φ);
            return [ Math.sin(E) * cotφ, φ + (1 - Math.cos(E)) * cotφ - φ0 ];
          }
          forward.invert = function(x, y) {
            if (Math.abs(y += φ0) < ε) return [ sinφ0 ? 2 * Math.atan(sinφ0 * x / 2) / sinφ0 : x, 0 ];
            var k = x * x + y * y, φ = 0, i = 10, δ;
            do {
              var tanφ = Math.tan(φ), secφ = 1 / Math.cos(φ), j = k - 2 * y * φ + φ * φ;
              φ -= δ = (tanφ * j + 2 * (φ - y)) / (2 + j * secφ * secφ + 2 * (φ - y) * tanφ);
            } while (Math.abs(δ) > ε && --i > 0);
            var E = x * (tanφ = Math.tan(φ)), A = Math.tan(Math.abs(y) < Math.abs(φ + 1 / tanφ) ? asin(E) * .5 : acos(E) * .5 + π / 4) / Math.sin(φ);
            return [ sinφ0 ? 2 * Math.atan(sinφ0 * A) / sinφ0 : 2 * A, φ ];
          };
          return forward;
        }
        (d3.geo.rectangularPolyconic = function() {
          return parallel1Projection(rectangularPolyconic);
        }).raw = rectangularPolyconic;
        var robinsonConstants = [ [ .9986, -.062 ], [ 1, 0 ], [ .9986, .062 ], [ .9954, .124 ], [ .99, .186 ], [ .9822, .248 ], [ .973, .31 ], [ .96, .372 ], [ .9427, .434 ], [ .9216, .4958 ], [ .8962, .5571 ], [ .8679, .6176 ], [ .835, .6769 ], [ .7986, .7346 ], [ .7597, .7903 ], [ .7186, .8435 ], [ .6732, .8936 ], [ .6213, .9394 ], [ .5722, .9761 ], [ .5322, 1 ] ];
        robinsonConstants.forEach(function(d) {
          d[1] *= 1.0144;
        });
        function robinson(λ, φ) {
          var i = Math.min(18, Math.abs(φ) * 36 / π), i0 = Math.floor(i), di = i - i0, ax = (k = robinsonConstants[i0])[0], ay = k[1], bx = (k = robinsonConstants[++i0])[0], by = k[1], cx = (k = robinsonConstants[Math.min(19, ++i0)])[0], cy = k[1], k;
          return [ λ * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (φ > 0 ? halfπ : -halfπ) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) ];
        }
        robinson.invert = function(x, y) {
          var yy = y / halfπ, φ = yy * 90, i = Math.min(18, Math.abs(φ / 5)), i0 = Math.max(0, Math.floor(i));
          do {
            var ay = robinsonConstants[i0][1], by = robinsonConstants[i0 + 1][1], cy = robinsonConstants[Math.min(19, i0 + 2)][1], u = cy - ay, v = cy - 2 * by + ay, t = 2 * (Math.abs(yy) - by) / u, c = v / u, di = t * (1 - c * t * (1 - 2 * c * t));
            if (di >= 0 || i0 === 1) {
              φ = (y >= 0 ? 5 : -5) * (di + i);
              var j = 50, δ;
              do {
                i = Math.min(18, Math.abs(φ) / 5);
                i0 = Math.floor(i);
                di = i - i0;
                ay = robinsonConstants[i0][1];
                by = robinsonConstants[i0 + 1][1];
                cy = robinsonConstants[Math.min(19, i0 + 2)][1];
                φ -= (δ = (y >= 0 ? halfπ : -halfπ) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;
              } while (Math.abs(δ) > ε2 && --j > 0);
              break;
            }
          } while (--i0 >= 0);
          var ax = robinsonConstants[i0][0], bx = robinsonConstants[i0 + 1][0], cx = robinsonConstants[Math.min(19, i0 + 2)][0];
          return [ x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), φ * radians ];
        };
        (d3.geo.robinson = function() {
          return projection(robinson);
        }).raw = robinson;
        function satelliteVertical(P) {
          function forward(λ, φ) {
            var cosφ = Math.cos(φ), k = (P - 1) / (P - cosφ * Math.cos(λ));
            return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
          }
          forward.invert = function(x, y) {
            var ρ2 = x * x + y * y, ρ = Math.sqrt(ρ2), sinc = (P - Math.sqrt(1 - ρ2 * (P + 1) / (P - 1))) / ((P - 1) / ρ + ρ / (P - 1));
            return [ Math.atan2(x * sinc, ρ * Math.sqrt(1 - sinc * sinc)), ρ ? asin(y * sinc / ρ) : 0 ];
          };
          return forward;
        }
        function satellite(P, ω) {
          var vertical = satelliteVertical(P);
          if (!ω) return vertical;
          var cosω = Math.cos(ω), sinω = Math.sin(ω);
          function forward(λ, φ) {
            var coordinates = vertical(λ, φ), y = coordinates[1], A = y * sinω / (P - 1) + cosω;
            return [ coordinates[0] * cosω / A, y / A ];
          }
          forward.invert = function(x, y) {
            var k = (P - 1) / (P - 1 - y * sinω);
            return vertical.invert(k * x, k * y * cosω);
          };
          return forward;
        }
        function satelliteProjection() {
          var P = 1.4, ω = 0, m = projectionMutator(satellite), p = m(P, ω);
          p.distance = function(_) {
            if (!arguments.length) return P;
            return m(P = +_, ω);
          };
          p.tilt = function(_) {
            if (!arguments.length) return ω * 180 / π;
            return m(P, ω = _ * π / 180);
          };
          return p;
        }
        (d3.geo.satellite = satelliteProjection).raw = satellite;
        function times(λ, φ) {
          var t = Math.tan(φ / 2), s = Math.sin(π / 4 * t);
          return [ λ * (.74482 - .34588 * s * s), 1.70711 * t ];
        }
        times.invert = function(x, y) {
          var t = y / 1.70711, s = Math.sin(π / 4 * t);
          return [ x / (.74482 - .34588 * s * s), 2 * Math.atan(t) ];
        };
        (d3.geo.times = function() {
          return projection(times);
        }).raw = times;
        function twoPointEquidistant(z0) {
          if (!z0) return d3.geo.azimuthalEquidistant.raw;
          var λa = -z0 / 2, λb = -λa, z02 = z0 * z0, tanλ0 = Math.tan(λb), S = .5 / Math.sin(λb);
          function forward(λ, φ) {
            var za = acos(Math.cos(φ) * Math.cos(λ - λa)), zb = acos(Math.cos(φ) * Math.cos(λ - λb)), ys = φ < 0 ? -1 : 1;
            za *= za, zb *= zb;
            return [ (za - zb) / (2 * z0), ys * asqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0) ];
          }
          forward.invert = function(x, y) {
            var y2 = y * y, cosza = Math.cos(Math.sqrt(y2 + (t = x + λa) * t)), coszb = Math.cos(Math.sqrt(y2 + (t = x + λb) * t)), t, d;
            return [ Math.atan2(d = cosza - coszb, t = (cosza + coszb) * tanλ0), (y < 0 ? -1 : 1) * acos(Math.sqrt(t * t + d * d) * S) ];
          };
          return forward;
        }
        function twoPointEquidistantProjection() {
          var points = [ [ 0, 0 ], [ 0, 0 ] ], m = projectionMutator(twoPointEquidistant), p = m(0), rotate = p.rotate;
          delete p.rotate;
          p.points = function(_) {
            if (!arguments.length) return points;
            points = _;
            var interpolate = d3.geo.interpolate(_[0], _[1]), origin = interpolate(.5), p = d3.geo.rotation([ -origin[0], -origin[1] ])(_[0]), b = interpolate.distance * .5, γ = -asin(Math.sin(p[1] * radians) / Math.sin(b));
            if (p[0] > 0) γ = π - γ;
            rotate.call(p, [ -origin[0], -origin[1], -γ * degrees ]);
            return m(b * 2);
          };
          return p;
        }
        (d3.geo.twoPointEquidistant = twoPointEquidistantProjection).raw = twoPointEquidistant;
        function twoPointAzimuthal(d) {
          var cosd = Math.cos(d);
          function forward(λ, φ) {
            var coordinates = d3.geo.gnomonic.raw(λ, φ);
            coordinates[0] *= cosd;
            return coordinates;
          }
          forward.invert = function(x, y) {
            return d3.geo.gnomonic.raw.invert(x / cosd, y);
          };
          return forward;
        }
        function twoPointAzimuthalProjection() {
          var points = [ [ 0, 0 ], [ 0, 0 ] ], m = projectionMutator(twoPointAzimuthal), p = m(0), rotate = p.rotate;
          delete p.rotate;
          p.points = function(_) {
            if (!arguments.length) return points;
            points = _;
            var interpolate = d3.geo.interpolate(_[0], _[1]), origin = interpolate(.5), p = d3.geo.rotation([ -origin[0], -origin[1] ])(_[0]), b = interpolate.distance * .5, γ = -asin(Math.sin(p[1] * radians) / Math.sin(b));
            if (p[0] > 0) γ = π - γ;
            rotate.call(p, [ -origin[0], -origin[1], -γ * degrees ]);
            return m(b);
          };
          return p;
        }
        (d3.geo.twoPointAzimuthal = twoPointAzimuthalProjection).raw = twoPointAzimuthal;
        function vanDerGrinten(λ, φ) {
          if (Math.abs(φ) < ε) return [ λ, 0 ];
          var sinθ = Math.abs(φ / halfπ), θ = asin(sinθ);
          if (Math.abs(λ) < ε || Math.abs(Math.abs(φ) - halfπ) < ε) return [ 0, sgn(φ) * π * Math.tan(θ / 2) ];
          var cosθ = Math.cos(θ), A = Math.abs(π / λ - λ / π) / 2, A2 = A * A, G = cosθ / (sinθ + cosθ - 1), P = G * (2 / sinθ - 1), P2 = P * P, P2_A2 = P2 + A2, G_P2 = G - P2, Q = A2 + G;
          return [ sgn(λ) * π * (A * G_P2 + Math.sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sgn(φ) * π * (P * Q - A * Math.sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2 ];
        }
        vanDerGrinten.invert = function(x, y) {
          if (Math.abs(y) < ε) return [ x, 0 ];
          if (Math.abs(x) < ε) return [ 0, halfπ * Math.sin(2 * Math.atan(y / π)) ];
          var x2 = (x /= π) * x, y2 = (y /= π) * y, x2_y2 = x2 + y2, z = x2_y2 * x2_y2, c1 = -Math.abs(y) * (1 + x2_y2), c2 = c1 - 2 * y2 + x2, c3 = -2 * c1 + 1 + 2 * y2 + z, d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27, a1 = (c1 - c2 * c2 / (3 * c3)) / c3, m1 = 2 * Math.sqrt(-a1 / 3), θ1 = acos(3 * d / (a1 * m1)) / 3;
          return [ π * (x2_y2 - 1 + Math.sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sgn(y) * π * (-m1 * Math.cos(θ1 + π / 3) - c2 / (3 * c3)) ];
        };
        (d3.geo.vanDerGrinten = function() {
          return projection(vanDerGrinten);
        }).raw = vanDerGrinten;
        function vanDerGrinten2(λ, φ) {
          if (Math.abs(φ) < ε) return [ λ, 0 ];
          var sinθ = Math.abs(φ / halfπ), θ = asin(sinθ);
          if (Math.abs(λ) < ε || Math.abs(Math.abs(φ) - halfπ) < ε) return [ 0, sgn(φ) * π * Math.tan(θ / 2) ];
          var cosθ = Math.cos(θ), A = Math.abs(π / λ - λ / π) / 2, A2 = A * A, x1 = cosθ * (Math.sqrt(1 + A2) - A * cosθ) / (1 + A2 * sinθ * sinθ);
          return [ sgn(λ) * π * x1, sgn(φ) * π * asqrt(1 - x1 * (2 * A + x1)) ];
        }
        vanDerGrinten2.invert = function(x, y) {
          if (!x) return [ 0, halfπ * Math.sin(2 * Math.atan(y / π)) ];
          var x1 = Math.abs(x / π), A = (1 - x1 * x1 - (y /= π) * y) / (2 * x1), A2 = A * A, B = Math.sqrt(A2 + 1);
          return [ sgn(x) * π * (B - A), sgn(y) * halfπ * Math.sin(2 * Math.atan2(Math.sqrt((1 - 2 * A * x1) * (A + B) - x1), Math.sqrt(B + A + x1))) ];
        };
        (d3.geo.vanDerGrinten2 = function() {
          return projection(vanDerGrinten2);
        }).raw = vanDerGrinten2;
        function vanDerGrinten3(λ, φ) {
          if (Math.abs(φ) < ε) return [ λ, 0 ];
          var sinθ = φ / halfπ, θ = asin(sinθ);
          if (Math.abs(λ) < ε || Math.abs(Math.abs(φ) - halfπ) < ε) return [ 0, π * Math.tan(θ / 2) ];
          var A = (π / λ - λ / π) / 2, y1 = sinθ / (1 + Math.cos(θ));
          return [ π * (sgn(λ) * asqrt(A * A + 1 - y1 * y1) - A), π * y1 ];
        }
        vanDerGrinten3.invert = function(x, y) {
          if (!y) return [ x, 0 ];
          var y1 = y / π, A = (π * π * (1 - y1 * y1) - x * x) / (2 * π * x);
          return [ x ? π * (sgn(x) * Math.sqrt(A * A + 1) - A) : 0, halfπ * Math.sin(2 * Math.atan(y1)) ];
        };
        (d3.geo.vanDerGrinten3 = function() {
          return projection(vanDerGrinten3);
        }).raw = vanDerGrinten3;
        function vanDerGrinten4(λ, φ) {
          if (!φ) return [ λ, 0 ];
          var φ0 = Math.abs(φ);
          if (!λ || φ0 === halfπ) return [ 0, φ ];
          var B = φ0 / halfπ, B2 = B * B, C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)), C2 = C * C, BC = B * C, B_C2 = B2 + C2 + 2 * BC, B_3C = B + 3 * C, λ0 = λ / halfπ, λ1 = λ0 + 1 / λ0, D = sgn(Math.abs(λ) - halfπ) * Math.sqrt(λ1 * λ1 - 4), D2 = D * D, F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2), x1 = (D * (B_C2 + C2 - 1) + 2 * asqrt(F)) / (4 * B_C2 + D2);
          return [ sgn(λ) * halfπ * x1, sgn(φ) * halfπ * asqrt(1 + D * Math.abs(x1) - x1 * x1) ];
        }
        vanDerGrinten4.invert = function(x, y) {
          if (!x || !y) return [ x, y ];
          y /= π;
          var x1 = sgn(x) * x / halfπ, D = (x1 * x1 - 1 + 4 * y * y) / Math.abs(x1), D2 = D * D, B = 2 * y, i = 50;
          do {
            var B2 = B * B, C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)), C_ = (3 * B - B2 * B - 10) / (2 * B2 * B), C2 = C * C, BC = B * C, B_C = B + C, B_C2 = B_C * B_C, B_3C = B + 3 * C, F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)), F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)), sqrtF = Math.sqrt(F), f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2), f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);
            B -= δ = f / f_;
          } while (δ > ε && --i > 0);
          return [ sgn(x) * (Math.sqrt(D * D + 4) + D) * π / 4, halfπ * B ];
        };
        (d3.geo.vanDerGrinten4 = function() {
          return projection(vanDerGrinten4);
        }).raw = vanDerGrinten4;
        var wagner4 = function() {
          var A = 4 * π + 3 * Math.sqrt(3), B = 2 * Math.sqrt(2 * π * Math.sqrt(3) / A);
          return mollweideBromley(B * Math.sqrt(3) / π, B, A / 6);
        }();
        (d3.geo.wagner4 = function() {
          return projection(wagner4);
        }).raw = wagner4;
        function wagner6(λ, φ) {
          return [ λ * Math.sqrt(1 - 3 * φ * φ / (π * π)), φ ];
        }
        wagner6.invert = function(x, y) {
          return [ x / Math.sqrt(1 - 3 * y * y / (π * π)), y ];
        };
        (d3.geo.wagner6 = function() {
          return projection(wagner6);
        }).raw = wagner6;
        function wagner7(λ, φ) {
          var s = .90631 * Math.sin(φ), c0 = Math.sqrt(1 - s * s), c1 = Math.sqrt(2 / (1 + c0 * Math.cos(λ /= 3)));
          return [ 2.66723 * c0 * c1 * Math.sin(λ), 1.24104 * s * c1 ];
        }
        wagner7.invert = function(x, y) {
          var t1 = x / 2.66723, t2 = y / 1.24104, p = Math.sqrt(t1 * t1 + t2 * t2), c = 2 * asin(p / 2);
          return [ 3 * Math.atan2(x * Math.tan(c), 2.66723 * p), p && asin(y * Math.sin(c) / (1.24104 * .90631 * p)) ];
        };
        (d3.geo.wagner7 = function() {
          return projection(wagner7);
        }).raw = wagner7;
        function wiechel(λ, φ) {
          var cosφ = Math.cos(φ), sinφ = Math.cos(λ) * cosφ, sin1_φ = 1 - sinφ, cosλ = Math.cos(λ = Math.atan2(Math.sin(λ) * cosφ, -Math.sin(φ))), sinλ = Math.sin(λ);
          cosφ = asqrt(1 - sinφ * sinφ);
          return [ sinλ * cosφ - cosλ * sin1_φ, -cosλ * cosφ - sinλ * sin1_φ ];
        }
        wiechel.invert = function(x, y) {
          var w = -.5 * (x * x + y * y), k = Math.sqrt(-w * (2 + w)), b = y * w + x * k, a = x * w - y * k, D = Math.sqrt(a * a + b * b);
          return [ Math.atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0 ];
        };
        (d3.geo.wiechel = function() {
          return projection(wiechel);
        }).raw = wiechel;
        function winkel3(λ, φ) {
          var coordinates = aitoff(λ, φ);
          return [ (coordinates[0] + λ / halfπ) / 2, (coordinates[1] + φ) / 2 ];
        }
        winkel3.invert = function(x, y) {
          var λ = x, φ = y, i = 25;
          do {
            var cosφ = Math.cos(φ), sinφ = Math.sin(φ), sin_2φ = Math.sin(2 * φ), sin2φ = sinφ * sinφ, cos2φ = cosφ * cosφ, sinλ = Math.sin(λ), cosλ_2 = Math.cos(λ / 2), sinλ_2 = Math.sin(λ / 2), sin2λ_2 = sinλ_2 * sinλ_2, C = 1 - cos2φ * cosλ_2 * cosλ_2, E = C ? acos(cosφ * cosλ_2) * Math.sqrt(F = 1 / C) : F = 0, F, fx = .5 * (2 * E * cosφ * sinλ_2 + λ / halfπ) - x, fy = .5 * (E * sinφ + φ) - y, δxδλ = .5 * F * (cos2φ * sin2λ_2 + E * cosφ * cosλ_2 * sin2φ) + .5 / halfπ, δxδφ = F * (sinλ * sin_2φ / 4 - E * sinφ * sinλ_2), δyδλ = .125 * F * (sin_2φ * sinλ_2 - E * sinφ * cos2φ * sinλ), δyδφ = .5 * F * (sin2φ * cosλ_2 + E * sin2λ_2 * cosφ) + .5, denominator = δxδφ * δyδλ - δyδφ * δxδλ, δλ = (fy * δxδφ - fx * δyδφ) / denominator, δφ = (fx * δyδλ - fy * δxδλ) / denominator;
            λ -= δλ, φ -= δφ;
          } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
          return [ λ, φ ];
        };
        (d3.geo.winkel3 = function() {
          return projection(winkel3);
        }).raw = winkel3;
      };

      //import Selectlist from './bubblemap-selectlist';

      //BUBBLE MAP CHART COMPONENT
      var BubbleMapComponent = Component.extend({
        /**
         * Initializes the component (Bubble Map Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The config passed to the component
         * @param {Object} context The component's parent
         */
        init: function (config, context) {
          this.name = 'bubblemap';
          this.template = 'bubblemap.html';
          this.bubblesDrawing = null;


          //http://stackoverflow.com/questions/11381673/detecting-a-mobile-browser
          var mobileAndTabletcheck = function() {
            var check = false;
            (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
            return check;
          };
          this.isMobile = mobileAndTabletcheck();

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }, {
            name: "ui",
            type: "model"
          }];

          var _this = this;
          this.model_binds = {
            "change:time.value": function (evt) {
              if (!_this._readyOnce) return;
              _this.year.setText(_this.model.time.timeFormat(_this.model.time.value));
              _this.model.marker.getFrame(_this.model.time.value, _this.frameChanged.bind(_this));
            },
            "change:entities.highlight": function (evt) {
              if (!_this._readyOnce) return;
              _this.highlightEntities();
              _this.updateOpacity();
            },
            "change:marker": function(evt, path) {
              // bubble size change is processed separately
              if(!_this._readyOnce) return;

              if(path.indexOf("scaleType") > -1) {
                _this.redrawDataPoints(null, false);
                // ready is not needed because new data are not needed, just reposition _this.ready(); 
              }
            },
            'change:marker.size.extent': function(evt, path) {
              //console.log("EVENT change:marker:size:max");
              if(!_this._readyOnce || !_this.entityBubbles) return;
              _this.updateMarkerSizeLimits();
              _this.redrawDataPoints(null, false);
            },
            "change:marker.color.palette": function (evt, path) {
                if (!_this._readyOnce) return;
                _this.redrawDataPoints(null, false);
            },
            "change:entities.select": function (evt) {
                if (!_this._readyOnce) return;
                _this.selectEntities();
                _this.redrawDataPoints(null, false);
                _this.updateOpacity();
                _this.updateDoubtOpacity();
                
            },
            "change:entities.opacitySelectDim": function (evt) {
                _this.updateOpacity();
            },
            "change:entities.opacityRegular": function (evt) {
                _this.updateOpacity();
            },
          };

          //this._selectlist = new Selectlist(this);

          //contructor is the same as any component
          this._super(config, context);

          this.sScale = null;
          this.cScale = d3.scale.category10();

          _this.COLOR_WHITEISH = "#fdfdfd";
            
          this.defaultWidth = 960;
          this.defaultHeight = 500;
          this.boundBox = [[0.02, 0], [1.0, 0.85]]; // two points to set box bound on 960 * 500 image;

          d3_geo_projection();
        },


        afterPreload: function(){
          if(!this.world) warn("bubble map afterPreload: missing country shapes " + this.world);
            
          // http://bl.ocks.org/mbostock/d4021aa4dccfd65edffd patterson
          // http://bl.ocks.org/mbostock/3710566 robinson
          // map background
          var defaultWidth = this.defaultWidth;
          var defaultHeight = this.defaultHeight;
          var world = this.world;
          var projection = this.projection = d3.geo.robinson()
              .scale(150)
              .translate([defaultWidth / 2, defaultHeight / 2])
              .precision(.1);

          var path = this.bgPath = d3.geo.path()
              .projection(projection);

          var svg = this.mapGraph = d3.select(this.element).select(".vzb-bmc-map-graph")
              .attr("width", defaultWidth)
              .attr("height", defaultHeight);
          svg.html('');

          /* // no latlng line
          svg.append("defs").append("path")
              .datum({type: "Sphere"})
              .attr("id", "sphere")
              .attr("d", path);

          svg.append("use")
              .attr("class", "stroke")
              .attr("xlink:href", "#sphere");

          svg.append("use")
              .attr("class", "fill")
              .attr("xlink:href", "#sphere");

          svg.append("path")
              .datum(graticule)
              .attr("class", "graticule")
              .attr("d", path);
          */

          svg.insert("path", ".graticule")
              .datum(topojson.feature(world, world.objects.land))
              .attr("class", "land")
              .attr("d", path);

          svg.insert("path", ".graticule")
              .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
              .attr("class", "boundary")
              .attr("d", path);
              
          this.labels = this.parent.findChildByName('gapminder-labels');
          this.labels.config({
            CSS_PREFIX: 'vzb-bmc',
            TOOL_CONTEXT: this,
            LABELS_CONTAINER_CLASS: 'vzb-bmc-labels',
            LINES_CONTAINER_CLASS: 'vzb-bmc-lines'
          });
          
        },

        /**
         * DOM is ready
         */
        readyOnce: function () {

          this.element = d3.select(this.element);

          this.graph = this.element.select('.vzb-bmc-graph');
          this.mapSvg = this.element.select('.vzb-bmc-map-background');

          this.bubbleContainerCrop = this.graph.select('.vzb-bmc-bubbles-crop');
          this.bubbleContainer = this.graph.select('.vzb-bmc-bubbles');
          this.labelListContainer = this.graph.select('.vzb-bmc-bubble-labels');
          this.dataWarningEl = this.graph.select(".vzb-data-warning");

          this.yTitleEl = this.graph.select(".vzb-bmc-axis-y-title");
          this.cTitleEl = this.graph.select(".vzb-bmc-axis-c-title");
          this.yInfoEl = this.graph.select(".vzb-bmc-axis-y-info");
          this.cInfoEl = this.graph.select(".vzb-bmc-axis-c-info");

          this.entityBubbles = null;
          this.tooltip = this.element.select('.vzb-bmc-tooltip');

          // year background
          this.yearEl = this.graph.select('.vzb-bmc-year');
          this.year = new DynamicBackground(this.yearEl);
          this.year.setConditions({xAlign: 'left', yAlign: 'bottom', bottomOffset: 5});

          var _this = this;
          this.on("resize", function () {
            //return if updatesize exists with error
            if(_this.updateSize()) return;
            _this.updateMarkerSizeLimits();
            _this.labels.updateSize();
            _this.redrawDataPoints();
            //_this._selectlist.redraw();
            
          });

          this.KEY = this.model.entities.getDimension();
          this.TIMEDIM = this.model.time.getDimension();
            
            
          this.updateUIStrings();

          this.wScale = d3.scale.linear()
              .domain(this.parent.datawarning_content.doubtDomain)
              .range(this.parent.datawarning_content.doubtRange);

        },

        /*
         * Both model and DOM are ready
         */
        ready: function () {
          var _this = this;
          this.updateUIStrings();
          this.updateIndicators();
          this.updateSize();
          this.updateMarkerSizeLimits();
          this.model.marker.getFrame(this.model.time.value, function(values, time) {
            // TODO: temporary fix for case when after data loading time changed on validation
            if (time.toString() != _this.model.time.value.toString()) {
              defer(function() {
                _this.ready();
              });
              return;
            } // frame is outdated
            
            if (!values) return;
            _this.values = values;
            _this.updateEntities();
            _this.updateTime();
            _this.redrawDataPoints();
            _this.highlightEntities();
            _this.selectEntities();
      //    this._selectlist.redraw();
            _this.updateDoubtOpacity();
            _this.updateOpacity();
            _this.year.setText(_this.model.time.timeFormat(_this.model.time.value));        
          });

        },

        frameChanged: function(frame, time) {
          if (time.toString() != this.model.time.value.toString()) return; // frame is outdated
          if (!frame) return;
          
          this.values = frame;
          this.updateTime();
          this.updateDoubtOpacity();
          this.redrawDataPoints(null, false);

        },
        
        updateUIStrings: function () {
            var _this = this;

            this.translator = this.model.language.getTFunction();    
            var sizeConceptprops = this.model.marker.size.getConceptprops();

            this.strings = {
                title: {
                  S: this.translator("indicator/" + _this.model.marker.size.which),
                  C: this.translator("indicator/" + _this.model.marker.color.which)
                }
            };

            this.yTitleEl.select("text")
                .text(this.translator("buttons/size") + ": " + this.strings.title.S)
                .on("click", function() {
                  _this.parent
                    .findChildByName("gapminder-treemenu")
                    .markerID("size")
                    .alignX("left")
                    .alignY("top")
                    .updateView()
                    .toggle();
                });

            this.cTitleEl.select("text")
                .text(this.translator("buttons/color") + ": " + this.strings.title.C)
                .on("click", function() {
                  _this.parent
                    .findChildByName("gapminder-treemenu")
                    .markerID("color")
                    .alignX("left")
                    .alignY("top")
                    .updateView()
                    .toggle();
                });

            setIcon(this.dataWarningEl, iconWarn).select("svg").attr("width", "0px").attr("height", "0px");
            this.dataWarningEl.append("text")
                .attr("text-anchor", "end")
                .text(this.translator("hints/dataWarning"));

            this.dataWarningEl
                .on("click", function () {
                    _this.parent.findChildByName("gapminder-datawarning").toggle();
                })
                .on("mouseover", function () {
                    _this.updateDoubtOpacity(1);
                })
                .on("mouseout", function () {
                    _this.updateDoubtOpacity();
                })

            this.yInfoEl
                .html(iconQuestion)
                .select("svg").attr("width", "0px").attr("height", "0px");

            //TODO: move away from UI strings, maybe to ready or ready once
            this.yInfoEl.on("click", function() {
              _this.parent.findChildByName("gapminder-datanotes").pin();
            })
            this.yInfoEl.on("mouseover", function() {
              var rect = this.getBBox();
              var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
              _this.parent.findChildByName("gapminder-datanotes").setHook('size').show().setPos(coord.x, coord.y);
            })
            this.yInfoEl.on("mouseout", function() {
              _this.parent.findChildByName("gapminder-datanotes").hide();
            })

            this.cInfoEl
                .html(iconQuestion)
                .select("svg").attr("width", "0px").attr("height", "0px");

            //TODO: move away from UI strings, maybe to ready or ready once
            this.cInfoEl.on("click", function() {
              _this.parent.findChildByName("gapminder-datanotes").pin();
            })
            this.cInfoEl.on("mouseover", function() {
              var rect = this.getBBox();
              var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
              _this.parent.findChildByName("gapminder-datanotes").setHook('color').show().setPos(coord.x, coord.y);
            })
            this.cInfoEl.on("mouseout", function() {
              _this.parent.findChildByName("gapminder-datanotes").hide();
            })
        },

        // show size number on title when hovered on a bubble
        updateTitleNumbers: function(){
            var _this = this;

            var mobile; // if is mobile device and only one bubble is selected, update the ytitle for the bubble
            if (_this.isMobile && _this.model.entities.select && _this.model.entities.select.length === 1) {
              mobile = _this.model.entities.select[0];
            }

            if(_this.hovered || mobile) {
              var hovered = _this.hovered || mobile;
              var formatterS = _this.model.marker.size.getTickFormatter();
              var formatterC = _this.model.marker.color.getTickFormatter();

              var unitY = _this.translator("unit/" + _this.model.marker.size.which);
              var unitC = _this.translator("unit/" + _this.model.marker.color.which);
                
              //suppress unit strings that found no translation (returns same thing as requested)
              if(unitY === "unit/" + _this.model.marker.size.which) unitY = "";
              if(unitC === "unit/" + _this.model.marker.color.which) unitC = "";
                
              var valueS = _this.values.size[hovered[_this.KEY]];
              var valueC = _this.values.color[hovered[_this.KEY]];
                
              _this.yTitleEl.select("text")
                .text(_this.translator("buttons/size") + ": " + formatterS(valueS) + " " + unitY);
                
              _this.cTitleEl.select("text")
                .text(_this.translator("buttons/color") + ": " + 
                  (valueC || valueC===0 ? formatterC(valueC) + " " + unitC : _this.translator("hints/nodata")));

              this.yInfoEl.classed("vzb-hidden", true);
              this.cInfoEl.classed("vzb-hidden", true);
            } else {
              this.yTitleEl.select("text")
                  .text(this.translator("buttons/size") + ": " + this.strings.title.S);
              this.cTitleEl.select("text")
                  .text(this.translator("buttons/color") + ": " + this.strings.title.C);

              this.yInfoEl.classed("vzb-hidden", false);
              this.cInfoEl.classed("vzb-hidden", false || this.cTitleEl.classed('vzb-hidden'));
            }
        },

        updateDoubtOpacity: function (opacity) {
            if (opacity == null) opacity = this.wScale(+this.time.getUTCFullYear().toString());
            if (this.someSelected) opacity = 1;
            this.dataWarningEl.style("opacity", opacity);
        },

        updateOpacity: function () {
            var _this = this;
            /*
            this.entityBubbles.classed("vzb-selected", function (d) {
                return _this.model.entities.isSelected(d);
            });
            */

            var OPACITY_HIGHLT = 1.0;
            var OPACITY_HIGHLT_DIM = .3;
            var OPACITY_SELECT = this.model.entities.opacityRegular;
            var OPACITY_REGULAR = this.model.entities.opacityRegular;
            var OPACITY_SELECT_DIM = this.model.entities.opacitySelectDim;

            this.entityBubbles.style("opacity", function (d) {

                if (_this.someHighlighted) {
                    //highlight or non-highlight
                    if (_this.model.entities.isHighlighted(d)) return OPACITY_HIGHLT;
                }

                if (_this.someSelected) {
                    //selected or non-selected
                    return _this.model.entities.isSelected(d) ? OPACITY_SELECT : OPACITY_SELECT_DIM;
                }

                if (_this.someHighlighted) return OPACITY_HIGHLT_DIM;

                return OPACITY_REGULAR;

            });

            this.entityBubbles.classed("vzb-selected", function (d) {
                return _this.model.entities.isSelected(d)
            });

            var someSelectedAndOpacityZero = _this.someSelected && _this.model.entities.opacitySelectDim < .01;

            // when pointer events need update...
            if (someSelectedAndOpacityZero !== this.someSelectedAndOpacityZero_1) {
                this.entityBubbles.style("pointer-events", function (d) {
                    return (!someSelectedAndOpacityZero || _this.model.entities.isSelected(d)) ?
                        "visible" : "none";
                });
            }

            this.someSelectedAndOpacityZero_1 = _this.someSelected && _this.model.entities.opacitySelectDim < .01;
        },

        /**
         * Changes labels for indicators
         */
        updateIndicators: function () {
          this.sScale = this.model.marker.size.getScale();
          this.cScale = this.model.marker.color.getScale();
        },

        /**
         * Updates entities
         */
        updateEntities: function () {

          var _this = this;
          var KEY = this.KEY;
          var TIMEDIM = this.TIMEDIM;

          var getKeys = function(prefix) {
            prefix = prefix || "";
            return _this.model.marker.getKeys()
              .map(function(d) {
                var pointer = {};
                pointer[KEY] = d[KEY];
                pointer[TIMEDIM] = endTime;
                pointer.sortValue = _this.values.size[d[KEY]]||0;
                pointer[KEY] = prefix + d[KEY];
                return pointer;
              })
              .sort(function(a, b) {
                return b.sortValue - a.sortValue;
              })
          };
            
          // get array of GEOs, sorted by the size hook
          // that makes larger bubbles go behind the smaller ones
          var endTime = this.model.time.end;
          this.model.entities.setVisible(getKeys.call(this));

          //unselecting bubbles with no data is used for the scenario when
          //some bubbles are selected and user would switch indicator.
          //bubbles would disappear but selection would stay
          this.unselectBubblesWithNoData();

          // TODO: add to csv
          //Africa 9.1021° N, 18.2812°E
          //Europe 53.0000° N, 9.0000° E
          //Asia 49.8380° N, 105.8203° E
          //north American 48.1667° N and longitude 100.1667° W
          /*
          var pos = {
            "afr": {lat: 9.1, lng: 18.3},
            "eur": {lat: 53.0, lng: 9.0},
            "asi": {lat: 49.8, lng: 105.8},
            "ame": {lat: 48.2, lng: -100.2},
          };
          */


          this.entityBubbles = this.bubbleContainer.selectAll('.vzb-bmc-bubble')
            .data(this.model.entities.getVisible(), function(d) { return d[KEY]; })
            .order();

          //exit selection
          this.entityBubbles.exit().remove();

          //enter selection -- init circles
          this.entityBubbles.enter().append("circle")
            .attr("class", "vzb-bmc-bubble")
            .on("mouseover", function (d, i) {
                if (isTouchDevice()) return;
                _this._interact()._mouseover(d, i);
            })
            .on("mouseout", function (d, i) {
                if (isTouchDevice()) return;
                _this._interact()._mouseout(d, i);
            })
            .on("click", function (d, i) {
                if (isTouchDevice()) return;
                _this._interact()._click(d, i);
                _this.highlightEntities();
            })
            .onTap(function (d, i) {
                _this._interact()._click(d, i);
                d3.event.stopPropagation();
            })
            .onLongTap(function (d, i) {
            })

        },
          
        unselectBubblesWithNoData: function(frame){
            var _this = this;
            var KEY = this.KEY;
            if(!frame) frame = this.values;
            
            if(!frame || !frame.size) return;
            
            this.model.entities.select.forEach(function(d){
              if(!frame.size[d[KEY]] && frame.size[d[KEY]] !== 0) 
                  _this.model.entities.selectEntity(d);
            })
        },    
          
        redrawDataPoints: function(duration, reposition){
          var _this = this;  
          if(!duration) duration = this.duration;
          if(!reposition) reposition = true;
          this.entityBubbles.each(function(d, index){
            var view = d3.select(this);

            var valueX = _this.values.lng[d[_this.KEY]];
            var valueY = _this.values.lat[d[_this.KEY]];
            var valueS = _this.values.size[d[_this.KEY]];
            var valueC = _this.values.color[d[_this.KEY]];
            var valueL = _this.values.label[d[_this.KEY]];

            d.hidden_1 = d.hidden;
            d.hidden = !valueS || valueX==null || valueY==null;

            if(d.hidden !== d.hidden_1) view.classed("vzb-hidden", d.hidden);
              
            if(!d.hidden){
                
                d.r = areaToRadius(_this.sScale(valueS||0));
                d.label = valueL;
                
                view.classed("vzb-hidden", false)
                    .attr("fill", valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH);
                
                if(reposition){
                    d.cLoc = _this.skew(_this.projection([valueX||0, valueY||0]));
                    
                    view.attr("cx", d.cLoc[0])
                        .attr("cy", d.cLoc[1]);
                }

                if(duration){
                    view.transition().duration(duration).ease("linear")
                        .attr("r", d.r);
                }else{
                    view.interrupt()
                        .attr("r", d.r);
                }

                _this._updateLabel(d, index, d.cLoc[0], d.cLoc[1], valueS, valueC, d.label, duration);
              } else {
                _this._updateLabel(d, index, 0, 0, valueS, valueC, valueL, duration);
              }

            });
        },

        /*
         * UPDATE TIME:
         * Ideally should only update when time or data changes
         */
        updateTime: function() {
          var _this = this;

          this.time_1 = this.time == null ? this.model.time.value : this.time;
          this.time = this.model.time.value;
          this.duration = this.model.time.playing && (this.time - this.time_1 > 0) ? this.model.time.delayAnimations : 0;

          //possibly update the exact value in size title
          this.updateTitleNumbers();
        },

          
        fitSizeOfTitles: function(){
            
          //reset font sizes first to make the measurement consistent
          var yTitleText = this.yTitleEl.select("text")
            .style("font-size", null);
          var cTitleText = this.cTitleEl.select("text")
            .style("font-size", null);    

          var yTitleText = this.yTitleEl.select("text");
          var cTitleText = this.cTitleEl.select("text");

          var yTitleBB = yTitleText.node().getBBox();
          var cTitleBB = this.cTitleEl.classed('vzb-hidden') ? yTitleBB : cTitleText.node().getBBox();

          var font = 
              Math.max(parseInt(yTitleText.style("font-size")), parseInt(cTitleText.style("font-size"))) 
              * this.width / Math.max(yTitleBB.width, cTitleBB.width);
            
          if(Math.max(yTitleBB.width, cTitleBB.width) > this.width) {
            yTitleText.style("font-size", font + "px");
            cTitleText.style("font-size", font + "px");
          } else {
            
            // Else - reset the font size to default so it won't get stuck
            yTitleText.style("font-size", null);
            cTitleText.style("font-size", null);
          }
            
        },
          
          
        /**
         * Executes everytime the container or vizabi is resized
         * Ideally,it contains only operations related to size
         */
        updateSize: function () {

          var _this = this;
          var margin, infoElHeight;

          var profiles = {
            small: {
              margin: { top: 10, right: 10, left: 10, bottom: 0 },
              infoElHeight: 16,
              minRadius: 0.5,
              maxRadius: 30
            },
            medium: {
              margin: { top: 20, right: 20, left: 20, bottom: 30 },
              infoElHeight: 20,
              minRadius: 1,
              maxRadius: 55
            },
            large: {
              margin: { top: 30, right: 30, left: 30, bottom: 35 },
              infoElHeight: 22,
              minRadius: 1,
              maxRadius: 65
            }
          };

          var presentationProfileChanges = {
            medium: {
              infoElHeight: 26
            },
            large: {
              infoElHeight: 32
            }
          };

          this.activeProfile = this.getActiveProfile(profiles, presentationProfileChanges);
          margin = this.activeProfile.margin;
          infoElHeight = this.activeProfile.infoElHeight;

          //stage
          var height = this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          var width = this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;      
            
          if(this.height<=0 || this.width<=0) return warn("Bubble map updateSize() abort: vizabi container is too little or has display:none");
            
          var boundBox = this.boundBox;
          var viewBox = [ boundBox[0][0] * this.defaultWidth,
                          boundBox[0][1] * this.defaultHeight,
                          Math.abs(boundBox[1][0] - boundBox[0][0]) * this.defaultWidth,
                          Math.abs(boundBox[1][1] - boundBox[0][1]) * this.defaultHeight];

          this.graph
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          this.year.resize(this.width, this.height,
            Math.min(this.width/2.5, Math.max(this.height / 4, this.width / 4)) / 2.5);

          this.mapSvg
            .attr('width', width)
            .attr('height', height)
            .attr('viewBox', viewBox.join(' '))
            .attr('preserveAspectRatio', 'none')
            .attr('x', margin.left)
            .attr('y', margin.top)
            .style("transform", "translate3d(" + margin.left + "px," + margin.top + "px,0)");

          //update scales to the new range
          //this.updateMarkerSizeLimits();
          //this.sScale.range([0, this.height / 4]);

          var skew = this.skew = (function () {
            var vb = viewBox;
            var w = width;
            var h = height;
            var vbCenter = [vb[0] + vb[2] / 2, vb[1] + vb[3] / 2];
            var vbWidth = vb[2] || 0.001;
            var vbHeight = vb[3] || 0.001;
            //input pixel loc after projection, return pixel loc after skew;
            return function (points) {
              var x = (points[0] - vbCenter[0]) / vbWidth * width + width / 2;
              var y = (points[1] - vbCenter[1]) / vbHeight * height + height / 2;
              return [x, y];
            }
          }());


          this.yTitleEl
              .style("font-size", infoElHeight)
              .attr("transform", "translate(0," + margin.top + ")")

          var yTitleBB = this.yTitleEl.select("text").node().getBBox();

          this.cTitleEl.attr("transform", "translate(" + 0 + "," + (margin.top + yTitleBB.height) + ")")
              .classed("vzb-hidden", this.model.marker.color.which.indexOf(_this.KEY) != -1 || this.model.marker.color.use == "constant");

          var warnBB = this.dataWarningEl.select("text").node().getBBox();
          this.dataWarningEl.select("svg")
              .attr("width", warnBB.height * 0.75)
              .attr("height", warnBB.height * 0.75)
              .attr("x", -warnBB.width - warnBB.height * 1.2)
              .attr("y", -warnBB.height * 0.65)

          this.dataWarningEl
              .attr("transform", "translate(" + (this.width) + "," + (this.height - warnBB.height * 0.5) + ")")
              .select("text");

          if(this.yInfoEl.select('svg').node()) {
              var titleBBox = this.yTitleEl.node().getBBox();
              var translate = d3.transform(this.yTitleEl.attr('transform')).translate;

              this.yInfoEl.select('svg')
                  .attr("width", infoElHeight)
                  .attr("height", infoElHeight)
              this.yInfoEl.attr('transform', 'translate('
                  + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
                  + (translate[1] - infoElHeight * 0.8) + ')');
          }
          
          this.cInfoEl.classed("vzb-hidden", this.cTitleEl.classed("vzb-hidden"));

          if(!this.cInfoEl.classed("vzb-hidden") && this.cInfoEl.select('svg').node()) {
              var titleBBox = this.cTitleEl.node().getBBox();
              var translate = d3.transform(this.cTitleEl.attr('transform')).translate;

              this.cInfoEl.select('svg')
                  .attr("width", infoElHeight)
                  .attr("height", infoElHeight)
              this.cInfoEl.attr('transform', 'translate('
                  + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
                  + (translate[1] - infoElHeight * 0.8) + ')');
          }
        },

        updateMarkerSizeLimits: function() {
          var _this = this;
          var extent = this.model.marker.size.extent || [0,1];
            
          var minRadius = this.activeProfile.minRadius;
          var maxRadius = this.activeProfile.maxRadius;

          this.minRadius = Math.max(maxRadius * extent[0], minRadius);
          this.maxRadius = Math.max(maxRadius * extent[1], minRadius);

          if(this.model.marker.size.scaleType !== "ordinal") {
            this.sScale.range([radiusToArea(_this.minRadius), radiusToArea(_this.maxRadius)]);
          } else {
            this.sScale.rangePoints([radiusToArea(_this.minRadius), radiusToArea(_this.maxRadius)], 0).range();
          }

        },

        _interact: function () {
            var _this = this;

            return {
                _mouseover: function (d, i) {
                    if (_this.model.time.dragging) return;

                    _this.model.entities.highlightEntity(d);

                    _this.hovered = d;
                    //put the exact value in the size title
                    _this.updateTitleNumbers();
                    _this.fitSizeOfTitles();

                    if (_this.model.entities.isSelected(d)) { // if selected, not show hover tooltip
                      _this._setTooltip();
                    } else {
                      //position tooltip
                      _this._setTooltip(d);
                    }
                },
                _mouseout: function (d, i) {
                    if (_this.model.time.dragging) return;
                    _this._setTooltip();
                    _this.hovered = null;
                    _this.updateTitleNumbers();
                    _this.fitSizeOfTitles();
                    _this.model.entities.clearHighlighted();
                },
                _click: function (d, i) {
                    _this.model.entities.selectEntity(d);
                }
            };

        },


        highlightEntities: function () {
            var _this = this;
            this.someHighlighted = (this.model.entities.highlight.length > 0);


      //      if (!this.selectList || !this.someSelected) return;
      //      this.selectList.classed("vzb-highlight", function (d) {
      //          return _this.model.entities.isHighlighted(d);
      //      });
      //      this.selectList.each(function (d, i) {
      //        d3.select(this).selectAll(".vzb-bmc-label-x")
      //          .classed("vzb-invisible", function(n) {
      //            return !_this.model.entities.isHighlighted(d);
      //          });
      //
      //      });

        },

        _updateLabel: function(d, index, valueX, valueY, valueS, valueC, valueL, duration) {
          var _this = this;
          var KEY = this.KEY;
          if(d[KEY] == _this.druging) return;
          if(duration == null) duration = _this.duration;

          // only for selected entities
          if(_this.model.entities.isSelected(d)) {
            
            var showhide = d.hidden !== d.hidden_1;
            var valueLST = null;
            var cache = {};
            cache.labelX0 = valueX / this.width;
            cache.labelY0 = valueY / this.height;
            cache.scaledS0 = valueS ? areaToRadius(_this.sScale(valueS)) : null;
            cache.scaledC0 = valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH;
                   
            this.labels.updateLabel(d, index, cache, valueX / this.width, valueY / this.height, valueS, valueC, valueL, valueLST, duration, showhide);
          }
        },

        selectEntities: function () {
            var _this = this;
            var KEY = this.KEY;
            this.someSelected = (this.model.entities.select.length > 0);

      //      this._selectlist.rebuild();

            // hide recent hover tooltip
            if (!_this.hovered || _this.model.entities.isSelected(_this.hovered)) {
              _this._setTooltip();
            }

        },

        _setTooltip: function (d) {
          var _this = this;
          if (d) {
            var tooltipText = d.label;
            var x = d.cLoc[0];
            var y = d.cLoc[1];
            var offset = d.r;
            var mouse = d3.mouse(this.graph.node()).map(function(d) {
              return parseInt(d)
            });
            var xPos, yPos, xSign = -1,
              ySign = -1,
              xOffset = 0,
              yOffset = 0;

            if(offset) {
              xOffset = offset * .71; // .71 - sin and cos for 315
              yOffset = offset * .71;
            }
            //position tooltip
            this.tooltip.classed("vzb-hidden", false)
              //.attr("style", "left:" + (mouse[0] + 50) + "px;top:" + (mouse[1] + 50) + "px")
              .selectAll("text")
              .text(tooltipText);

            var contentBBox = this.tooltip.select('text')[0][0].getBBox();
            if(x - xOffset - contentBBox.width < 0) {
              xSign = 1;
              x += contentBBox.width + 5; // corrective to the block Radius and text padding
            } else {
              x -= 5; // corrective to the block Radius and text padding
            }
            if(y - yOffset - contentBBox.height < 0) {
              ySign = 1;
              y += contentBBox.height;
            } else {
              y -= 11; // corrective to the block Radius and text padding
            }
            if(offset) {
              xPos = x + xOffset * xSign;
              yPos = y + yOffset * ySign; // 5 and 11 - corrective to the block Radius and text padding
            } else {
              xPos = x + xOffset * xSign; // .71 - sin and cos for 315
              yPos = y + yOffset * ySign; // 5 and 11 - corrective to the block Radius and text padding
            }
            this.tooltip.attr("transform", "translate(" + (xPos ? xPos : mouse[0]) + "," + (yPos ? yPos : mouse[1]) +
              ")")

            this.tooltip.select('rect').attr("width", contentBBox.width + 8)
              .attr("height", contentBBox.height * 1.2)
              .attr("x", -contentBBox.width - 4)
              .attr("y", -contentBBox.height * .85)
              .attr("rx", contentBBox.height * .2)
              .attr("ry", contentBBox.height * .2);


          } else {

            this.tooltip.classed("vzb-hidden", true);
          }
        }

      });

      //BAR CHART TOOL
      var BubbleMap = Tool.extend('BubbleMap', {


        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "bubblemap";

          //specifying components
          this.components = [{
            component: BubbleMapComponent,
            placeholder: '.vzb-tool-viz',
            model: ["state.time", "state.entities", "state.marker", "language", "ui"] //pass models to component
          }, {
            component: Labels,
            placeholder: '.vzb-tool-labels',
            model: ["state.entities", "state.marker", "ui"]
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }, {
            component: DataWarning,
            placeholder: '.vzb-tool-datawarning',
            model: ['language']
          }, {
            component: DataNotes,
            placeholder: '.vzb-tool-datanotes',
            model: ['state.marker', 'language']
          }
          ];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        },

        default_model: {
          state: {
            time: {},
            entities: {
              dim: "geo",
              show: {
                _defs_: {
                  "geo": ["*"],
                  "geo.cat": ["region"]
                }
              }
            },
            marker: {
              space: ["entities", "time"],
              label: {
                use: "property",
                which: "geo.name"
              },
              axis_y: {
                use: "indicator",
                which: "lex"
              },
              axis_x: {
                use: "property",
                which: "geo.name"
              },
              color: {
                use: "property",
                which: "geo.world_4region"
              }
            }
          },
          ui: {
            chart: {
              labels: {
                dragging: true
              }
            },
            presentation: true
          }
        }
      });

      var prefix = "";
      var deleteClasses = [];
      var SVGHEADER = '<?xml version="1.0" encoding="utf-8"?>';

      var Exporter = Class.extend({

        init: function(context) {
          this.context = context;
          this.shapes = [];
          this.groups = [];
          this.counter = 0;
          this.name = "";
          this.label = "";
        },

        reset: function() {
          this.container.remove();
          this.context.element.selectAll(".vzb-export-redball").remove();
          this.context.element.selectAll(".vzb-export-counter").remove();
          this.counter = 0;
        },

        prefix: function(arg) {
          if(!arguments.length) return prefix;
          prefix = arg;
          return this;
        },
        deleteClasses: function(arg) {
          if(!arguments.length) return deleteClasses;
          deleteClasses = arg;
          return this;
        },

        open: function(element, name) {
          var _this = this;

          //reset if some exports exists on opening
          if(this.svg) this.reset();

          if(!element) element = this.context.element;
          if(!name) name = this.context.name;
          this.name = name;

          var width = parseInt(element.style("width"), 10) || 0;
          var height = parseInt(element.style("height"), 10) || 0;

          this.container = element.append("div").attr("class", "vzb-svg-export");
          this.svg = this.container.node().appendChild(element.select("svg").node().cloneNode(true));
          this.svg = d3.select(this.svg);
          this.svg
            .attr("viewBox", "0 0 " + width + " " + height)
            .attr("version", "1.1")
            .attr("param1", "http://www.w3.org/2000/svg")
            .attr("param2", "http://www.w3.org/1999/xlink")
            .attr("x", "0px")
            .attr("y", "0px")
            .attr("style", "enable-background:new " + "0 0 " + width + " " + height)
            .attr("xml:space", "preserve");

          this.redBall = element.append("div")
            .attr("class", "vzb-export-redball")
            .style("position", "absolute")
            .style("top", "20px")
            .style("right", "20px")
            .style("width", "20px")
            .style("height", "20px")
            .style("background", "red")
            .style("color", "white")
            .style("text-align", "center")
            .style("border-radius", "10px")
            .style("font-size", "14px")
            .style("line-height", "20px")
            .style("opacity", .8)
            .style("cursor", "pointer")
            .on("mouseover", function() {
              d3.select(this).style("opacity", 1).text("▼");
              _this.counterEl.text("Download");
            })
            .on("mouseout", function() {
              d3.select(this).style("opacity", .8).text("");
              _this.counterEl.text(_this.label);
            })
            .on("click", function() {
              _this.close()
            });

          this.counterEl = element.append("div")
            .attr("class", "vzb-export-counter")
            .style("position", "absolute")
            .style("top", "20px")
            .style("right", "45px")
            .style("color", "red")
            .style("opacity", .8)
            .style("line-height", "20px")
            .style("font-size", "14px")
            .style("text-align", "center")



          this.root = this.svg.select("." + prefix + "graph");

          this.root.selectAll("g, text, svg, line, rect")
            .filter(function() {
              var view = d3.select(this);
              var result = false;
              deleteClasses.forEach(function(one) {
                result = result || view.classed(one);
              })
              return result;
            })
            .remove();

          this.svg.selectAll(".tick line")
            .attr("fill", "none")
            .attr("stroke", "#999");
          this.svg.selectAll("." + prefix + "axis-x path")
            .attr("fill", "none")
            .attr("stroke", "#999");
          this.svg.selectAll("." + prefix + "axis-y path")
            .attr("fill", "none")
            .attr("stroke", "#999");
        },

        write: function(me) {
          var groupBy = "time";

          if(!this.root) this.open();

          //avoid writing the same thing again
          if(this.shapes.indexOf(me.id + "_" + me.time) > -1) return;

          this.shapes.push(me.id + "_" + me.time);


          // check if need to create a new group and do so
          if(this.groups.indexOf(me[groupBy]) == -1) {
            this.root.append("g").attr("id", "g_" + me[groupBy]);
            this.groups.push(me[groupBy]);
          }

          // put a marker into the group
          if(me.opacity == null) me.opacity = .5;
          if(me.fill == null) me.fill = "#ff80dd";

          var marker = this.root.select("#g_" + me[groupBy])
            .append(me.type)
            .attr("id", me.id + "_" + me.time)
            .style("fill", me.fill)
            .style("opacity", me.opacity);

          switch(me.type) {
            case "path":
              marker
                .attr("d", me.d);
              break;

            case "circle":
              marker
                .attr("cx", me.cx)
                .attr("cy", me.cy)
                .attr("r", me.r);
              break;
          }

          this.counter++;
          this.redBall.style("opacity", this.counter % 10 / 12 + .2);
          this.label = me.type + " shapes: " + this.counter;
          this.counterEl.text(this.label);
        },

        close: function() {

          var result = SVGHEADER + " " + this.container.node().innerHTML
            .replace("param1", "xmlns")
            .replace("param2", "xmlns:xlink")
            //round all numbers in SVG code 
            .replace(/\d+(\.\d+)/g, function(x) {
              return Math.round(+x * 100) / 100 + ""
            });


          if(result.length / 1024 / 1024 > 2) {

            alert("The file size is " + Math.round(result.length / 1024) +
              "kB, which is too large to download. Will try to print it in the console instead...")
            console.log(result);

          } else {

            var link = document.createElement('a');
            link.download = this.name + " " + this.counter + " shapes" + ".svg";
            link.href = 'data:,' + result;
            link.click();
          }
        }



      });

      var MCMath = Class.extend({

              init: function (context) {
                  this.context = context;
                  
                  this.xScaleFactor = 1;
                  this.xScaleShift = 0;
              },
                      
              rescale: function (x) {
                  return Math.exp(this.xScaleFactor * Math.log(x) + this.xScaleShift);
              },
              unscale: function (x) {
                  return Math.exp((Math.log(x) - this.xScaleShift) / this.xScaleFactor);
              },

              generateMesh: function (length, scaleType, domain) {
                  // span a uniform mesh across the entire X scale
                  // if the scale is log, the mesh would be exponentially distorted to look uniform
                  
                  var rangeFrom = scaleType === "linear" ? domain[0] 
                      : Math.log(this.unscale(domain[0]));
                  
                  var rangeTo = scaleType === "linear" ? domain[1] 
                      : Math.log(this.unscale(domain[1]));
                  
                  var rangeStep = (rangeTo - rangeFrom) / length;
                  
                  var mesh = d3.range(rangeFrom, rangeTo, rangeStep).concat(rangeTo);

                  if (scaleType !== "linear") {
                      mesh = mesh.map(function (dX) { return Math.exp(dX); });
                  } else {
                      mesh = mesh.filter(function (dX) { return dX > 0; });
                  }

                  return mesh;
              },
              
              gdpToMu: function(gdp, sigma, xScaleFactor, xScaleShift){
                  // converting gdp per capita per day into MU for lognormal distribution
                  // see https://en.wikipedia.org/wiki/Log-normal_distribution
                  return Math.log(gdp/365) - sigma*sigma/2;
              },
              
              giniToSigma: function (gini) {
                  // The ginis are turned into std deviation. 
                  // Mattias uses this formula in Excel: stddev = NORMSINV( ((gini/100)+1)/2 )*2^0.5
                  return this.normsinv( ( (gini / 100) + 1 ) / 2 ) * Math.pow(2,0.5);
              },
                                   
              // this function returns PDF values for a specified distribution
              pdf: {
                  normal: function(x, mu, sigma){
                      return Math.exp(
                          - .5 * Math.log(2 * Math.PI)
                          - Math.log(sigma)
                          - Math.pow(x - mu, 2) / (2 * sigma * sigma)
                          );
                  },
                  lognormal: function(x, mu, sigma){
                      return Math.exp(
                          - .5 * Math.log(2 * Math.PI) //should not be different for the two scales- (scaleType=="linear"?Math.log(x):0)
                          - Math.log(sigma)
                          - Math.pow(Math.log(x) - mu, 2) / (2 * sigma * sigma)
                      );
                  }
              },

              
              normsinv: function (p) {
                  //
                  // Lower tail quantile for standard normal distribution function.
                  //
                  // This function returns an approximation of the inverse cumulative
                  // standard normal distribution function.  I.e., given P, it returns
                  // an approximation to the X satisfying P = Pr{Z <= X} where Z is a
                  // random variable from the standard normal distribution.
                  //
                  // The algorithm uses a minimax approximation by rational functions
                  // and the result has a relative error whose absolute value is less
                  // than 1.15e-9.
                  //
                  // Author:      Peter John Acklam
                  // (Javascript version by Alankar Misra @ Digital Sutras (alankar@digitalsutras.com))
                  // Time-stamp:  2003-05-05 05:15:14
                  // E-mail:      pjacklam@online.no
                  // WWW URL:     http://home.online.no/~pjacklam
                  
                  // Taken from http://home.online.no/~pjacklam/notes/invnorm/index.html
                  // adapted from Java code
                  
                  // An algorithm with a relative error less than 1.15*10-9 in the entire region.

                  // Coefficients in rational approximations
                  var a = [-3.969683028665376e+01, 2.209460984245205e+02, -2.759285104469687e+02, 1.383577518672690e+02, -3.066479806614716e+01, 2.506628277459239e+00];
                  var b = [-5.447609879822406e+01, 1.615858368580409e+02, -1.556989798598866e+02, 6.680131188771972e+01, -1.328068155288572e+01];
                  var c = [-7.784894002430293e-03, -3.223964580411365e-01, -2.400758277161838e+00, -2.549732539343734e+00, 4.374664141464968e+00, 2.938163982698783e+00];
                  var d = [7.784695709041462e-03, 3.224671290700398e-01, 2.445134137142996e+00, 3.754408661907416e+00];

                  // Define break-points.
                  var plow = .02425;
                  var phigh = 1 - plow;

                  // Rational approximation for lower region:
                  if (p < plow) {
                      var q = Math.sqrt(-2 * Math.log(p));
                      return (((((c[0] * q + c[1]) * q + c[2]) * q + c[3]) * q + c[4]) * q + c[5]) /
                          ((((d[0] * q + d[1]) * q + d[2]) * q + d[3]) * q + 1);
                  }

                  // Rational approximation for upper region:
                  if (phigh < p) {
                      var q = Math.sqrt(-2 * Math.log(1 - p));
                      return -(((((c[0] * q + c[1]) * q + c[2]) * q + c[3]) * q + c[4]) * q + c[5]) /
                          ((((d[0] * q + d[1]) * q + d[2]) * q + d[3]) * q + 1);
                  }

                  // Rational approximation for central region:
                  var q = p - .5;
                  var r = q * q;
                  return (((((a[0] * r + a[1]) * r + a[2]) * r + a[3]) * r + a[4]) * r + a[5]) * q /
                      (((((b[0] * r + b[1]) * r + b[2]) * r + b[3]) * r + b[4]) * r + 1);

              }



          });

      var MCSelectList = Class.extend({

        init: function (context) {
          this.context = context;

        },

        rebuild: function (data) {
          var _this = this.context;

          var listData = _this.mountainPointers
            .concat(_this.groupedPointers)
            .concat(_this.stackedPointers)
            .filter(function (f) {
              return _this.model.entities.isSelected(f);
            }).sort(function (a, b) {
              if (a.sortValue && b.sortValue) {
                if(a.sortValue[1] === b.sortValue[1]) {
                  return d3.descending(a.sortValue[0], b.sortValue[0]);
                }
                return d3.descending(a.sortValue[1], b.sortValue[1]);
              } else {
                if (a.aggrLevel != b.aggrLevel) {
                  return d3.descending(a.aggrLevel, b.aggrLevel);
                } else if (a.aggrLevel && b.aggrLevel) {
                  return d3.descending(a.yMax, b.yMax);
                } else {
                  return 0;
                }
              }
            });
          _this.selectList = _this.mountainLabelContainer.selectAll("g.vzb-mc-label")
            .data(unique(listData, function (d) {
              return d.KEY()
            }));
          _this.selectList.exit().remove();
          _this.selectList.enter().append("g")
            .attr("class", "vzb-mc-label")
            .each(function (d, i) {
              var label = d3.select(this);
              label.append("circle").attr('class', 'vzb-mc-label-legend');
              label.append("text").attr("class", "vzb-mc-label-shadow vzb-mc-label-text");
              label.append("text").attr("class", "vzb-mc-label-text");
              label.append("g").attr("class", "vzb-mc-label-x vzb-label-shadow vzb-invisible")
                .on("click", function (d, i) {
                  if (isTouchDevice()) return;
                  d3.event.stopPropagation();
                  _this.model.entities.clearHighlighted();
                  _this.model.entities.selectEntity(d);
                  d3.event.stopPropagation();
                })
                .onTap(function (d, i) {
                  d3.select("#" + d.geo + "-label").remove();
                  _this.model.entities.clearHighlighted();
                  _this.model.entities.selectEntity(d);
                });
              var labelCloseGroup = label.select("g.vzb-mc-label-x")
              if (!isTouchDevice()){
                setIcon(labelCloseGroup, iconClose)
                  .select("svg")
                  .attr("class", "vzb-mc-label-x-icon")
                  .attr("width", "0px")
                  .attr("height", "0px");

                labelCloseGroup.insert("circle", "svg");

              } else {
                labelCloseGroup.append("rect");
                labelCloseGroup.append("text")
                  .attr("class", "vzb-mc-label-x-text")
                  .text("Deselect");
              }
            })
            .on("mousemove", function (d, i) {
              if (isTouchDevice()) return;
              _this.model.entities.highlightEntity(d);
            })
            .on("mouseout", function (d, i) {
              if (isTouchDevice()) return;
              _this.model.entities.clearHighlighted();

            })
            .on("click", function (d, i) {
              if (isTouchDevice()) return;
              _this.model.entities.clearHighlighted();
              _this.model.entities.selectEntity(d);
            });
        },

        redraw: function () {
          var _this = this.context;
          if (!_this.selectList || !_this.someSelected) return;

          var sample = _this.mountainLabelContainer.append("g").attr("class", "vzb-mc-label").append("text").text("0");
          var fontHeight = sample[0][0].getBBox().height*1.2;
          var fontSizeToFontHeight = parseFloat(sample.style("font-size")) / fontHeight;
          d3.select(sample[0][0].parentNode).remove();
          var formatter = _this.model.marker.axis_y.getTickFormatter();

          var titleHeight = _this.yTitleEl.select("text").node().getBBox().height || 0;

          var maxFontHeight = (_this.height - titleHeight * 3) / (_this.selectList.data().length + 2);
          if(fontHeight > maxFontHeight) fontHeight = maxFontHeight;

          var currentAggrLevel = "null";
          var aggrLevelSpacing = 0;

          _this.selectList
            .attr("transform", function (d, i) {
              if(d.aggrLevel != currentAggrLevel) aggrLevelSpacing += fontHeight;
              var spacing = fontHeight * i + titleHeight * 1.5 + aggrLevelSpacing;
              currentAggrLevel = d.aggrLevel;
              return "translate(0," + spacing + ")";
            })
            .each(function (d, i) {

              var view = d3.select(this).attr("id", d.geo + '-label');
              var name = d.key ? _this.translator("entity/geo.world_4region/" + d.key) : _this.values.label[d.KEY()];
              var number = _this.values.axis_y[d.KEY()];

              var string = name + ": " + formatter(number) + (i === 0 ? " "+ _this.translator("mount/people") : "");

              var text = view.selectAll(".vzb-mc-label-text")
                .attr("x", fontHeight)
                .attr("y", fontHeight)
                .text(string)
                .style("font-size", fontHeight === maxFontHeight ? (fontHeight * fontSizeToFontHeight + "px") : null);

              var contentBBox = text[0][0].getBBox();

              var closeGroup = view.select(".vzb-mc-label-x");

              if (isTouchDevice()) {
                var closeTextBBox = closeGroup.select("text").node().getBBox();
                closeGroup
                  .classed("vzb-revert-color", true)
                  .select(".vzb-mc-label-x-text")
                  .classed("vzb-revert-color", true)
                  .attr("x", contentBBox.width + contentBBox.height * 1.12 + closeTextBBox.width * .5)
                  .attr("y", contentBBox.height * .55);

                closeGroup.select("rect")
                  .attr("width", closeTextBBox.width + contentBBox.height * .6)
                  .attr("height", contentBBox.height)
                  .attr("x", contentBBox.width + contentBBox.height * .9)
                  .attr("y", 0)
                  .attr("rx", contentBBox.height * .25)
                  .attr("ry", contentBBox.height * .25);
              } else {
                closeGroup
                  .attr("x", contentBBox.width + contentBBox.height * 1.1)
                  .attr("y", contentBBox.height / 3);

                closeGroup.select("circle")
                  .attr("r", contentBBox.height * .4)
                  .attr("cx", contentBBox.width + contentBBox.height * 1.1)
                  .attr("cy", contentBBox.height / 3);

                closeGroup.select("svg")
                  .attr("x", contentBBox.width + contentBBox.height * (1.1 - .4))
                  .attr("y", contentBBox.height * (1 / 3 - .4))
                  .attr("width", contentBBox.height * .8)
                  .attr("height", contentBBox.height * .8);
              }

              view.select(".vzb-mc-label-legend")
                .attr("r", fontHeight / 3)
                .attr("cx", fontHeight * .4)
                .attr("cy", fontHeight / 1.5)
                .style("fill", _this.cScale(_this.values.color[d.KEY()]));

              view.onTap(function (d, i) {
                d3.event.stopPropagation();
                _this.model.entities.highlightEntity(d);
                setTimeout(function() {
                  _this.model.entities.unhighlightEntity(d);
                }, 2000)
              });
            });
        }
      });

      var MCProbe = Class.extend({

              init: function (context) {
                  this.context = context;
                  
              },
                      
              redraw: function (options) {
                  var _this = this.context;
                  if (!options) options = {};

                  if (!options.level) options.level = _this.model.ui.chart.probeX;

                  _this.probeEl.classed("vzb-hidden", !options.level);
                  if (!options.level) return;

                  _this.xAxisEl.call(_this.xAxis.highlightValue(options.full ? options.level : "none"));

                  var sumValue = 0;
                  var totalArea = 0;
                  var leftArea = 0;

                  var _computeAreas = function (d) {
                      sumValue += _this.values.axis_y[d.KEY()];
                      _this.cached[d.KEY()].forEach(function (d) {
                          totalArea += d.y;
                          if (_this._math.rescale(d.x) < options.level) leftArea += d.y;
                      })
                  };

                  if (_this.model.marker.stack.which === "all") {
                      _this.stackedPointers.forEach(_computeAreas);
                  } else if (_this.model.marker.stack.which === "none") {
                      _this.mountainPointers.forEach(_computeAreas);
                  } else {
                      _this.groupedPointers.forEach(_computeAreas);
                  }

                  var formatter1 = d3.format(".3r");
                  var formatter2 = _this.model.marker.axis_y.getTickFormatter();
                  _this.heightOfLabels = _this.heightOfLabels || (.66 * _this.height);

                  _this.probeTextEl.each(function (d, i) {
                      if (i !== 8) return;
                      var view = d3.select(this);

                      if (!options.full && _this.model.ui.chart.probeX == _this.model.marker.axis_x.tailFatX) {

                          view.text(_this.translator("mount/extremepoverty"))
                              .classed("vzb-hidden", false)
                              .attr("x", -_this.height)
                              .attr("y", _this.xScale(options.level))
                              .attr("dy", "-1em")
                              .attr("dx", "0.5em")
                              .attr("transform", "rotate(-90)");

                          _this.heightOfLabels = _this.height - view.node().getBBox().width - view.node().getBBox().height * 1.75;
                      }else{
                          view.classed("vzb-hidden", true);
                      }
                  });


                  _this.probeTextEl.each(function (d, i) {
                      if (i === 8) return;
                      var view = d3.select(this);

                      var string;
                      if (i === 0 || i === 4) string = formatter1(leftArea / totalArea * 100) + "%";
                      if (i === 1 || i === 5) string = formatter1(100 - leftArea / totalArea * 100) + "%";
                      if (i === 2 || i === 6) string = formatter2(sumValue * leftArea / totalArea);
                      if (i === 3 || i === 7) string = formatter2(sumValue * (1 - leftArea / totalArea)) + " " + _this.translator("mount/people");

                      view.text(string)
                          .classed("vzb-hidden", !options.full && i !== 0 && i !== 4)
                          .attr("x", _this.xScale(options.level) + ([0, 4, 2, 6].indexOf(i) > -1 ? -5 : +5))
                          .attr("y", _this.heightOfLabels)
                          .attr("dy", [0, 1, 4, 5].indexOf(i) > -1 ? 0 : "1.5em");
                  });


                  _this.probeLineEl
                      .attr("x1", _this.xScale(options.level))
                      .attr("x2", _this.xScale(options.level))
                      .attr("y1", _this.height + 6)
                      .attr("y2", 0);


              },



          });

      var THICKNESS_THRESHOLD = 0.001;

      //MOUNTAIN CHART COMPONENT
      var MountainChartComponent = Component.extend({

          /**
           * Initialize the component
           * Executed once before any template is rendered.
           * @param {Object} config The config passed to the component
           * @param {Object} context The component's parent
           */
          init: function (config, context) {

              var _this = this;
              this.name = "mountainchart";
              this.template = "mountainchart.html";

              //define expected models for this component
              this.model_expects = [
                  { name: "time", type: "time" },
                  { name: "entities", type: "entities" },
                  { name: "marker", type: "model" },
                  { name: "language", type: "language" },
                  { name: "ui", type: "model" }
              ];

              //attach event listeners to the model items
              this.model_binds = {
                  "change:time.value": function (evt) {
                    if (!_this._readyOnce) return;
                    _this.year.setText(_this.model.time.value.getUTCFullYear().toString());
                    _this.model.marker.getFrame(_this.model.time.value, _this.frameChanged.bind(_this));
                  },
                  "change:time.playing": function (evt) {
                      // this listener is a patch for fixing #1228. time.js doesn't produce the last event
                      // with playing == false when paused softly
                      if(!_this.model.time.playing){
                          _this.redrawDataPoints();
                      }
                  },
                  "change:marker.axis_x.xScaleFactor": function () {
                      _this.ready();
                  },
                  "change:marker.axis_x.xScaleShift": function () {
                      _this.ready();
                  },
                  "change:marker.axis_x.tailFatX": function () {
                      _this.ready();
                  },
                  "change:marker.axis_x.tailCutX": function () {
                      _this.ready();
                  },
                  "change:marker.axis_x.tailFade": function () {
                      _this.ready();
                  },
                  "change:ui.chart.probeX": function () {
                      _this.ready();
                  },
                  "change:ui.chart.xPoints": function () {
                      _this.ready();
                  },
                  "change:ui.chart.xLogStops": function () {
                      _this.updateSize();
                  },
                  "change:ui.chart.yMaxMethod": function () {
                      _this._adjustMaxY({ force: true });
                      _this.redrawDataPoints();
                  },
                  "change:time.record": function (evt) {
                      if (_this.model.time.record) {
                          _this._export.open(this.element, this.name);
                      } else {
                          _this._export.reset();
                      }
                  },
                  "change:entities.highlight": function (evt) {
                      if (!_this._readyOnce) return;
                      _this.highlightEntities();
                      _this.updateOpacity();
                  },
                  "change:entities.select": function (evt) {
                      if (!_this._readyOnce) return;
                      _this.selectEntities();
                      _this._selectlist.redraw();
                      _this.updateOpacity();
                      _this.updateDoubtOpacity();
                      _this.redrawDataPoints();
                  },
                  "change:entities.opacitySelectDim": function (evt) {
                      _this.updateOpacity();
                  },
                  "change:entities.opacityRegular": function (evt) {
                      _this.updateOpacity();
                  },
                  "change:marker": function (evt, path) {
                      if (!_this._readyOnce) return;
                      if(path.indexOf("scaleType") > -1) {
                          _this.ready();
                          return;
                      }
                      if (path.indexOf("zoomedMin") > -1 || path.indexOf("zoomedMax") > -1) {
                          _this.zoomToMaxMin();
                          _this.redrawDataPoints();
                          _this._probe.redraw();
                          return;
                      }
                  },
                  "change:marker.group": function (evt, path) {
                      if (!_this._readyOnce) return;
                      if (path.indexOf("group.merge") > -1) return;
                      _this.ready();
                  },
                  "change:marker.group.merge": function (evt) {
                      if (!_this._readyOnce) return;
                      _this.updateTime();
                      _this.redrawDataPoints();
                  },
                  "change:marker.stack": function (evt) {
                      if (!_this._readyOnce) return;
                      _this.ready();
                  },
                  "change:marker.color.palette": function (evt) {
                      if (!_this._readyOnce) return;
                      _this.redrawDataPointsOnlyColors();
                      _this._selectlist.redraw();
                  },
              };

              this._super(config, context);

              this._math = new MCMath(this);
              this._export = new Exporter(this);
              this._export
                  .prefix("vzb-mc-")
                  .deleteClasses(["vzb-mc-mountains-mergestacked", "vzb-mc-mountains-mergegrouped", "vzb-mc-mountains", "vzb-mc-year", "vzb-mc-mountains-labels", "vzb-mc-axis-labels"]);
              this._probe = new MCProbe(this);
              this._selectlist = new MCSelectList(this);

              // define path generator
              this.area = d3.svg.area()
                  .interpolate("basis")
                  .x(function (d) {
                      return _this.xScale(_this._math.rescale(d.x));
                  })
                  .y0(function (d) {
                      return _this.yScale(d.y0);
                  })
                  .y1(function (d) {
                      return _this.yScale(d.y0 + d.y);
                  });

              //define d3 stack layout
              this.stack = d3.layout.stack()
                  .order("reverse")
                  .values(function (d) {
                      return _this.cached[d.KEY()];
                  })
                  .out(function out(d, y0, y) {
                      d.y0 = y0;
                  });

              // init internal variables
              this.xScale = null;
              this.yScale = null;
              this.cScale = null;

              this.xAxis = axisSmart();


              this.rangeRatio = 1;
              this.rangeShift = 0;
              this.cached = {};
              this.mesh = [];
              this.yMax = 0;
          },

          domReady: function () {
              var _this = this;

              // reference elements
              this.element = d3.select(this.element);
              this.graph = this.element.select(".vzb-mc-graph");
              this.xAxisEl = this.graph.select(".vzb-mc-axis-x");
              this.xTitleEl = this.graph.select(".vzb-mc-axis-x-title");
              this.yTitleEl = this.graph.select(".vzb-mc-axis-y-title");
              this.infoEl = this.graph.select(".vzb-mc-axis-info");
              this.dataWarningEl = this.graph.select(".vzb-data-warning");

              this.yearEl = this.graph.select(".vzb-mc-year");
              this.year = new DynamicBackground(this.yearEl);

              this.mountainMergeStackedContainer = this.graph.select(".vzb-mc-mountains-mergestacked");
              this.mountainMergeGroupedContainer = this.graph.select(".vzb-mc-mountains-mergegrouped");
              this.mountainAtomicContainer = this.graph.select(".vzb-mc-mountains");
              this.mountainLabelContainer = this.graph.select(".vzb-mc-mountains-labels");
              this.tooltip = this.element.select(".vzb-mc-tooltip");
              this.eventAreaEl = this.element.select(".vzb-mc-eventarea");
              this.probeEl = this.element.select(".vzb-mc-probe");
              this.probeLineEl = this.probeEl.select("line");
              this.probeTextEl = this.probeEl.selectAll("text");

              this.element
                  .onTap(function (d, i) {
                      _this._interact()._mouseout(d, i);
                  });
          },

          afterPreload: function () {
              var _this = this;

              var yearNow = _this.model.time.value.getUTCFullYear();
              var yearEnd = _this.model.time.end.getUTCFullYear();

              this._math.xScaleFactor = this.model.marker.axis_x.xScaleFactor;
              this._math.xScaleShift = this.model.marker.axis_x.xScaleShift;

              if (!this.precomputedShapes || !this.precomputedShapes[yearNow] || !this.precomputedShapes[yearEnd]) return;

              var yMax = this.precomputedShapes[this.model.ui.chart.yMaxMethod == "immediate" ? yearNow : yearEnd].yMax;
              var shape = this.precomputedShapes[yearNow].shape;

              if (!yMax || !shape || shape.length === 0) return;

              this.xScale = d3.scale.log().domain([this.model.marker.axis_x.domainMin, this.model.marker.axis_x.domainMax]);
              this.yScale = d3.scale.linear().domain([0, Math.round(yMax)]);

              _this.updateSize(shape.length);
              _this.zoomToMaxMin();

              shape = shape.map(function (m, i) {return {x: _this.mesh[i], y0: 0, y: +m};})

              this.mountainAtomicContainer.selectAll(".vzb-mc-prerender")
                  .data([0])
                  .enter().append("path")
                  .attr("class", "vzb-mc-prerender")
                  .style("fill", "pink")
                  .style("opacity", 0)
                  .attr("d", _this.area(shape))
                  .transition().duration(1000).ease("linear")
                  .style("opacity", 1);
          },

          readyOnce: function () {

              this.eventAreaEl
                  .on("mousemove", function () {
                      if (_this.model.time.dragging) return;
                      _this._probe.redraw({
                          level: _this.xScale.invert(d3.mouse(this)[0]),
                          full: true
                      });
                  })
                  .on("mouseout", function () {
                      if (_this.model.time.dragging) return;
                      _this._probe.redraw();
                  });

              var _this = this;
              this.on("resize", function () {
                  //console.log("acting on resize");
                  //return if updatesize exists with error
                  if(_this.updateSize()) return;
                  _this.updateTime(); // respawn is needed
                  _this.redrawDataPoints();
                  _this._selectlist.redraw();
                  _this._probe.redraw();
              });

              this.KEY = this.model.entities.getDimension();
              this.TIMEDIM = this.model.time.getDimension();

              this.mountainAtomicContainer.select(".vzb-mc-prerender").remove();
              this.year.setText(this.model.time.value.getUTCFullYear().toString());
              this.wScale = d3.scale.linear()
                  .domain(this.parent.datawarning_content.doubtDomain)
                  .range(this.parent.datawarning_content.doubtRange);
          },

          ready: function () {
              //console.log("ready")
              var _this= this;

              this._math.xScaleFactor = this.model.marker.axis_x.xScaleFactor;
              this._math.xScaleShift = this.model.marker.axis_x.xScaleShift;

              this.updateUIStrings();
              this.updateIndicators();
              this.model.marker.getFrame(this.model.time.value, function(values) {
                if (!values) return;
                _this.values = values;
                _this.updateEntities();
                _this.updateSize();
                _this.zoomToMaxMin();
                _this._spawnMasks();
                _this.updateTime();
                _this._adjustMaxY({force: true});
                _this.redrawDataPoints();
                _this.redrawDataPointsOnlyColors();
                _this.highlightEntities();
                _this.selectEntities();
                _this._selectlist.redraw();
                _this.updateOpacity();
                _this.updateDoubtOpacity();
                _this._probe.redraw();
              });
          },

        frameChanged: function(frame, time) {
          if (time.toString() != this.model.time.value.toString()) return; // frame is outdated
          this.values = frame;
          this.updateTime();
          this.redrawDataPoints();
          this._selectlist.redraw();
          this._probe.redraw();
          this.updateDoubtOpacity();
        },
        

      updateSize: function (meshLength) {

              var margin, infoElHeight;
              var padding = 2;

              var profiles = {
                small: {
                  margin: { top: 10, right: 10, left: 10, bottom: 18 },
                  infoElHeight: 16
                },
                medium: {
                  margin: { top: 20, right: 20, left: 20, bottom: 30 },
                  infoElHeight: 20
                },
                large: {
                  margin: { top: 30, right: 30, left: 30, bottom: 35 },
                  infoElHeight: 22
                }
              };

              var presentationProfileChanges = {
                medium: {
                  margin: { top: 20, right: 20, left: 20, bottom: 50 },
                  infoElHeight: 26
                },
                large: {
                  margin: { top: 30, right: 30, left: 30, bottom: 50 },
                  infoElHeight: 32
                }
              };

              this.activeProfile = this.getActiveProfile(profiles, presentationProfileChanges);
              margin = this.activeProfile.margin;
              infoElHeight = this.activeProfile.infoElHeight;

              //mesure width and height
              this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
              this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
          
              if(this.height<=0 || this.width<=0) return warn("Mountain chart updateSize() abort: vizabi container is too little or has display:none");

              //graph group is shifted according to margins (while svg element is at 100 by 100%)
              this.graph.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              var yearLabelOptions = {
                  topOffset: this.getLayoutProfile()==="large"? margin.top * 2 : 0,
                  xAlign: this.getLayoutProfile()==="large"? 'right' : 'center',
                  yAlign: this.getLayoutProfile()==="large"? 'top' : 'center',
              };

              var yearLabelFontSize = this.getLayoutProfile()==="large"? this.width / 6 : Math.max(this.height / 4, this.width / 4);

              //year is centered and resized
              this.year
                  .setConditions(yearLabelOptions)
                  .resize(this.width, this.height, yearLabelFontSize);

              //update scales to the new range
              this.yScale.range([this.height, 0]);
              this.xScale.range([this.rangeShift, this.width * this.rangeRatio + this.rangeShift]);


              //need to know scale type of X to move on
              var scaleType = this._readyOnce ? this.model.marker.axis_x.scaleType : "log";

              //axis is updated
              this.xAxis.scale(this.xScale)
                  .orient("bottom")
                  .tickSize(6, 0)
                  .tickSizeMinor(3, 0)
                  .labelerOptions({
                      scaleType: scaleType,
                      toolMargin: margin,
                      pivotingLimit: margin.bottom * 1.5,
                      method: this.xAxis.METHOD_REPEATING,
                      stops: this._readyOnce ? this.model.ui.chart.xLogStops : [1],
                      formatter: this.model.marker.axis_x.getTickFormatter()
                  });


              this.xAxisEl
                  .attr("transform", "translate(0," + this.height + ")")
                  .call(this.xAxis);

              this.xTitleEl.select("text")
                  .attr("transform", "translate(" + this.width + "," + this.height + ")")
                  .attr("dy", "-0.36em");

              this.yTitleEl
                .style("font-size", infoElHeight + "px")
                .attr("transform", "translate(0," + margin.top + ")")


              var warnBB = this.dataWarningEl.select("text").node().getBBox();
              this.dataWarningEl.select("svg")
                  .attr("width", warnBB.height)
                  .attr("height", warnBB.height)
                  .attr("x", warnBB.height * .1)
                  .attr("y", -warnBB.height * 1.0 + 1)

              this.dataWarningEl
                  .attr("transform", "translate(" + (0) + "," + (margin.top + warnBB.height * 1.5) + ")")
                  .select("text")
                  .attr("dx", warnBB.height * 1.5);

              if(this.infoEl.select('svg').node()) {
                  var titleBBox = this.yTitleEl.node().getBBox();
                  var translate = d3.transform(this.yTitleEl.attr('transform')).translate;

                  this.infoEl.select('svg')
                      .attr("width", infoElHeight + "px")
                      .attr("height", infoElHeight + "px");
                  this.infoEl.attr('transform', 'translate('
                      + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
                      + (translate[1]-infoElHeight * .8) + ')');
              }

              this.eventAreaEl
                  .attr("y", this.height)
                  .attr("width", this.width)
                  .attr("height", margin.bottom);

              if (!meshLength) meshLength = this.model.ui.chart.xPoints;
              this.mesh = this._math.generateMesh(meshLength, scaleType, this.xScale.domain());
          },


          zoomToMaxMin: function(){
              var _this = this;

              if(this.model.marker.axis_x.zoomedMin==null || this.model.marker.axis_x.zoomedMax==null) return;

              var x1 = this.xScale(this.model.marker.axis_x.zoomedMin);
              var x2 = this.xScale(this.model.marker.axis_x.zoomedMax);

              this.rangeRatio = this.width / (x2 - x1) * this.rangeRatio;
              this.rangeShift = (this.rangeShift - x1) / (x2 - x1) * this.width;

              this.xScale.range([this.rangeShift, this.width*this.rangeRatio + this.rangeShift]);

              this.xAxisEl.call(this.xAxis);
          },


          updateUIStrings: function () {
              var _this = this;

              this.translator = this.model.language.getTFunction();
              var xConceptprops = this.model.marker.axis_x.getConceptprops();


              this.xTitleEl.select("text")
                  .text(this.translator("unit/mountainchart_hardcoded_income_per_day"));

              this.yTitleEl.select("text")
                  .text(this.translator("mount/title"));

              setIcon(this.dataWarningEl, iconWarn).select("svg").attr("width", "0px").attr("height", "0px");
              this.dataWarningEl.append("text")
                  .text(this.translator("hints/dataWarning"));

              setIcon(this.infoEl, iconQuestion).select("svg").attr("width", "0px").attr("height", "0px");

              //TODO: move away from UI strings, maybe to ready or ready once
              this.infoEl.on("click", function() {
                _this.parent.findChildByName("gapminder-datanotes").pin();
              })
              this.infoEl.on("mouseover", function() {
                var rect = this.getBBox();
                var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
                _this.parent.findChildByName("gapminder-datanotes").setHook('axis_y').show().setPos(coord.x, coord.y);
              })
              this.infoEl.on("mouseout", function() {
                _this.parent.findChildByName("gapminder-datanotes").hide();
              })
              
              
              
              this.dataWarningEl
                  .on("click", function () {
                      _this.parent.findChildByName("gapminder-datawarning").toggle();
                  })
                  .on("mouseover", function () {
                      _this.updateDoubtOpacity(1);
                  })
                  .on("mouseout", function () {
                      _this.updateDoubtOpacity();
                  })
          },

          updateDoubtOpacity: function (opacity) {
              if (opacity == null) opacity = this.wScale(+this.time.getUTCFullYear().toString());
              if (this.someSelected) opacity = 1;
              this.dataWarningEl.style("opacity", opacity);
          },

          updateIndicators: function () {
              var _this = this;

              //fetch scales, or rebuild scales if there are none, then fetch
              this.yScale = this.model.marker.axis_y.getScale();
              this.xScale = this.model.marker.axis_x.getScale();
              this.cScale = this.model.marker.color.getScale();

              this.xAxis.tickFormat(_this.model.marker.axis_x.getTickFormatter());
          },

          updateEntities: function () {
              var _this = this;

              // construct pointers
              this.mountainPointers = this.model.marker.getKeys()
                  .filter(function(d) { return 1
                      && _this.values.axis_x[d[_this.KEY]]
                      && _this.values.axis_y[d[_this.KEY]]
                      && _this.values.axis_s[d[_this.KEY]];
                  })
                  .map(function(d) {
                      var pointer = {};
                      pointer[_this.KEY] = d[_this.KEY];
                      pointer.KEY = function () {
                          return this[_this.KEY];
                      };
                      pointer.sortValue = [_this.values.axis_y[pointer.KEY()]||0, 0];
                      pointer.aggrLevel = 0;
                      return pointer;
                  });


              //TODO: optimise this!
              this.groupedPointers = d3.nest()
                  .key(function (d) {
                      return _this.model.marker.stack.use === "property" ? _this.values.stack[d.KEY()] : _this.values.group[d.KEY()];
                  })
                  .sortValues(function (a, b) {
                      return b.sortValue[0] - a.sortValue[0];
                  })
                  .entries(this.mountainPointers);


              var groupManualSort = this.model.marker.group.manualSorting;
              this.groupedPointers.forEach(function (group) {
                  var groupSortValue = d3.sum(group.values.map(function (m) {
                      return m.sortValue[0];
                  }));

                  if (groupManualSort && groupManualSort.length > 1) groupSortValue = groupManualSort.length-1 - groupManualSort.indexOf(group.key);

                  group.values.forEach(function (d) {
                      d.sortValue[1] = groupSortValue;
                  });

                  group[_this.model.entities.getDimension()] = group.key; // hack to get highlihgt and selection work
                  group.KEY = function () {
                      return this.key;
                  };
                  group.aggrLevel = 1;
              });

              var sortGroupKeys = {};
              _this.groupedPointers.map(function (m) {
                  sortGroupKeys[m.key] = m.values[0].sortValue[1];
              });


              // update the stacked pointers
              if (_this.model.marker.stack.which === "none") {
                  this.stackedPointers = [];
                  this.mountainPointers.sort(function (a, b) {
                      return b.sortValue[0] - a.sortValue[0];
                  });

              } else {
                  this.stackedPointers = d3.nest()
                      .key(function (d) {
                          return _this.values.stack[d.KEY()];
                      })
                      .key(function (d) {
                          return _this.values.group[d.KEY()];
                      })
                      .sortKeys(function (a, b) {
                          return sortGroupKeys[b] - sortGroupKeys[a];
                      })
                      .sortValues(function (a, b) {
                          return b.sortValue[0] - a.sortValue[0];
                      })
                      .entries(this.mountainPointers);

                  this.mountainPointers.sort(function (a, b) {
                      return b.sortValue[1] - a.sortValue[1];
                  });


                  this.stackedPointers.forEach(function (stack) {
                      stack.KEY = function () {
                          return this.key;
                      };
                      stack[_this.model.entities.getDimension()] = stack.key; // hack to get highlihgt and selection work
                      stack.aggrLevel = 2;
                  });
              }

              //bind the data to DOM elements
              this.mountainsMergeStacked = this.mountainAtomicContainer.selectAll(".vzb-mc-mountain.vzb-mc-aggrlevel2")
                  .data(this.stackedPointers);
              this.mountainsMergeGrouped = this.mountainAtomicContainer.selectAll(".vzb-mc-mountain.vzb-mc-aggrlevel1")
                  .data(this.groupedPointers);
              this.mountainsAtomic = this.mountainAtomicContainer.selectAll(".vzb-mc-mountain.vzb-mc-aggrlevel0")
                  .data(this.mountainPointers);

              //exit selection -- remove shapes
              this.mountainsMergeStacked.exit().remove();
              this.mountainsMergeGrouped.exit().remove();
              this.mountainsAtomic.exit().remove();

              //enter selection -- add shapes
              this.mountainsMergeStacked.enter().append("path")
                  .attr("class", "vzb-mc-mountain vzb-mc-aggrlevel2");
              this.mountainsMergeGrouped.enter().append("path")
                  .attr("class", "vzb-mc-mountain vzb-mc-aggrlevel1");
              this.mountainsAtomic.enter().append("path")
                  .attr("class", "vzb-mc-mountain vzb-mc-aggrlevel0");

              //add interaction
              this.mountains = this.mountainAtomicContainer.selectAll(".vzb-mc-mountain");

              this.mountains
                  .on("mousemove", function (d, i) {
                      if (isTouchDevice()) return;
                      _this._interact()._mousemove(d, i);
                  })
                  .on("mouseout", function (d, i) {
                      if (isTouchDevice()) return;
                      _this._interact()._mouseout(d, i);
                  })
                  .on("click", function (d, i) {
                      if (isTouchDevice()) return;
                      _this._interact()._click(d, i);
                      _this.highlightEntities();
                  })
                  .onTap(function (d, i) {
                      _this._interact()._click(d, i);
                      d3.event.stopPropagation();
                  })
                  .onLongTap(function (d, i) {
                  })
          },

          _interact: function () {
              var _this = this;

              return {
                  _mousemove: function (d, i) {
                      if (_this.model.time.dragging || _this.model.time.playing) return;

                      _this.model.entities.highlightEntity(d);

                      var mouse = d3.mouse(_this.graph.node()).map(function (d) {
                          return parseInt(d);
                      });

                      //position tooltip
                      _this._setTooltip(d.key ? _this.translator("entity/geo.world_4region/" + d.key) : _this.values.label[d.KEY()]);

                  },
                  _mouseout: function (d, i) {
                      if (_this.model.time.dragging || _this.model.time.playing) return;

                      _this._setTooltip("");
                      _this.model.entities.clearHighlighted();
                  },
                  _click: function (d, i) {
                      if (_this.model.time.dragging || _this.model.time.playing) return;
                      
                      _this.model.entities.selectEntity(d);
                  }
              };

          },

          highlightEntities: function () {
              var _this = this;
              this.someHighlighted = (this.model.entities.highlight.length > 0);

              if (!this.selectList || !this.someSelected) return;
              this.selectList.classed("vzb-highlight", function (d) {
                  return _this.model.entities.isHighlighted(d);
              });
              this.selectList.each(function (d, i) {
                d3.select(this).selectAll(".vzb-mc-label-x")
                  .classed("vzb-invisible", function(n) {
                    return !_this.model.entities.isHighlighted(d);
                  });

              });

          },

          selectEntities: function () {
              var _this = this;
              this.someSelected = (this.model.entities.select.length > 0);

              this._selectlist.rebuild();
          },

          _sumLeafPointersByMarker: function (branch, marker) {
              var _this = this;
              if (!branch.key) return _this.values[marker][branch.KEY()];
              return d3.sum(branch.values.map(function (m) {
                  return _this._sumLeafPointersByMarker(m, marker);
              }));
          },

          updateOpacity: function () {
              var _this = this;
              //if(!duration)duration = 0;

              var OPACITY_HIGHLT = 1.0;
              var OPACITY_HIGHLT_DIM = .3;
              var OPACITY_SELECT = this.model.entities.opacityRegular;
              var OPACITY_REGULAR = this.model.entities.opacityRegular;
              var OPACITY_SELECT_DIM = this.model.entities.opacitySelectDim;

              this.mountains.style("opacity", function (d) {

                  if (_this.someHighlighted) {
                      //highlight or non-highlight
                      if (_this.model.entities.isHighlighted(d)) return OPACITY_HIGHLT;
                  }

                  if (_this.someSelected) {
                      //selected or non-selected
                      return _this.model.entities.isSelected(d) ? OPACITY_SELECT : OPACITY_SELECT_DIM;
                  }

                  if (_this.someHighlighted) return OPACITY_HIGHLT_DIM;

                  return OPACITY_REGULAR;

              });

              this.mountains.classed("vzb-selected", function (d) {
                  return _this.model.entities.isSelected(d)
              });

              var someSelectedAndOpacityZero = _this.someSelected && _this.model.entities.opacitySelectDim < .01;

              // when pointer events need update...
              if (someSelectedAndOpacityZero !== this.someSelectedAndOpacityZero_1) {
                  this.mountainsAtomic.style("pointer-events", function (d) {
                      return (!someSelectedAndOpacityZero || _this.model.entities.isSelected(d)) ?
                          "visible" : "none";
                  });
              }

              this.someSelectedAndOpacityZero_1 = _this.someSelected && _this.model.entities.opacitySelectDim < .01;
          },

          updateTime: function (time) {
              var _this = this;

              this.time = this.model.time.value;
              if (time == null) time = this.time;

              this.yMax = 0;


              //spawn the original mountains
              this.mountainPointers.forEach(function (d, i) {
                  var vertices = _this._spawn(_this.values, d);
                  _this.cached[d.KEY()] = vertices;
                  d.hidden = vertices.length === 0;
              });


              //recalculate stacking
              if (_this.model.marker.stack.which !== "none") {
                  this.stackedPointers.forEach(function (group) {
                      var toStack = [];
                      group.values.forEach(function (subgroup) {
                          toStack = toStack.concat(subgroup.values.filter(function (f) {
                              return !f.hidden;
                          }));
                      });
                      _this.stack(toStack);
                  });
              }

              this.mountainPointers.forEach(function (d) {
                  d.yMax = d3.max(_this.cached[d.KEY()].map(function (m) {
                      return m.y0 + m.y;
                  }));
                  if (_this.yMax < d.yMax) _this.yMax = d.yMax;
              });

              var mergeGrouped = _this.model.marker.group.merge;
              var mergeStacked = _this.model.marker.stack.merge;
              var dragOrPlay = (_this.model.time.dragging || _this.model.time.playing) && this.model.marker.stack.which !== "none";

              //if(mergeStacked){
              this.stackedPointers.forEach(function (d) {
                  var firstLast = _this._getFirstLastPointersInStack(d);
                  _this.cached[d.key] = _this._getVerticesOfaMergedShape(firstLast);
                  _this.values.color[d.key] = "_default";
                  _this.values.axis_y[d.key] = _this._sumLeafPointersByMarker(d, "axis_y");
                  d.yMax = firstLast.first.yMax;
              });
              //} else if (mergeGrouped || dragOrPlay){
              this.groupedPointers.forEach(function (d) {
                  var firstLast = _this._getFirstLastPointersInStack(d);
                  _this.cached[d.key] = _this._getVerticesOfaMergedShape(firstLast);
                  _this.values.color[d.key] = _this.values.color[firstLast.first.KEY()];
                  _this.values.axis_y[d.key] = _this._sumLeafPointersByMarker(d, "axis_y");
                  d.yMax = firstLast.first.yMax;
              });
              //}

              if (!mergeStacked && !mergeGrouped && this.model.marker.stack.use === "property") {
                  this.groupedPointers.forEach(function (d) {
                      var visible = d.values.filter(function (f) {
                          return !f.hidden;
                      });
                      d.yMax = visible[0].yMax;
                      d.values.forEach(function (e) {
                          e.yMaxGroup = d.yMax;
                      });
                  });
              }


          },

          _getFirstLastPointersInStack: function (group) {
              var _this = this;

              var visible, visible2;

              if (group.values[0].values) {
                  visible = group.values[0].values.filter(function (f) {
                      return !f.hidden;
                  });
                  visible2 = group.values[group.values.length - 1].values.filter(function (f) {
                      return !f.hidden;
                  });
                  var first = visible[0];
                  var last = visible2[visible2.length - 1];
              } else {
                  visible = group.values.filter(function (f) {
                      return !f.hidden;
                  });
                  var first = visible[0];
                  var last = visible[visible.length - 1];
              }
              
              if (!visible.length || (visible2 && !visible2.length)) warn('mountain chart failed to generate shapes. check the incoming data');

              return {
                  first: first,
                  last: last
              };
          },

          _getVerticesOfaMergedShape: function (arg) {
              var _this = this;

              var first = arg.first.KEY();
              var last = arg.last.KEY();

              return _this.mesh.map(function (m, i) {
                  var y = _this.cached[first][i].y0 + _this.cached[first][i].y - _this.cached[last][i].y0;
                  var y0 = _this.cached[last][i].y0;
                  return {
                      x: m,
                      y0: y0,
                      y: y
                  };
              });
          },

          _spawnMasks: function () {
              var _this = this;

              var tailFatX = this._math.unscale(this.model.marker.axis_x.tailFatX);
              var tailCutX = this._math.unscale(this.model.marker.axis_x.tailCutX);
              var tailFade = this.model.marker.axis_x.tailFade;
              var k = 2 * Math.PI / (Math.log(tailFatX) - Math.log(tailCutX));
              var m = Math.PI - Math.log(tailFatX) * k;


              this.spawnMask = [];
              this.cosineShape = [];
              this.cosineArea = 0;

              this.mesh.map(function (dX, i) {
                  _this.spawnMask[i] = dX < tailCutX ? 1 : (dX > tailFade * 7 ? 0 : Math.exp((tailCutX - dX) / tailFade))
                  _this.cosineShape[i] = (dX > tailCutX && dX < tailFatX ? (1 + Math.cos(Math.log(dX) * k + m)) : 0);
                  _this.cosineArea += _this.cosineShape[i];
              });
          },

          _spawn: function (values, d) {
              var _this = this;

              var norm = values.axis_y[d.KEY()];
              var sigma = _this._math.giniToSigma(values.axis_s[d.KEY()]);
              var mu = _this._math.gdpToMu(values.axis_x[d.KEY()], sigma);

              if (!norm || !mu || !sigma) return [];

              var distribution = [];
              var acc = 0;

              this.mesh.map(function (dX, i) {
                  distribution[i] = _this._math.pdf.lognormal(dX, mu, sigma);
                  acc += _this.spawnMask[i] * distribution[i];
              });

              var result = this.mesh.map(function (dX, i) {
                  return {
                      x: dX,
                      y0: 0,
                      y: norm * (distribution[i] * (1 - _this.spawnMask[i]) + _this.cosineShape[i] / _this.cosineArea * acc)
                  }
              });

              return result;
          },

          _adjustMaxY: function (options) {
              if (!options) options = {};
              var _this = this;
              var method = this.model.ui.chart.yMaxMethod;

              if (method !== "immediate" && !options.force) return;
              if (method === "latest") {
                var prevValues = _this.values;
                _this.model.marker.getFrame(_this.model.time.end, function(values) {
                  if(!values) return;
                    
                  _this.values = values;
                  _this.updateTime();
                  _this.values = prevValues;
                  _this.yScale.domain([0, Math.round(_this.yMax)]);
                  _this.updateTime();
                });
              } else {
                if (!_this.yMax) warn("Setting yMax to " + _this.yMax + ". You failed again :-/");
                _this.yScale.domain([0, Math.round(_this.yMax)]);
              }
          },

          redrawDataPoints: function () {
              var _this = this;
              var mergeGrouped = this.model.marker.group.merge;
              var mergeStacked = this.model.marker.stack.merge;
              var stackMode = this.model.marker.stack.which;
              //it's important to know if the chart is dragging or playing at the moment.
              //because if that is the case, the mountain chart will merge the stacked entities to save performance
              var dragOrPlay = (this.model.time.dragging || this.model.time.playing)
                  //never merge when no entities are stacked
                  && stackMode !== "none"
                  //when the time is playing and stops in the end, the time.playing is set to false after the slider is stopped
                  //so the mountain chat is stuck in the merged state. this line prevents it:
                  && !(this.model.time.value - this.model.time.end==0 && !this.model.time.loop);

              this._adjustMaxY();

              this.mountainsMergeStacked.each(function (d) {
                  var view = d3.select(this);
                  var hidden = !mergeStacked;
                  _this._renderShape(view, d.KEY(), hidden);
              })

              this.mountainsMergeGrouped.each(function (d) {
                  var view = d3.select(this);
                  var hidden = (!mergeGrouped && !dragOrPlay) || (mergeStacked && !_this.model.entities.isSelected(d));
                  _this._renderShape(view, d.KEY(), hidden);
              });

              this.mountainsAtomic.each(function (d, i) {
                  var view = d3.select(this);
                  var hidden = d.hidden || ((mergeGrouped || mergeStacked || dragOrPlay) && !_this.model.entities.isSelected(d));
                  _this._renderShape(view, d.KEY(), hidden);
              })

              if (stackMode === "none") {
                  this.mountainsAtomic.sort(function (a, b) {
                      return b.yMax - a.yMax;
                  });

              } else if (stackMode === "all") {
                  // do nothing if everything is stacked

              } else {
                  if (mergeGrouped || dragOrPlay) {
                      this.mountainsMergeGrouped.sort(function (a, b) {
                          return b.yMax - a.yMax;
                      });
                  } else {
                      this.mountainsAtomic.sort(function (a, b) {
                          return b.yMaxGroup - a.yMaxGroup;
                      });
                  }
              }


              // exporting shapes for shape preloader. is needed once in a while
              // if (!this.shapes) this.shapes = {}
              // this.shapes[this.model.time.value.getUTCFullYear()] = {
              //     yMax: d3.format(".2e")(_this.yMax),
              //     shape: _this.cached["all"].map(function (d) {return d3.format(".2e")(d.y);})
              // }

          },

          redrawDataPointsOnlyColors: function () {
              var _this = this;
              this.mountains.style("fill", function (d) {
                  return _this.values.color[d.KEY()]?_this.cScale(_this.values.color[d.KEY()]):"transparent";
              });
          },

          _renderShape: function (view, key, hidden) {
              var stack = this.model.marker.stack.which;
              var _this = this;

              view.classed("vzb-hidden", hidden);

              if (hidden) {
                  if (stack !== "none") view.style("stroke-opacity", 0);
                  return;
              }

              var filter = {};
              filter[this.KEY] = key;
              if (this.model.entities.isSelected(filter)) {
                  view.attr("d", this.area(this.cached[key].filter(function (f) {return f.y > _this.values.axis_y[key] * THICKNESS_THRESHOLD })));
              } else {
                  view.attr("d", this.area(this.cached[key]));
              }

              if (this.model.marker.color.use === "indicator") view
                  .style("fill", this.values.color[key] ? _this.cScale(this.values.color[key]) : "transparent");

              if (stack !== "none") view
                  .transition().duration(Math.random() * 900 + 100).ease("circle")
                  .style("stroke-opacity", .5);

              if (this.model.time.record) this._export.write({
                  type: "path",
                  id: key,
                  time: this.model.time.value.getUTCFullYear(),
                  fill: this.cScale(this.values.color[key]),
                  d: this.area(this.cached[key])
              });
          },

          _setTooltip: function (tooltipText) {
              if (tooltipText) {
                  var mouse = d3.mouse(this.graph.node()).map(function (d) { return parseInt(d); });

                  //position tooltip
                  this.tooltip.classed("vzb-hidden", false)
                      .attr("transform", "translate(" + (mouse[0]) + "," + (mouse[1]) + ")")
                      .selectAll("text")
                      .attr("text-anchor", "middle")
                      .attr("alignment-baseline", "middle")
                      .text(tooltipText)

                  var contentBBox = this.tooltip.select("text")[0][0].getBBox();

                  this.tooltip.select("rect")
                      .attr("width", contentBBox.width + 8)
                      .attr("height", contentBBox.height + 8)
                      .attr("x", -contentBBox.width - 25)
                      .attr("y", -contentBBox.height - 25)
                      .attr("rx", contentBBox.height * .2)
                      .attr("ry", contentBBox.height * .2);

                  this.tooltip.selectAll("text")
                      .attr("x", -contentBBox.width - 25 + ((contentBBox.width + 8)/2))
                      .attr("y", -contentBBox.height - 25 + ((contentBBox.height + 11)/2)); // 11 is 8 for margin + 3 for strokes
                  var translateX = (mouse[0] - contentBBox.width - 25) > 0 ? mouse[0] : (contentBBox.width + 25);
                  var translateY = (mouse[1] - contentBBox.height - 25) > 0 ? mouse[1] : (contentBBox.height + 25);
                  this.tooltip
                      .attr("transform", "translate(" + translateX + "," + translateY + ")");

              } else {

                  this.tooltip.classed("vzb-hidden", true);
              }
          }

      });

      //MOUNTAIN CHART TOOL
      var MountainChart = Tool.extend('MountainChart', {

        /**
         * Initializes the tool (MountainChart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "mountainchart";

          //specifying components
          this.components = [{
            component: MountainChartComponent,
            placeholder: '.vzb-tool-viz',
            model: ["state.time", "state.entities", "state.marker", "language", "ui"] //pass models to component
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }, {
            component: DataWarning,
            placeholder: '.vzb-tool-datawarning',
            model: ['language']
          }, {
            component: DataNotes,
            placeholder: '.vzb-tool-datanotes',
            model: ['state.marker', 'language']
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        }
      });

      //d3.svg.collisionResolver

      function collisionResolver() {
        return function collision_resolver() {
          var DURATION = 300;
          var labelHeight = {};
          var labelPosition = {};
          // MAINN FUNCTION. RUN COLLISION RESOLVER ON A GROUP g
          function resolver(g) {
            if(data == null) {
              console.warn(
                'D3 collision resolver stopped: missing data to work with. Example: data = {asi: {valueY: 45, valueX: 87}, ame: {valueY: 987, valueX: 767}}'
              );
              return;
            }
            if(selector == null) {
              console.warn('D3 collision resolver stopped: missing a CSS slector');
              return;
            }
            if(height == null) {
              console.warn('D3 collision resolver stopped: missing height of the canvas');
              return;
            }
            if(value == null) {
              console.warn(
                'D3 collision resolver stopped: missing pointer within data objects. Example: value = \'valueY\' ');
              return;
            }
            if(KEY == null) {
              console.warn('D3 collision resolver stopped: missing a key for data. Example: key = \'geo\' ');
              return;
            }
            g.each(function(d, index) {
              labelHeight[d[KEY]] = d3.select(this).select(selector)[0][0].getBBox().height;
            });
            labelPosition = resolver.calculatePositions(data, value, height, scale);
            //actually reposition the labels
            g.each(function(d, i) {
              if(data[d[KEY]][fixed])
                return;
              var resolvedY = labelPosition[d[KEY]] || scale(data[d[KEY]][value]) || 0;
              var resolvedX = null;
              if(handleResult != null) {
                handleResult(d, i, this, resolvedX, resolvedY);
                return;
              }
              d3.select(this).selectAll(selector).transition().duration(DURATION).attr('transform', 'translate(0,' +
                resolvedY + ')');
            });
          }

          // CALCULATE OPTIMIZED POSITIONS BASED ON LABELS' HEIGHT AND THEIR PROXIMITY (DELTA)
          resolver.calculatePositions = function(data, value, height, scale) {
            var result = {};
            var keys = Object.keys(data).sort(function(a, b) {
              return data[a][value] - data[b][value];
            });
            keys.forEach(function(d, index) {
              //initial positioning
              result[d] = scale(data[d][value]);
              // check the overlapping chain reaction all the way down
              for(var j = index; j > 0; j--) {
                // if overlap found shift the overlapped label downwards
                var delta = result[keys[j - 1]] - result[keys[j]] - labelHeight[keys[j]];
                if(delta < 0)
                  result[keys[j - 1]] -= delta;
                // if the chain reaction stopped because found some gap in the middle, then quit
                if(delta > 0)
                  break;
              }
            });
            // check if the lowest label is breaking the boundary...
            var delta = height - result[keys[0]] - labelHeight[keys[0]];
            // if it does, then
            if(delta < 0) {
              // shift the lowest up
              result[keys[0]] += delta;
              // check the overlapping chain reaction all the way up
              for(var j = 0; j < keys.length - 1; j++) {
                // if overlap found shift the overlapped label upwards
                var delta = result[keys[j]] - result[keys[j + 1]] - labelHeight[keys[j + 1]];
                if(delta < 0)
                  result[keys[j + 1]] += delta;
                // if the chain reaction stopped because found some gap in the middle, then quit
                if(delta > 0)
                  break;
              }
            }
            return result;
          };
          // GETTERS AND SETTERS
          var data = null;
          resolver.data = function(arg) {
            if(!arguments.length)
              return data;
            data = arg;
            return resolver;
          };
          var selector = null;
          resolver.selector = function(arg) {
            if(!arguments.length)
              return selector;
            selector = arg;
            return resolver;
          };
          var height = null;
          resolver.height = function(arg) {
            if(!arguments.length)
              return height;
            height = arg;
            return resolver;
          };
          var scale = d3.scale.linear().domain([
            0,
            1
          ]).range([
            0,
            1
          ]);
          resolver.scale = function(arg) {
            if(!arguments.length)
              return scale;
            scale = arg;
            return resolver;
          };
          var value = null;
          resolver.value = function(arg) {
            if(!arguments.length)
              return value;
            value = arg;
            return resolver;
          };
          var fixed = null;
          resolver.fixed = function(arg) {
            if(!arguments.length)
              return fixed;
            fixed = arg;
            return resolver;
          };
          var handleResult = null;
          resolver.handleResult = function(arg) {
            if(!arguments.length)
              return handleResult;
            handleResult = arg;
            return resolver;
          };
          var KEY = null;
          resolver.KEY = function(arg) {
            if(!arguments.length)
              return KEY;
            KEY = arg;
            return resolver;
          };
          return resolver;
        }();
      };

      //LINE CHART COMPONENT
      var LCComponent = Component.extend({

        init: function(config, context) {
          var _this = this;
          this.name = 'linechart';
          this.template = 'linechart.html';

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];


          this.model_binds = {
            'change:time.value': function() {
              if(!_this._readyOnce) return;
              _this.updateTime();
              _this.redrawDataPoints();
            },
            'change:time.playing': function() {
              // hide tooltip on touch devices when playing
              if (_this.model.time.playing && isTouchDevice() && !_this.tooltip.classed("vzb-hidden")) _this.tooltip.classed("vzb-hidden", true);
            },
            'change:time.start': function() {
              if(!_this._readyOnce) return;
              _this.updateShow();
            },
            'change:time.end': function() {
              if(!_this._readyOnce) return;
              _this.updateShow();
            },
            'change:marker': function(evt, path) {
              if(!_this._readyOnce) return;
              if(path.indexOf("domainMin") > -1 || path.indexOf("domainMax") > -1 || 
                path.indexOf("zoomedMin") > -1 || path.indexOf("zoomedMax") > -1) {
                if(!_this.yScale || !_this.xScale) return; //abort if building of the scale is in progress
                _this.zoomToMaxMin();
                _this.updateShow();
                _this.updateSize();
                _this.updateTime();
                _this.redrawDataPoints();
                return; 
              }
              if(path.indexOf("which") > -1 || path.indexOf("use") > -1) return;
              _this.ready();
            },
            "change:entities.highlight": function() {
              if(!_this._readyOnce) return;
              _this.highlightLines();
            },
            "change:entities.select": function() {
              if(!_this._readyOnce) return;
              _this.highlightLines();
            },
            'change:entities.opacitySelectDim': function() {
              if(!_this._readyOnce) return;
              _this.highlightLines();
            },
            'change:entities.opacityRegular': function() {
              if(!_this._readyOnce) return;
              _this.highlightLines();
            }
          };

          this._super(config, context);

          this.xScale = null;
          this.yScale = null;

          this.rangeXRatio = 1;
          this.rangeXShift = 0;

          this.rangeYRatio = 1;
          this.rangeYShift = 0;

          this.xAxis = axisSmart().orient("bottom");
          this.yAxis = axisSmart().orient("left");

          this.isDataPreprocessed = false;
          this.timeUpdatedOnce = false;
          this.sizeUpdatedOnce = false;

          this.getNearestKey = memoize(this.getNearestKey);
        },

        /*
         * domReady:
         * Executed after template is loaded
         * Ideally, it contains instantiations related to template
         */
        readyOnce: function() {
          var _this = this;

          this.element = d3.select(this.element);
          this.graph = this.element.select('.vzb-lc-graph');
          
          this.yAxisElContainer = this.graph.select('.vzb-lc-axis-y');
          this.yAxisEl = this.yAxisElContainer.select('g');

          this.xAxisElContainer = this.graph.select('.vzb-lc-axis-x');
          this.xAxisEl = this.xAxisElContainer.select('g');

          this.xTitleEl = this.graph.select('.vzb-lc-axis-x-title');
          this.yTitleEl = this.graph.select('.vzb-lc-axis-y-title');
          this.yInfoEl = this.graph.select('.vzb-lc-axis-y-info');
          this.xValueEl = this.graph.select('.vzb-lc-axis-x-value');
          this.yValueEl = this.graph.select('.vzb-lc-axis-y-value');
          this.linesContainerCrop = this.graph.select('.vzb-lc-lines-crop');
          this.linesContainer = this.graph.select('.vzb-lc-lines');
          this.labelsContainerCrop = this.graph.select('.vzb-lc-labels-crop');
          this.labelsContainer = this.graph.select('.vzb-lc-labels');
          
          this.verticalNow = this.labelsContainer.select(".vzb-lc-vertical-now");
          this.tooltip = this.element.select('.vzb-tooltip');
          //            this.filterDropshadowEl = this.element.select('#vzb-lc-filter-dropshadow');
          this.projectionX = this.graph.select(".vzb-lc-projection-x");
          this.projectionY = this.graph.select(".vzb-lc-projection-y");

          this.entityLines = null;
          this.entityLabels = null;
          this.totalLength_1 = {};

          this.KEY = this.model.entities.getDimension();

          //component events

          setIcon(this.yInfoEl, iconQuestion)
            .select("svg").attr("width", "0px").attr("height", "0px");

          this.yInfoEl.on("click", function() {
            _this.parent.findChildByName("gapminder-datanotes").pin();
          });
          this.yInfoEl.on("mouseover", function() {
            var rect = this.getBBox();
            var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
            _this.parent.findChildByName("gapminder-datanotes").setHook('axis_y').show().setPos(coord.x, coord.y);
          });
          this.yInfoEl.on("mouseout", function() {
            _this.parent.findChildByName("gapminder-datanotes").hide();
          });


          this.on("resize", function() {
            //return if updatesize exists with error
            if(_this.updateSize()) return;
            _this.updateTime();
            _this.redrawDataPoints();
          });
        },

        ready: function() {
          this.updateUIStrings();
          var _this = this;
            
          //null means we need to calculate all frames before we get to the callback
          this.model.marker.getFrame(null, function(allValues) {
            _this.all_values = allValues;
            _this.model.marker.getFrame(_this.model.time.value, function(values) {
              _this.values = values;
              _this.all_steps = _this.model.time.getAllSteps();
              _this.updateShow();
              _this.updateTime();
              _this.updateSize();
              _this.zoomToMaxMin();
              _this.redrawDataPoints();
              _this.linesContainerCrop
                .on('mousemove', _this.entityMousemove.bind(_this, null, null, _this))
                .on('mouseleave', _this.entityMouseout.bind(_this, null, null, _this));
              
            });
          });
        },

        updateUIStrings: function() {
          var _this = this;
          this.translator = this.model.language.getTFunction();

          this.strings = {
            title: {
              Y: this.translator("indicator/" + this.model.marker.axis_y.which),
              X: this.translator("indicator/" + this.model.marker.axis_x.which),
              C: this.translator("indicator/" + this.model.marker.color.which)
            },
            unit: {
              Y: this.translator("unit/" + this.model.marker.axis_y.which),
              X: this.translator("unit/" + this.model.marker.axis_x.which),
              C: this.translator("unit/" + this.model.marker.color.which)
            }
          };

          if(this.strings.unit.Y === "unit/" + this.model.marker.axis_y.which) this.strings.unit.Y = "";
          if(this.strings.unit.X === "unit/" + this.model.marker.axis_x.which) this.strings.unit.X = "";
          if(this.strings.unit.C === "unit/" + this.model.marker.color.which) this.strings.unit.C = "";

          if(!!this.strings.unit.Y) this.strings.unit.Y = ", " + this.strings.unit.Y;
          if(!!this.strings.unit.X) this.strings.unit.X = ", " + this.strings.unit.X;
          if(!!this.strings.unit.C) this.strings.unit.C = ", " + this.strings.unit.C;

          var xTitle = this.xTitleEl.selectAll("text").data([0]);
          xTitle.enter().append("text");

          var yTitle = this.yTitleEl.selectAll("text").data([0]);
          yTitle.enter().append("text");
          yTitle
            .on("click", function() {
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("axis_y")
                .alignX("left")
                .alignY("top")
                .updateView()
                .toggle();
            });
          
        },

        /*
         * UPDATE SHOW:
         * Ideally should only update when show parameters change or data changes
         */
        updateShow: function() {
          var _this = this;
          var KEY = this.KEY;

          this.cached = {};

          //scales
          this.yScale = this.model.marker.axis_y.getScale();
          this.xScale = this.model.marker.axis_x.getScale();
          this.cScale = this.model.marker.color.getScale();
          this.yAxis.tickSize(6, 0)
            .tickFormat(this.model.marker.axis_y.getTickFormatter());
          this.xAxis.tickSize(6, 0)
            .tickFormat(this.model.marker.axis_x.getTickFormatter());

          this.collisionResolver = collisionResolver()
            .selector(".vzb-lc-label")
            .value("valueY")
            .scale(this.yScale)
            .KEY(KEY);

          //line template
          this.line = d3.svg.line()
            //see https://bl.ocks.org/mbostock/4342190
            //"monotone" can also work. "basis" would skip the points on the sharp turns. "linear" is ugly
            .interpolate("cardinal") 
            .x(function(d) {
              return _this.xScale(d[0]);
            })
            .y(function(d) {
              return _this.yScale(d[1]);
            });
        },


        /*
         * UPDATE TIME:
         * Ideally should only update when time or data changes
         */
        updateTime: function() {
          var _this = this;
          var KEY = this.KEY;
          var time_1 = (this.time === null) ? this.model.time.value : this.time;
          this.time = this.model.time.value;
          this.duration = this.model.time.playing && (this.time - time_1 > 0) ? this.model.time.delayAnimations : 0;

          var timeDim = this.model.time.getDimension();
          var filter = {};

          filter[timeDim] = this.time;

          this.data = this.model.marker.getKeys();
          this.prev_steps = this.all_steps.filter(function(f){return f < _this.time;});

          this.entityLines = this.linesContainer.selectAll('.vzb-lc-entity').data(this.data);
          this.entityLabels = this.labelsContainer.selectAll('.vzb-lc-entity').data(this.data);

          this.timeUpdatedOnce = true;

        },

        /*
         * RESIZE:
         * Executed whenever the container is resized
         * Ideally, it contains only operations related to size
         */
        updateSize: function() {

          var _this = this;
          var values = this.values;
          var KEY = this.KEY;

          var padding = 2;

          var profiles = {
            "small": {
              margin: {
                top: 30,
                right: 20,
                left: 55,
                bottom: 30
              },
              infoElHeight: 16,
              yAxisTitleBottomMargin: 6,
              tick_spacing: 60,
              text_padding: 8,
              lollipopRadius: 6,
              limitMaxTickNumberX: 5
            },
            "medium": {
              margin: {
                top: 40,
                right: 60,
                left: 65,
                bottom: 40
              },
              infoElHeight: 20,
              yAxisTitleBottomMargin: 6,
              tick_spacing: 80,
              text_padding: 12,
              lollipopRadius: 7,
              limitMaxTickNumberX: 10
            },
            "large": {
              margin: {
                top: 50,
                right: 60,
                left: 70,
                bottom: 50
              },
              infoElHeight: 22,
              yAxisTitleBottomMargin: 6,
              tick_spacing: 100,
              text_padding: 20,
              lollipopRadius: 9,
              limitMaxTickNumberX: 0 // unlimited
            }
          };
          var presentationProfileChanges = {
            "medium": {
              margin: { top: 80, bottom: 80, left: 100 },
              yAxisTitleBottomMargin: 20,
              xAxisTitleBottomMargin: 20,
              infoElHeight: 26,
            },
            "large": {
              margin: { top: 80, bottom: 100, left: 100 },
              yAxisTitleBottomMargin: 20,
              xAxisTitleBottomMargin: 20,
              infoElHeight: 32,
              hideSTitle: true
            }
          };

          var timeSliderProfiles = {
            small: {
              margin: {
                top: 9,
                right: 15,
                bottom: 10,
                left: 10
              }
            },
            medium: {
              margin: {
                top: 9,
                right: 15,
                bottom: 10,
                left: 20
              }
            },
            large: {
              margin: {
                top: 9,
                right: 15,
                bottom: 10,
                left: 25
              }
            }
          };
          this.activeProfile = this.getActiveProfile(profiles, presentationProfileChanges);
          this.margin = this.activeProfile.margin;
          this.tick_spacing = this.activeProfile.tick_spacing;
          
          var infoElHeight = this.activeProfile.infoElHeight;

          //adjust right this.margin according to biggest label
          var lineLabelsText = this.model.marker.getKeys().map(function(d, i) {
            return values.label[d[KEY]];
          });

          var longestLabelWidth = 0;
          var lineLabelsView = this.linesContainer.selectAll(".samplingView").data(lineLabelsText);

          lineLabelsView
            .enter().append("text")
            .attr("class", "samplingView vzb-lc-labelname")
            .style("opacity", 0)
            .text(function(d) {
              return(d.length < 13) ? d : d.substring(0, 10) + '...';
            })
            .each(function(d) {
              if(longestLabelWidth > this.getComputedTextLength()) {
                return;
              }
              longestLabelWidth = this.getComputedTextLength();
            })
            .remove();

          this.margin.right = Math.max(this.margin.right, longestLabelWidth + this.activeProfile.text_padding + 20);


          //stage
          this.height = (parseInt(this.element.style("height"), 10) - this.margin.top - this.margin.bottom) || 0;
          this.width = (parseInt(this.element.style("width"), 10) - this.margin.left - this.margin.right) || 0;
          this.linesContainerCrop
            .attr("width", this.width)
            .attr("height", Math.max(0, this.height));

          this.labelsContainerCrop
            .attr("width", this.width + this.margin.right)
            .attr("height", Math.max(0, this.height));

          if(this.height<=0 || this.width<=0) return warn("Line chart updateSize() abort: vizabi container is too little or has display:none");

          this.collisionResolver.height(this.height);

          this.graph
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");


          if(this.model.marker.axis_y.scaleType !== "ordinal") {
            this.yScale.range([this.height * this.rangeYRatio + this.rangeYShift, this.rangeYShift]);
          } else {
            this.yScale.rangePoints([this.height * this.rangeYRatio + this.rangeYShift, this.rangeYShift], padding).range();
          }
          if(this.model.marker.axis_x.scaleType !== "ordinal") {
            this.xScale.range([this.rangeXShift, this.width * this.rangeXRatio + this.rangeXShift]);
          } else {
            this.xScale.rangePoints([[this.rangeXShift, this.width * this.rangeXRatio + this.rangeXShift]], padding).range();
          }


          this.yAxis.scale(this.yScale)
            .labelerOptions({
              scaleType: this.model.marker.axis_y.scaleType,
              timeFormat: this.model.time.timeFormat,
              toolMargin: {top: 5, bottom: 5, left: this.margin.left, right: this.margin.right},
              limitMaxTickNumber: 6,
              formatter: this.model.marker.axis_y.getTickFormatter()
                //showOuter: true
            });

          this.xAxis.scale(this.xScale)
            .labelerOptions({
              scaleType: this.model.marker.axis_x.scaleType,
              limitMaxTickNumber: this.activeProfile.limitMaxTickNumberX,
              toolMargin: {left: 5, right: 5, top: this.margin.top, bottom: this.margin.bottom},
              formatter: this.model.marker.axis_x.getTickFormatter()
              //showOuter: true
            });

          this.xAxisElContainer
            .attr("width", this.width + 1)
            .attr("height", this.activeProfile.margin.bottom)
            .attr("y", this.height - 1)
            .attr("x", -1);
          this.xAxisEl
            .attr("transform", "translate(1,1)");

          this.yAxisElContainer
            .attr("width", this.activeProfile.margin.left)
            .attr("height", Math.max(0, this.height))
            .attr("x", -this.activeProfile.margin.left);
          this.yAxisEl
            .attr("transform", "translate(" + (this.activeProfile.margin.left - 1) + "," + 0 + ")");
          
          this.yAxisEl.call(this.yAxis);
          this.xAxisEl.call(this.xAxis);

          this.xValueEl.attr("transform", "translate(0," + this.height + ")")
            .attr("y", this.xAxis.tickPadding() + this.xAxis.tickSize());

          var yaxisWidth = this.yAxisElContainer.select("g").node().getBBox().width;

          this.yTitleEl
            .style("font-size", infoElHeight + "px")
            .attr("transform", "translate(" + (-yaxisWidth) + ", -" + this.activeProfile.yAxisTitleBottomMargin + ")");

          var yTitleText = this.yTitleEl.select("text").text(this.strings.title.Y + this.strings.unit.Y);
          if(yTitleText.node().getBBox().width > this.width) yTitleText.text(this.strings.title.Y);

          if(this.yInfoEl.select('svg').node()) {
            var titleBBox = this.yTitleEl.node().getBBox();
            var translate = d3.transform(this.yTitleEl.attr('transform')).translate;

            this.yInfoEl.select('svg')
              .attr("width", infoElHeight + "px")
              .attr("height", infoElHeight + "px")
            this.yInfoEl.attr('transform', 'translate('
              + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
              + (translate[1] - infoElHeight * 0.8) + ')');
          }
          
          
          this.xTitleEl
            .style("font-size", infoElHeight + "px")
            .attr("transform", "translate(" + this.width + "," + this.height + ")");

          var xTitleText = this.xTitleEl.select("text").text(this.strings.title.X + this.strings.unit.X);
          if(xTitleText.node().getBBox().width > this.width - 100) xTitleText.text(this.strings.title.X);

          // adjust the vertical dashed line
          this.verticalNow.attr("y1", this.yScale.range()[0]).attr("y2", this.yScale.range()[1])
            .attr("x1", 0).attr("x2", 0);
          this.projectionX.attr("y1", _this.yScale.range()[0]);
          this.projectionY.attr("x2", _this.xScale.range()[0]);

          if(isTouchDevice()) {
            _this.tooltip.classed("vzb-hidden", true);
            _this.verticalNow.style("opacity", 1);
            _this.projectionX.style("opacity", 0);
            _this.projectionY.style("opacity", 0);
            _this.xAxisEl.call(_this.xAxis.highlightValue(_this.time));
            _this.yAxisEl.call(_this.yAxis.highlightValue("none"));
            _this.graph.selectAll(".vzb-lc-entity").each(function() {
              d3.select(this).classed("vzb-dimmed", false).classed("vzb-hovered", false);
            });

            _this.hoveringNow = null;
          }

          var opts = {
            rangeMax: this.xScale.range()[1],
            mRight: this.margin.right,
            profile: timeSliderProfiles[this.getLayoutProfile()]
          };
          this.parent.trigger('myEvent', opts);

          this.sizeUpdatedOnce = true;
        },

        /*
         * REDRAW DATA POINTS:
         * Here plotting happens
         */
        redrawDataPoints: function() {
          var _this = this;
          var KEY = this.KEY;
      //    var values = this.values;

          this.model.marker.getFrame(this.time, function(values, time) {

            if(!_this.timeUpdatedOnce) {
              _this.updateTime();
            }

            if(!_this.sizeUpdatedOnce) {
              _this.updateSize();
            }    
            
            _this.entityLabels.exit().remove();
            _this.entityLines.exit().remove();

            _this.entityLines.enter().append("g")
              .attr("class", "vzb-lc-entity")
              .each(function(d, index) {
                var entity = d3.select(this);

                entity.append("path")
                  .attr("class", "vzb-lc-line-shadow")
                  .attr("transform", "translate(0,2)");

                entity.append("path")
                  .attr("class", "vzb-lc-line");

              });

            _this.entityLabels.enter().append("g")
              .attr("class", "vzb-lc-entity")
              .each(function(d, index) {
                var entity = d3.select(this);
                var label = values.label[d[KEY]];

                entity.append("circle")
                  .attr("class", "vzb-lc-circle")
                  .attr("cx", 0);

                var labelGroup = entity.append("g").attr("class", "vzb-lc-label");

                labelGroup.append("text")
                  .attr("class", "vzb-lc-labelname")
                  .attr("dy", ".35em");

                labelGroup.append("text")
                  .attr("class", "vzb-lc-label-value")
                  .attr("dy", "1.6em");
              });
                  
            _this.entityLines
              .each(function(d, index) {
                var entity = d3.select(this);
                var label = values.label[d[KEY]];

                var color = _this.cScale(values.color[d[KEY]]);
                var colorShadow = _this.model.marker.color.which == "geo.world_4region"?
                    _this.model.marker.color.getColorShade({
                      colorID: values.color[d[KEY]],
                      shadeID: "shade"
                    })
                    :
                    d3.rgb(color).darker(0.5).toString();

                //TODO: optimization is possible if getValues would return both x and time
                //TODO: optimization is possible if getValues would return a limited number of points, say 1 point per screen pixel
                var xy = _this.prev_steps.map(function(frame, i) {
                        return [+frame,  _this.all_values[frame] ? +_this.all_values[frame].axis_y[d[KEY]] : null] ;
                    })
                    .filter(function(d) { return d[1] || d[1] === 0; });
                xy.push([+time, +values.axis_y[d[KEY]]]);
                _this.cached[d[KEY]] = {
                  valueY: xy[xy.length - 1][1]
                };


                // the following fixes the ugly line butts sticking out of the axis line
                //if(x[0]!=null && x[1]!=null) xy.splice(1, 0, [(+x[0]*0.99+x[1]*0.01), y[0]]);
                var path2 = entity.select(".vzb-lc-line");

                if(_this.model.time.playing && _this.totalLength_1[d[KEY]] === null) {
                  _this.totalLength_1[d[KEY]] = path2.node().getTotalLength();
                }

                var path1 = entity.select(".vzb-lc-line-shadow")
                  .style("stroke", colorShadow)
                  .attr("d", _this.line(xy));
                path2
                  //.style("filter", "none")
                  .style("stroke", color)
                  .attr("d", _this.line(xy));

                var totalLength = path2.node().getTotalLength();

                // this section ensures the smooth transition while playing and not needed otherwise
                if(_this.model.time.playing) {

                  path1
                    .interrupt()
                    .attr("stroke-dasharray", totalLength)
                    .attr("stroke-dashoffset", totalLength - _this.totalLength_1[d[KEY]])
                    .transition()
                    .delay(0)
                    .duration(_this.duration)
                    .ease("linear")
                    .attr("stroke-dashoffset", 0);
                  path2
                    .interrupt()
                    .attr("stroke-dasharray", totalLength)
                    .attr("stroke-dashoffset", totalLength - _this.totalLength_1[d[KEY]])
                    .transition()
                    .delay(0)
                    .duration(_this.duration)
                    .ease("linear")
                    .attr("stroke-dashoffset", 0);

                  _this.totalLength_1[d[KEY]] = totalLength;
                } else {
                  //reset saved line lengths
                  _this.totalLength_1[d[KEY]] = null;

                  path1
                    .attr("stroke-dasharray", "none")
                    .attr("stroke-dashoffset", "none");

                  path2
                    .attr("stroke-dasharray", "none")
                    .attr("stroke-dashoffset", "none");
                }

              });

            _this.entityLabels
              .each(function(d, index) {
                var entity = d3.select(this);
                var label = values.label[d[KEY]];

                var color = _this.cScale(values.color[d[KEY]]);
                var colorShadow = _this.model.marker.color.which == "geo.world_4region"?
                    _this.model.marker.color.getColorShade({
                      colorID: values.color[d[KEY]],
                      shadeID: "shade"
                    })
                    :
                    d3.rgb(color).darker(0.5).toString();


                entity.select(".vzb-lc-circle")
                  .style("fill", color)
                  .transition()
                  .duration(_this.duration)
                  .ease("linear")
                  .attr("r", _this.activeProfile.lollipopRadius)
                  .attr("cy", _this.yScale(_this.cached[d[KEY]].valueY) + 1);


                entity.select(".vzb-lc-label")
                  .transition()
                  .duration(_this.duration)
                  .ease("linear")
                  .attr("transform", "translate(0," + _this.yScale(_this.cached[d[KEY]].valueY) + ")");


                var value = _this.yAxis.tickFormat()(_this.cached[d[KEY]].valueY);
                var name = label.length < 13 ? label : label.substring(0, 10) + '...';
                var valueHideLimit = _this.ui.chart.labels.min_number_of_entities_when_values_hide;

                var t = entity.select(".vzb-lc-labelname")
                  .style("fill", colorShadow)
                  .attr("dx", _this.activeProfile.text_padding)
                  .text(name + " " + (_this.data.length < valueHideLimit ? value : ""));

                entity.select(".vzb-lc-label-value")
                  .style("fill", colorShadow)
                  .attr("dx", _this.activeProfile.text_padding)
                  .text("");

                if(_this.data.length < valueHideLimit) {

                  var size = _this.xScale(_this.time) + t[0][0].getComputedTextLength() + _this.activeProfile.text_padding;
                  var width = _this.width + _this.margin.right;

                  if(size > width) {
                    entity.select(".vzb-lc-labelname").text(name);
                    entity.select(".vzb-lc-label-value").text(value);
                  }
                }
              });
            _this.labelsContainer
              .transition()
              .duration(_this.duration)
              .ease("linear")
              .attr("transform", "translate(" + _this.xScale(d3.min([_this.model.marker.axis_x.zoomedMax, _this.time])) + ",0)");


              

            if(!_this.hoveringNow && _this.time - _this.model.time.start !== 0) {
              if (!_this.ui.chart.hideXAxisValue) _this.xAxisEl.call(
                 _this.xAxis.highlightValue(time).highlightTransDuration(_this.duration)
              );
              _this.verticalNow.style("opacity", 1);
            }else{
              _this.verticalNow.style("opacity", 0);
            }

            // Call flush() after any zero-duration transitions to synchronously flush the timer queue
            // and thus make transition instantaneous. See https://github.com/mbostock/d3/issues/1951
            if(_this.duration == 0) {
              d3.timer.flush();
            }

            // cancel previously queued simulation if we just ordered a new one
            // then order a new collision resolving
            clearTimeout(_this.collisionTimeout);
            _this.collisionTimeout = setTimeout(function() {
              _this.entityLabels.call(_this.collisionResolver.data(_this.cached));
            }, _this.model.time.delayAnimations * 1.5);
          
          });  
        },

        entityMousemove: function(me, index, context, closestToMouse) {
          var _this = context;
          var KEY = _this.KEY;
          var values = _this.values;

          var mouse = d3.mouse(_this.element.node()).map(function(d) {
            return parseInt(d);
          });

          var resolvedTime = _this.xScale.invert(mouse[0] - _this.margin.left);
          if(_this.time - resolvedTime < 0) {
            resolvedTime = _this.time;
          } else if(resolvedTime < this.model.time['start']) {
            resolvedTime = this.model.time['start'];
          }
          var resolvedValue;
          var timeDim = _this.model.time.getDimension();
          
          var mousePos = mouse[1] - _this.margin.bottom;

          if(!isDate(resolvedTime)) resolvedTime = this.model.time.timeFormat.parse(resolvedTime);
            
          this.model.marker.getFrame(resolvedTime, function(data) {
            var nearestKey = _this.getNearestKey(mousePos, data.axis_y, _this.yScale.bind(_this));
          resolvedValue = data.axis_y[nearestKey];
          if(!me) me = {};
          me[KEY] = nearestKey;
          if (!_this.model.entities.isHighlighted(me)) {
            _this.model.entities.clearHighlighted();
            _this.model.entities.highlightEntity(me);
          }
          _this.hoveringNow = me;

          if(isNaN$1(resolvedValue)) return;

          var scaledTime = _this.xScale(resolvedTime);
          var scaledValue = _this.yScale(resolvedValue);

          if(_this.ui.chart.whenHovering.showTooltip) {
            //position tooltip
            _this.tooltip
              //.style("right", (_this.width - scaledTime + _this.margin.right ) + "px")
              .style("left", (scaledTime + _this.margin.left) + "px")
              .style("bottom", (_this.height - scaledValue + _this.margin.bottom) + "px")
              .text(_this.yAxis.tickFormat()(resolvedValue))
              .classed("vzb-hidden", false);
          }

          // bring the projection lines to the hovering point
          if(_this.ui.chart.whenHovering.hideVerticalNow) {
            _this.verticalNow.style("opacity", 0);
          }

          if(_this.ui.chart.whenHovering.showProjectionLineX) {
            _this.projectionX
              .style("opacity", 1)
              .attr("y2", scaledValue)
              .attr("x1", scaledTime)
              .attr("x2", scaledTime);
          }
          if(_this.ui.chart.whenHovering.showProjectionLineY) {
            _this.projectionY
              .style("opacity", 1)
              .attr("y1", scaledValue)
              .attr("y2", scaledValue)
              .attr("x1", scaledTime);
          }

          if(_this.ui.chart.whenHovering.higlightValueX) _this.xAxisEl.call(
            _this.xAxis.highlightValue(resolvedTime).highlightTransDuration(0)
          );

          if(_this.ui.chart.whenHovering.higlightValueY) _this.yAxisEl.call(
            _this.yAxis.highlightValue(resolvedValue).highlightTransDuration(0)
          );

          clearTimeout(_this.unhoverTimeout);

          });
        },

        entityMouseout: function(me, index, context) {
          var _this = context;
          if(d3.event.relatedTarget && d3.select(d3.event.relatedTarget).classed('vzb-tooltip')) return;

          // hide and show things like it was before hovering
          _this.unhoverTimeout = setTimeout(function() {
            _this.tooltip.classed("vzb-hidden", true);
            _this.verticalNow.style("opacity", 1);
            _this.projectionX.style("opacity", 0);
            _this.projectionY.style("opacity", 0);
            _this.xAxisEl.call(_this.xAxis.highlightValue(_this.time));
            _this.yAxisEl.call(_this.yAxis.highlightValue("none"));

            _this.model.entities.clearHighlighted();
            
            _this.hoveringNow = null;
          }, 300);

        },

        /*
         * Highlights all hovered lines
         */
        highlightLines: function() {
          var _this = this;

          var OPACITY_HIGHLT = 1.0;
          var OPACITY_HIGHLT_DIM = .3;
          var OPACITY_SELECT = this.model.entities.opacityRegular;
          var OPACITY_REGULAR = this.model.entities.opacityRegular;
          var OPACITY_SELECT_DIM = this.model.entities.opacitySelectDim;

          var someHighlighted = (this.model.entities.highlight.length > 0);
          var someSelected = (this.model.entities.select.length > 0); 
          this.graph.selectAll(".vzb-lc-entity").each(function() {
            d3.select(this)
              .style("opacity", function(d) {
                if (_this.model.entities.isHighlighted(d)) return OPACITY_HIGHLT;
                if(someSelected) {
                  return _this.model.entities.isSelected(d) ? OPACITY_SELECT : OPACITY_SELECT_DIM;
                }
                if(someHighlighted) return OPACITY_HIGHLT_DIM;
                return OPACITY_REGULAR;            
              });
          });

        },

        zoomToMaxMin: function() {
          var _this = this;
          // 
          if(this.model.marker.axis_y.zoomedMin == null ) this.model.marker.axis_y.zoomedMin = this.yScale.domain()[0];
          if(this.model.marker.axis_y.zoomedMin == null ) this.model.marker.axis_y.zoomedMin = this.yScale.domain()[1];


          if(
            this.model.marker.axis_x.zoomedMin != null && 
            this.model.marker.axis_x.zoomedMax != null) {

            var x1 = this.xScale(this.model.marker.axis_x.zoomedMin);
            var x2 = this.xScale(this.model.marker.axis_x.zoomedMax);

            this.rangeXRatio = this.width / (x2 - x1) * this.rangeXRatio;
            this.rangeXShift = (this.rangeXShift - x1) / (x2 - x1) * this.width;

            this.xScale.range([this.rangeXShift, this.width*this.rangeXRatio + this.rangeXShift]);
            this.xAxisEl.call(this.xAxis);
          } 
          if (
            this.model.marker.axis_y.zoomedMin != null &&
            this.model.marker.axis_y.zoomedMax != null) {

            var y1 = this.yScale(this.model.marker.axis_y.zoomedMin);
            var y2 = this.yScale(this.model.marker.axis_y.zoomedMax);

            this.rangeYRatio = this.height / (y1 - y2) * this.rangeYRatio;
            this.rangeYShift = (this.height - y1) / (y1 - y2) * this.rangeYShift;

            this.yScale.range([this.height * this.rangeYRatio + this.rangeYShift, this.rangeYShift]);
            this.yAxisEl.call(this.yAxis);
          }
        },
        
        
        /**
         * Returns key from obj which value has the smallest difference with val
         */
        getNearestKey: function(val, obj, fn) {
          var keys = Object.keys(obj);
          var resKey = keys[0];
          for(var i = 1; i < keys.length; i++) {
            var key = keys[i];
            if(Math.abs((fn ? fn(obj[key]) : obj[key]) - val) < Math.abs((fn ? fn(obj[resKey]) : obj[resKey]) - val)) {
              resKey = key;
            }
          }
          return resKey;
        }

      });

      //LINE CHART TOOL
      var LineChart = Tool.extend('LineChart', {
          /**
           * Initialized the tool
           * @param {Object} placeholder Placeholder element for the tool
           * @param {Object} external_model Model as given by the external page
           */
          init: function(placeholder, external_model) {

            this.name = 'linechart';

            this.components = [{
              component: LCComponent,
              placeholder: '.vzb-tool-viz',
              model: ["state.time", "state.entities", "state.marker", "language"] //pass models to component
            }, {
              component: TimeSlider,
              placeholder: '.vzb-tool-timeslider',
              model: ["state.time", "state.entities", "state.marker"],
              ui: {show_value_when_drag_play: false, axis_aligned: true}
            }, {
              component: Dialogs,
              placeholder: '.vzb-tool-dialogs',
              model: ['state', 'ui', 'language']
            }, {
              component: ButtonList,
              placeholder: '.vzb-tool-buttonlist',
              model: ['state', 'ui', 'language']
            }, {
              component: TreeMenu,
              placeholder: '.vzb-tool-treemenu',
              model: ['state.marker', 'language']
            }, {
              component: DataNotes,
              placeholder: '.vzb-tool-datanotes',
              model: ['state.marker', 'language']
            }];

            this._super(placeholder, external_model);
          },

          default_model: {
          state: {
            time: {
              start: 1990,
              end: 2012,
              value: 2012,
              step: 1
            },
            //entities we want to show
            entities: {
              dim: "geo",
              show: {
                _defs_: {
                  "geo": ["*"],
                  "geo.cat": ["region"]
                }
              }
            },
            //how we show it
            marker: {
              space: ["entities", "time"],
              label: {
                use: "property",
                which: "geo.name"
              },
              axis_y: {
                use: "indicator",
                which: "gdp_pc",
                scaleType: "log"
              },
              axis_x: {
                use: "indicator",
                which: "time",
                scaleType: "time"
              },
              color: {
                use: "property",
                which: "geo.world_4region"
              }
            }
          },
          ui: {
            'vzb-tool-line-chart': {
              labels: {
                min_number_of_entities_when_values_hide: 10 //values hide when showing 10 entities or more
              },
              whenHovering: {
                hideVerticalNow: true,
                showProjectionLineX: true,
                showProjectionLineY: true,
                higlightValueX: true,
                higlightValueY: true,
                showTooltip: true
              }
            }
          }
        }

        });

      var Trail = Class.extend({

        init: function(context) {
          this.context = context;
          this._isCreated = null;
          this.actionsQueue = {};
          this.entityTrails = {};

        },

        toggle: function(arg) {
          var _context = this.context;

          if(arg) {
            _context._trails.create();
            _context._trails.run(["resize", "recolor", "opacityHandler", "findVisible", "reveal"]);
          } else {
            _context._trails.run("remove");
            _context.model.entities.select.forEach(function(d) {
              d.trailStartTime = null;
            });
          }
        },

        create: function(selection) {
          var _context = this.context;
          var _this = this;
          var KEY = _context.KEY;
          this._isCreated = new Promise(function(resolve, reject) {

            //quit if the function is called accidentally
            if(!_context.model.ui.chart.trails) return;

            var timePoints = _context.model.time.getAllSteps();

            //work with entities.select (all selected entities), if no particular selection is specified
            var promises = [];
            selection = selection == null ? _context.model.entities.select : [selection];
            
            var _trails = _context.bubbleContainer.selectAll('g.vzb-bc-entity')
              .data(_context.model.entities.select, function(d) {
                return(d[KEY]);
              })
              
            _trails.exit().remove();
        
            _trails.enter()
              .insert("g", function(d) { 
                return this.querySelector(".bubble-" + d[KEY]);
              })
              .attr("class", function(d) { 
                return "vzb-bc-entity trail-" + d[KEY];
              })
              .each(function(d, index) {
                var defer = new Promise();
                // used for prevent move trail start time forward when we have empty values at end of time range
                d.firstAvailableSegment = null;
                promises.push(defer);
                var trailSegmentData = timePoints.map(function(m) {
                  return {
                    t: m,
                    key: d[KEY]
                  }
                });
                if (_this.entityTrails[d[KEY]]) {
                   _this._remove(_this.entityTrails[d[KEY]], null, d);  
                }
                _this.entityTrails[d[KEY]] = d3.select(this).selectAll("g").data(trailSegmentData);
                
                _this.entityTrails[d[KEY]].exit().remove();
                
                _this.entityTrails[d[KEY]].enter().append("g")
                  .attr("class", "vzb-bc-trailsegment")
                  .on("mouseover", function(segment, index) {
                    if(isTouchDevice()) return;

                    var pointer = {};
                    pointer[KEY] = segment.key;
                    pointer.time = segment.t;

                    _context._axisProjections(pointer);
                    _context.labels.highlight(d, true);
                    var text = _context.model.time.timeFormat(segment.t);
                    var selectedData = find(_context.model.entities.select, function(f) {
                      return f[KEY] == d[KEY]
                    });
                    _context.model.marker.getFrame(pointer.time, function(values) {
                      var x = _context.xScale(values.axis_x[pointer[KEY]]);
                      var y = _context.yScale(values.axis_y[pointer[KEY]]);
                      var s = areaToRadius(_context.sScale(values.size[pointer[KEY]]));
                      var c = values.color[pointer[KEY]]!=null?_context.cScale(values.color[pointer[KEY]]):_context.COLOR_WHITEISH;
                      if(text !== selectedData.trailStartTime) {
                        _context._setTooltip(text, x, y, s + 3, c);
                      }
                      _context._setBubbleCrown(x, y, s, c);
                    });
                    //change opacity to OPACITY_HIGHLT = 1.0;
                    d3.select(this).style("opacity", 1.0);
                  })
                  .on("mouseout", function(segment, index) {
                    if(isTouchDevice()) return;
                    _context._axisProjections();
                    _context._setTooltip();
                    _context._setBubbleCrown();
                    _context.labels.highlight(null, false);
                    d3.select(this).style("opacity", _context.model.entities.opacityRegular);
                  })
                  .each(function(segment, index) {
                    var view = d3.select(this);
                    view.append("circle");
                    view.append("line");
                  });
                defer.resolve();
              });
            if (promises.length > 0) {
              Promise.all(promises).then(function (segments) {
                resolve(true);
              });
            } else {
              resolve(true);
            }
          });
          return this._isCreated;
        },

        /**
         * add actions for each selected entities
         * @param selections
         * @param actions
         * @private
         */
        _addActions: function(selections, actions) {
          var _context = this.context;
          var _this = this;
          var KEY = _context.KEY;

          selections.forEach(function(d) {
            if (!_this.actionsQueue[d[KEY]]) _this.actionsQueue[d[KEY]] = [];
            _this.actionsQueue[d[KEY]] = [].concat(_this.actionsQueue[d[KEY]].filter(function(value) {
              return actions.indexOf(value) == -1;
            }), actions);
          });
        },
        _getNextAction: function(key) {
          return this.actionsQueue[key].shift();
        },
        
        run: function(actions, selection, duration) {
          var _context = this.context;
          var _this = this;
          var KEY = _context.KEY;
          if (!this._isCreated || _context.model.time.splash) return;
          this._isCreated.then(function() {
            //quit if function is called accidentally
            if((!_context.model.ui.chart.trails || !_context.model.entities.select.length) && actions != "remove") return;

            if(!duration) duration = 0;

            //work with entities.select (all selected entities), if no particular selection is specified
            selection = selection == null ? _context.model.entities.select : [selection];
            _this._addActions(selection, actions);
            selection.forEach(function(d) {

              var trail = _this.entityTrails[d[KEY]];
              //do all the actions over "trail"
              var executeSequential = function(index) { // some function can be async, but we should run next when previous completed
                var action = _this._getNextAction(d[KEY]);
                if (action) {
                  var response = _context._trails["_" + action](trail, duration, d);
                  if (response && response instanceof Promise) {
                    response.then(function() {
                      executeSequential(index + 1);
                    })
                  } else {
                    executeSequential(index + 1);
                  }
                }
              };
              executeSequential(0);
            });
          });

        },


        _remove: function(trail, duration, d) {
          this.actionsQueue[d[this.context.KEY]] = []; 
          if (trail) { // TODO: in some reason run twice 
            d3.select(this.entityTrails[d[this.context.KEY]].node().parentNode).remove();
            this.entityTrails[d[this.context.KEY]] = null;
          }
        },

        _resize: function(trail, duration, d) {
          var _context = this.context;
          if (_context.model.time.splash) {
            return;
          }
      //    this._isCreated.then(function() {

          trail.each(function(segment, index) {
              
            if(segment.valueY==null || segment.valueX==null || segment.valueS==null) return;

            var view = d3.select(this);
            view.select("circle")
              //.transition().duration(duration).ease("linear")
              .attr("cy", _context.yScale(segment.valueY))
              .attr("cx", _context.xScale(segment.valueX))
              .attr("r", areaToRadius(_context.sScale(segment.valueS)));

            if(!this.nextSibling) return;
            var next = d3.select(this.nextSibling).datum();
            if(next == null) return;
            if(next.valueY==null || next.valueX==null) return;
              
            var lineLength = Math.sqrt(
                Math.pow(_context.xScale(segment.valueX) - _context.xScale(next.valueX),2) +
                Math.pow(_context.yScale(segment.valueY) - _context.yScale(next.valueY),2)
            );
            view.select("line")
              //.transition().duration(duration).ease("linear")
              .attr("x1", _context.xScale(next.valueX))
              .attr("y1", _context.yScale(next.valueY))
              .attr("x2", _context.xScale(segment.valueX))
              .attr("y2", _context.yScale(segment.valueY))
              .style("stroke-dasharray", lineLength)
              .style("stroke-dashoffset", areaToRadius(_context.sScale(segment.valueS)));
          });
        },

        _recolor: function(trail, duration, d) {
          var _context = this.context;

          trail.each(function(segment, index) {

            var view = d3.select(this);

            var strokeColor = _context.model.marker.color.which == "geo.world_4region"?
              //use predefined shades for color palette for "geo.world_4region" (hardcoded)
              _context.model.marker.color.getColorShade({
                colorID: segment.valueC,
                shadeID: "shade"
              })
              :
              //otherwise use color of the bubble with a fallback to bubble stroke color (blackish)
              (segment.valueC!=null?_context.cScale(segment.valueC):_context.COLOR_BLACKISH);

            view.select("circle")
              //.transition().duration(duration).ease("linear")
              .style("fill", segment.valueC!=null?_context.cScale(segment.valueC):_context.COLOR_WHITEISH);
            view.select("line")
              //.transition().duration(duration).ease("linear")
              .style("stroke", strokeColor);
          });
        },

        _opacityHandler: function(trail, duration, d) {
          var _context = this.context;

          trail.each(function(segment, index) {

            var view = d3.select(this);

            view
              //.transition().duration(duration).ease("linear")
              .style("opacity", d.opacity || _context.model.entities.opacityRegular);
          });
        },


        _findVisible: function(trail, duration, d) {
          var _context = this.context;
          var KEY = _context.KEY;

          var firstVisible = true;
          var trailStartTime = _context.model.time.timeFormat.parse("" + d.trailStartTime);

          if (_context.time - trailStartTime < 0) { // move trail start time with trail label back if need
            d.trailStartTime = _context.model.time.timeFormat(_context.time);
            trailStartTime = _context.model.time.timeFormat.parse("" + d.trailStartTime);
            var cache = _context.labels.cached[d[KEY]];
            cache.labelX0 = _context.frame.axis_x[d[KEY]];
            cache.labelY0 = _context.frame.axis_y[d[KEY]];
            var valueS = _context.frame.size[d[KEY]];
            cache.scaledS0 = valueS ? areaToRadius(_context.sScale(valueS)) : null;
            var valueC = _context.frame.color[d[KEY]];
            cache.scaledC0 = valueC != null ? _context.cScale(valueC) : _context.COLOR_WHITEISH;
            _context._updateLabel(d, 0, _context.frame.axis_x[d[KEY]], _context.frame.axis_y[d[KEY]], _context.frame.size[d[KEY]], _context.frame.color[d[KEY]], _context.frame.label[d[KEY]], _context.frame.size_label[d[KEY]], 0, true);
          }
          trail.each(function(segment, index) {
            // segment is transparent if it is after current time or before trail StartTime
            var segmentVisibility = segment.transparent; 
            segment.transparent = d.trailStartTime == null || (segment.t - _context.time > 0) || (trailStartTime - segment.t > 0)
              //no trail segment should be visible if leading bubble is shifted backwards, beyond start time
              || (d.trailStartTime - _context.model.time.timeFormat(_context.time) >= 0);
            // always update nearest 2 points
            if (segmentVisibility != segment.transparent || Math.abs(_context.model.time.timeFormat(segment.t) - _context.model.time.timeFormat(_context.time)) < 2) segment.visibilityChanged = true; // segment changed, so need to update it

          });
        },


        _reveal: function(trail, duration, d) {
          var _context = this.context;
          var KEY = _context.KEY;
          var trailStartTime = _context.model.time.timeFormat.parse("" + d.trailStartTime);
          var generateTrailSegment = function(trail, index) {
            return new Promise(function(resolve, reject) {
              var view = d3.select(trail[0][index]);
              var segment = view.datum();
              if(segment.transparent) {
                view.classed("vzb-invisible", segment.transparent);
                resolve();
              } else if (!segment.visibilityChanged) { // pass segment if it is not changed
                resolve();            
              } else {
                _context.model.marker.getFrame(segment.t, function(frame) {
                  if (!frame) return resolve();
                  segment.valueY = frame.axis_y[d[KEY]];
                  segment.valueX = frame.axis_x[d[KEY]];
                  segment.valueS = frame.size[d[KEY]];
                  segment.valueC = frame.color[d[KEY]];

                  if(segment.valueY==null || segment.valueX==null || segment.valueS==null) {
                    if (_context.time - trailStartTime > 0 && (!d.firstAvailableSegment || d.firstAvailableSegment - segment.t > 0)) { // move trail start time forward because previous values are empty
                      d.trailStartTime = _context.model.time.timeFormat(_context.model.time.incrementTime(trailStartTime));
                      trailStartTime = _context.model.time.timeFormat.parse("" + d.trailStartTime);
                    }
                    resolve();
                  } else {
                    if (!d.firstAvailableSegment || d.firstAvailableSegment - segment.t > 0) {
                      d.firstAvailableSegment = segment.t;
                    }
                    // fix label position if it not in correct place
                    var cache = _context.labels.cached[d[KEY]];
                    if (trailStartTime && trailStartTime.toString() == segment.t.toString()) {
                        cache.labelX0 = segment.valueX;
                        cache.labelY0 = segment.valueY;
                        var valueS = segment.valueS;
                        cache.scaledS0 = valueS ? areaToRadius(_context.sScale(valueS)) : null;
                        cache.scaledC0 = segment.valueC!=null?_context.cScale(segment.valueC):_context.COLOR_WHITEISH;
                        _context._updateLabel(d, index, segment.valueX, segment.valueY, segment.valueS, segment.valueC, frame.label[d[KEY]], frame.size_label[d[KEY]], 0, true);
                    }
                    view.select("circle")
                      //.transition().duration(duration).ease("linear")
                      .attr("cy", _context.yScale(segment.valueY))
                      .attr("cx", _context.xScale(segment.valueX))
                      .attr("r", areaToRadius(_context.sScale(segment.valueS)))
                      .style("fill", segment.valueC!=null?_context.cScale(segment.valueC):_context.COLOR_WHITEISH);

                    view.select("line")
                      .attr("x2", _context.xScale(segment.valueX))
                      .attr("y2", _context.yScale(segment.valueY))
                      .attr("x1", _context.xScale(segment.valueX))
                      .attr("y1", _context.yScale(segment.valueY));

                    // last point should have data for line but it is invisible
                    if (_context.time - segment.t > 0) {
                      segment.visibilityChanged = false;
                      view.classed("vzb-invisible", segment.transparent);
                    } else {
                      view.classed("vzb-invisible", true);
                    }
                    var next = trail[0][index + 1];
                    if(next == null || _context.time.toString() == segment.t.toString()) {
                      resolve();
                    } else {
                      next = next.__data__; 
                      var nextTime = next.t;
                      if (_context.time - next.t < 0) { // time is not equal start of year
                        segment.visibilityChanged = true; // redraw needed next time because line not have full length
                        nextTime = _context.time; 
                      }    
                      _context.model.marker.getFrame(nextTime, function(nextFrame) {

                        // TODO: find why data in segment sometimes become null
                        segment.valueY = frame.axis_y[d[KEY]];
                        segment.valueX = frame.axis_x[d[KEY]];
                        segment.valueS = frame.size[d[KEY]];
                        segment.valueC = frame.color[d[KEY]];

                        if(!nextFrame || segment.valueY==null || segment.valueX==null || segment.valueS==null) {
                          resolve();
                        } else {
                          if(nextFrame.axis_x[d[KEY]]==null || nextFrame.axis_y[d[KEY]]==null) {
                            resolve();
                          } else {
                            var strokeColor = _context.model.marker.color.which == "geo.world_4region"?
                              //use predefined shades for color palette for "geo.world_4region" (hardcoded)
                              _context.model.marker.color.getColorShade({
                                colorID: segment.valueC,
                                shadeID: "shade"
                              })
                              :
                              //otherwise use color of the bubble with a fallback to bubble stroke color (blackish)
                              (segment.valueC!=null?_context.cScale(segment.valueC):_context.COLOR_BLACKISH);

                            var lineLength = Math.sqrt(
                              Math.pow(_context.xScale(segment.valueX) - _context.xScale(nextFrame.axis_x[d[KEY]]),2) +
                              Math.pow(_context.yScale(segment.valueY) - _context.yScale(nextFrame.axis_y[d[KEY]]),2)
                            );
                            view.select("line")
                              .transition().duration(duration).ease("linear")
                              .attr("x1", _context.xScale(nextFrame.axis_x[d[KEY]]))
                              .attr("y1", _context.yScale(nextFrame.axis_y[d[KEY]]))
                              .attr("x2", _context.xScale(segment.valueX))
                              .attr("y2", _context.yScale(segment.valueY))
                              .style("stroke-dasharray", lineLength)
                              .style("stroke-dashoffset", areaToRadius(_context.sScale(segment.valueS)))
                              .style("stroke", strokeColor);
                            resolve();
                          }
                        }
                      });
                    }

                  }
                });          
              }
            });
          };
          var defer = new Promise();
          /**
           * update for generate next trail segment when previous segment finished
           * @param trail
           * @param index
           */
          var generateTrails = function(trail, index) {
            if (index < 0 || index >= trail[0].length) {
              return defer.resolve();
            }
            generateTrailSegment(trail, index).then(function() {
              generateTrails(trail, index + 1);
            });
          };
          generateTrails(trail, 0);
          return defer;
        }


      });

      var PanZoom = Class.extend({

          init: function(context) {
              this.context = context;

              this.dragRectangle = d3.behavior.drag();
              this.zoomer = d3.behavior.zoom();

              this.dragLock = false;

              this.dragRectangle
                  .on("dragstart", this.drag().start)
                  .on("drag", this.drag().go)
                  .on("dragend", this.drag().stop);

              this.zoomer
                  .scaleExtent([1, 100])
                  .on("zoomstart", this.zoom().start)
                  .on("zoom", this.zoom().go)
                  .on('zoomend', this.zoom().stop);

              this.zoomer.ratioX = 1;
              this.zoomer.ratioY = 1;

              context._zoomedXYMinMax = {axis_x:{zoomedMin: null, zoomedMax: null}, axis_y:{zoomedMin: null, zoomedMax: null}};
          },

          drag: function(){
              var _this = this.context;
              var self = this;

              return {
                  start: function(d, i) {
                      /*
                       * Do not drag if the Ctrl key, Meta key, or plus cursor mode is
                       * not enabled. Also do not drag if zoom-pinching on touchmove
                       * events.
                       */
                      if(!(d3.event.sourceEvent.ctrlKey || d3.event.sourceEvent.metaKey ||
                           _this.ui.cursorMode === "plus") ||
                           (d3.event.sourceEvent.type === "touchmove" || d3.event.sourceEvent.type === "touchstart") &&
                           (d3.event.sourceEvent.touches.length > 1 || d3.event.sourceEvent.targetTouches.length > 1)) {
                          return;
                      }

                      self.dragLock = true;
                      this.origin = {
                          x: d3.mouse(this)[0],
                          y: d3.mouse(this)[1]
                      };
                      _this.zoomRect.classed("vzb-invisible", false);
                  },

                  go: function(d, i) {
                      /*
                       * Cancel drag if drag lock is false, or when zoom-pinching via
                       * touchmove events.
                       */
                      if(!self.dragLock || (d3.event.sourceEvent.type === "touchmove" || d3.event.sourceEvent.type === "touchstart") &&
                          (d3.event.sourceEvent.touches.length > 1 || d3.event.sourceEvent.targetTouches.length > 1)) {
                          self.dragLock = false;

                          _this.zoomRect
                              .attr("width", 0)
                              .attr("height", 0)
                              .classed("vzb-invisible", true);

                          return;
                      }

                      var origin = this.origin;
                      var mouse = {
                          x: d3.event.x,
                          y: d3.event.y
                      };

                      _this.zoomRect
                          .attr("x", Math.min(mouse.x, origin.x))
                          .attr("y", Math.min(mouse.y, origin.y))
                          .attr("width", Math.abs(mouse.x - origin.x))
                          .attr("height", Math.abs(mouse.y - origin.y));
                  },

                  stop: function(e) {
                      if(!self.dragLock) return;
                      self.dragLock = false;

                      _this.zoomRect
                          .attr("width", 0)
                          .attr("height", 0)
                          .classed("vzb-invisible", true);

                      this.target = {
                          x: d3.mouse(this)[0],
                          y: d3.mouse(this)[1]
                      };

                      /*
                       * Only compensate for dragging when the Ctrl key or Meta key
                       * are pressed, or if the cursorMode is not in plus mode.
                       */
                      var compensateDragging = d3.event.sourceEvent.ctrlKey ||
                          d3.event.sourceEvent.metaKey ||
                          _this.ui.cursorMode === "plus";

                      self._zoomOnRectangle(
                          d3.select(this),
                          this.origin.x,
                          this.origin.y,
                          this.target.x,
                          this.target.y,
                          compensateDragging, 500
                      );
                  }
              };
          },

          zoom: function() {
              var _this = this.context;
              var zoomer = this.zoomer;
              var self = this;

              return {
                  start: function() {
                      this.savedScale = zoomer.scale();
                  },
                  go: function() {

                      var sourceEvent = d3.event.sourceEvent;

                      if(sourceEvent != null && (sourceEvent.ctrlKey || sourceEvent.metaKey)) return;

                      // Cancel drag lock when zoom-pinching via touchmove events.
                      if (sourceEvent !== null &&
                          (sourceEvent.type === "touchmove" || sourceEvent.type === "touchstart") &&
                          (sourceEvent.touches.length > 1 || sourceEvent.targetTouches.length > 1)) {
                          self.dragLock = false;
                      }

                      if (self.dragLock) return;

                      //send the event to the page if fully zoomed our or page not scrolled into view
      //
      //                    if(d3.event.scale == 1)
      //
      //                    if(utils.getViewportPosition(_this.element.node()).y < 0 && d3.event.scale > 1) {
      //                        _this.scrollableAncestor.scrollTop += d3.event.sourceEvent.deltaY;
      //                        return;
      //                    }
                      /*
                       * Do not zoom on the chart if the scroll event is a wheel
                       * scroll. Instead, redirect the scroll event to the scrollable
                       * ancestor
                       */
                      if (sourceEvent != null && (sourceEvent.type === "wheel" || sourceEvent.type === "mousewheel") && 
                          !_this.ui.zoomOnScrolling) {
                          if (_this.scrollableAncestor) {
                              _this.scrollableAncestor.scrollTop += (sourceEvent.deltaY || -sourceEvent.wheelDelta);
                          }
                          d3.event.scale = null;
                          zoomer.scale(this.savedScale);
                          this.quitZoom = true;
                          return;
                      }
                      this.quitZoom = false;

                      _this.model._data.entities.clearHighlighted();
                      _this._setTooltip();

                      var zoom = d3.event.scale;
                      var pan = d3.event.translate;
                      var ratioY = zoomer.ratioY;
                      var ratioX = zoomer.ratioX;

                      _this.draggingNow = true;

                      //value protections and fallbacks
                      if(isNaN(zoom) || zoom == null) zoom = zoomer.scale();
                      if(isNaN(zoom) || zoom == null) zoom = 1;

                      //TODO: this is a patch to fix #221. A proper code review of zoom and zoomOnRectangle logic is needed
                      /*
                       * Mouse wheel and touchmove events set the zoom value
                       * independently of axis ratios. If the zoom event was triggered
                       * by a mouse wheel event scrolling down or touchmove event with
                       * more than 1 contact that sets zoom to 1, then set the axis
                       * ratios to 1 as well, which will fully zoom out.
                       */
                      if(zoom === 1 && sourceEvent !== null &&
                          ((sourceEvent.type === "wheel" || sourceEvent.type === "mousewheel") && (sourceEvent.deltaY || -sourceEvent.wheelDelta) > 0 ||
                           sourceEvent.type === "touchmove" && sourceEvent.touches.length > 1)) {
                          zoomer.ratioX = 1;
                          ratioX = 1;
                          zoomer.ratioY = 1;
                          ratioY = 1
                      }

                      if(isNaN(pan[0]) || isNaN(pan[1]) || pan[0] == null || pan[1] == null) pan = zoomer.translate();
                      if(isNaN(pan[0]) || isNaN(pan[1]) || pan[0] == null || pan[1] == null) pan = [0, 0];

                      // limit the zooming, so that it never goes below 1 for any of the axes
                      if(zoom * ratioY < 1) {
                          ratioY = 1 / zoom;
                          zoomer.ratioY = ratioY
                      }
                      if(zoom * ratioX < 1) {
                          ratioX = 1 / zoom;
                          zoomer.ratioX = ratioX
                      }

                      //limit the panning, so that we are never outside the possible range
                      if(pan[0] > 0) pan[0] = 0;
                      if(pan[1] > 0) pan[1] = 0;
                      if(pan[0] < (1 - zoom * ratioX) * _this.width) pan[0] = (1 - zoom * ratioX) * _this.width;
                      if(pan[1] < (1 - zoom * ratioY) * _this.height) pan[1] = (1 - zoom * ratioY) * _this.height;

                      var xPanOffset = _this.width * zoom * ratioX;
                      var yPanOffset = _this.height * zoom * ratioY;

                      var xRange = [0 * zoom * ratioX + pan[0], xPanOffset + pan[0]];
                      var yRange = [yPanOffset + pan[1], 0 * zoom * ratioY + pan[1]];

                      var xRangeBumped = _this._rangeBump(xRange);
                      var yRangeBumped = _this._rangeBump(yRange);

                      /*
                       * Shift xRange and yRange by the difference between the bumped
                       * ranges, which is scaled by the zoom factor. This accounts for
                       * the range bump, which controls a gutter around the
                       * bubblechart, while correctly zooming.
                       */
                      var xRangeMinOffset = (xRangeBumped[0] - xRange[0]) * zoom * ratioX;
                      var xRangeMaxOffset = (xRangeBumped[1] - xRange[1]) * zoom * ratioX;

                      var yRangeMinOffset = (yRangeBumped[0] - yRange[0]) * zoom * ratioY;
                      var yRangeMaxOffset = (yRangeBumped[1] - yRange[1]) * zoom * ratioY;

                      xRange[0] = xRange[0] + xRangeMinOffset;
                      xRange[1] = xRange[1] + xRangeMaxOffset;

                      yRange[0] = yRange[0] + yRangeMinOffset;
                      yRange[1] = yRange[1] + yRangeMaxOffset;

                      // Calculate the maximum xRange and yRange available.
                      var xRangeBounds = [0,  _this.width];
                      var yRangeBounds = [_this.height, 0];

                      var xRangeBoundsBumped = _this._rangeBump(xRangeBounds);
                      var yRangeBoundsBumped = _this._rangeBump(yRangeBounds);

                      /*
                       * Set the pan to account for the range bump by subtracting
                       * offsets and preventing panning past the range bump gutter.
                       */
                      if(xRange[0] > xRangeBoundsBumped[0]) pan[0] = xRangeBoundsBumped[0] - xRangeMinOffset;
                      if(xRange[1] < xRangeBoundsBumped[1]) pan[0] = xRangeBoundsBumped[1] - xRangeMaxOffset - xPanOffset;
                      if(yRange[0] < yRangeBoundsBumped[0]) pan[1] = yRangeBoundsBumped[0] - yRangeMinOffset - yPanOffset;
                      if(yRange[1] > yRangeBoundsBumped[1]) pan[1] = yRangeBoundsBumped[1] - yRangeMaxOffset;

                      zoomer.translate(pan);

                      /*
                       * Clamp the xRange and yRange by the amount that the bounds
                       * that are range bumped.
                       *
                       * Additionally, take the amount clamped on the end of the range
                       * and either subtract or add it to the range's other end. This
                       * prevents visible stretching of the range when only panning.
                       */
                      if(xRange[0] > xRangeBoundsBumped[0]) {
                          xRange[1] = xRange[1] - Math.abs(xRange[0] - xRangeBoundsBumped[0]);
                          xRange[0] = xRangeBoundsBumped[0];
                      }

                      if(xRange[1] < xRangeBoundsBumped[1]) {
                          xRange[0] = xRange[0] + Math.abs(xRange[1] - xRangeBoundsBumped[1]);
                          xRange[1] = xRangeBoundsBumped[1];
                      }

                      if(yRange[0] < yRangeBoundsBumped[0]) {
                          yRange[1] = yRange[1] + Math.abs(yRange[0] - yRangeBoundsBumped[0]);
                          yRange[0] = yRangeBoundsBumped[0];
                      }

                      if(yRange[1] > yRangeBoundsBumped[1]) {
                          yRange[0] = yRange[0] - Math.abs(yRange[1] - yRangeBoundsBumped[1]);
                          yRange[1] = yRangeBoundsBumped[1];
                      }

                      if(_this.model.marker.axis_x.scaleType === 'ordinal'){
                          _this.xScale.rangeBands(xRange);
                      }else{
                          _this.xScale.range(xRange);
                      }

                      if(_this.model.marker.axis_y.scaleType === 'ordinal'){
                          _this.yScale.rangeBands(yRange);
                      }else{
                          _this.yScale.range(yRange);
                      }

                      var formatter = function(n) { return isDate(n)? n : d3.round(n, 2); };

                      var zoomedXRange = xRangeBoundsBumped;
                      var zoomedYRange = yRangeBoundsBumped;

                      /*
                       * Set the zoomed min/max to the correct value depending on if the
                       * min/max values lie within the range bound regions.
                       */
                      zoomedXRange[0] = xRangeBounds[0] > xRange[0] ? xRangeBounds[0] : xRange[0];
                      zoomedXRange[1] = xRangeBounds[1] < xRange[1] ? xRangeBounds[1] : xRange[1];
                      zoomedYRange[0] = yRangeBounds[0] < yRange[0] ? yRangeBounds[0] : yRange[0];
                      zoomedYRange[1] = yRangeBounds[1] > yRange[1] ? yRangeBounds[1] : yRange[1];
                      
                      _this._zoomedXYMinMax = {
                        axis_x: {
                          zoomedMin: formatter(_this.xScale.invert(zoomedXRange[0])),
                          zoomedMax: formatter(_this.xScale.invert(zoomedXRange[1]))
                        },
                        axis_y: {
                          zoomedMin: formatter(_this.yScale.invert(zoomedYRange[0])),
                          zoomedMax: formatter(_this.yScale.invert(zoomedYRange[1]))
                        }
                      }


                      _this.model.marker.set(_this._zoomedXYMinMax, null, false /*avoid storing it in URL*/);

                      // Keep the min and max size (pixels) constant, when zooming.
                      //                    _this.sScale.range([utils.radiusToArea(_this.minRadius) * zoom * zoom * ratioY * ratioX,
                      //                                        utils.radiusToArea(_this.maxRadius) * zoom * zoom * ratioY * ratioX ]);

                      var optionsY = _this.yAxis.labelerOptions();
                      var optionsX = _this.xAxis.labelerOptions();
                      optionsY.limitMaxTickNumber = zoom * ratioY < 2 ? 7 : zoom * ratioY * 7;
                      optionsX.limitMaxTickNumber = zoom * ratioX < 2 ? 7 : zoom * ratioX * 7;
                      optionsY.transitionDuration = zoomer.duration;
                      optionsX.transitionDuration = zoomer.duration;

                      _this.xAxisEl.call(_this.xAxis.labelerOptions(optionsX));
                      _this.yAxisEl.call(_this.yAxis.labelerOptions(optionsY));
                      _this.redrawDataPoints(zoomer.duration);
                      _this._trails.run("resize", null, zoomer.duration);

                      zoomer.duration = 0;
                  },

                  stop: function(){
                      _this.draggingNow = false;

                      if (this.quitZoom) return;

                      //Force the update of the URL and history, with the same values
                      _this.model.marker.set(_this._zoomedXYMinMax, true, true);
                  }
              };
          },

          expandCanvas: function(duration) {
              var _this = this.context;
              if (!duration) duration = _this.duration;

              //d3 extent returns min and max of the input array as [min, max]
              var mmX = d3.extent(values(_this.frame.axis_x));
              var mmY = d3.extent(values(_this.frame.axis_y));
              var radiusMax = areaToRadius(_this.sScale( d3.extent(values(_this.frame.size))[1] )) || 0;

              //protection agains unreasonable min-max results -- abort function
              if (!mmX[0] && mmX[0]!==0 || !mmX[1] && mmX[1]!==0 || !mmY[0] && mmY[0]!==0 || !mmY[1] && mmY[1]!==0) {
                return warn("panZoom.expandCanvas: X or Y min/max are broken. Aborting with no action");
              }
              /*
               * Use a range bumped scale to correctly accommodate the range bump
               * gutter.
               */
              var suggestedFrame = {
                  x1: _this.xScale(mmX[0]) - radiusMax,
                  y1: _this.yScale(mmY[0]) + radiusMax,
                  x2: _this.xScale(mmX[1]) + radiusMax,
                  y2: _this.yScale(mmY[1]) - radiusMax
              };
              var xBounds = [0, _this.width];
              var yBounds = [_this.height, 0];

              // Get the current zoom frame based on the current dimensions.
              var frame = {
                  x1: xBounds[0],
                  x2: xBounds[1],
                  y1: yBounds[0],
                  y2: yBounds[1]
              };

              var TOLERANCE = .0;

              /*
               * If there is no current zoom frame, or if any of the suggested frame
               * points extend outside of the current zoom frame, then expand the
               * canvas.
               */
              if(!_this.isCanvasPreviouslyExpanded ||
                  suggestedFrame.x1 < frame.x1 * (1 - TOLERANCE) || suggestedFrame.x2 > frame.x2 * (1 + TOLERANCE) ||
                  suggestedFrame.y2 < frame.y2 * (1 - TOLERANCE) || suggestedFrame.y1 > frame.y1 * (1 + TOLERANCE)) {
                  /*
                   * If there is already a zoom frame, then clamp the suggested frame
                   * points to only zoom out and expand the canvas.
                   *
                   * If any of x1, x2, y1, or y2 is within the current frame
                   * boundaries, then clamp them to the frame boundaries. If any of
                   * the above values will translate into a data value that is outside
                   * of the possible data range, then clamp them to the frame
                   * coordinate that corresponds to the maximum data value that can
                   * be displayed.
                   */
                  if (_this.isCanvasPreviouslyExpanded) {
                      /*
                       * Calculate bounds and bumped scale for calculating the data boundaries
                       * to which the suggested frame points need to be clamped.
                       */
                      var xBoundsBumped = _this._rangeBump(xBounds);
                      var yBoundsBumped = _this._rangeBump(yBounds);

                      var xScaleBoundsBumped = _this.xScale.copy()
                          .range(xBoundsBumped);
                      var yScaleBoundsBumped = _this.yScale.copy()
                          .range(yBoundsBumped);

                      var xDataBounds = [xScaleBoundsBumped.invert(xBounds[0]), xScaleBoundsBumped.invert(xBounds[1])];
                      var yDataBounds = [yScaleBoundsBumped.invert(yBounds[0]), yScaleBoundsBumped.invert(yBounds[1])];

                      if (suggestedFrame.x1 > 0)
                          suggestedFrame.x1 = 0;
                      else if (_this.xScale.invert(suggestedFrame.x1) < xDataBounds[0])
                          suggestedFrame.x1 = _this.xScale(xDataBounds[0]);

                      if (suggestedFrame.x2 < _this.width)
                          suggestedFrame.x2 = _this.width;
                      else if (_this.xScale.invert(suggestedFrame.x2) > xDataBounds[1])
                          suggestedFrame.x2 = _this.xScale(xDataBounds[1]);

                      if (suggestedFrame.y1 < _this.height)
                          suggestedFrame.y1 = _this.height;
                      else if (_this.yScale.invert(suggestedFrame.y1) < yDataBounds[0])
                          suggestedFrame.y1 = _this.yScale(yDataBounds[0]);

                      if (suggestedFrame.y2 > 0)
                          suggestedFrame.y2 = 0;
                      else if (_this.yScale.invert(suggestedFrame.y2) > yDataBounds[1])
                          suggestedFrame.y2 = _this.yScale(yDataBounds[1]);
                  }

                  _this.isCanvasPreviouslyExpanded = true;
                  this._zoomOnRectangle(_this.element, suggestedFrame.x1, suggestedFrame.y1,
                      suggestedFrame.x2, suggestedFrame.y2, false, duration);
              } else {
                  _this.redrawDataPoints(duration);
              }
          },

          zoomToMaxMin: function(zoomedMinX, zoomedMaxX, zoomedMinY, zoomedMaxY, duration){
              var _this = this.context;
              var minX = zoomedMinX;
              var maxX = zoomedMaxX;
              var minY = zoomedMinY;
              var maxY = zoomedMaxY;

              var xRangeBounds = [0, _this.width];
              var yRangeBounds = [_this.height, 0];

              var xDomain = _this.xScale.domain();
              var yDomain = _this.yScale.domain();

              // Clamp zoomed values to maximum and minimum values.
              if (minX < xDomain[0]) minX = xDomain[0];
              if (maxX > xDomain[1]) maxX = xDomain[1];
              if (minY < yDomain[0]) minY = yDomain[0];
              if (maxY > yDomain[1]) maxY = yDomain[1];

              /*
               * Define TOLERANCE value as Number.EPSILON if exists, otherwise use
               * ES6 standard value.
               */
              var TOLERANCE = Number.EPSILON ? Number.EPSILON : 2.220446049250313e-16;

              /*
               * Check if the range bump region is currently displayed, i.e. for the
               * minX range bump region, check:
               * _this.xScale.invert(xRangeBounds[0]) < _this.xScale.domain()[0]
               *
               * Also check if the given min/max values equal the domain edges.
               * If so, then set the min/max values according to their range bumped
               * values. These values are used to calculate the correct rectangle
               * points for zooming.
               */
              if (_this.xScale.invert(xRangeBounds[0]) < xDomain[0]
                  && Math.abs(minX - xDomain[0]) < TOLERANCE) {
                  minX = _this.xScale.invert(xRangeBounds[0]);
              }

              if (_this.xScale.invert(xRangeBounds[1]) > xDomain[1]
                  && Math.abs(maxX - xDomain[1]) < TOLERANCE) {
                  maxX = _this.xScale.invert(xRangeBounds[1]);
              }

              if (_this.yScale.invert(yRangeBounds[0]) < yDomain[0]
                  && Math.abs(minY - yDomain[0]) < TOLERANCE) {
                  minY = _this.yScale.invert(yRangeBounds[0]);
              }

              if (_this.yScale.invert(yRangeBounds[1]) > yDomain[1]
                  && Math.abs(maxY - yDomain[1]) < TOLERANCE) {
                  maxY = _this.yScale.invert(yRangeBounds[1]);
              }

              var xRange = [_this.xScale(minX), _this.xScale(maxX)];
              var yRange = [_this.yScale(minY), _this.yScale(maxY)];

              this._zoomOnRectangle(_this.element, xRange[0], yRange[0], xRange[1], yRange[1], false, duration);
          },

          _zoomOnRectangle: function(element, zoomedX1, zoomedY1, zoomedX2, zoomedY2, compensateDragging, duration) {
              var _this = this.context;
              var zoomer = this.zoomer;

              var x1 = zoomedX1;
              var y1 = zoomedY1;
              var x2 = zoomedX2;
              var y2 = zoomedY2;

              /*
               * When dragging to draw a rectangle, the translate vector has (x2 - x1)
               * added to zoomer.translate()[0], and (y2 - 1) added to
               * zoomer.translate()[1].
               *
               * We need to compensate for this addition when
               * zooming with a rectangle, because zooming with a rectangle will
               * update the translate vector with new values based on the rectangle
               * dimensions.
               */
              if(compensateDragging) {
                  zoomer.translate([
                      zoomer.translate()[0] + x1 - x2,
                      zoomer.translate()[1] + y1 - y2
                  ]);
              }

              var xRangeBounds = [0, _this.width];
              var yRangeBounds = [_this.height, 0];

              var xDomain = _this.xScale.domain();
              var yDomain = _this.yScale.domain();

              /*
               * If the min or max of one axis lies in the range bump region, then
               * changing the opposite end of that axis must correctly scale and
               * maintain the range bump region.
               */
              if (_this.xScale.invert(x1) < xDomain[0]) {
                  x1 = this._scaleCoordinate(x1, xRangeBounds[1] - x2, _this.xScale.range()[0], xRangeBounds[1]);
              } else if (_this.xScale.invert(x2) < xDomain[0]) {
                  x2 = this._scaleCoordinate(x2, xRangeBounds[1] - x1, _this.xScale.range()[0], xRangeBounds[1]);
              }

              if (_this.xScale.invert(x2) > xDomain[1]) {
                  x2 = this._scaleCoordinate(x2, x1 - xRangeBounds[0], _this.xScale.range()[1], xRangeBounds[0]);
              } else if (_this.xScale.invert(x1) > xDomain[1]) {
                  x1 = this._scaleCoordinate(x1, x2 - xRangeBounds[0], _this.xScale.range()[1], xRangeBounds[0]);
              }

              if (_this.yScale.invert(y1) < yDomain[0]) {
                  y1 = this._scaleCoordinate(y1, y2 - yRangeBounds[1], _this.yScale.range()[0], yRangeBounds[1]);
              } else if (_this.yScale.invert(y2) < yDomain[0]) {
                  y2 = this._scaleCoordinate(y2, y1 - yRangeBounds[1], _this.yScale.range()[0], yRangeBounds[1]);
              }

              if (_this.yScale.invert(y2) > yDomain[1]) {
                  y2 = this._scaleCoordinate(y2, yRangeBounds[0] - y1, _this.yScale.range()[1], yRangeBounds[0]);
              } else if (_this.yScale.invert(y1) > yDomain[1]) {
                  y1 = this._scaleCoordinate(y1, yRangeBounds[0] - y2, _this.yScale.range()[1], yRangeBounds[0]);
              }

              if(Math.abs(x1 - x2) < 10 || Math.abs(y1 - y2) < 10) return;

              var maxZoom = zoomer.scaleExtent()[1];

              if(Math.abs(x1 - x2) > Math.abs(y1 - y2)) {
                  var zoom = _this.height / Math.abs(y1 - y2) * zoomer.scale();

                  /*
                   * Clamp the zoom scalar to the maximum zoom allowed before
                   * calculating the next ratioX and ratioY.
                   */
                  if (zoom > maxZoom) zoom = maxZoom;

                  var ratioX = _this.width / Math.abs(x1 - x2) * zoomer.scale() / zoom * zoomer.ratioX;
                  var ratioY = zoomer.ratioY;
              } else {
                  var zoom = _this.width / Math.abs(x1 - x2) * zoomer.scale();

                  /*
                   * Clamp the zoom scalar to the maximum zoom allowed before
                   * calculating the next ratioX and ratioY.
                   */
                  if (zoom > maxZoom) zoom = maxZoom;

                  var ratioY = _this.height / Math.abs(y1 - y2) * zoomer.scale() / zoom * zoomer.ratioY;
                  var ratioX = zoomer.ratioX;
              }

              var pan = [
                  (zoomer.translate()[0] - Math.min(x1, x2)) / zoomer.scale() / zoomer.ratioX * zoom * ratioX,
                  (zoomer.translate()[1] - Math.min(y1, y2)) / zoomer.scale() / zoomer.ratioY * zoom * ratioY
              ];

              zoomer.scale(zoom);
              zoomer.ratioY = ratioY;
              zoomer.ratioX = ratioX;
              zoomer.translate(pan);
              zoomer.duration = duration ? duration : 0;

              zoomer.event(element);
          },

          /*
           * Helper function that returns a scaled coordinate value based on the
           * distance between the given coordinate and the data boundary.
           */
          _scaleCoordinate: function(coordValue, scaleDifference, dataBoundary, viewportBoundary) {
              var scalar = scaleDifference / Math.abs(dataBoundary - viewportBoundary);
              return (coordValue - dataBoundary) * (1 - scalar) + dataBoundary;
          },

          /*
           * Calculate a proportional reduction of the scalar value. Also,
           * calculate the reduction of the value by a constant of 1.
           *
           * Return the larger of the two calculated values.
           */
          _scaleToMin: function(scalar, minScalar, proportion, constant) {
              var scalarProportionDelta = (scalar - minScalar) * proportion;
              var scalarDifferenceDelta = Math.max(constant, minScalar - constant);
              var scalarDelta = Math.max(scalarProportionDelta, scalarDifferenceDelta);

              return scalarDelta;
          },

          /*
           * Incrementally zoom in or out and pan the view so that it never looses the point where click happened
           * this function is a modified d3's own zoom behavior on double click
           * for the original code see https://github.com/mbostock/d3/blob/master/src/behavior/zoom.js
           * function dblclicked() and what it refers to 
           */
          zoomByIncrement: function(direction, duration) {
              var _this = this.context;
              
              var ratio = this.zoomer.scale();
              var pan = [this.zoomer.translate()[0], this.zoomer.translate()[1]];
              
              var mouse = d3.mouse(_this.element.node());
              var k = Math.log(ratio) / Math.LN2;
              
              //change factor direction based on the input. default is no direction supplied
              if(direction=="plus" || !direction) k = Math.floor(k) + 1;
              if(direction=="minus") k = Math.ceil(k) - 1;

              //decode panning
              var locus = [(mouse[0] - pan[0]) / ratio, (mouse[1] - pan[1]) / ratio];

              //recalculate zoom ratio
              var scaleExtent = this.zoomer.scaleExtent();
              ratio = Math.max(scaleExtent[0], Math.min( scaleExtent[1], Math.pow(2, k) ));
              
              //recalculate panning
              locus = [locus[0] * ratio + pan[0], locus[1] * ratio + pan[1]];
              pan[0] += mouse[0] - locus[0];
              pan[1] += mouse[1] - locus[1];
              
              //save changes to the zoom behavior and run the event
              this.zoomer.scale(ratio);
              this.zoomer.translate([pan[0], pan[1]]);
              this.zoomer.duration = duration||0;
              this.zoomer.event(_this.element);
          },    
          

          /*
           * Reset zoom values without triggering a zoom event.
           */
           resetZoomState: function(element) {
              this.zoomer.scale(1);
              this.zoomer.ratioY = 1;
              this.zoomer.ratioX = 1;
              this.zoomer.translate([0, 0]);
          },

          reset: function(element, duration) {
              var _this = this.context;
              _this.isCanvasPreviouslyExpanded = false;

              this.zoomer.scale(1);
              this.zoomer.ratioY = 1;
              this.zoomer.ratioX = 1;
              this.zoomer.translate([0, 0]);
              this.zoomer.duration = duration||0;
              this.zoomer.event(element || _this.element);
          },

          rerun: function(element) {
              var _this = this.context;
              this.zoomer.event(element || _this.element);
          }
      });

      //BUBBLE CHART COMPONENT
      var BubbleChartComp = Component.extend({

        /**
         * Initializes the component (Bubble Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The config passed to the component
         * @param {Object} context The component's parent
         */
        init: function(config, context) {
          var _this = this;
          this.name = 'bubblechart';
          this.template = 'bubblechart.html';

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }, {
            name: "ui",
            type: "model"
          }];

          this.model_binds = {
            'change:time.start': function(evt, original) {
              if(_this.model.marker.color.scaleType === 'time') {
                _this.model.marker.color.scale = null;
              }
            },
            "change:time.record": function() {
              //console.log("change time record");
              if(_this.model.time.record) {
                _this._export.open(this.element, this.name);
              } else {
                _this._export.reset();
              }
            },
            "change:ui.chart.trails": function(evt) {
              //console.log("EVENT change:time:trails");
              _this._trails.toggle(_this.model.ui.chart.trails);
              _this.redrawDataPoints();
            },
            "change:ui.chart.lockNonSelected": function(evt) {
              //console.log("EVENT change:time:lockNonSelected");
              _this.redrawDataPoints(500);
            },
            "change:marker": function(evt, path) {
              // bubble size change is processed separately
              if(!_this._readyOnce) return;

              if(path.indexOf("scaleType") > -1) {
                _this.ready();
                return;
              }

              if(path.indexOf("marker.color") !== -1) return;
              if(path.indexOf("marker.size") !== -1) return;
              if(path.indexOf("marker.size_label") !== -1) return;

              if(path.indexOf("domainMin") > -1 || path.indexOf("domainMax") > -1) {
                if(!_this.yScale || !_this.xScale) return; //abort if building of the scale is in progress
                _this.updateSize();
                _this.updateMarkerSizeLimits();
                _this._trails.run("findVisible");
                _this.redrawDataPoints();
                _this._trails.run("resize");
                return;
              }
              if(path.indexOf("zoomedMin") > -1 || path.indexOf("zoomedMax") > -1) {
                if(_this.draggingNow)return;

                //avoid zooming again if values didn't change.
                //also prevents infinite loop on forced URL update from zoom.stop()
                if(_this._zoomedXYMinMax.axis_x.zoomedMin == _this.model.marker.axis_x.zoomedMin
                && _this._zoomedXYMinMax.axis_x.zoomedMax == _this.model.marker.axis_x.zoomedMax
                && _this._zoomedXYMinMax.axis_y.zoomedMin == _this.model.marker.axis_y.zoomedMin
                && _this._zoomedXYMinMax.axis_y.zoomedMax == _this.model.marker.axis_y.zoomedMax
                ) return;

                  _this._panZoom.zoomToMaxMin(
                    _this.model.marker.axis_x.zoomedMin,
                    _this.model.marker.axis_x.zoomedMax,
                    _this.model.marker.axis_y.zoomedMin,
                    _this.model.marker.axis_y.zoomedMax,
                    500
                )
                return;
              }

              //console.log("EVENT change:marker", evt);
            },
            "change:entities.select": function() {
              if(!_this._readyOnce || !_this.entityBubbles) return;
              //console.log("EVENT change:entities:select");
              _this.selectDataPoints();
              _this.redrawDataPoints();
              _this._trails.create();
              _this._trails.run(["resize", "recolor", "opacityHandler","findVisible", "reveal"]);
              _this.updateBubbleOpacity();
              _this._updateDoubtOpacity();
            },
            "change:entities.highlight": function() {
              if(!_this._readyOnce) return;
              //console.log("EVENT change:entities:highlight");
              _this.highlightDataPoints();
            },
            'change:time.value': function() {
              if (!_this._readyOnce) return;
              if (!_this.calculationQueue) { // collect timestamp that we request
                _this.calculationQueue = [_this.model.time.value.toString()]
              } else {
                _this.calculationQueue.push(_this.model.time.value.toString());
              }
              (function(time) { // isolate timestamp
              //_this._bubblesInteract().mouseout();
                _this.model.marker.getFrame(time, function(frame, time) {
                  if (!_this._frameIsValid(frame)) return;
                  var index = _this.calculationQueue.indexOf(time.toString()); //
                  if (index == -1) { // we was receive more recent frame before so we pass this frame
                    return;
                  } else {
                    _this.calculationQueue.splice(0, index + 1); // remove timestamps that added to queue before current timestamp
                  }
                  _this.frameChanged(frame, time);
                });

              }(_this.model.time.value));
            },
            'change:ui.adaptMinMaxZoom': function() {
              //console.log("EVENT change:ui:adaptMinMaxZoom");
              if(_this.model.ui.adaptMinMaxZoom) {
                _this._panZoom.expandCanvas(500);
              } else {
                _this._panZoom.reset();
              }
            },
            'change:marker.size.extent': function(evt, path) {
              //console.log("EVENT change:marker:size:max");
              if(!_this._readyOnce) return;
              _this.updateMarkerSizeLimits();
              _this._trails.run("findVisible");
              _this.redrawDataPointsOnlySize();
              _this._trails.run("resize");
            },
            'change:marker.color': function(evt, path) {
              if(!_this._readyOnce) return;
              //console.log("EVENT change:marker:color:palette");
              _this.redrawDataPointsOnlyColors();
              _this._trails.run("recolor");
            },
            // 'change:marker.color.palette': function(evt, path) {
            //   if(!_this._readyOnce) return;
            //   //console.log("EVENT change:marker:color:palette");
            //   _this.redrawDataPointsOnlyColors();
            //   _this._trails.run("recolor");
            // },
            'change:entities.opacitySelectDim': function() {
              _this.updateBubbleOpacity();
            },
            'change:entities.opacityRegular': function() {
              _this.updateBubbleOpacity();
              _this._trails.run("opacityHandler");
            },
            'change:ui.cursorMode': function() {
              var svg = _this.element.select("svg");
              if(_this.model.ui.cursorMode === "plus"){
                  svg.classed("vzb-zoomin", true);
                  svg.classed("vzb-zoomout", false);
              }else if(_this.model.ui.cursorMode === "minus"){
                  svg.classed("vzb-zoomin", false);
                  svg.classed("vzb-zoomout", true);
              }else{
                  svg.classed("vzb-zoomin", false);
                  svg.classed("vzb-zoomout", false);
              }
            },
            'ready': function() {
              // if(_this.model.marker.color.scaleType === 'time') {
              //   _this.model.marker.color.scale = null;
              //   utils.defer(function() {
              //     _this.trigger('ready');
              //   });
              // }
            }
          };
            
          this._super(config, context);

          this.xScale = null;
          this.yScale = null;
          this.sScale = null;
          this.cScale = null;

          this.xAxis = axisSmart();
          this.yAxis = axisSmart();

          _this.COLOR_BLACKISH = "#333";
          _this.COLOR_WHITEISH = "#fdfdfd";

          this.isCanvasPreviouslyExpanded = false;
          this.draggingNow = null;

          this._trails = new Trail(this);
          this._panZoom = new PanZoom(this);
          this._export = new Exporter(this);
          this._export
            .prefix("vzb-bc-")
            .deleteClasses(["vzb-bc-bubbles-crop", "vzb-hidden", "vzb-bc-year", "vzb-bc-zoom-rect",
              "vzb-bc-projection-x", "vzb-bc-projection-y", "vzb-bc-axis-c-title"
            ]);

        },
        
        afterPreload: function() {
          var _this = this;
          this.labels = this.parent.findChildByName('gapminder-labels');
          this.labels.config({
            CSS_PREFIX: 'vzb-bc',
            TOOL_CONTEXT: this,
            LABELS_CONTAINER_CLASS: 'vzb-bc-labels',
            LINES_CONTAINER_CLASS: 'vzb-bc-lines'
          });
        },

        _rangeBump: function(arg, undo) {
          var bump = this.activeProfile.maxRadius/2;
          undo = undo?-1:1;
          if(isArray(arg) && arg.length > 1) {
            var z1 = arg[0];
            var z2 = arg[arg.length - 1];

            //the sign of bump depends on the direction of the scale
            if(z1 < z2) {
              z1 += bump * undo;
              z2 -= bump * undo;
              // if the scale gets inverted because of bump, set it to avg between z1 and z2
              if(z1 > z2) z1 = z2 = (z1 + z2) / 2;
            } else if(z1 > z2) {
              z1 -= bump * undo;
              z2 += bump * undo;
              // if the scale gets inverted because of bump, set it to avg between z1 and z2
              if(z1 < z2) z1 = z2 = (z1 + z2) / 2;
            } else {
              warn("rangeBump error: the input scale range has 0 length. that sucks");
            }
            return [z1, z2];
          } else {
            warn("rangeBump error: input is not an array or empty");
          }
        },

      //  _marginUnBump: function(arg) {
      //    var bump = this.profiles[this.getLayoutProfile()].maxRadius/2;
      //    if(utils.isObject(arg)) {
      //      return {
      //        left: arg.left - bump,
      //        right: arg.right - bump,
      //        top: arg.top - bump,
      //        bottom: arg.bottom - bump
      //      };
      //    } else {
      //      utils.warn("marginUnBump error: input is not an object {left top bottom right}");
      //    }
      //  },


        /**
         * Executes right after the template is in place, but the model is not yet ready
         */
        readyOnce: function() {
          var _this = this;
          this._readyOnce = false;
          this.scrollableAncestor = findScrollableAncestor(this.element);
          this.element = d3.select(this.element);

          // reference elements
          this.graph = this.element.select('.vzb-bc-graph');
          this.yAxisElContainer = this.graph.select('.vzb-bc-axis-y');
          this.yAxisEl = this.yAxisElContainer.select('g');

          this.xAxisElContainer = this.graph.select('.vzb-bc-axis-x');
          this.xAxisEl = this.xAxisElContainer.select('g');

          this.yTitleEl = this.graph.select('.vzb-bc-axis-y-title');
          this.xTitleEl = this.graph.select('.vzb-bc-axis-x-title');
          this.sTitleEl = this.graph.select('.vzb-bc-axis-s-title');
          this.cTitleEl = this.graph.select('.vzb-bc-axis-c-title');
          this.yearEl = this.graph.select('.vzb-bc-year');

          this.year = new DynamicBackground(this.yearEl);

          this.yInfoEl = this.graph.select('.vzb-bc-axis-y-info');
          this.xInfoEl = this.graph.select('.vzb-bc-axis-x-info');
          this.dataWarningEl = this.graph.select('.vzb-data-warning');

          this.projectionX = this.graph.select(".vzb-bc-projection-x");
          this.projectionY = this.graph.select(".vzb-bc-projection-y");

          this.trailsContainer = this.graph.select('.vzb-bc-trails');
          this.bubbleContainerCrop = this.graph.select('.vzb-bc-bubbles-crop');
          this.labelsContainerCrop = this.graph.select('.vzb-bc-labels-crop');
          this.bubbleContainer = this.graph.select('.vzb-bc-bubbles');
          this.labelsContainer = this.graph.select('.vzb-bc-labels');
          this.linesContainer = this.graph.select('.vzb-bc-lines');
          this.zoomRect = this.element.select('.vzb-bc-zoom-rect');
          this.eventArea = this.element.select('.vzb-bc-eventarea');
          
          this.entityBubbles = null;
          this.bubbleCrown = this.element.select('.vzb-bc-bubble-crown');
          //set filter
          this.bubbleCrown.selectAll(".vzb-crown-glow")
            .attr("filter","url(" + location.pathname + "#vzb-glow-filter)");
          this.tooltip = this.element.select('.vzb-bc-tooltip');
          //set filter 
          this.tooltip.select(".vzb-tooltip-glow")
            .attr("filter","url(" + location.pathname + "#vzb-glow-filter)");

          this.tooltipMobile = this.element.select('.vzb-tooltip-mobile');
          //component events
          this.on("resize", function() {
            //console.log("EVENT: resize");
            //return if updatesize exists with error
            if(_this.updateSize()) return;
            _this.updateMarkerSizeLimits();
            _this.labels.updateSize();
            _this._trails.run("findVisible");
            _this._panZoom.rerun(); // includes redraw data points and trail resize
          });

          //keyboard listeners
          d3.select("body")
            .on("keydown", function() {
              if(_this.model.ui.cursorMode !== 'arrow') return;
              if(d3.event.metaKey || d3.event.ctrlKey) _this.element.select("svg").classed("vzb-zoomin", true);
            })
            .on("keyup", function() {
              if(_this.model.ui.cursorMode !== 'arrow') return;
              if(!d3.event.metaKey && !d3.event.ctrlKey) _this.element.select("svg").classed("vzb-zoomin", false);
            });
              
          this.root.on('resetZoom', function(){
              _this._panZoom.reset(null, 500);
          });

          this.bubbleContainerCrop
            .call(this._panZoom.zoomer)
            .call(this._panZoom.dragRectangle)
            .on('dblclick.zoom', null)
            .on("mouseup", function() {
              _this.draggingNow = false;
            })
            .on("click", function() {
              var cursor = _this.model.ui.cursorMode;
              if (!d3.event.defaultPrevented && cursor!=="arrow") {
                _this._panZoom.zoomByIncrement(cursor, 500);
              }
            });

          this.KEY = this.model.entities.getDimension();
          this.TIMEDIM = this.model.time.getDimension();

          this.updateUIStrings();

          this.wScale = d3.scale.linear()
            .domain(this.parent.datawarning_content.doubtDomain)
            .range(this.parent.datawarning_content.doubtRange);
          _this._readyOnce = true;
        },
        
        _frameIsValid: function(frame) {
          return !(!frame
          || Object.keys(frame.axis_y).length === 0
          || Object.keys(frame.axis_x).length === 0
          || Object.keys(frame.size).length === 0);
        },
        
        ready: function() {
          var _this = this;
          this.updateUIStrings();
          var endTime = this.model.time.end;
          this.model.marker.getFrame(this.model.time.value, function(frame, time) {
            // TODO: temporary fix for case when after data loading time changed on validation
              if (time.toString() != _this.model.time.value.toString()) {  
                defer(function() {
                  _this.ready();
                });
                return;
              } 
              if (!_this._frameIsValid(frame)) return;

            _this.frame = frame;
            _this.updateTime();
            _this.updateIndicators();
            _this.updateSize();
            _this.updateEntities();
            _this.redrawDataPoints();
            _this.selectDataPoints();
            _this._trails.create();
            _this.updateMarkerSizeLimits();
            _this.updateBubbleOpacity();
            _this.zoomToMarkerMaxMin(); // includes redraw data points and trail resize
            _this._trails.run(["recolor", "opacityHandler", "findVisible", "reveal"]);
            if(_this.model.ui.adaptMinMaxZoom) _this._panZoom.expandCanvas();
          });
        },

          /*
           * Zoom to the min and max values given in the URL axes markers.
           */
          zoomToMarkerMaxMin: function() {
              /*
               * Reset just the zoom values without triggering a zoom event. This ensures
               * a clean zoom state for the subsequent zoom event.
               */
              this._panZoom.resetZoomState()

              var xAxis = this.model.marker.axis_x;
              var yAxis = this.model.marker.axis_y;

              var xDomain = xAxis.getScale().domain();
              var yDomain = yAxis.getScale().domain();

              /*
               * The axes may return null when there is no value given for the zoomed
               * min and max values. In that case, fall back to the axes' domain values.
               */
              var zoomedMinX = xAxis.zoomedMin ? xAxis.zoomedMin : xDomain[0];
              var zoomedMaxX = xAxis.zoomedMax ? xAxis.zoomedMax : xDomain[1];
              var zoomedMinY = yAxis.zoomedMin ? yAxis.zoomedMin : yDomain[0];
              var zoomedMaxY = yAxis.zoomedMax ? yAxis.zoomedMax : yDomain[1];

              this._panZoom.zoomToMaxMin(zoomedMinX, zoomedMaxX, zoomedMinY, zoomedMaxY);
          },

        /*
         * UPDATE INDICATORS
         */
        updateIndicators: function() {
          var _this = this;

          //scales
          this.yScale = this.model.marker.axis_y.getScale();
          this.xScale = this.model.marker.axis_x.getScale();
          this.sScale = this.model.marker.size.getScale();
          this.cScale = this.model.marker.color.getScale();
          this.labels.setScales(this.xScale, this.yScale);

          this.yAxis.tickFormat(_this.model.marker.axis_y.getTickFormatter());
          this.xAxis.tickFormat(_this.model.marker.axis_x.getTickFormatter());
        },

        frameChanged: function(frame, time) {
      //    if (time.toString() != this.model.time.value.toString()) return; // frame is outdated
          this.frame = frame;
          this.updateTime();
          this._updateDoubtOpacity();
          this._trails.run("findVisible");
          if(this.model.ui.adaptMinMaxZoom) {
            this._panZoom.expandCanvas();
          } else {
            this.redrawDataPoints();
          }
          this._trails.run("reveal", null, this.duration);
          this.tooltipMobile.classed('vzb-hidden', true);
        },

        updateUIStrings: function() {
          var _this = this;

          this.translator = this.model.language.getTFunction();

          this.strings = {
            title: {
              Y: this.translator("indicator/" + this.model.marker.axis_y.which),
              X: this.translator("indicator/" + this.model.marker.axis_x.which),
              S: this.translator("indicator/" + this.model.marker.size.which),
              C: this.translator("indicator/" + this.model.marker.color.which)
            },
            unit: {
              Y: this.translator("unit/" + this.model.marker.axis_y.which),
              X: this.translator("unit/" + this.model.marker.axis_x.which),
              S: this.translator("unit/" + this.model.marker.size.which),
              C: this.translator("unit/" + this.model.marker.color.which)
            }
          }
          
          //suppress unit strings that found no translation (returns same thing as requested)
          if(this.strings.unit.Y === "unit/" + this.model.marker.axis_y.which) this.strings.unit.Y = "";
          if(this.strings.unit.X === "unit/" + this.model.marker.axis_x.which) this.strings.unit.X = "";
          if(this.strings.unit.S === "unit/" + this.model.marker.size.which) this.strings.unit.S = "";
          if(this.strings.unit.C === "unit/" + this.model.marker.color.which) this.strings.unit.C = "";
          
          if(!!this.strings.unit.Y) this.strings.unit.Y = ", " + this.strings.unit.Y;
          if(!!this.strings.unit.X) this.strings.unit.X = ", " + this.strings.unit.X;
          if(!!this.strings.unit.S) this.strings.unit.S = ", " + this.strings.unit.S;
          if(!!this.strings.unit.C) this.strings.unit.C = ", " + this.strings.unit.C;

          var yTitle = this.yTitleEl.selectAll("text").data([0]);
          yTitle.enter().append("text");
          yTitle
            //.attr("y", "-6px")
            .on("click", function() {
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("axis_y")
                .alignX("left")
                .alignY("top")
                .updateView()
                .toggle();
            });

          var xTitle = this.xTitleEl.selectAll("text").data([0]);
          xTitle.enter().append("text");
          xTitle
            .on("click", function() {
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("axis_x")
                .alignX("left")
                .alignY("bottom")
                .updateView()
                .toggle();
            });

          var sTitle = this.sTitleEl.selectAll("text").data([0]);
          sTitle.enter().append("text");
          sTitle
            .attr("text-anchor", "end");

          setIcon(this.dataWarningEl, iconWarn).select("svg").attr("width", "0px").attr("height", "0px");
          this.dataWarningEl.append("text")
            .attr("text-anchor", "end")
            .text(this.translator("hints/dataWarning"));

          setIcon(this.yInfoEl, iconQuestion)
              .select("svg").attr("width", "0px").attr("height", "0px");

          setIcon(this.xInfoEl, iconQuestion)
            .select("svg").attr("width", "0px").attr("height", "0px");


          //TODO: move away from UI strings, maybe to ready or ready once
          this.yInfoEl.on("click", function() {
            _this.parent.findChildByName("gapminder-datanotes").pin();
          })
          this.yInfoEl.on("mouseover", function() {
            var rect = this.getBBox();
            var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
            _this.parent.findChildByName("gapminder-datanotes").setHook('axis_y').show().setPos(coord.x, coord.y);
          })
          this.yInfoEl.on("mouseout", function() {
            _this.parent.findChildByName("gapminder-datanotes").hide();
          })
          this.xInfoEl.on("click", function() {
            _this.parent.findChildByName("gapminder-datanotes").pin();
          })
          this.xInfoEl.on("mouseover", function() {
            if (_this.model.time.dragging) return;
            var rect = this.getBBox();
            var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
            _this.parent.findChildByName("gapminder-datanotes").setHook('axis_x').show().setPos(coord.x, coord.y);
          })
          this.xInfoEl.on("mouseout", function() {
             if (_this.model.time.dragging) return;
            _this.parent.findChildByName("gapminder-datanotes").hide();
          })
          this.dataWarningEl
            .on("click", function() {
              _this.parent.findChildByName("gapminder-datawarning").toggle();
            })
            .on("mouseover", function() {
              _this._updateDoubtOpacity(1);
            })
            .on("mouseout", function() {
              _this._updateDoubtOpacity();
            })
        },

        _updateDoubtOpacity: function(opacity) {
          if(opacity == null) opacity = this.wScale(+this.model.time.timeFormat(this.time));
          if(this.someSelected) opacity = 1;
          this.dataWarningEl.style("opacity", opacity);
        },

        /*
         * UPDATE ENTITIES:
         * Ideally should only update when show parameters change or data changes
         */
        updateEntities: function() {
          var _this = this;
          var KEY = this.KEY;
          var TIMEDIM = this.TIMEDIM;

          var getKeys = function(prefix) {
            prefix = prefix || "";
            return _this.model.marker.getKeys()
              .map(function(d) {
                var pointer = {};
                pointer[KEY] = d[KEY];
                pointer[TIMEDIM] = endTime;
                pointer.sortValue = _this.frame.size[d[KEY]]||0;
                pointer[KEY] = prefix + d[KEY];
                return pointer;
              })
              .sort(function(a, b) {
                return b.sortValue - a.sortValue;
              })
          };

          // get array of GEOs, sorted by the size hook
          // that makes larger bubbles go behind the smaller ones
          var endTime = this.model.time.end;
          this.model.entities.setVisible(getKeys.call(this));
            
          //unselecting bubbles with no data is used for the scenario when
          //some bubbles are selected and user would switch indicator.
          //bubbles would disappear but selection would stay
          if (!this.model.time.splash) {
            this.unselectBubblesWithNoData();
          }

          this.entityBubbles = this.bubbleContainer.selectAll('.vzb-bc-entity')
            .data(this.model.entities.getVisible(), function(d) {return d && !d['trailStartTime'] ? d[KEY] : null}); // trails have not keys

          //exit selection
          this.entityBubbles.exit().remove();

          //enter selection -- init circles
          this.entityBubbles.enter().append("circle")
            .attr("class", function(d) {
              return "vzb-bc-entity " + "bubble-" + d[KEY];
            })
            .on("mouseover", function(d, i) {
              if(isTouchDevice() || _this.model.ui.cursorMode !== 'arrow') return;
              _this._bubblesInteract().mouseover(d, i);
            })
            .on("mouseout", function(d, i) {
              if(isTouchDevice() || _this.model.ui.cursorMode !== 'arrow') return;

              _this._bubblesInteract().mouseout(d, i);
            })
            .on("click", function(d, i) {
              if(isTouchDevice() || _this.model.ui.cursorMode !== 'arrow') return;

              _this._bubblesInteract().click(d, i);
            })
            .onTap(function(d, i) {
              d3.event.stopPropagation();
              _this._bubblesInteract().click(d, i);
            })
            .onLongTap(function(d, i) {});

            this.entityBubbles.order();
        },
          
        unselectBubblesWithNoData: function(frame){
            var _this = this;
            var KEY = this.KEY;
            if(!frame) frame = this.frame;
            
            if(!frame || !frame.axis_y || !frame.axis_x || !frame.size) return;
            
            this.model.entities.select.forEach(function(d){
              if(!frame.axis_y[d[KEY]] && frame.axis_y[d[KEY]] !== 0
              || !frame.axis_x[d[KEY]] && frame.axis_x[d[KEY]] !== 0
              || !frame.size[d[KEY]] && frame.size[d[KEY]] !== 0) 
                  _this.model.entities.selectEntity(d);
            })
        },

        _bubblesInteract: function() {
          var _this = this;
          var KEY = this.KEY;
          var TIMEDIM = this.TIMEDIM;

          return {
            mouseover: function(d, i) {
              _this.model.entities.highlightEntity(d);

              _this.labels.showCloseCross(d, true);
            },

            mouseout: function(d, i) {
              _this.model.entities.clearHighlighted();

              _this.labels.showCloseCross(d, false);
            },

            click: function(d, i) {
              if(_this.draggingNow) return;
              var isSelected = _this.model.entities.isSelected(d);
              _this.model.entities.selectEntity(d);
              //return to highlighted state
              if(!isTouchDevice()) {
                  if(isSelected) _this.model.entities.highlightEntity(d);
                  _this.highlightDataPoints();
              }
            }
          }
        },




        /*
         * UPDATE TIME:
         * Ideally should only update when time or data changes
         */
        updateTime: function() {
          var _this = this;

          this.time_1 = this.time == null ? this.model.time.value : this.time;
          this.time = this.model.time.value;
          this.duration = this.model.time.playing && (this.time - this.time_1 > 0) ? this.model.time.delayAnimations : 0;
          if(this.duration) {
            var time = _this.time;
            this.yearDelayId = delay(function() {
              _this.year.setText(_this.model.time.timeFormat(time));
            }, this.duration);
          } else {
            if(this.yearDelayId) {
              clearDelay(this.yearDelayId);
              this.yearDelayId = null;
            }
            _this.year.setText(_this.model.time.timeFormat(_this.time));
          }
        },

        /*
         * RESIZE:
         * Executed whenever the container is resized
         */
        updateSize: function() {


          var profiles = {
            small: {
              margin: { top: 30, right: 10, left: 40, bottom: 35 },
              padding: 2,
              minRadius: 0.5,
              maxRadius: 30,
              infoElHeight: 16,
              yAxisTitleBottomMargin: 6,
              xAxisTitleBottomMargin: 4
            },
            medium: {
              margin: { top: 40, right: 15, left: 60, bottom: 55 },
              padding: 2,
              minRadius: 1,
              maxRadius: 55,
              infoElHeight: 20,
              yAxisTitleBottomMargin: 6,
              xAxisTitleBottomMargin: 5
            },
            large: {
              margin: { top: 50, right: 20, left: 60, bottom: 60 },
              padding: 2,
              minRadius: 1,
              maxRadius: 65,
              infoElHeight: 22,
              yAxisTitleBottomMargin: 6,
              xAxisTitleBottomMargin: 5,
              hideSTitle: true 
            }
          };

          var presentationProfileChanges = {
            "medium": {
              margin: { top: 80, bottom: 80, left: 100 },
              yAxisTitleBottomMargin: 20,
              xAxisTitleBottomMargin: 20,
              infoElHeight: 26,
            },
            "large": {
              margin: { top: 80, bottom: 100, left: 100 },
              yAxisTitleBottomMargin: 20,
              xAxisTitleBottomMargin: 20,
              infoElHeight: 32,
              hideSTitle: true
            }
          }

          var _this = this;

          this.activeProfile = this.getActiveProfile(profiles, presentationProfileChanges);
          var margin = this.activeProfile.margin;
          var infoElHeight = this.activeProfile.infoElHeight;
          
          //labels
          _this.labels.setCloseCrossHeight(_this.activeProfile.infoElHeight * 1.2);

          //stage
          this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
            
          if(this.height<=0 || this.width<=0) return warn("Bubble chart updateSize() abort: vizabi container is too little or has display:none");

          //graph group is shifted according to margins (while svg element is at 100 by 100%)
          this.graph
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          this.year.resize(this.width, this.height, Math.min(this.width/2.5, Math.max(this.height / 3, this.width / 3)));
          this.eventArea
            .attr("width", this.width)
            .attr("height", Math.max(0, this.height));

          //update scales to the new range
          if(this.model.marker.axis_y.scaleType !== "ordinal") {
            this.yScale.range(this._rangeBump([this.height, 0]));
          } else {
            this.yScale.rangePoints([this.height, 0], _this.activeProfile.padding).range();
          }
          if(this.model.marker.axis_x.scaleType !== "ordinal") {
            this.xScale.range(this._rangeBump([0, this.width]));
          } else {
            this.xScale.rangePoints([0, this.width], _this.activeProfile.padding).range();
          }

          //apply scales to axes and redraw
          this.yAxis.scale(this.yScale)
            .orient("left")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_y.scaleType,
              toolMargin: margin,
              limitMaxTickNumber: 6,
              bump: this.activeProfile.maxRadius/2,
              constantRakeLength: this.height,
              formatter: this.model.marker.axis_y.getTickFormatter()
            });

          this.xAxis.scale(this.xScale)
            .orient("bottom")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_x.scaleType,
              toolMargin: margin,
              bump: this.activeProfile.maxRadius/2,
              constantRakeLength: this.width,
              formatter: this.model.marker.axis_x.getTickFormatter()
            });


          this.bubbleContainerCrop
            .attr("width", this.width)
            .attr("height", Math.max(0, this.height));

          this.labelsContainerCrop
            .attr("width", this.width)
            .attr("height", Math.max(0, this.height));

          this.xAxisElContainer
            .attr("width", this.width + 1)
            .attr("height", this.activeProfile.margin.bottom)
            .attr("y", this.height - 1)
            .attr("x", -1);
          this.xAxisEl
            .attr("transform", "translate(1,1)");

          this.yAxisElContainer
            .attr("width", this.activeProfile.margin.left)
            .attr("height", Math.max(0, this.height))
            .attr("x", -this.activeProfile.margin.left);
          this.yAxisEl
            .attr("transform", "translate(" + (this.activeProfile.margin.left - 1) + "," + 0 + ")");

          this.yAxisEl.call(this.yAxis);
          this.xAxisEl.call(this.xAxis);

          this.projectionX.attr("y1", _this.yScale.range()[0] + this.activeProfile.maxRadius/2);
          this.projectionY.attr("x2", _this.xScale.range()[0] - this.activeProfile.maxRadius/2);



          // reduce font size if the caption doesn't fit
          this._updateSTitle();


          var yaxisWidth = this.yAxisElContainer.select("g").node().getBBox().width;
          this.yTitleEl
            .style("font-size", infoElHeight + "px")
            .attr("transform", "translate(" + (-yaxisWidth) + ", -" + this.activeProfile.yAxisTitleBottomMargin + ")");

          this.xTitleEl
            .style("font-size", infoElHeight + "px")
            .attr("transform", "translate(" + (0) + "," + (this.height + margin.bottom - this.activeProfile.xAxisTitleBottomMargin) + ")");

          this.sTitleEl
            .attr("transform", "translate(" + this.width + "," + 20 + ") rotate(-90)");


          var yTitleText = this.yTitleEl.select("text").text(this.strings.title.Y + this.strings.unit.Y);
          if(yTitleText.node().getBBox().width > this.width) yTitleText.text(this.strings.title.Y);

          var xTitleText = this.xTitleEl.select("text").text(this.strings.title.X + this.strings.unit.X);
          if(xTitleText.node().getBBox().width > this.width - 100) xTitleText.text(this.strings.title.X);

          if(this.yInfoEl.select('svg').node()) {
            var titleBBox = this.yTitleEl.node().getBBox();
            var translate = d3.transform(this.yTitleEl.attr('transform')).translate;

            this.yInfoEl.select('svg')
              .attr("width", infoElHeight + "px")
              .attr("height", infoElHeight + "px")
            this.yInfoEl.attr('transform', 'translate('
              + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
              + (translate[1] - infoElHeight * 0.8) + ')');
          }

          if(this.xInfoEl.select('svg').node()) {
            var titleBBox = this.xTitleEl.node().getBBox();
            var translate = d3.transform(this.xTitleEl.attr('transform')).translate;

            this.xInfoEl.select('svg')
              .attr("width", infoElHeight + "px")
              .attr("height", infoElHeight + "px")
            this.xInfoEl.attr('transform', 'translate('
              + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
              + (translate[1] - infoElHeight * 0.8) + ')');
          }

          this._resizeDataWarning();
        },

        _resizeDataWarning: function(){
          this.dataWarningEl
            .attr("transform", "translate("
              + (this.width) + ","
              + (this.height + this.activeProfile.margin.bottom - this.activeProfile.xAxisTitleBottomMargin)
              + ")");

          // reset font size to remove jumpy measurement
          var dataWarningText = this.dataWarningEl.select("text").style("font-size", null);

          // reduce font size if the caption doesn't fit
          var dataWarningWidth = dataWarningText.node().getBBox().width + dataWarningText.node().getBBox().height * 3;
          var remainingWidth = this.width - this.xTitleEl.node().getBBox().width - this.activeProfile.infoElHeight;
          var font = parseInt(dataWarningText.style("font-size")) * remainingWidth / dataWarningWidth;
          dataWarningText.style("font-size", dataWarningWidth > remainingWidth? font + "px" : null);

          // position the warning icon
          var warnBB = dataWarningText.node().getBBox();
          this.dataWarningEl.select("svg")
            .attr("width", warnBB.height * 0.75)
            .attr("height", warnBB.height * 0.75)
            .attr("x", -warnBB.width - warnBB.height * 1.2)
            .attr("y", - warnBB.height * 0.65);
        },

        updateMarkerSizeLimits: function() {
          var _this = this;
          var extent = this.model.marker.size.extent || [0,1];
            
          if(!this.activeProfile) return warn("updateMarkerSizeLimits() is called before ready(). This can happen if events get unfrozen and getFrame() still didn't return data");
            
          var minRadius = this.activeProfile.minRadius;
          var maxRadius = this.activeProfile.maxRadius;

          this.minRadius = Math.max(maxRadius * extent[0], minRadius);
          this.maxRadius = Math.max(maxRadius * extent[1], minRadius);

          if(this.model.marker.size.scaleType !== "ordinal") {
            this.sScale.range([radiusToArea(_this.minRadius), radiusToArea(_this.maxRadius)]);
          } else {
            this.sScale.rangePoints([radiusToArea(_this.minRadius), radiusToArea(_this.maxRadius)], 0).range();
          }

        },

        redrawDataPointsOnlyColors: function() {
          var _this = this;

          var valuesNow;
          var KEY = this.KEY;


          var time = this.model.time.value;

          if(this.model.ui.chart.lockNonSelected && this.someSelected) {
            time = this.model.time.timeFormat.parse("" + this.model.ui.chart.lockNonSelected);
          }
          this.model.marker.getFrame(time, function(valuesLocked) {
            if(!_this._frameIsValid(valuesLocked)) return warn("redrawDataPointsOnlyColor: empty data received from marker.getFrames(). doing nothing");

            valuesNow = _this.frame;
            _this.entityBubbles.each(function(d, index) {

            var selected = _this.model.entities.isSelected(d);

            var valueC = selected ? valuesNow.color[d[KEY]] : valuesLocked.color[d[KEY]];

            var scaledC = valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH;

            d3.select(this).style("fill", scaledC);

            //update lines of labels
            if(selected) {

              var select = find(_this.model.entities.select, function(f) {
                return f[KEY] == d[KEY]
              });

              var trailStartTime = _this.model.time.timeFormat.parse("" + select.trailStartTime);

              _this.model.marker.getFrame(trailStartTime, function(valuesTrailStart) {
                if(!valuesTrailStart) return warn("redrawDataPointsOnlyColor: empty data received from marker.getFrames(). doing nothing");
                
                var cache = {};
                if(!_this.model.ui.chart.trails || trailStartTime - _this.time == 0) {
                  cache.scaledC0 = scaledC;
                } else {
                  var valueC = valuesTrailStart.color[d[KEY]];
                  cache.scaledC0 = valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH;
                }
                
                _this.labels.updateLabelOnlyColor(d, index, cache);

              });
            }
          });
          });

        },

        redrawDataPointsOnlySize: function() {
          var _this = this;

          var valuesNow;
          var KEY = this.KEY;


          var time = this.model.time.value;

          if(this.model.ui.chart.lockNonSelected && this.someSelected) {
            time = this.model.time.timeFormat.parse("" + this.model.ui.chart.lockNonSelected);
          }
          this.model.marker.getFrame(time, function(valuesLocked) {
            if(!_this._frameIsValid(valuesLocked)) return warn("redrawDataPointsOnlySize: empty data received from marker.getFrames(). doing nothing");

            valuesNow = _this.frame;
            _this.entityBubbles.each(function(d, index) {

            var selected = _this.model.entities.isSelected(d);

            var valueS = selected ? valuesNow.size[d[KEY]] : valuesLocked.size[d[KEY]];
            if(valueS == null) return;

            var scaledS = areaToRadius(_this.sScale(valueS));
            d3.select(this).attr("r", scaledS);

            //update lines of labels
            if(selected) {

              var select = find(_this.model.entities.select, function(f) {
                return f[KEY] == d[KEY]
              });

              var trailStartTime = _this.model.time.timeFormat.parse("" + select.trailStartTime);

              _this.model.marker.getFrame(trailStartTime, function(valuesTrailStart) {
                if(!valuesTrailStart) return warn("redrawDataPointsOnlySize: empty data received from marker.getFrames(). doing nothing");
                
                var cache = {};
                if(!_this.model.ui.chart.trails || trailStartTime - _this.time == 0) {
                  cache.scaledS0 = scaledS;
                } else {
                  cache.scaledS0 = areaToRadius(_this.sScale(valuesTrailStart.size[d[KEY]]));
                }
                
                _this.labels.updateLabelOnlyPosition(d, index, cache);

              });
            }
          });
          });
        },

        /*
         * REDRAW DATA POINTS:
         * Here plotting happens
         * debouncing to improve performance: events might trigger it more than 1x
         */
        redrawDataPoints: function(duration) {
          var _this = this;
          var KEY = this.KEY;
          if(duration == null) duration = _this.duration;

          if(this.model.ui.chart.lockNonSelected && this.someSelected) {
              var time = this.model.time.timeFormat.parse("" + this.model.ui.chart.lockNonSelected);

              //get values for locked frames
              this.model.marker.getFrame(time, function(lockedFrame) {
                  if(!lockedFrame) return warn("redrawDataPoints: empty data received from marker.getFrames(). doing nothing");

                  // each bubble
                  _this.entityBubbles.each(function(d, index) {
                      var frame = _this.model.entities.isSelected(d) ? _this.frame : lockedFrame
                      _this._updateBubble(d, frame, index, d3.select(this), duration);
                  });
              });
          } else {
              // each bubble
              _this.entityBubbles.each(function(d, index) {
                  _this._updateBubble(d, _this.frame, index, d3.select(this), duration);
              });
          }
        },

        //redraw Data Points
        _updateBubble: function(d, values, index, view, duration) {
          var _this = this;
          var KEY = this.KEY;

          var showhide = false;

          var valueY = values.axis_y[d[KEY]];
          var valueX = values.axis_x[d[KEY]];
          var valueS = values.size[d[KEY]];
          var valueL = values.label[d[KEY]];
          var valueC = values.color[d[KEY]];
          var valueLST = values.size_label[d[KEY]];

          // check if fetching data succeeded
          if(!valueL && valueL!==0 || !valueY && valueY!==0 || !valueX && valueX!==0 || !valueS && valueS!==0) {
            // if entity is missing data it should hide
             if(!d.hidden) {
                 d.hidden = true;
                 showhide = true;
             }
              
             if(showhide) {
                 if(duration) {
                     var opacity = view.style("opacity");
                     view.transition().duration(duration).ease("exp")
                      .style("opacity", 0)
                      .each("end", function() {
                          //to avoid transition from null state add class with a delay
                          view.classed("vzb-invisible", d.hidden);
                          view.style("opacity", opacity);
                      })
                 }else{
                     //immediately hide the bubble
                     view.classed("vzb-invisible", d.hidden);
                 }
             }
          } else {
              if(d.hidden || view.classed("vzb-invisible")) {
                 d.hidden = false;
                 showhide = true;
             }


            // if entity has all the data we update the visuals
            var scaledS = areaToRadius(_this.sScale(valueS));

            view.style("fill", valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH);

            if(duration) {
              if(showhide) {
                  var opacity = view.style("opacity");
                  view.classed("vzb-invisible", d.hidden);
                  view.style("opacity", 0)
                      .attr("cy", _this.yScale(valueY))
                      .attr("cx", _this.xScale(valueX))
                      .attr("r", scaledS)
                      .transition().duration(duration).ease("exp")
                      .style("opacity", opacity);
              }else{
                  view.transition().duration(duration).ease("linear")
                      .attr("cy", _this.yScale(valueY))
                      .attr("cx", _this.xScale(valueX))
                      .attr("r", scaledS);
              }

            } else {

              //interrupt the ongoing transition and immediately do the visual updates
              view.interrupt()
                .attr("cy", _this.yScale(valueY))
                .attr("cx", _this.xScale(valueX))
                .attr("r", scaledS);

              //show entity if it was hidden
              if(showhide) view.classed("vzb-invisible", d.hidden);
            }

            if(this.model.time.record) _this._export.write({
              type: "circle",
              id: d[KEY],
              time: this.model.time.value.getUTCFullYear(),
              fill: valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH,
              cx: _this.xScale(valueX),
              cy: _this.yScale(valueY),
              r: scaledS
            });

          } // data exists

          _this._updateLabel(d, index, valueX, valueY, valueS, valueC, valueL, valueLST, duration, showhide);
        },

        _updateLabel: function(d, index, valueX, valueY, valueS, valueC, valueL, valueLST, duration, showhide) {
          var _this = this;
          var KEY = this.KEY;

          // only for selected entities
          if(_this.model.entities.isSelected(d)) {
            
            var cache = null;

            var select = find(_this.model.entities.select, function(f) {
              return f[KEY] == d[KEY]
            });

            var time = _this.model.time.timeFormat(_this.time);
            if(!this.model.ui.chart.trails || select.trailStartTime == time || select.trailStartTime == null) {
              if(this.model.ui.chart.trails && select.trailStartTime == null) select.trailStartTime = time; // need only when trailStartTime == null

              var cache = {};
              cache.labelX0 = valueX;
              cache.labelY0 = valueY;
              cache.scaledC0 = valueC!=null?_this.cScale(valueC):_this.COLOR_WHITEISH,
              cache.scaledS0 = valueS ? areaToRadius(_this.sScale(valueS)) : null;
            }

            var trailStartTime = _this.model.time.timeFormat.parse("" + select.trailStartTime);

            var labelText = valueL + (_this.model.ui.chart.trails ? " " + select.trailStartTime : "");

            if(showhide && d.hidden && _this.model.ui.chart.trails && trailStartTime && (trailStartTime < _this.time)) showhide = false;
            if(d.hidden && !_this.model.ui.chart.trails) showhide = true;

            this.labels.updateLabel(d, index, cache, valueX, valueY, valueS, valueC, labelText, valueLST, duration, showhide);

          }
        },

        _updateSTitle: function(titleS, titleC) {

          // vertical text about size and color
          if (this.activeProfile.hideSTitle) {
            this.sTitleEl.classed("vzb-invisible", true);
            return;
          }
          if (this.sTitleEl.classed("vzb-invisible")) {
            this.sTitleEl.classed("vzb-invisible", false);
          }
          var sTitleContentON = this.model.marker.size.use !== "constant";
          var cTitleContentON = this.model.marker.color.use !== "constant";
          var sTitleText = this.sTitleEl.select("text")
            // reset font size to remove jumpy measurement
            .style("font-size", null)
            .text(
            (sTitleContentON ? this.translator("buttons/size") + ": " + (titleS ? titleS : this.strings.title.S) : "") +
            (sTitleContentON && cTitleContentON ? ", " : "") +
            (cTitleContentON ? this.translator("buttons/colors") + ": " + (titleC ? titleC : this.strings.title.C) : "")
          );
          var sTitleWidth = sTitleText.node().getBBox().width;
          var remainigHeight = this.height - 30;
          var font = parseInt(sTitleText.style("font-size")) * remainigHeight / sTitleWidth;
          sTitleText.style("font-size", sTitleWidth > remainigHeight? font + "px" : null);
        },
        
        selectDataPoints: function() {
          var _this = this;
          var KEY = this.KEY;

          //hide tooltip
          _this._setTooltip();
          _this._setBubbleCrown();

          _this.someSelected = (_this.model.entities.select.length > 0);

        },

        _setBubbleCrown: function(x, y, r, glow, skipInnerFill) {
          if(x != null) {
            this.bubbleCrown.classed("vzb-hidden", false);
            this.bubbleCrown.select(".vzb-crown")
              .attr("cx", x)
              .attr("cy", y)
              .attr("r", r)
              .attr("fill", skipInnerFill ? "none" : glow);
            this.bubbleCrown.selectAll(".vzb-crown-glow")
              .attr("cx", x)
              .attr("cy", y)
              .attr("r", r + 10)
              .attr("stroke", glow);

          } else {
            this.bubbleCrown.classed("vzb-hidden", true);
          }

        },
        
        _setTooltip: function(tooltipText, x, y, offset, glow) {
          if(tooltipText) {
            var xPos, yPos, xSign = -1,
              ySign = -1,
              xOffset = 0,
              yOffset = 0;

            if(offset) {
              xOffset = offset * .71; // .71 - sin and cos for 315
              yOffset = offset * .71;
            }
            //position tooltip
            this.tooltip.classed("vzb-hidden", false)
              //.attr("style", "left:" + (mouse[0] + 50) + "px;top:" + (mouse[1] + 50) + "px")
              .selectAll("text")
              .text(tooltipText);

            var contentBBox = this.tooltip.select('text')[0][0].getBBox();
            if(x - xOffset - contentBBox.width < 0) {
              xSign = 1;
              x += contentBBox.width + 5; // corrective to the block Radius and text padding
            } else {
              x -= 5; // corrective to the block Radius and text padding
            }
            if(y - yOffset - contentBBox.height < 0) {
              ySign = 1;
              y += contentBBox.height;
            } else {
              y -= 11; // corrective to the block Radius and text padding
            }
            if(offset) {
              xPos = x + xOffset * xSign;
              yPos = y + yOffset * ySign; // 5 and 11 - corrective to the block Radius and text padding
            } else {
              xPos = x + xOffset * xSign; // .71 - sin and cos for 315
              yPos = y + yOffset * ySign; // 5 and 11 - corrective to the block Radius and text padding
            }
            this.tooltip.attr("transform", "translate(" + xPos + "," + yPos + ")")

            this.tooltip.selectAll("rect")
              .attr("width", contentBBox.width + 8)
              .attr("height", contentBBox.height * 1.2)
              .attr("x", -contentBBox.width - 4)
              .attr("y", -contentBBox.height * .85)
              .attr("rx", contentBBox.height * .2)
              .attr("ry", contentBBox.height * .2);

            this.tooltip.select(".vzb-tooltip-glow")
              .attr("stroke", glow);

          } else {
            this.tooltip.classed("vzb-hidden", true);
          }
        },

        /*
         * Shows and hides axis projections
         */
        _axisProjections: function(d) {
          var _this = this;
          var TIMEDIM = this.TIMEDIM;
          var KEY = this.KEY;

          if(d != null) {

            this.model.marker.getFrame(d[TIMEDIM], function(values) {
              var valueY = values.axis_y[d[KEY]];
              var valueX = values.axis_x[d[KEY]];
              var valueS = values.size[d[KEY]];
              var radius = areaToRadius(_this.sScale(valueS));

              if(!valueY && valueY!==0 || !valueX && valueX!==0 || !valueS && valueS!==0) return;

              if(_this.ui.chart.whenHovering.showProjectionLineX
                && _this.xScale(valueX) > 0 && _this.xScale(valueX) < _this.width
                && (_this.yScale(valueY) + radius) < _this.height) {
                _this.projectionX
                  .style("opacity", 1)
                  .attr("y2", _this.yScale(valueY) + radius)
                  .attr("x1", _this.xScale(valueX))
                  .attr("x2", _this.xScale(valueX));
              }

              if(_this.ui.chart.whenHovering.showProjectionLineY
                && _this.yScale(valueY) > 0 && _this.yScale(valueY) < _this.height
                && (_this.xScale(valueX) - radius) > 0) {
                _this.projectionY
                  .style("opacity", 1)
                  .attr("y1", _this.yScale(valueY))
                  .attr("y2", _this.yScale(valueY))
                  .attr("x1", _this.xScale(valueX) - radius);
              }

              if(_this.ui.chart.whenHovering.higlightValueX) _this.xAxisEl.call(
                _this.xAxis.highlightValue(valueX)
              );

              if(_this.ui.chart.whenHovering.higlightValueY) _this.yAxisEl.call(
                _this.yAxis.highlightValue(valueY)
              );
            });

          } else {

            this.projectionX.style("opacity", 0);
            this.projectionY.style("opacity", 0);
            this.xAxisEl.call(this.xAxis.highlightValue("none"));
            this.yAxisEl.call(this.yAxis.highlightValue("none"));

          }

        },

        /*
         * Highlights all hovered bubbles
         */
        highlightDataPoints: function() {
          var _this = this;
          var TIMEDIM = this.TIMEDIM;
          var KEY = this.KEY;

          this.someHighlighted = (this.model.entities.highlight.length > 0);

          this.updateBubbleOpacity();

          if(this.model.entities.highlight.length === 1) {
            var d = clone(this.model.entities.highlight[0]);

            if(_this.model.ui.chart.lockNonSelected && _this.someSelected && !_this.model.entities.isSelected(d)) {
              d[TIMEDIM] = _this.model.time.timeFormat.parse("" + _this.model.ui.chart.lockNonSelected);
            } else {
              d[TIMEDIM] = _this.model.time.timeFormat.parse("" + d.trailStartTime) || _this.time;
            }

            _this.model.marker.getFrame(d[TIMEDIM], function(values) {
                var x = _this.xScale(values.axis_x[d[KEY]]);
                var y = _this.yScale(values.axis_y[d[KEY]]);
                var s = areaToRadius(_this.sScale(values.size[d[KEY]]));
                var c = values.color[d[KEY]]!=null?_this.cScale(values.color[d[KEY]]):_this.COLOR_WHITEISH;
                var entityOutOfView = false;

                var unitY = _this.translator("unit/" + _this.model.marker.size.which);
                var unitC = _this.translator("unit/" + _this.model.marker.color.which);
        
                //suppress unit strings that found no translation (returns same thing as requested)
                if(unitY === "unit/" + _this.model.marker.size.which) unitY = "";
                if(unitC === "unit/" + _this.model.marker.color.which) unitC = "";
              
                var formatterS = _this.model.marker.size.getTickFormatter();
                var formatterC = _this.model.marker.color.getTickFormatter();
                _this._updateSTitle(
                  formatterS(values.size[d[KEY]])  + " " + unitY,
                  values.color[d[KEY]] || values.color[d[KEY]]===0 ? formatterC(values.color[d[KEY]]) + " " + unitC : _this.translator("hints/nodata")
                );
                if(x + s < 0 || x - s > _this.width || y + s < 0 || y - s > _this.height) {
                  entityOutOfView = true;
                }
                
                //show tooltip
                var text = "";
                var hoverTrail = false;
                if(_this.model.entities.isSelected(d) && _this.model.ui.chart.trails) {
                  text = _this.model.time.timeFormat(_this.time);
                  var selectedData = find(_this.model.entities.select, function(f) {
                    return f[KEY] == d[KEY]
                  });
                  hoverTrail = text !== selectedData.trailStartTime && !d3.select(d3.event.target).classed('bubble-' + d[KEY]);
                  text = text !== selectedData.trailStartTime && _this.time === d[TIMEDIM] ? text : '';
                } else {
                  text = _this.model.entities.isSelected(d) ? '': values.label[d[KEY]];
                }

                _this.labels.highlight(d, true);
                if(_this.model.entities.isSelected(d)) {
                  var skipCrownInnerFill = !d.trailStartTime || d.trailStartTime == _this.model.time.timeFormat(_this.time);
                  _this._setBubbleCrown(x, y, s, c, skipCrownInnerFill);
                }
                
                if(!entityOutOfView && !hoverTrail) {
                  _this._axisProjections(d);
                }

                //set tooltip and show axis projections
                if(text && !entityOutOfView && !hoverTrail) {
                  _this._setTooltip(text, x, y, s + 3, c);
                }

                var selectedData = find(_this.model.entities.select, function(f) {
                  return f[KEY] == d[KEY];
                });
                if(selectedData) {
                  var clonedSelectedData = clone(selectedData);
                  //change opacity to OPACITY_HIGHLT = 1.0;
                  clonedSelectedData.opacity = 1.0;
                  _this._trails.run(["opacityHandler"], clonedSelectedData);
                }
              });
            } else {
              this._axisProjections();
              this._trails.run(["opacityHandler"]);
              //hide tooltip
              _this._updateSTitle();  
              this._setTooltip();
              this._setBubbleCrown();
              this.labels.highlight(null, false);
            }

        },

        updateBubbleOpacity: function(duration) {
          var _this = this;
          //if(!duration)duration = 0;

          var OPACITY_HIGHLT = 1.0;
          var OPACITY_HIGHLT_DIM = this.model.entities.opacityHighlightDim;
          var OPACITY_SELECT = this.model.entities.opacityRegular;
          var OPACITY_REGULAR = this.model.entities.opacityRegular;
          var OPACITY_SELECT_DIM = this.model.entities.opacitySelectDim;

          this.entityBubbles
            //.transition().duration(duration)
            .style("opacity", function(d) {

              if(_this.someHighlighted) {
                //highlight or non-highlight
                if(_this.model.entities.isHighlighted(d)) return OPACITY_HIGHLT;
              }

              if(_this.someSelected) {
                //selected or non-selected
                return _this.model.entities.isSelected(d) ? OPACITY_SELECT : OPACITY_SELECT_DIM;
              }

              if(_this.someHighlighted) return OPACITY_HIGHLT_DIM;

              return OPACITY_REGULAR;
            });


          var someSelectedAndOpacityZero = _this.someSelected && _this.model.entities.opacitySelectDim < .01;

          // when pointer events need update...
          if(someSelectedAndOpacityZero != this.someSelectedAndOpacityZero_1) {
            this.entityBubbles.style("pointer-events", function(d) {
              return(!someSelectedAndOpacityZero || _this.model.entities.isSelected(d)) ?
                "visible" : "none";
            });
          }

          this.someSelectedAndOpacityZero_1 = _this.someSelected && _this.model.entities.opacitySelectDim < .01;
        }

      });

      var BubbleChart = Tool.extend('BubbleChart', {

        /**
         * Initializes the tool (Bubble Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "bubblechart";

          //specifying components
          this.components = [{
            component: BubbleChartComp,
            placeholder: '.vzb-tool-viz',
            model: ["state.time", "state.entities", "state.marker", "language", "ui"] //pass models to component
          }, {
            component: Labels,
            placeholder: '.vzb-tool-labels',
            model: ["state.entities", "state.marker", "ui"]
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }, {
            component: DataWarning,
            placeholder: '.vzb-tool-datawarning',
            model: ['language']
          }, {
            component: DataNotes,
            placeholder: '.vzb-tool-datanotes',
            model: ['state.marker', 'language']
          }];

          this._super(placeholder, external_model);

        },
        
        validate: function(model){
          model = this.model || model;
          
          this._super(model);
          
          if(model.ui.chart.lockNonSelected) {
             var time = model.state.time.timeFormat.parse("" + model.ui.chart.lockNonSelected);
             if(time < model.state.time.start) model.ui.chart.lockNonSelected = model.state.time.timeFormat(model.state.time.start);
             if(time > model.state.time.end) model.ui.chart.lockNonSelected = model.state.time.timeFormat(model.state.time.end);       
          }
        },

        /**
         * Determines the default model of this tool
         */
        default_model: {
          state: {
            time: {
              round: "ceil"
            },
            entities: {
              dim: "geo",
              show: {
                _defs_: {
                  "geo": ["*"],
                  "geo.cat": ["country"]
                }
              },
              opacitySelectDim: .3,
              opacityRegular: 1,
            },
            marker: {
              space: ["entities", "time"],
              type: "geometry",
              label: {
                use: "property",
                which: "geo.name"
              },
              size_label: {
                  use: "constant"
              },
              axis_y: {
                use: "indicator",
                which: "lex"
              },
              axis_x: {
                use: "indicator",
                which: "gdp_pc"
              },
              color: {
                use: "property",
                which: "geo.world_4region"
              },
              size: {
                use: "indicator",
                which: "pop"
              }
            }
          },
          ui: {
            chart: {
              whenHovering: {
                showProjectionLineX: true,
                showProjectionLineY: true,
                higlightValueX: true,
                higlightValueY: true
              },
              labels: {
                dragging: true,
                removeLabelBox: false
              },
              trails: true,
              lockNonSelected: 0
            },
            presentation: true,
            adaptMinMaxZoom: false
          }
        }
      });

      /*!
       * VIZABI POP BY AGE Component
       */


      //POP BY AGE CHART COMPONENT
      var PopByAge$1 = Component.extend({

        /**
         * Initializes the component (Bar Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The config passed to the component
         * @param {Object} context The component's parent
         */
        init: function(config, context) {
          this.name = 'popbyage';
          this.template = 'popbyage.html';

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "age",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }];

          var _this = this;
          this.model_binds = {
            "change:time.value": function(evt) {
              _this._updateEntities();
            },
            "change:entities.show": function(evt) {
              console.log('Trying to change show');
            },
            "change:age.select": function(evt) {
              _this._selectBars();
            },
            "change:marker.color.palette": function (evt) {
              if (!_this._readyOnce) return;
              _this._updateEntities();
            },
            "change:marker.color.scaleType":function (evt) {
              if (!_this._readyOnce) return;
              _this._updateEntities();
            }
          };

          //contructor is the same as any component
          this._super(config, context);

          this.xScale = null;
          this.yScale = null;
          this.cScale = null;

          this.xAxis = axisSmart();
          this.yAxis = axisSmart();
        },

        /**
         * DOM is ready
         */
        readyOnce: function() {

          this.el = (this.el) ? this.el : d3.select(this.element);
          this.element = this.el;

          this.graph = this.element.select('.vzb-bc-graph');
          this.yAxisEl = this.graph.select('.vzb-bc-axis-y');
          this.xAxisEl = this.graph.select('.vzb-bc-axis-x');
          this.yTitleEl = this.graph.select('.vzb-bc-axis-y-title');
          this.bars = this.graph.select('.vzb-bc-bars');
          this.labels = this.graph.select('.vzb-bc-labels');

          this.title = this.element.select('.vzb-bc-title');
          this.year = this.element.select('.vzb-bc-year');

          //only allow selecting one at a time
          this.model.age.selectMultiple(true);

          var _this = this;
          this.on("resize", function() {
            _this._updateEntities();
          });
        },

        /*
         * Both model and DOM are ready
         */
        ready: function() {

          this.AGEDIM = this.model.age.getDimension();
          this.TIMEDIM = this.model.time.getDimension();

          this.updateUIStrings();
          this._updateIndicators();
          this.resize();
          this._updateEntities();
          this._updateEntities();
        },

        updateUIStrings: function() {
          this.translator = this.model.language.getTFunction();

          var titleStringY = this.translator("indicator/" + this.model.marker.axis_y.which);

          var yTitle = this.yTitleEl.selectAll("text").data([0]);
          yTitle.enter().append("text");
          yTitle
            .attr("y", "-6px")
            .attr("x", "-9px")
            .attr("dx", "-0.72em")
            .text(titleStringY);
        },

        /**
         * Changes labels for indicators
         */
        _updateIndicators: function() {
          var _this = this;
          this.duration = this.model.time.delayAnimations;
          this.yScale = this.model.marker.axis_y.getScale();
          this.xScale = this.model.marker.axis_x.getScale(false);
          this.yAxis.tickFormat(_this.model.marker.axis_y.getTickFormatter());
          this.xAxis.tickFormat(_this.model.marker.axis_x.getTickFormatter());
        },

        /**
         * Updates entities
         */
        _updateEntities: function() {

          var _this = this;
          var time = this.model.time;
          var ageDim = this.AGEDIM;
          var timeDim = this.TIMEDIM;
          var duration = (time.playing) ? time.delayAnimations : 0;

          var group_by = this.model.age.grouping || 1;
          //var group_offset = this.model.marker.group_offset ? Math.abs(this.model.marker.group_offset % group_by) : 0;

          var filter = {};
          filter[timeDim] = time.value;
          var markers = this.model.marker.getKeys(ageDim);
          var values$$ = this.model.marker.getValues(filter, [ageDim]);
          var domain = this.yScale.domain();

          this.cScale = this.model.marker.color.getScale();
          this.model.age.setVisible(markers);

          this.entityBars = this.bars.selectAll('.vzb-bc-bar')
            .data(markers);

          this.entityLabels = this.labels.selectAll('.vzb-bc-label')
            .data(markers);

          //exit selection
          this.entityBars.exit().remove();
          this.entityLabels.exit().remove();

          var highlight = this._highlightBar.bind(this);
          var unhighlight = this._unhighlightBars.bind(this)

          //enter selection -- init bars
          this.entityBars.enter().append("g")
            .attr("class", "vzb-bc-bar")
            .attr("id", function(d) {
              return "vzb-bc-bar-" + d[ageDim];
            })
            .on("mouseover", highlight)
            .on("mouseout", unhighlight)
            .on("click", function(d, i) {
              if(isTouchDevice()) return;
              _this.model.age.selectEntity(d);
            })
            .onTap(function(d) {
              d3.event.stopPropagation();
              _this.model.age.selectEntity(d);
            })    
            .append('rect');

          this.entityLabels.enter().append("g")
            .attr("class", "vzb-bc-label")
            .attr("id", function(d) {
              return "vzb-bc-label-" + d[ageDim];
            })
            .append('text')
            .attr("class", "vzb-bc-age");

          var one_bar_height = this.height / (domain[1] - domain[0]);
          var bar_height = one_bar_height * group_by; // height per bar is total domain height divided by the number of possible markers in the domain
          var first_bar_y_offset = this.height - bar_height;

          this.bars.selectAll('.vzb-bc-bar > rect')
            .attr("fill", function(d) {
              return _this._temporaryBarsColorAdapter(values$$, d, ageDim);
              //    return _this.cScale(values.color[d[ageDim]]);
            })
            .attr("shape-rendering", "crispEdges") // this makes sure there are no gaps between the bars, but also disables anti-aliasing
            .attr("x", 0)
            .transition().duration(duration).ease("linear")
            .attr("y", function(d, i) {
              return first_bar_y_offset - (d[ageDim] - domain[0]) * one_bar_height;
            })
            .attr("height", bar_height)
            .attr("width", function(d) {
              return _this.xScale(values$$.axis_x[d[ageDim]]);
            });

          this.labels.selectAll('.vzb-bc-label > .vzb-bc-age')
            .text(function(d, i) {
              var formatter = _this.model.marker.axis_x.getTickFormatter();
              var yearOldsIn = _this.translator("popbyage/yearOldsIn");

              var age = parseInt(d[ageDim], 10);

              if(group_by > 1) {
                age = age + "-to-" + (age + group_by - 1);
              }

              return age + yearOldsIn + " " + _this.model.time.timeFormat(time.value) + ": " + formatter(values$$.axis_x[d[ageDim]]);
            })
            .attr("x", 7)
            .attr("y", function(d, i) {
              return first_bar_y_offset - (d[ageDim] - domain[0]) * one_bar_height - 10;
            })
            .style("fill", function(d) {
              var color = _this.cScale(values$$.color[d[ageDim]]);
              return d3.rgb(color).darker(2);
            });

          var label = values(values$$.label_name).reverse()[0]; //get last name

          //TODO: remove hack
          label = label === "usa" ? "United States" : "Sweden";

          this.title.text(label);

          this.year.text(this.model.time.timeFormat(this.model.time.value));

          //update x axis again
          //TODO: remove this when grouping is done at data level
          //var x_domain = this.xScale.domain();
          //var x_domain_max = Math.max.apply(null, utils.values(values.axis_x));
          //if(x_domain_max > this.xScale.domain()[1]) this.xScale = this.xScale.domain([x_domain[0], x_domain_max]);

          // should not be here
          var limits = this.model.marker.axis_x.getLimits(this.model.marker.axis_x.which);
          if (group_by == 1) {
            this.xScale = this.xScale.domain([limits.min, limits.max]);
          } else {
            var values$$ = values(values$$.axis_x);
            values$$.push(limits.max);
            this.xScale = this.xScale.domain([limits.min, Math.max.apply(Math, values$$)]);
          }
          this.resize();

        },

        _temporaryBarsColorAdapter: function(values$$, d, ageDim) {
          return this.cScale(values$$.color[d[ageDim]]);
        },

        /**
         * Highlight and unhighlight labels
         */
        _unhighlightBars: function() {
          if(isTouchDevice()) return;
            
          this.bars.classed('vzb-dimmed', false);
          this.bars.selectAll('.vzb-bc-bar.vzb-hovered').classed('vzb-hovered', false);
          this.labels.selectAll('.vzb-hovered').classed('vzb-hovered', false);
        },

        _highlightBar: function(d) {
          if(isTouchDevice()) return;
            
          this.bars.classed('vzb-dimmed', true);
          var curr = this.bars.select("#vzb-bc-bar-" + d[this.AGEDIM]);
          curr.classed('vzb-hovered', true);
          var label = this.labels.select("#vzb-bc-label-" + d[this.AGEDIM]);
          label.classed('vzb-hovered', true);
        },

        /**
         * Select Entities
         */
        _selectBars: function() {
          var _this = this;
          var AGEDIM = this.AGEDIM;
          var selected = this.model.age.select;

          this._unselectBars();

          if(selected.length) {
            this.bars.classed('vzb-dimmed-selected', true);
            forEach(selected, function(s) {
              _this.bars.select("#vzb-bc-bar-" + s[AGEDIM]).classed('vzb-selected', true);
              _this.labels.select("#vzb-bc-label-" + s[AGEDIM]).classed('vzb-selected', true);
            });
          }
        },

        _unselectBars: function() {
          this.bars.classed('vzb-dimmed-selected', false);
          this.bars.selectAll('.vzb-bc-bar.vzb-selected').classed('vzb-selected', false);
          this.labels.selectAll('.vzb-selected').classed('vzb-selected', false);
        },

        /**
         * Executes everytime the container or vizabi is resized
         * Ideally,it contains only operations related to size
         */
        resize: function() {

          var _this = this;

          this.profiles = {
            "small": {
              margin: {
                top: 70,
                right: 20,
                left: 40,
                bottom: 40
              },
              minRadius: 2,
              maxRadius: 40
            },
            "medium": {
              margin: {
                top: 80,
                right: 60,
                left: 60,
                bottom: 40
              },
              minRadius: 3,
              maxRadius: 60
            },
            "large": {
              margin: {
                top: 100,
                right: 60,
                left: 60,
                bottom: 40
              },
              minRadius: 4,
              maxRadius: 80
            }
          };

          this.activeProfile = this.profiles[this.getLayoutProfile()];
          var margin = this.activeProfile.margin;

          //stage
          this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
            
          if(this.height<=0 || this.width<=0) return warn("Pop by age resize() abort: vizabi container is too little or has display:none");

          this.graph
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          //update scales to the new range
          if(this.model.marker.axis_y.scaleType !== "ordinal") {
            this.yScale.range([this.height, 0]);
          } else {
            this.yScale.rangePoints([this.height, 0]).range();
          }
          if(this.model.marker.axis_x.scaleType !== "ordinal") {
            this.xScale.range([0, this.width]);
          } else {
            this.xScale.rangePoints([0, this.width]).range();
          }

          //apply scales to axes and redraw
          this.yAxis.scale(this.yScale)
            .orient("left")
            .tickSize(6, 6)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_y.scaleType,
              toolMargin: margin,
              limitMaxTickNumber: 6
            });

          this.xAxis.scale(this.xScale)
            .orient("bottom")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_x.scaleType,
              toolMargin: margin,
              limitMaxTickNumber: 6
            });
          this.xAxisEl.attr("transform", "translate(0," + this.height + ")")
            .call(this.xAxis);

          this.yAxisEl.call(this.yAxis);
          //this.xAxisEl.call(this.xAxis);

          this.title.attr('x', margin.right).attr('y', margin.top / 2);

          this.year.attr('x', this.width + margin.left).attr('y', margin.top / 2);

        }
      });

      //BAR CHART TOOL
      var PopByAge = Tool.extend('PopByAge', {

        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "popbyage";

          //specifying components
          this.components = [{
            component: PopByAge$1,
            placeholder: '.vzb-tool-viz',
            model: ["state.time", "state.entities", "state.entities_age", "state.marker", "language"] //pass models to component
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        }

      });

      /*!
       * VIZABI POP BY AGE Component
       */


      //POP BY AGE CHART COMPONENT
      var AgePyramid$1 = Component.extend({

        /**
         * Initializes the component (Bar Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The config passed to the component
         * @param {Object} context The component's parent
         */
        init: function(config, context) {
          this.name = 'agepyramid';
          this.template = 'agepyramid.html';

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "side",
            type: "entities"
          }, {
            name: "stack",
            type: "entities"
          }, {
            name: "age",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "marker_side",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }, {
            name: "ui",
            type: "model"
          }];

          var _this = this;
          this.model_binds = {
            "change:time.value": function(evt) {
              if (!_this._readyOnce) return;
              if(_this.model.time.step != 1 && !_this.snapped && !_this.model.time.playing && !_this.model.time.dragging) {
                var next = d3.bisectLeft(_this.timeSteps, _this.model.time.value);
                if(next != 0 && (_this.timeSteps[next] - _this.model.time.value)) {
                  _this.snapped = true;
                  var time = _this.model.time.value;
                  var prev = _this.timeSteps[next - 1];
                  var next = _this.timeSteps[next];
                  var snapTime = (time - prev) < (next - time) ? prev : next;
                  _this.model.time.value = new Date(snapTime); 
                }
              }
              if(!_this.snapped) _this._updateEntities();
              _this.snapped = false;
            },
            "change:entities.show": function(evt) {
              console.log('Trying to change show');
            },
            "change:stack.select": function(evt) {
              _this._selectBars();
            },
            "change:marker.color.palette": function (evt) {
              if (!_this._readyOnce) return;
              _this._updateEntities();
            },
            "change:marker.color.scaleType":function (evt) {
              if (!_this._readyOnce) return;
              _this._updateEntities();
            },
            "change:ui.chart.inpercent":function (evt) {
              if (!_this._readyOnce) return;
              _this._updateLimits();
              _this.resize();
              _this._updateEntities();
            }
          };

          //contructor is the same as any component
          this._super(config, context);

          this.xScale = null;
          this.yScale = null;
          this.cScale = null;

          this.xAxis = axisSmart();
          this.xAxisLeft = axisSmart();
          this.yAxis = axisSmart();
          this.xScales = [];
          
          this.totalFieldName = "Total";
        },

        // afterPreload: function() {
        //   var obj = {};
        //   obj["which"] = this.model.marker.axis_x.which;
        //   obj["use"] = this.model.marker.axis_x.use;
        //   this.model.marker_side.hook_total.set(obj);
        // },
        
        /**
         * DOM is ready
         */
        readyOnce: function() {

          this.el = (this.el) ? this.el : d3.select(this.element);
          this.element = this.el;
          
          this.interaction = this._interaction();

          this.graph = this.element.select('.vzb-bc-graph');
          this.yAxisEl = this.graph.select('.vzb-bc-axis-y');
          this.xAxisEl = this.graph.select('.vzb-bc-axis-x');
          this.xAxisLeftEl = this.graph.select('.vzb-bc-axis-x-left');
          this.yTitleEl = this.graph.select('.vzb-bc-axis-y-title');
          this.barsCrop = this.graph.select('.vzb-bc-bars-crop');
          this.bars = this.graph.select('.vzb-bc-bars');
          this.labels = this.graph.select('.vzb-bc-labels');

          this.title = this.element.select('.vzb-bc-title');
          this.titleRight = this.element.select('.vzb-bc-title-right');
          this.year = this.element.select('.vzb-bc-year');

          //only allow selecting one at a time
          this.model.age.selectMultiple(true);

          var _this = this;
          this.on("resize", function() {
            _this._updateEntities();
          });
        },

        /*
         * Both model and DOM are ready
         */
        ready: function() {

          this.timeSteps = this.model.time.getAllSteps();

          this.shiftScale = d3.scale.linear()
            .domain([this.timeSteps[0], this.timeSteps[this.timeSteps.length - 1]])
            .range([0, this.timeSteps.length - 1]);

          this.SIDEDIM = this.model.marker.side.which;//this.model.side.getDimension();
          //this.STACKDIM = this.model.marker.color.which;
          this.STACKDIM = this.model.stack.getDimension();
          this.AGEDIM = this.model.age.getDimension();
          this.TIMEDIM = this.model.time.getDimension();

          this.updateUIStrings();
          this._updateIndicators();
          this._updateLimits();
          this._createStepData(this.model.marker.axis_x);

          this.resize();
          this._updateEntities();
          this._selectBars();
        },

        updateUIStrings: function() {
          this.translator = this.model.language.getTFunction();

          var titleStringY = this.translator("indicator/" + this.model.marker.axis_y.which);

          var yTitle = this.yTitleEl.selectAll("text").data([0]);
          yTitle.enter().append("text");
          yTitle
            .attr("y", "-6px")
            .attr("x", "-9px")
            .attr("dx", "-0.72em")
            .text(titleStringY);
        },

        /**
         * Changes labels for indicators
         */
        _updateIndicators: function() {
          var _this = this;
          this.duration = this.model.time.delayAnimations;
          this.yScale = this.model.marker.axis_y.getScale();
          this.xScale = this.model.marker.axis_x.getScale(false);
          this.yAxis.tickFormat(_this.model.marker.axis_y.getTickFormatter());
          this.xAxis.tickFormat(_this.model.marker.axis_x.getTickFormatter());
          this.xAxisLeft.tickFormat(_this.model.marker.axis_x.getTickFormatter());
          
          var sideDim = this.SIDEDIM;
          var stackDim = this.STACKDIM;
          var ageDim = this.AGEDIM;
          var group_by = this.model.age.grouping || 1;

          var ages = this.model.marker.getKeys(ageDim);
          var ageKeys = [];
          ageKeys = ages.map(function(m) {
              return m[ageDim];
            });
          this.ageKeys = ageKeys;

          this.shiftedAgeKeys = this.timeSteps.map(function(m, i) {return -i * group_by;}).slice(1).reverse().concat(ageKeys);

          var sides = this.model.marker.getKeys(sideDim);
          var sideKeys = [];
          sideKeys = sides.map(function(m) {
              return m[sideDim];
            });
            
          var sideFilter = this.model.side.getFilter;
          if(sideFilter[sideDim] && sideFilter[sideDim][0] != "*") {
            sideKeys = sideKeys.filter(function(m) {
              var f = {};
              f[sideDim] = m;
              return _this.model.side.isShown(f);
            });
          }

          if(sideKeys.length > 1) {
            var sortFunc = this.ui.chart.flipSides ? d3.ascending : d3.descending; 
            sideKeys.sort(sortFunc);
          }
          if(sideKeys.length > 2) sideKeys.length = 2;

          this.sideKeys = sideKeys;

          var stacks = this.model.marker.getKeys(stackDim);
          var stackKeys = [];
          var stackKeys = without(stacks.map(function(m) {
            if(m[stackDim] == _this.totalFieldName) _this.dataWithTotal = true;
            return m[stackDim];
          }), this.totalFieldName);

          var sortedStackKeys = keys(this.model.marker.color.getPalette()).reduce(function(arr, val) {
            if(stackKeys.indexOf(val) != -1) arr.push(val);
            return arr;
          }, []);

          if(sortedStackKeys.length != stackKeys.length) {
            sortedStackKeys = stackKeys.reduce(function(arr, val) {
              if(arr.indexOf(val) == -1) arr.push(val);
              return arr;
            }, sortedStackKeys);
          }
          this.stackKeys = sortedStackKeys;

          this.stacked = this.ui.chart.stacked && this.model.marker.color.use != "constant";
          
          this.twoSided = this.sideKeys.length > 1; 
          if(this.twoSided) {
            this.xScaleLeft = this.xScale.copy();
            this.title.text(this.sideKeys[1]);    
            this.titleRight.text(this.sideKeys[0]);
          } else {
            var title = this.translator("indicator/" + this.model.marker.axis_x.which);
            this.title.text(title);
          }

          this.cScale = this.model.marker.color.getScale();

        },

        _updateLimits: function() {
          var _this = this; 
          var limits, domain;
          var axisX = this.model.marker.axis_x;
          if(this.ui.chart.inpercent) {
            limits = axisX.getLimitsByDimensions([this.SIDEDIM, this.TIMEDIM, this.AGEDIM, this.STACKDIM]);      
            var totalLimits = this.model.marker_side.hook_total.getLimitsByDimensions([this.SIDEDIM, this.TIMEDIM]);
            var totalCoeff = this.dataWithTotal ? .5 : 1;
            var timeKeys = axisX.getUnique();
            var maxLimits = []; 
            forEach(_this.sideKeys, function(key) {
              forEach(timeKeys, function(time) {
                forEach(_this.ageKeys, function(age) {
                  var stackSum = 0;
                  forEach(_this.stackKeys, function(stack) {
                    if (limits[key][time][age][stack])
                      stackSum += limits[key][time][age][stack].max;
                  });
                  maxLimits.push(stackSum / (totalLimits[key][time].max * totalCoeff));
                });          
              });
            });
            domain = [0, Math.max.apply(Math, maxLimits)];
          } else {
            limits = axisX.getLimitsByDimensions([this.SIDEDIM, this.TIMEDIM, this.AGEDIM, this.STACKDIM]);
            var timeKeys = axisX.getUnique();
            var maxLimits = []; 
            forEach(_this.sideKeys, function(key) {
              forEach(timeKeys, function(time) {
                forEach(_this.ageKeys, function(age) {
                  var stackSum = 0;
                  forEach(_this.stackKeys, function(stack) {
                    if (limits[key][time][age][stack])
                      stackSum += limits[key][time][age][stack].max;
                  });
                  maxLimits.push(stackSum);
                });          
              });
            });
                  
            domain = (axisX.domainMin!=null && axisX.domainMax!=null) ? [+axisX.domainMin, +axisX.domainMax] : [0, Math.max.apply(Math, maxLimits)];
          }
          this.xScale.domain(domain);
          if(this.xScaleLeft) this.xScaleLeft.domain(this.xScale.domain());
        },

        getShiftedValues: function(hook, time) {

          var iterateGroupKeys = function(data, deep, result, cb) {
              deep--;
              forEach(data, function(d, id) {
                if(deep) {
                  result[id] = {};
                  iterateGroupKeys(d, deep, result[id], cb);
                } else {
                  cb(d, result, id);
                }
              });
            }

          var which = hook.which;
          var use = hook.use;
          var dimTime = this.TIMEDIM;
          var response = {};
          var method = hook.getConceptprops ? hook.getConceptprops().interpolation : null;

          iterateGroupKeys(this.stepData, this.stepDataDeep, response, function(arr, result, id) {
            var next = d3.bisectLeft(arr.map(function(m){return m[dimTime]}), time);
                
            var value = interpolatePoint(arr, use, which, next, dimTime, time, method);
            result[id] = hook.mapValue(value);
          });

          return response;
        },

        _createStepData: function(hook) {
          var _this = this;
          var timeDim = this.TIMEDIM;
          var sideDim = this.SIDEDIM;
          var stackDim = this.STACKDIM;
          var ageDim = this.AGEDIM;

          this.stepData = {};

          var ageShift = 0;
          var group_by = this.model.age.grouping || 1;

          var groupArray = [ageDim, sideDim, stackDim];
          this.stepDataDeep = groupArray.length; 

          forEach(this.timeSteps, function(time, i) {
            var filter = {};
            filter[timeDim] = time;
            var values = _this.model.marker.getValues(filter, groupArray).axis_x;
            var stepData = _this.stepData[time] = {};
            forEach(_this.shiftedAgeKeys, function(key) {
              var shiftedKey = +key + ageShift;
              var value = values[shiftedKey];
              if(!value) {
                if(shiftedKey < 0) {
                  value = values[0];
                } else {
                  stepData["null"] = values[0];
                }
              }
              stepData[key] = value;
            });
            ageShift += group_by;
          });

          var stepData = this.stepData;
          var stepDataMoved = {};          
          var which = hook.which;
          var use = hook.use;
          forEach(stepData, function(time, timeKey) {
            forEach(time, function(age, ageKey) {
              var allToNull = false;
              if(ageKey == "null") return;
              if(!age && age != 0) {
                age = stepData[timeKey]["null"];
                allToNull = true;
              }
              forEach(age, function(side, sideKey) {
                forEach(side, function(value, stackKey) {
                  var age = stepDataMoved[ageKey] || {};
                  var side = age[sideKey] || {};
                  var stack = side[stackKey] || [];
                  var point = {};
                  point[timeDim] = new Date(timeKey);
                  point[which] = allToNull ? 0 : value;
                  stack.push(point);
                  side[stackKey] = stack;
                  age[sideKey] = side;
                  stepDataMoved[ageKey] = age;
                })
              })
            })
          });

          this.stepData = stepDataMoved;
        },

        /**
         * Updates entities
         */
        _updateEntities: function() {

          var _this = this;
          var time = this.model.time;
          var sideDim = this.SIDEDIM;
          var ageDim = this.AGEDIM;
          var stackDim = this.STACKDIM;
          var timeDim = this.TIMEDIM;
          var duration = (time.playing) ? time.delayAnimations : 0;

          var shiftedValues = this.getShiftedValues(this.model.marker.axis_x, time.value);

          var group_by = this.model.age.grouping || 1;
          //var group_offset = this.model.marker.group_offset ? Math.abs(this.model.marker.group_offset % group_by) : 0;

          if(this.ui.chart.inpercent) {
            var filter = {};
            filter[timeDim] = time.value;
            
            this.totalValues = this.model.marker_side.getValues(filter,[this.SIDEDIM]).hook_total;
            if(this.dataWithTotal) {
              forEach(this.sideKeys, function(key) {
                _this.totalValues[key] *= .5;
              });
            }
          } 

          // var filter = {};
          // filter[timeDim] = time.value;
          var markers = this.model.marker.getKeys(ageDim);

          //_this.values1 = this.model.marker.getValues(filter,[ ageDim, sideDim, stackDim]);
          //var values = this.model.marker.getValues(filter,[this.AGEDIM]);
          var domain = this.yScale.domain();
               
          this.model.age.setVisible(markers);

          var nextStep = d3.bisectLeft(this.timeSteps, time.value);

          var shiftedAgeDim = "s_age"; 

          // var ageBars = this.shiftedAgeKeys.map(function(shiftedKey) {
          //   var data = {};
          //   data[shiftedAgeDim] = shiftedKey;
          //   data[ageDim] = data[shiftedAgeDim] + nextStep * group_by;
          // });

          var ageBars = markers.map(function(data) {
            data[shiftedAgeDim] = +data[ageDim];
            data[ageDim] = data[shiftedAgeDim] - nextStep * group_by;
            return data;
          })

          //var ageBars = [{}].concat(ageBars);
          //ageBars[0][shiftedAgeDim] = ageBars[1][shiftedAgeDim] - group_by;
          //ageBars[0][ageDim] = ageBars[1][ageDim];

          var outAge = {};
          outAge[shiftedAgeDim] = markers.length * group_by;
          outAge[ageDim] = outAge[shiftedAgeDim] - nextStep * group_by;

          if (nextStep) ageBars.push(outAge);

          this.entityBars = this.bars.selectAll('.vzb-bc-bar')
            .data(ageBars, function(d) {return d[ageDim]});

          this.entityLabels = this.labels.selectAll('.vzb-bc-label')
            .data(markers);

          //exit selection
          this.entityBars.exit().remove();
          this.entityLabels.exit().remove();

          //var highlight = this._highlightBar.bind(this);
          //var unhighlight = this._unhighlightBars.bind(this)

          var one_bar_height = this.height / (domain[1] - domain[0]);
          var bar_height = one_bar_height * group_by; // height per bar is total domain height divided by the number of possible markers in the domain
          var first_bar_y_offset = this.height - bar_height;

          //enter selection -- init bars
          this.entityBars.enter().append("g")
            .attr("class", function(d) {
              return "vzb-bc-bar " + "vzb-bc-bar-" + d[ageDim];
            })
            // .on("mouseover", highlight)
            // .on("mouseout", unhighlight)
            // .on("click", function(d, i) {
            //   if(utils.isTouchDevice()) return;
            //   _this.model.age.selectEntity(d);
            // })
            // .onTap(function(d) {
            //   d3.event.stopPropagation();
            //   _this.model.age.selectEntity(d);
            // })

          this.entityBars.attr("class", function(d) {
              return "vzb-bc-bar " + "vzb-bc-bar-" + d[ageDim];
            })


          this.sideBars = this.entityBars.selectAll('.vzb-bc-side').data(function(d) {
            return _this.sideKeys.map(function(m) {
                var r = {};    
                r[ageDim] = d[ageDim];
                r[shiftedAgeDim] = d[shiftedAgeDim];
                r[sideDim] = m;
                return r;
              });
            })
          
          this.sideBars.exit().remove();  
          this.sideBars.enter().append("g")
              .attr("class", function(d, i) {
                return "vzb-bc-side " + "vzb-bc-side-" + (!i != !_this.twoSided ? "right": "left");
              })
              
          var stackBars = this.sideBars.selectAll('.vzb-bc-stack').data(function(d,i) {
                var stacks = _this.stacked ? _this.stackKeys : [_this.totalFieldName];
                return stacks.map(function(m) {
                  var r = {};
                  r[ageDim] = d[ageDim];
                  r[shiftedAgeDim] = d[shiftedAgeDim];
                  r[sideDim] = d[sideDim];
                  r[stackDim] = m;
                  return r;  
                });
              })
              
          stackBars.exit().remove();    
          stackBars.enter().append("rect")
                .attr("class", function(d, i) {
                  return "vzb-bc-stack " + "vzb-bc-stack-" + i + (_this.highlighted ? " vzb-dimmed" : "");
                })
                .attr("y", 0)
                .on("mouseover", _this.interaction.highlightBar)
                .on("mouseout", _this.interaction.unhighlightBars)
                .on("click", function(d, i) {
                  if(isTouchDevice()) return;
                  _this.model.stack.selectEntityMD(d);
                })
                .onTap(function(d) {
                  d3.event.stopPropagation();
                  _this.model.stack.selectEntityMD(d);
                });
              
          this.stackBars = this.bars.selectAll('.vzb-bc-bar')
            .selectAll('.vzb-bc-side')
              .attr("transform", function(d, i) {
                return i ? ("scale(-1,1) translate(" + _this.activeProfile.centerWidth + ",0)") : "";
              })
            .selectAll('.vzb-bc-stack')
              .attr("height", bar_height)
              .attr("fill", function(d) {
                //return _this._temporaryBarsColorAdapter(values, d, ageDim);
                //return _this.cScale(values.color[d[ageDim]]);
                return _this.cScale(d[stackDim]);
              })
              //.attr("shape-rendering", "crispEdges") // this makes sure there are no gaps between the bars, but also disables anti-aliasing
              .each(function(d, i) {
                var total = _this.ui.chart.inpercent ? _this.totalValues[d[sideDim]] : 1;
                var sum = 0;
                if(_this.stacked) {
                  sum = shiftedValues[d[ageDim]][d[sideDim]][d[stackDim]];
                } else {
                  var stacksData = shiftedValues[d[ageDim]][d[sideDim]];
                  forEach(stacksData, function(val) {
                    sum += val; 
                  });
                }
                //var prevWidth = +this.getAttribute("width");
                d["width_"] = _this.xScale(sum / total);
                //d3.select(this).classed("vzb-hidden", d["width_"] < 1 && prevWidth < 1);

                var prevSbl = this.previousSibling;
                if(prevSbl) {
                  var prevSblDatum = d3.select(prevSbl).datum();
                  d["x_"] = prevSblDatum.x_ + prevSblDatum.width_;          
                } else {
                  d["x_"] = 0;
                }
              });

          var stepShift = (ageBars[0][shiftedAgeDim] - ageBars[0][ageDim]) - this.shiftScale(time.value) * group_by; 

          this.bars.selectAll('.vzb-bc-bar')
            .attr("transform", function(d, i) {
              var _d = d[shiftedAgeDim] < 0 ? 0 : d[ageDim] - group_by;
              return "translate(0," + (first_bar_y_offset - (d[shiftedAgeDim] - group_by - domain[0]) * one_bar_height) + ")";
            })
            .transition('age')
            .duration(duration)
            .ease("linear")
            .attr("transform", function(d, i) {
              return "translate(0," + (first_bar_y_offset - (d[shiftedAgeDim] - domain[0] - stepShift) * one_bar_height) + ")";
            })

          this.stackBars.interrupt().transition().duration(duration*.95).ease("linear")
              .attr("width", function(d, i) {
                return d.width_;
              })    
              .attr("x", function(d, i){
                return d.x_;
              });

          // this.sideBars.selectAll(":not(.vzb-hidden)").interrupt().transition().duration(duration*.95).ease("linear")
          //   .attr("width", function(d, i) {
          //     return d.width_;
          //   })    
          //   .attr("x", function(d, i){
          //     return d.x_;
          //   });

          // this.sideBars.selectAll(".vzb-hidden").interrupt()
          //   .attr("width", function(d, i) {
          //     return d.width_;
          //   })    
          //   .attr("x", function(d, i){
          //     return d.x_;
          //   });

       
          this.entityLabels.enter().append("g")
            .attr("class", "vzb-bc-label")
            .attr("id", function(d) {
              return "vzb-bc-label-" + d[shiftedAgeDim];
            })
            .append('text')
            .attr("class", "vzb-bc-age");

          this.labels.selectAll('.vzb-bc-label > .vzb-bc-age')
            .each(function(d, i) {
              var yearOlds = _this.translator("agepyramid/yearOlds");

              var age = parseInt(d[ageDim], 10);

              if(group_by > 1) {
                age = age + "-to-" + (age + group_by - 1);
              }

              d["text"] = age + yearOlds;
            })
            .attr("y", function(d, i) {
              return first_bar_y_offset - (d[shiftedAgeDim] - domain[0]) * one_bar_height - 10;
            });
            // .style("fill", function(d) {
            //   var color = _this.cScale(values.color[d[ageDim]]);
            //   return d3.rgb(color).darker(2);
            // });

          this.year.text(time.timeFormat(time.value));

          //update x axis again
          //TODO: remove this when grouping is done at data level
          //var x_domain = this.xScale.domain();
          //var x_domain_max = Math.max.apply(null, utils.values(values.axis_x));
          //if(x_domain_max > this.xScale.domain()[1]) this.xScale = this.xScale.domain([x_domain[0], x_domain_max]);
          this._selectBars();
        },

        // _temporaryBarsColorAdapter: function(values, d, ageDim) {
        //   return this.cScale(values.color[d[ageDim]]);
        // },

        
        _interaction: function() {
          var _this = this; 
        /**
         * Highlight and unhighlight labels
         */
          return {
            unhighlightBars: function() {
              if(isTouchDevice()) return;

              _this.highlighted = false;
                
              _this.stackBars.classed('vzb-dimmed', false).classed('vzb-hovered', false);
              _this.labels.selectAll('.vzb-hovered').classed('vzb-hovered', false);

            },

            highlightBar: function(d) {
              if(isTouchDevice()) return;

              _this.highlighted = true;
                
              var formatter = _this.ui.chart.inpercent ? d3.format(".1%") : _this.model.marker.axis_x.getTickFormatter();
              var sideDim = _this.SIDEDIM;
              var ageDim = _this.AGEDIM;
              var stackDim = _this.STACKDIM;
              var shiftedAgeDim = "s_age"; 
            
              _this.stackBars.classed('vzb-dimmed', true);
              var curr = d3.select(this); 
              //_this.bars.select("#vzb-bc-bar-" + d[this.AGEDIM]);
              curr.classed('vzb-hovered', true);
              var left = _this.sideKeys.indexOf(d[sideDim]);
              var label = _this.labels.select("#vzb-bc-label-" + d[shiftedAgeDim]);
              label.selectAll('.vzb-bc-age')
                .text(function(textData) { 
                  //var total = _this.ui.chart.inpercent ? _this.totalValues[d[sideDim]] : 1;
                  var text = _this.stackKeys.length > 1 ? d[stackDim]: textData.text;
                  text = _this.twoSided ? text : textData.text + " " + d[stackDim];
                  var value = _this.xScale.invert(d["width_"]); 
                  //var value = (_this.dataWithTotal || _this.stacked) ? _this.values1.axis_x[d[shiftedAgeDim]][d[sideDim]][d[stackDim]] / total : _this.xScale.invert(d["width_"]); 
                  return text + ": " + formatter(value);
                })
                .attr("x", (left?-1:1) * (_this.activeProfile.centerWidth * .5 + 7))
                .classed("vzb-text-left", left);
              
              label.classed('vzb-hovered', true);
            }
          }
        },

        /**
         * Select Entities
         */
        _selectBars: function() {
          var _this = this;
          var stackDim = this.STACKDIM;
          var ageDim = this.AGEDIM;
          var sideDim = this.SIDEDIM;
          var selected = this.model.stack.select;

          this._unselectBars();

          if(selected.length) {
            this.stackBars.classed('vzb-dimmed-selected', true);
            forEach(selected, function(d) {
              var indexSide = _this.stacked ? _this.sideKeys.indexOf(d[sideDim]) : 0;
              var indexStack = _this.stacked ? _this.stackKeys.indexOf(d[stackDim]) : 0;
              var side = _this.twoSided != !indexSide ? "left": "right";
              _this.bars.selectAll(".vzb-bc-bar-" + d[ageDim]).selectAll(".vzb-bc-side-" + side).selectAll(".vzb-bc-stack-" + indexStack).classed('vzb-selected', true);
              //_this.labels.select("#vzb-bc-label-" + d[ageDim]).classed('vzb-selected', true);
            });
          }
        },

        _unselectBars: function() {
          this.stackBars.classed('vzb-dimmed-selected', false);
          this.stackBars.classed('vzb-selected', false);
          //this.labels.selectAll('.vzb-selected').classed('vzb-selected', false);
        },

        /**
         * Executes everytime the container or vizabi is resized
         * Ideally,it contains only operations related to size
         */


        presentationProfileChanges: {
          medium: {
            margin: { right: 80, bottom: 80 },
            infoElHeight: 32
          },
          large: {
            margin: { top: 100, right: 100, left: 100, bottom: 80 },
            infoElHeight: 32
          }
        },

        profiles: {
          "small": {
            margin: {
              top: 70,
              right: 20,
              left: 40,
              bottom: 40
            },
            minRadius: 2,
            maxRadius: 40,
            centerWidth: 2
          },
          "medium": {
            margin: {
              top: 80,
              right: 60,
              left: 60,
              bottom: 40
            },
            minRadius: 3,
            maxRadius: 60,
            centerWidth: 2
          },
          "large": {
            margin: {
              top: 100,
              right: 60,
              left: 60,
              bottom: 40
            },
            minRadius: 4,
            maxRadius: 80,
            centerWidth: 2
          }
        },

        resize: function() {

          var _this = this;

          this.activeProfile = this.getActiveProfile(this.profiles, this.presentationProfileChanges);

          //this.activeProfile = this.profiles[this.getLayoutProfile()];
          var margin = this.activeProfile.margin;

          //stage
          this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
            
          if(this.height<=0 || this.width<=0) return warn("Pop by age resize() abort: vizabi container is too little or has display:none");

          this.graph
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          this.barsCrop
            .attr("width", this.width)
            .attr("height", this.height);

          //update scales to the new range
          if(this.model.marker.axis_y.scaleType !== "ordinal") {
            this.yScale.range([this.height, 0]);
          } else {
            this.yScale.rangePoints([this.height, 0]).range();
          }

          var maxRange = this.twoSided ? ((this.width - this.activeProfile.centerWidth) * .5) : this.width; 
          
          if(this.model.marker.axis_x.scaleType !== "ordinal") {
            this.xScale.range([0, maxRange]);
          } else {
            this.xScale.rangePoints([0, maxRange]).range();
          }

          //apply scales to axes and redraw
          this.yAxis.scale(this.yScale)
            .orient("left")
            .tickSize(6, 6)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_y.scaleType,
              toolMargin: margin,
              limitMaxTickNumber: 19
            });

          var group_by = this.model.age.grouping || 1;
        
          var format = this.ui.chart.inpercent ? d3.format((group_by > 3 ? "":".1") + "%") : this.model.marker.axis_x.getTickFormatter();  

          this.xAxis.scale(this.xScale)
            .orient("bottom")
            .tickFormat(format)
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.marker.axis_x.scaleType,
              toolMargin: margin,
              limitMaxTickNumber: 6
            });
            
          var translateX = this.twoSided ? ((this.width + _this.activeProfile.centerWidth) * .5) : 0;

          this.xAxisEl.attr("transform", "translate(" + translateX + "," + this.height + ")")
            .call(this.xAxis);

          this.yAxisEl.attr("transform", "translate(" + 0 + ",0)")
            .call(this.yAxis);
          //this.xAxisEl.call(this.xAxis);

          if(this.xScaleLeft) {
            if(this.model.marker.axis_x.scaleType !== "ordinal") {
              this.xScaleLeft.range([(this.width - this.activeProfile.centerWidth) * .5, 0]);
            } else {
              this.xScaleLeft.rangePoints([(this.width - this.activeProfile.centerWidth) * .5, 0]).range();
            }

            this.xAxisLeft.scale(this.xScaleLeft)
              .orient("bottom")
              .tickFormat(format)
              .tickSize(6, 0)
              .tickSizeMinor(3, 0)
              .labelerOptions({
                scaleType: this.model.marker.axis_x.scaleType,
                toolMargin: margin,
                limitMaxTickNumber: 6
              });

            this.xAxisLeftEl.attr("transform", "translate(0," + this.height + ")")
              .call(this.xAxisLeft);
          }    
          
          this.bars.attr("transform", "translate(" + translateX + ",0)");
          this.labels.attr("transform", "translate(" + translateX + ",0)");

          this.title
            .attr('x', margin.left + (this.twoSided ? translateX - 5 : 0))
            .style('text-anchor', this.twoSided ? "end":"null")
            .attr('y', margin.top / 2);
          this.titleRight
            .attr('x', margin.left + translateX + 5)
            .attr('y', margin.top / 2);

          this.year.attr('x', this.width + margin.left).attr('y', margin.top / 2);

        }
      });

      //BAR CHART TOOL
      var AgePyramid = Tool.extend('AgePyramid', {

        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "agepyramid";

          //specifying components
          this.components = [{
            component: AgePyramid$1,
            placeholder: '.vzb-tool-viz',
            model: ["state.time", "state.entities", "state.entities_side", "state.entities_stack", "state.entities_age", "state.marker", "state.marker_side", "language", "ui"] //pass models to component
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        },

        default_model: {
          ui: {
            chart: {
              inpercent: false,
              stacked: true
            }
          }
        }


      });

      //BAR CHART TOOL
      var JOINTPyramidLine = Tool.extend('JOINTPyramidLine', {

        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {
          
          this.name = "joint_pyramidline";
          
          this.template = 
            '<div class="vzb-tool vzb-tool-' + this.name + '">' + 
              '<div class="vzb-tool-stage vzb-tool-stage-left" style="position:absolute; left: 0; width: 50%; height: 100%;">' + 
                '<div class="vzb-tool-viz vzb-tool-viz-pyramid"></div>' + 
              '</div>' + 
              '<div class="vzb-tool-stage vzb-tool-stage-right" style="position:absolute; right: 0; width: 50%; height: 100%;">' +
                '<div class="vzb-tool-viz vzb-tool-viz-line"></div>' + 
                '<div class="vzb-tool-timeslider"></div>' + 
              '</div>' + 
              '<div class="vzb-tool-sidebar">' + 
                '<div class="vzb-tool-dialogs"></div>' +
                '<div class="vzb-tool-buttonlist"></div>' + 
              '</div>' +         
              '<div class="vzb-tool-datanotes vzb-hidden"></div>' + 
              '<div class="vzb-tool-treemenu vzb-hidden"></div>' + 
              '<div class="vzb-tool-datawarning vzb-hidden"></div>' + 
              '<div class="vzb-tool-labels vzb-hidden"></div>' + 
            '</div>';    

          

          //specifying components
          this.components = [{
            component: AgePyramid$1,
            placeholder: '.vzb-tool-viz-pyramid',
            model: ["state.time", "state.entities", "state.entities_side", "state.entities_stack", "state.entities_age", "state.marker_pyramid", "state.marker_side", "language", "ui"] //pass models to component
          }, {      
            component: LCComponent,
            placeholder: '.vzb-tool-viz-line',
            model: ["state.time", "state.entities", "state.marker_line", "language"]
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker_pyramid"]
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        }

      });

      //import Selectlist from './bubblemap-selectlist';

      //BUBBLE MAP CHART COMPONENT
      var CartogramComponent = Component.extend({
        /**
         * Initializes the component (Bubble Map Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The config passed to the component
         * @param {Object} context The component's parent
         */
        init: function (config, context) {
          this.name = 'cartogram';
          this.template = 'cartogram.html';


          //http://stackoverflow.com/questions/11381673/detecting-a-mobile-browser
          var mobileAndTabletcheck = function() {
            var check = false;
            (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
            return check;
          };
          this.isMobile = mobileAndTabletcheck();

          //define expected models for this component
          this.model_expects = [{
            name: "time",
            type: "time"
          }, {
            name: "entities",
            type: "entities"
          }, {
            name: "marker",
            type: "model"
          }, {
            name: "language",
            type: "language"
          }, {
            name: "ui",
            type: "model"
          }];

          var _this = this;
          this.model_binds = {
            "change:time.value": function (evt) {
              if (!_this._readyOnce) return;
              _this.year.setText(_this.model.time.timeFormat(_this.model.time.value));
              if (!_this.calculationQueue) { // collect timestamp that we request
                _this.calculationQueue = [_this.model.time.value.toString()]
              } else {
                _this.calculationQueue.push(_this.model.time.value.toString());
              }
              (function(time) { // isolate timestamp
                _this.model.marker.getFrame(time, function(frame, time) {
                  var index = _this.calculationQueue.indexOf(time.toString()); //
                  if (index == -1) { // we was receive more recent frame before so we pass this frame
                    return;
                  } else {
                    _this.calculationQueue.splice(0, index + 1); // remove timestamps that added to queue before current timestamp
                  }
                  _this.frameChanged(frame, time);
                });

              }(_this.model.time.value));
            },
            'change:marker.size.extent': function(evt, path) {
              //console.log("EVENT change:marker:size:max");
              if(!_this._readyOnce) return;
              _this.updateMarkerSizeLimits();
              _this.updateEntities();
            },
            "change:marker.color.scaleType": function(evt, path) {
              _this.updateIndicators();
              _this.updateEntitityColor();
            },
            
            'change:marker.size.use': function(evt, path) {
              _this.model.ui.chart.lockActive = _this.model.marker.size.use != "constant";
            },
            "change:marker.color.palette": function(evt, path) {
              _this.updateEntitityColor();
            },
            "change:ui.chart.lockNonSelected": function(evt) {
              _this.updateEntities(900);
            },
            "change:entities.select": function() {
              if(!_this._readyOnce) return;
              _this.updateLandOpacity();
            },
            "change:entities.highlight": function() {
              if(!_this._readyOnce) return;
              //console.log("EVENT change:entities:highlight");
              _this.updateLandOpacity();
            },
            'change:entities.opacitySelectDim': function() {
              _this.updateLandOpacity();
            },
            'change:entities.opacityRegular': function() {
              _this.updateLandOpacity();
            },
          };
          //this._selectlist = new Selectlist(this);

          //contructor is the same as any component
          this._super(config, context);


          _this.COLOR_LAND_DEFAULT = "#fdfdfd";

          this.lands = null;
          this.features = null;
          this.topo_features = null;
          this.borderArcs = null;
          this.defaultWidth = 700;
          this.defaultHeight = 550;
          this.updateEntitiesQueue = [];
          this.boundBox = [[0.05, 0.0], [0.95, 1.0]]; // two points to set box bound on 960 * 500 image;
          d3_geo_projection();
          this.cached = [];
          this.projection = d3.geo.mercator()
            .center([25, -29])
            .scale(1900)
            .translate([this.defaultWidth / 2, this.defaultHeight / 2])
            .precision(.1);

          this.cartogram = d3.cartogram()
            .projection(this.projection)
            .properties(function(d) {
              return d.properties;
            });
        },

        afterPreload: function(){
          var _this = this;
          if(!this.world) warn("cartogram afterPreload: missing country shapes " + this.world);
          if(!this.geometries) warn("cartogram afterPreload: missing country shapes " + this.geometries);

          // http://bl.ocks.org/mbostock/d4021aa4dccfd65edffd patterson
          // http://bl.ocks.org/mbostock/3710566 robinson
          // map background

          this.borderArcs = _this.cartogram.meshArcs(this.world, this.world.objects.topo, function(a, b) {
            return a.properties.MN_NAME && a.properties.PR_NAME !== b.properties.PR_NAME;
          });

          this.labels = this.parent.findChildByName('gapminder-labels');
          if(this.labels) this.labels.config({
            CSS_PREFIX: 'vzb-ct',
            TOOL_CONTEXT: this,
            LABELS_CONTAINER_CLASS: 'vzb-ct-labels',
            LINES_CONTAINER_CLASS: 'vzb-ct-lines'
          });

        },
        _getKey: function(d) {
          return d.properties[this.id_lookup]? d.properties[this.id_lookup].toString() : d.id.toString(); 
        },
        /**
         * DOM is ready
         */
        readyOnce: function () {

          this.element = d3.select(this.element);

          this.graph = this.element.select('.vzb-ct-graph');
          this.mapSvg = this.element.select('.vzb-ct-map-background');

          this.labelsContainerCrop = this.graph.select('.vzb-ct-labels-crop');
          this.labelsContainer = this.graph.select('.vzb-ct-labels');

          this.yTitleEl = this.graph.select(".vzb-ct-axis-y-title");
          this.sTitleEl = this.graph.select(".vzb-ct-axis-c-title");
          this.yInfoEl = this.graph.select(".vzb-ct-axis-y-info");
          this.sInfoEl = this.graph.select(".vzb-ct-axis-c-info");
          this.dataWarningEl = this.graph.select(".vzb-data-warning");
          this.entityBubbles = null;
          this.tooltip = this.element.select('.vzb-ct-tooltip');

          // year background
          this.yearEl = this.graph.select('.vzb-ct-year');
          this.year = new DynamicBackground(this.yearEl);
          this.year.setConditions({xAlign: 'left', yAlign: 'bottom', bottomOffset: 5});
          this.mapGraph = this.element.select(".vzb-ct-map-graph")
            .attr("width", this.defaultWidth)
            .attr("height", this.defaultHeight);
          this.mapGraph.html('');


          this.KEY = this.model.entities.getDimension();
          this.TIMEDIM = this.model.time.getDimension();

          var _this = this;
          this.updateUIStrings();
          this.on("resize", function() {
            if(_this.updateSize()) return;
          });
          this.wScale = d3.scale.linear()
            .domain(this.parent.datawarning_content.doubtDomain)
            .range(this.parent.datawarning_content.doubtRange);

          this.cartogram.iterations(0);
          this.redrawInProgress = true;

          this.cartogram(this.world, this.geometries).then(function(response) {
            _this.redrawInProgress = false;

            _this.features = _this.topo_features = response.features;
            _this.lands = _this.mapGraph.selectAll(".land")
              .data(_this.topo_features)
              .enter().append("path")
              .attr("class", function(d) { return "land " + (d.properties[_this.id_lookup]?d.properties[_this.id_lookup]:d.id); })
              .attr("d", _this.cartogram.path)
              .on("mouseover", function (d, i) {
                if (isTouchDevice()) return;
                _this._interact()._mouseover(d, i);
              })
              .on("mouseout", function (d, i) {
                if (isTouchDevice()) return;
                _this._interact()._mouseout(d, i);
              })
              .on("click", function(d, i) {
                if(isTouchDevice()) return;
                _this._interact()._click(d, i);
              })
              .each(function(d) {
                d[_this.KEY] = _this._getKey(d);
              });

            if (_this.borderArcs) {
              var data = _this.cartogram.stitchArcs(response, _this.borderArcs);
              _this.borders = _this.mapGraph.append("path")
                .datum(data)
                .attr("class", "boundary")
                .attr("d", _this.cartogram.path);
            }
          });
        },
        
        frameChanged: function(frame, time) {
          if (time.toString() != this.model.time.value.toString()) return; // frame is outdated
          if (!frame) return;
          this.values = frame;
          this.updateTime();
          this.updateTitleNumbers();
          this.updateEntities(this.duration);
        },
        
        /*
         * Both model and DOM are ready
         */
        ready: function () {
          var _this = this;
          this.cached = [];
          this.updateIndicators();
          this.updateUIStrings();
          this.updateMarkerSizeLimits();
          this.updateSize();
          this.model.marker.getFrame(_this.model.time.value, _this.frameChanged.bind(_this));
          this.year.setText(_this.model.time.timeFormat(_this.model.time.value));
        },

        /**
         * Changes labels for indicators
         */
        updateIndicators: function () {
          this.sScale = this.model.marker.size.getScale();
          this.cScale = this.model.marker.color.getScale();
        },

        updateMarkerSizeLimits: function() {
          var _this = this;
          var extent = this.model.marker.size.extent || [0,1];
          this.minRadius = Math.max(100 * extent[0], 0);
          this.maxRadius = Math.max(100 * extent[1], 0);

          this.sScale.domain([0, this.sScale.domain()[1]]);
          if(this.model.marker.size.scaleType !== "ordinal") {
            this.sScale.range([this.minRadius, this.maxRadius]);
          } else {
            this.sScale.rangePoints([this.minRadius, this.maxRadius], 0).range();
          }
        },
        
        _calculateTotalSize: function(year, frame) {
          if (this.cached[year]) {
            return this.cached[year];
          }
          var _this = this;
          this.cached[year] = 0;
          forEach(frame, function(val) {
            _this.cached[year] += _this.sScale(val);
          });
          return this.cached[year];
        },
         
        _redrawEntities: function() {
          var _this = this;
          if (this.updateEntitiesQueue.length == 0) return;
          if (this.redrawInProgress) {
            setTimeout(function() {
              _this._redrawEntities();
            }, 100);
            return;
          }
          this.redrawInProgress = true;
          var time = this.updateEntitiesQueue[this.updateEntitiesQueue.length - 1].time;
          var duration = this.updateEntitiesQueue[this.updateEntitiesQueue.length - 1].duration;
          this.updateEntitiesQueue = [];
          if(this.model.ui.chart.lockNonSelected) {
            time = this.model.time.timeFormat.parse("" + this.model.ui.chart.lockNonSelected);
          }
          this.model.marker.getFrame(time, function(lockedFrame) {
            var totValue = null;
            if (_this.model.marker.size.use == "constant") {
              _this.cartogram.iterations(0);
            } else {
              _this.cartogram.iterations(8);
              //var areas = _this.topo_features.map(d3.geo.path().projection(null).area);
              _this.cartogram.value(function(d) {
                if (_this.model.ui.chart.lockNonSelected) {
                  var size1 = _this.sScale(lockedFrame.size[_this._getKey(d)])/* * _this._calculateTotalSize(_this.model.time.value, _this.values.size)*/,
                    size2 = _this.sScale(_this.values.size[_this._getKey(d)])/* * _this._calculateTotalSize(time, lockedFrame.size)*/;
                  return d3.geo.path().projection(null).area(d) * Math.pow((size2 / size1), 2);  
                } else {
                  return _this.sScale(_this.values.size[_this._getKey(d)]);
                }
              });
              /*
               if (_this.model.ui.chart.lockNonSelected) {
               totValue = d3.sum(areas);
               }
               */
            }
            var calcDuration = 0;
            var start = new Date().getTime();
            _this.cartogram(_this.world, _this.geometries, totValue).then(function(response) {
              var end = new Date().getTime();
              if (duration) { // increale duration for prevent gaps between frames
                duration = Math.max(duration, end - start);
              }
              _this.features = response.features;
              if (_this.borderArcs) {
                var data = _this.cartogram.stitchArcs(response, _this.borderArcs);
                _this.borders.datum(data)
                  .transition()
                  .duration(duration)
                  .ease("linear")
                  .attr("d", _this.cartogram.path);
              }
              _this.lands.data(_this.features)
                .each(function(d) {
                  d[_this.KEY] = _this._getKey(d);
                });
              if (duration) {
                _this.lands.interrupt()
                  .transition()
                  .duration(duration)
                  .ease("linear")
                  .style("fill", function(d) {
                    return _this.values.color[_this._getKey(d)]!=null?_this.cScale(_this.values.color[_this._getKey(d)]):_this.COLOR_LAND_DEFAULT;
                  })
                  .attr("d", _this.cartogram.path);
                if (_this.borderArcs) {
                  _this.borders.interrupt()
                    .transition()
                    .duration(duration)
                    .ease("linear")
                    .attr("d", _this.cartogram.path);
                }

              } else {
                _this.borders
                  .attr("d", _this.cartogram.path);

                _this.lands
                  .style("fill", function(d) {
                    return _this.values.color[_this._getKey(d)]!=null?_this.cScale(_this.values.color[_this._getKey(d)]):_this.COLOR_LAND_DEFAULT;
                  })
                  .attr("d", _this.cartogram.path);

              }
              _this.updateLandOpacity();
              _this.redrawInProgress = false;
              _this._redrawEntities();
            });
          });
        },
          
        updateEntities: function(duration) {
          var time = this.model.time.value;
          
          this.updateEntitiesQueue.push({time:time, duration: duration});
          this._redrawEntities();
        },

        updateEntitityColor: function() {
          var _this = this;
          this.lands.transition()
            .duration(_this.duration)
            .ease("linear")
            .style("fill", function(d) {
              return _this.values.color[_this._getKey(d)]!=null?_this.cScale(_this.values.color[_this._getKey(d)]):_this.COLOR_LAND_DEFAULT;
            })
          
        },
        updateUIStrings: function () {
          var _this = this;

          this.translator = this.model.language.getTFunction();
          var sizeConceptprops = this.model.marker.size.getConceptprops();
          this.strings = {
            title: {
              C: (_this.model.marker.size.use !== "constant"? this.translator("buttons/color") + ": " : "") + this.translator("indicator/" + _this.model.marker.color.which),
              S: this.translator("buttons/size") + ": " + this.translator("indicator/" + _this.model.marker.size.which)
            }
          };
          
          this.yTitleEl.select("text")
            //don't show "Color:" when the size is constant and we are only showing color
            .text(this.strings.title.C)
            .on("click", function() {
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("color")
                .alignX("left")
                .alignY("top")
                .updateView()
                .toggle();
            });

          this.sTitleEl.select("text")
            .text(this.strings.title.S)
            .on("click", function() {
              _this.parent
                .findChildByName("gapminder-treemenu")
                .markerID("size")
                .alignX("left")
                .alignY("top")
                .updateView()
                .toggle();
            });

          setIcon(this.dataWarningEl, iconWarn).select("svg").attr("width", "0px").attr("height", "0px");
          this.dataWarningEl.append("text")
            .attr("text-anchor", "end")
            .text(this.translator("hints/dataWarning"));

          this.dataWarningEl
            .on("click", function () {
              _this.parent.findChildByName("gapminder-datawarning").toggle();
            })
            .on("mouseover", function () {
              _this.updateDoubtOpacity(1);
            })
            .on("mouseout", function () {
              _this.updateDoubtOpacity();
            })

          this.yInfoEl
            .html(iconQuestion)
            .select("svg").attr("width", "0px").attr("height", "0px");

          //TODO: move away from UI strings, maybe to ready or ready once
          this.yInfoEl.on("click", function() {
            _this.parent.findChildByName("gapminder-datanotes").pin();
          })
          this.yInfoEl.on("mouseover", function() {
            var rect = this.getBBox();
            var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
            _this.parent.findChildByName("gapminder-datanotes").setHook('size').show().setPos(coord.x, coord.y);
          })
          this.yInfoEl.on("mouseout", function() {
            _this.parent.findChildByName("gapminder-datanotes").hide();
          })

          this.sInfoEl
            .html(iconQuestion)
            .select("svg").attr("width", "0px").attr("height", "0px");

          //TODO: move away from UI strings, maybe to ready or ready once
          this.sInfoEl.on("click", function() {
            _this.parent.findChildByName("gapminder-datanotes").pin();
          })
          this.sInfoEl.on("mouseover", function() {
            var rect = this.getBBox();
            var coord = makeAbsoluteContext(this, this.farthestViewportElement)(rect.x - 10, rect.y + rect.height + 10);
            _this.parent.findChildByName("gapminder-datanotes").setHook('color').show().setPos(coord.x, coord.y);
          })
          this.sInfoEl.on("mouseout", function() {
            _this.parent.findChildByName("gapminder-datanotes").hide();
          })
        },

        updateDoubtOpacity: function (opacity) {
          if (opacity == null) opacity = this.wScale(+this.time.getUTCFullYear().toString());
          if (this.someSelected) opacity = 1;
          this.dataWarningEl.style("opacity", opacity);
        },

        /*
         * UPDATE TIME:
         * Ideally should only update when time or data changes
         */
        updateTime: function() {
          var _this = this;
          this.time_1 = this.time == null ? this.model.time.value : this.time;
          this.time = this.model.time.value;
          this.duration = this.model.time.playing && (this.time - this.time_1 > 0) ? this.model.time.delayAnimations : 0;

          //possibly update the exact value in size title
        },


        /**
         * Executes everytime the container or vizabi is resized
         * Ideally,it contains only operations related to size
         */
        updateSize: function () {

          var _this = this;
          var margin, infoElHeight;

          var profiles = {
            small: {
              margin: { top: 10, right: 10, left: 10, bottom: 0 },
              infoElHeight: 16,
            },
            medium: {
              margin: { top: 20, right: 20, left: 20, bottom: 30 },
              infoElHeight: 20,
            },
            large: {
              margin: { top: 30, right: 30, left: 30, bottom: 35 },
              infoElHeight: 22,
            }
          };

          var presentationProfileChanges = {
            medium: {
              infoElHeight: 26
            },
            large: {
              infoElHeight: 32
            }
          };

          this.activeProfile = this.getActiveProfile(profiles, presentationProfileChanges);
          margin = this.activeProfile.margin;
          infoElHeight = this.activeProfile.infoElHeight;

          //stage
          var height = this.height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          var width = this.width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;

          if(this.height<=0 || this.width<=0) return warn("Bubble map updateSize() abort: vizabi container is too little or has display:none");

          var boundBox = this.boundBox;
          var viewBox = [ boundBox[0][0] * this.defaultWidth,
            boundBox[0][1] * this.defaultHeight,
            Math.abs(boundBox[1][0] - boundBox[0][0]) * this.defaultWidth,
            Math.abs(boundBox[1][1] - boundBox[0][1]) * this.defaultHeight];

          this.graph
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          this.year.resize(this.width, this.height,
            Math.min(this.width/2.5, Math.max(this.height / 4, this.width / 4)) / 2.5);

          this.mapSvg
            .attr('width', width)
            .attr('height', height)
            .attr('viewBox', viewBox.join(' '))
            .attr('preserveAspectRatio', 'xMidYMid')
            .attr('x', margin.left)
            .attr('y', margin.top)
            .style("transform", "translate3d(" + margin.left + "px," + margin.top + "px,0)");

          this.yTitleEl
            .style("font-size", infoElHeight)
            .attr("transform", "translate(0," + margin.top + ")")

          var yTitleBB = this.yTitleEl.select("text").node().getBBox();

          this.sTitleEl.attr("transform", "translate(" + 0 + "," + (margin.top + yTitleBB.height) + ")")
            .classed("vzb-hidden", this.model.marker.size.use == "constant");

          var warnBB = this.dataWarningEl.select("text").node().getBBox();
          this.dataWarningEl.select("svg")
            .attr("width", warnBB.height * 0.75)
            .attr("height", warnBB.height * 0.75)
            .attr("x", -warnBB.width - warnBB.height * 1.2)
            .attr("y", -warnBB.height * 0.65)

          this.dataWarningEl
            .attr("transform", "translate(" + (this.width) + "," + (this.height - warnBB.height * 0.5) + ")")
            .select("text");

          if(this.yInfoEl.select('svg').node()) {
            var titleBBox = this.yTitleEl.node().getBBox();
            var translate = d3.transform(this.yTitleEl.attr('transform')).translate;

            this.yInfoEl.select('svg')
              .attr("width", infoElHeight)
              .attr("height", infoElHeight)
            this.yInfoEl.attr('transform', 'translate('
              + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
              + (translate[1] - infoElHeight * 0.8) + ')');
          }

          this.sInfoEl.classed("vzb-hidden", this.sTitleEl.classed("vzb-hidden"));

          if(!this.sInfoEl.classed("vzb-hidden") && this.sInfoEl.select('svg').node()) {
            var titleBBox = this.sTitleEl.node().getBBox();
            var translate = d3.transform(this.sTitleEl.attr('transform')).translate;

            this.sInfoEl.select('svg')
              .attr("width", infoElHeight)
              .attr("height", infoElHeight)
            this.sInfoEl.attr('transform', 'translate('
              + (titleBBox.x + translate[0] + titleBBox.width + infoElHeight * .4) + ','
              + (translate[1] - infoElHeight * 0.8) + ')');
          }
        },

        fitSizeOfTitles: function(){

          //reset font sizes first to make the measurement consistent
          var yTitleText = this.yTitleEl.select("text")
            .style("font-size", null);
          var sTitleText = this.sTitleEl.select("text")
            .style("font-size", null);


          var yTitleBB = yTitleText.node().getBBox();
          var sTitleBB = this.sTitleEl.classed('vzb-hidden') ? yTitleBB : sTitleText.node().getBBox();

          var font =
            Math.max(parseInt(yTitleText.style("font-size")), parseInt(sTitleText.style("font-size")))
            * this.width / Math.max(yTitleBB.width, sTitleBB.width);

          if(Math.max(yTitleBB.width, sTitleBB.width) > this.width) {
            yTitleText.style("font-size", font + "px");
            sTitleText.style("font-size", font + "px");
          } else {
            // Else - reset the font size to default so it won't get stuck
            yTitleText.style("font-size", null);
            sTitleText.style("font-size", null);
          }
        },
        _interact: function () {
          var _this = this;

          return {
            _mouseover: function (d, i) {
              if (_this.model.time.dragging) return;

              _this.model.entities.highlightEntity(d);

              _this.hovered = d;
              //put the exact value in the size title
              _this.updateTitleNumbers();
              _this.fitSizeOfTitles();

              if (_this.model.entities.isSelected(d)) { // if selected, not show hover tooltip
                _this._setTooltip();
              } else {
                //position tooltip
                _this._setTooltip(d);
              }
            },
            _mouseout: function (d, i) {
              if (_this.model.time.dragging) return;
              _this._setTooltip();
              _this.hovered = null;
              _this.updateTitleNumbers();
              _this.fitSizeOfTitles();
              _this.model.entities.clearHighlighted();
            },
            _click: function (d, i) {
              _this.model.entities.selectEntity(d);
            }
          };

        },

        // show size number on title when hovered on a bubble
        updateTitleNumbers: function(){
          var _this = this;

          var mobile; // if is mobile device and only one bubble is selected, update the ytitle for the bubble
          if (_this.isMobile && _this.model.entities.select && _this.model.entities.select.length === 1) {
            mobile = _this.model.entities.select[0];
          }

          if(_this.hovered || mobile) {
            var hovered = _this.hovered || mobile;
            var formatterC = _this.model.marker.color.getTickFormatter();

            var unitC = _this.translator("unit/" + _this.model.marker.color.which);
            //suppress unit strings that found no translation (returns same thing as requested)
            if(unitC === "unit/" + _this.model.marker.color.which) unitC = "";
            
            var valueC = _this.values.color[_this._getKey(hovered)];
            _this.yTitleEl.select("text")
              .text(this.strings.title.C + ": " +
              (valueC || valueC===0 ? formatterC(valueC) + " " + unitC : _this.translator("hints/nodata")));

            if (this.model.marker.size.use !== "constant") {
              var formatterS = _this.model.marker.size.getTickFormatter();
              
              var unitS = _this.translator("unit/" + _this.model.marker.size.which);
              //suppress unit strings that found no translation (returns same thing as requested)
              if(unitS === "unit/" + _this.model.marker.size.which) unitS = "";
              
              var valueS = _this.values.size[_this._getKey(hovered)];
              _this.sTitleEl.select("text")
                .text(this.strings.title.S + ": " + formatterS(valueS) + " " + unitS);
            }

            this.yInfoEl.classed("vzb-hidden", true);
            this.sInfoEl.classed("vzb-hidden", true);
          } else {
            this.yTitleEl.select("text")
              .text(this.strings.title.C);
            this.sTitleEl.select("text")
              .text(this.strings.title.S);

            this.yInfoEl.classed("vzb-hidden", false);
            this.sInfoEl.classed("vzb-hidden", false);
          }
        },
        
        _setTooltip: function (d) {
          var _this = this;
          if (d) {
            var tooltipText = this.values.label[this._getKey(d)]?
              this.values.label[this._getKey(d)]
              :d.properties.MN_NAME;
            var offset = 10;
            var mouse = d3.mouse(this.graph.node()).map(function(d) {
              return parseInt(d)
            });
            var x = mouse[0];
            var y = mouse[1];
            var xPos, yPos, xSign = -1,
              ySign = -1,
              xOffset = 0,
              yOffset = 0;

            if(offset) {
              xOffset = offset * .71; // .71 - sin and cos for 315
              yOffset = offset * .71;
            }
            //position tooltip
            this.tooltip.classed("vzb-hidden", false)
              //.attr("style", "left:" + (mouse[0] + 50) + "px;top:" + (mouse[1] + 50) + "px")
              .selectAll("text")
              .text(tooltipText);

            var contentBBox = this.tooltip.select('text')[0][0].getBBox();
            if(x - xOffset - contentBBox.width < 0) {
              xSign = 1;
              x += contentBBox.width + 5; // corrective to the block Radius and text padding
            } else {
              x -= 5; // corrective to the block Radius and text padding
            }
            if(y - yOffset - contentBBox.height < 0) {
              ySign = 1;
              y += contentBBox.height;
            } else {
              y -= 11; // corrective to the block Radius and text padding
            }
            if(offset) {
              xPos = x + xOffset * xSign;
              yPos = y + yOffset * ySign; // 5 and 11 - corrective to the block Radius and text padding
            } else {
              xPos = x + xOffset * xSign; // .71 - sin and cos for 315
              yPos = y + yOffset * ySign; // 5 and 11 - corrective to the block Radius and text padding
            }
            this.tooltip.attr("transform", "translate(" + (xPos ? xPos : mouse[0]) + "," + (yPos ? yPos : mouse[1]) +
              ")")

            this.tooltip.select('rect').attr("width", contentBBox.width + 8)
              .attr("height", contentBBox.height * 1.2)
              .attr("x", -contentBBox.width - 4)
              .attr("y", -contentBBox.height * .85)
              .attr("rx", contentBBox.height * .2)
              .attr("ry", contentBBox.height * .2);


          } else {

            this.tooltip.classed("vzb-hidden", true);
          }
        },
        
        updateLandOpacity: function() {
          var _this = this;
          //if(!duration)duration = 0;

          var OPACITY_HIGHLT = 0.8;
          var OPACITY_HIGHLT_DIM = .3;
          var OPACITY_SELECT = this.model.entities.opacityRegular;
          var OPACITY_REGULAR = this.model.entities.opacityRegular;
          var OPACITY_SELECT_DIM = this.model.entities.opacitySelectDim;
          this.someHighlighted = (this.model.entities.highlight.length > 0);
          this.someSelected = (this.model.entities.select.length > 0);
          this.lands
            .style("opacity", function(d) {

              if(_this.someHighlighted) {
                //highlight or non-highlight
                if(_this.model.entities.isHighlighted(d)) return OPACITY_HIGHLT;
              }

              if(_this.someSelected) {
                //selected or non-selected
                return _this.model.entities.isSelected(d) ? OPACITY_SELECT : OPACITY_SELECT_DIM;
              }

              if(_this.someHighlighted) return OPACITY_HIGHLT_DIM;

              return OPACITY_REGULAR;
            });


          var someSelectedAndOpacityZero = _this.someSelected && _this.model.entities.opacitySelectDim < .01;

          // when pointer events need update...
          if(someSelectedAndOpacityZero != this.someSelectedAndOpacityZero_1) {
            this.lands.style("pointer-events", function(d) {
              return(!someSelectedAndOpacityZero || _this.model.entities.isSelected(d)) ?
                "visible" : "none";
            });
          }

          this.someSelectedAndOpacityZero_1 = _this.someSelected && _this.model.entities.opacitySelectDim < .01;
        }


      });

      //BAR CHART TOOL
      var JOINTCartogramLine = Tool.extend('JOINTCartogramLine', {

        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {
          
          this.name = "joint_cartogramline";
          
          this.template = 
            '<div class="vzb-tool vzb-tool-' + this.name + '">' + 
              '<div class="vzb-tool-stage vzb-tool-stage-left" style="position:absolute; left: 0; width: 65%; height: 100%;">' + 
                '<div class="vzb-tool-viz vzb-tool-viz-cartogram"></div>' + 
              '</div>' + 
              '<div class="vzb-tool-stage vzb-tool-stage-right" style="position:absolute; right: 0; top: 0; width: 40%; height: 100%;">' +
                '<div class="vzb-tool-viz vzb-tool-viz-line"></div>' + 
                '<div class="vzb-tool-timeslider"></div>' + 
              '</div>' + 
              '<div class="vzb-tool-sidebar">' + 
                '<div class="vzb-tool-dialogs"></div>' +
                '<div class="vzb-tool-buttonlist"></div>' + 
              '</div>' +         
              '<div class="vzb-tool-datanotes vzb-hidden"></div>' + 
              '<div class="vzb-tool-treemenu vzb-hidden"></div>' + 
              '<div class="vzb-tool-datawarning vzb-hidden"></div>' + 
              '<div class="vzb-tool-labels vzb-hidden"></div>' + 
            '</div>';
          
          
          //specifying components
          this.components = [{
            component: CartogramComponent,
            placeholder: '.vzb-tool-viz-cartogram',
            model: ["state.time", "state.entities", "state.marker", "language", "ui"] //pass models to component
          }, {
            component: LCComponent,
            placeholder: '.vzb-tool-viz-line',
            model: ["state.time", "state.entities_line", "state.marker_line", "language"]
          }, {
            component: TimeSlider,
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }, {
            component: Dialogs,
            placeholder: '.vzb-tool-dialogs',
            model: ['state', 'ui', 'language']
          }, {
            component: ButtonList,
            placeholder: '.vzb-tool-buttonlist',
            model: ['state', 'ui', 'language']
          }, {
            component: TreeMenu,
            placeholder: '.vzb-tool-treemenu',
            model: ['state.marker', 'language']
          }, {
            component: DataWarning,
            placeholder: '.vzb-tool-datawarning',
            model: ['language']
          }, {
            component: DataNotes,
            placeholder: '.vzb-tool-datanotes',
            model: ['state.marker', 'language']
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        },
        
        readyOnce: function(){
          this.element = d3.select(this.element);
          //this.element.select(".vzb-ct-axis-y-title").classed("vzb-hidden", true);
          //this.element.select(".vzb-ct-axis-y-info").style("visibility", "hidden");
          this.element.select(".vzb-lc-axis-y-title").classed("vzb-hidden", true);
          this.element.select(".vzb-lc-axis-x-title").classed("vzb-hidden", true);
          this.element.select(".vzb-lc-axis-y-info").classed("vzb-hidden", true);
          this.element.select(".vzb-data-warning").classed("vzb-hidden", true);
        
        }

      });

      //DONUT CHART COMPONENT
      var DonutComponent = Component.extend('donut', {

            init: function(config, context) {
              var _this = this;

              this.name = 'donutchart';
              this.template = '<div class="vzb-donutchart"><svg class="vzb-donutchart-svg"></svg></div>';

              //define expected models for this component
              this.model_expects = [{
                name: "time",
                type: "time"
              }, {
                name: "marker",
                type: "model"
              }];

              //bind the function updateTime() to the change of time value in the model
              this.model_binds = {
                "change:time:value": function(evt) {
                  if(!_this._readyOnce) return;
                  //fetch the time from the model and update the text on screen
                  _this.time = _this.model.time.value;
                  _this.yearEl.text(_this.timeFormatter(_this.time));
                  _this.redraw();
                }
              };

              //call the prototype constructor of the component
              this._super(config, context);

              //init variables for d3 pie layout
              this.colorScale = null;
              this.arc = d3.svg.arc();
              this.pie = d3.layout.pie()
                .sort(null)
                .value(function(d) {
                  return d.pop;
                });
            },

            /**
             * DOM is ready and the model is ready -- happens once on the load and never again
             */
            readyOnce: function() {
              var _this = this;

              //link DOM elements to the variables
              this.element = d3.select(this.element)
              this.svgEl = this.element.select("svg").append("g");
              this.yearEl = this.svgEl.append("text").attr("class", "year").style({'font-size':'4em'});
              this.titleEl = this.svgEl.append("text").attr("class", "title").style({'font-size':'2em'});

              //bind the resize() and updateTime() events to container resize
              this.on("resize", function() {
                _this.resize();
                _this.redraw();
              });

              //run a startup sequence
              this.resize();
              this.update();
              this.redraw();
            },

            /**
             * Populate the visuals according to the number of entities
             */
            update: function() {
              this.timeFormatter = d3.time.format("%Y");
              this.colorScale = this.model.marker.color.getScale();

              this.titleEl.text("Population");
              this.keys = this.model.marker.getKeys();

              this.entities = this.svgEl.selectAll('.vzb-dc-entity')
                .data(this.keys);

              //exit selection
              this.entities.exit().remove();

              //enter selection
              this.entities
                .enter().append("g")
                .attr("class", "vzb-dc-entity")
                .each(function() {
                  d3.select(this).append("path");
                  d3.select(this).append("text").attr("class", "label").style({'font-size':'1.2em'});
                });
            },

            /**
             * Updates the visuals
             */
            redraw: function() {
              var _this = this;

              //request the values for the current time from the model
              this.values = this.model.marker.getValues({time: _this.time}, ["geo"]);

              //prepare the data
              var data = this.keys.map(function(d) { return {
                  geo: d.geo,
                  pop: _this.values.axis[d.geo],
                  color: _this.values.color[d.geo],
                  label: _this.values.label[d.geo]
              }});

              data = this.pie(data);

              //set the properties of the donuts and text labels
              this.entities
                .data(data)
                .select("path")
                .attr("d", this.arc)
                .style("fill", function(d) {
                  return _this.colorScale(d.data.color)
                })
                .style("stroke", "white");

              this.entities
                .select("text")
                .style({
                  'text-transform': 'capitalize'
                })
                .attr("transform", function(d) {
                  return "translate(" + _this.arc.centroid(d) + ")";
                })
                .text(function(d) {
                  return d.data.geo;
                });
            },

            /**
             * Executes every time the container or vizabi is resized
             */
            resize: function() {

              var height = parseInt(this.element.style("height"), 10) || 0;
              var width = parseInt(this.element.style("width"), 10) || 0;
              var min = Math.min(height, width);
                
              if(height<=0 || width<=0) return warn("Donut chart resize() abort: vizabi container is too little or has display:none");

              this.svgEl.attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");
              this.titleEl.attr("y", "-0.1em");
              this.yearEl.attr("y", "0.1em");

              this.arc
                .outerRadius(min / 2 * 0.9)
                .innerRadius(min / 2 - min * 0.1)
            }

              

      });

      //BAR CHART TOOL
      //extend the base Tool class and register it in Vizabi tools under a name 'DunutChart'
      var DonutChart = Tool.extend('DonutChart', {

        //Run when the tool is created
        init: function(placeholder, external_model) {

          //Let's give it a name
          this.name = "donutchart";

          //Now we can specify components that should be included in the tool:
          this.components = [{
            //choose which component to use:
            //at this point you can check Vizabi.Component.getCollection() to see which components are available
            component: 'donut',
            //these placeholdes are defined by the Tool prototype class
            placeholder: '.vzb-tool-viz',
            //component should have access to the following models:
            model: ["state.time", "state.marker"]
          }, {
            component: 'timeslider',
            placeholder: '.vzb-tool-timeslider',
            model: ["state.time", "state.entities", "state.marker"]
          }];
            
            this._super(placeholder, external_model);
          },

          //provide the default options
          default_model: {
            state: {
            }
          }
      });

      //CARTOGRAM TOOL
      var Cartogram = Tool.extend('Cartogram', {

          /**
           * Initialized the tool
           * @param {Object} placeholder Placeholder element for the tool
           * @param {Object} external_model Model as given by the external page
           */
          init: function(placeholder, external_model) {

            this.name = 'cartogram';

            //specifying components
            this.components = [{
              component: CartogramComponent,
              placeholder: '.vzb-tool-viz',
              model: ["state.time", "state.entities", "state.marker", "language", "ui"] //pass models to component
            }, {
              component: TimeSlider,
              placeholder: '.vzb-tool-timeslider',
              model: ["state.time", "state.entities", "state.marker"]
            }, {
              component: Labels,
              placeholder: '.vzb-tool-labels',
              model: ["state.entities", "state.marker", "ui"]
            }, {
              component: Dialogs,
              placeholder: '.vzb-tool-dialogs',
              model: ['state', 'ui', 'language']
            }, {
              component: ButtonList,
              placeholder: '.vzb-tool-buttonlist',
              model: ['state', 'ui', 'language']
            }, {
              component: TreeMenu,
              placeholder: '.vzb-tool-treemenu',
              model: ['state.marker', 'language']
            }, {
              component: DataWarning,
              placeholder: '.vzb-tool-datawarning',
              model: ['language']
            }, {
              component: DataNotes,
              placeholder: '.vzb-tool-datanotes',
              model: ['state.marker', 'language']
            }
            ];

            //constructor is the same as any tool
            this._super(placeholder, external_model);
          },

        default_model: {
          state: {
            time: {},
            marker: {
              space: ["entities", "time"],
              color: {
                use: "property",
                which: "population"
              }
            }
          },
          ui: {
            chart: {
              labels: {
                dragging: true
              },
              lockNonSelected: 0
            },
            presentation: true
          }
        }

        });

      var FILE_CACHED$3 = {}; //caches files from this reader
      var FILE_REQUESTED$3 = {}; //caches files from this reader
      // temporal hack for https problem

      var WSReader = Reader.extend({

        ERROR_NETWORK     : 'Connection Problem',
        ERROR_RESPONSE    : 'Bad Response',
        ERROR_ORDERING    : 'Cannot sort response. Column does not exist in result.',
        ERROR_PARAM_PATH  : 'Missing base path for waffle reader',

        /**
         * Initializes the reader.
         * @param {Object} reader_info Information about the reader
         */
        init: function (reader_info) {
          this._name = 'waffle';
          this._data = [];
          this._basepath = reader_info.path;
          this._parsers = reader_info.parsers;

          if (!this._basepath) {
            error$1(this.ERROR_PARAM_PATH);
          }
        },

        /**
         * Reads from source
         * @param {Object} query to be performed
         * @param {String} language language
         * @returns a promise that will be resolved when data is read
         */
        read: function (query, language) {

          var p = new Promise();
          var path = this._basepath;

          path += '?' + this._encodeQuery(query);

          this._data = [];

          //if cached, retrieve and parse
          if (FILE_CACHED$3.hasOwnProperty(path)) {
            this._parse(p, query, FILE_CACHED$3[path]);
            return p;
          }
          //if requested by another hook, wait for the response
          if (FILE_REQUESTED$3.hasOwnProperty(path)) {
            return FILE_REQUESTED$3[path];
          }
          //if not, request and parse
          FILE_REQUESTED$3[path] = p;

          get(
            path,
            [],
            this._readCallbackSuccess.bind(this, p, path, query),
            this._readCallbackError.bind(this, p, path, query),
            true
          );

          return p;
        },

        /**
         * Encode query parameters into readable string
         * @param {Object} query to be performed
         * @returns encoded query params
         * `select=geo,time,population&geo=afr,chn&time=1800,1950:2000,2015&geo.cat=country,region`
         */
        _encodeQuery: function (params) {
          var _params = deepExtend({}, params.where);
          _params.select = params.select;
          _params.gapfilling = params.gapfilling;

          // todo: WS doesn't support value `*` for geo parameter
          // remove this condition when geo will be removed from params.where (when you need all geo props)
          if (_params.geo && _params.geo.length === 1 && _params.geo[0] === '*') {
            delete _params.geo;
          }

          var result = [];

          // create `key=value` pairs for url query string
          Object.keys(_params).map(function (key) {
            var value = QueryEncoder.encodeQuery(_params[key]);
            if (value) {
              result.push(key + '=' + value);
            }
          });

          return result.join('&');
        },

        /**
         * Gets the data
         * @returns all data
         */
        getData: function () {
          return this._data;
        },

        _readCallbackSuccess: function (p, path, query, resp) {

          if (!resp) {
            error$1("Empty json: " + path);
            p.reject({
              'message' : this.ERROR_RESPONSE,
              'data': path
            });
            return;
          }
          
          if(path.indexOf("?geo.cat=world_4region&select=geo,geo.name,shape_lores_svg")>-1) {
            warn("WAFFLE READER: APPLYING STUB FUNCTIONALITY TO GET DATA world_4region, WHICH IS NOT YET IN WS");
            resp.rows = [[
                "africa",
                "Africa",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='africa' d='M322.7,114.7l-1-1.8l-6.5,2.3l-16-4.8l-2.3,1.7l-1.8,4.5l-16.9-8.6l-0.2-0.6l-0.3-5.5l-2-2.8l-29,4.4l-0.2-0.4 l-1.7,0.2l-0.1,1.1l-6.7,7l-0.5,1.9l-0.6,0.7l-0.3,3.3l-15.3,23.7l0.6,13.2l-1.4,3l1.1,7.6l12.1,17.9l6,2.8l7.1-1.9l4.5,0.8 l13.7-3.3l3.9,4.5h3.5l1.6,1.4l1.8,3.6l-1.1,10.7l9.2,27.4l-4,14.6l8.5,30.7l1.1,1.1v0.7h0.5l3.5,12.5l2,1.7l11.9-0.6l15-18.2v-3.9 l5.1-4.5l1.1-4.2l-1.1-5.9l10.5-12.2l0.6-0.3l1.6-3.7l-3.4-24l25-43.3l-13.1,1.1l-1.8-1.1l-24.7-48.6l0.9-0.4l0.6-1L322.7,114.7  M360.1,233.2l2.3,1.7l-8.6,30.5l-4.3-0.6l-2-7.6l2.8-14.6l6.4-4.4l2.8-4.9L360.1,233.2z'/></svg>"
              ],[
                "americas",
                "Americas",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='americas' d='M134.8,152l-11.4,1.8l-3.1-1.7l5.3-1.3l-0.7-1.1l-3.3-1.4h-0.1l-8.1-0.9l-0.3-0.3l-0.3-1.5l-6.2-3.6l-3.4,0.8 l-1.6,1.3l-1.2-0.5l-0.7-1.7l3.8-1.6l9.1,0.7l9.5,5.3l0,0l3.3,1.8l1.7-0.5l6.6,2.8L134.8,152 M183.7,25.4l-0.5-1.5l-2.6-2.2 l-2.1-0.6l-2.9-2.2l-18.2-2.2l-5.1,3.7l2,4.3l-6,2.2l1-1.7l-4.6-1.9l-0.5-1.7l-1.1-1.2l-2.9,0.5l-2.1,4.2l-5.8,2.5l-15.5-2.2 l10.5-1.7l-1.3-4l-11.6-0.4l-3.2-1.5L96,20.7h5.8l4,1.9l-1.7,1l0.8,1l7.2,2.3l-78.9-5.3l-10,3.6l-0.4,4.4L18,31.1l1,1.8l1.7,1.2 l-5.5,4.5l-0.4,5.6L13.8,46l1.8,1.8l-4.4,6.2L22,43.7l1.8-0.5l1.3-1.2l13.4,4l4,4.2l-1.3,14l1.6,2.6l-3.3,1.3L39.4,70l2.7,2.6 L28.6,96.9l1.6,11.2l4.8,5.6l-0.2,3.4l2.5,6.1l-0.5,5l6.6,11.9L38,121.5l1.7-4l3.4,6.1l0.3,2.2l7.1,13.1l1.1,9.2l11.1,8.7l1.6,0.3 l1.3,0.9l5.5,1.2l3.4-0.9l5.5,4.2l0.3,0.5l0.8,0.3l2.1,1.9l5.5,0.5l0.2,0.6l0.8,0.3l4.8,8.9l2.3,1.5l0.2,0.5l7.1,3.4l1.6-1.7 l-5.1-2.2l-1.3-15.6l-6.3-2.2l-3.7,0.3v-4.6l3.7-8.9l-5.2-0.9l-0.5,0.3L83,151l-6.3,2.2l-4-2.8l-3.2-8.9l3.2-11.8l0.5-0.3l0.2-1.2 l2.6-3.1l8.5-3.6l6.3,1.8l4.5-3.1l9.2,1.1l2.5,3.1l1.5,7.8l1.3,1.8l2.1-4.5l-1.1-5l1.6-7l13.7-12.3l0.2-3.7l0.8-1.7l0.9-0.2l0.7,0.5 l0.6-1.9l15-8.8l2.2-3.9l11.9-5.1l-2.2,3.6l11.4-3.8l-5.2-1.7l-1.8-2.8l1.6-4.2l-0.8-0.9h-4.2l0.8-1.5l19.5-3.2l1.6,2.8l-4.5,4.2 l6,1.7l5.3-2.2l-6.3-7.6l4.5-6.1l-1.1-0.6l-0.2-0.5h-3.2l-3.7-13.4l-7.7,3.1l-1.8-1.9l0.2-3.9l-2.3-2.5l-3.4-1.5l-6.6,1.9l-2.1,4.2 l-1.1,0.6l-1.3,2.2l-0.3,3.4l-10,9.5l-0.8,2.8l-1.8,1.9l-2.1,0.3l-1.8-2.5l1.1-4.8l-11.9-6.1l-3.1-5.1l15-12l1.3,0.3l5.1-1.2 l1.1-1.2l0.4-1.2l3.4-0.3l-1.7,4.8L147,34l4.6,0.7l-2.2-2.9l-2.1-1.2l8.2-2.8l0.3-0.6l2-1.7l0.7,0.1l8.1-4.2l7.4,5.3l0.2,1.5l-6,1.5 l-1.8,2.2l3.7,5.3l3.4,1.2l2.3-2.2l2.9-1.2L179,33l-0.2-1.9l7.7-1.7L183.7,25.4 M119.7,74.5l0.8,3.1l1.7,1.8l3.3-0.2l5.4,4.7 l2.7,0.2l-0.5,1.7l-4.7-0.4l0.2-1.2l-2.6-0.9l-2,0.6l-2.6,3.4l3.1,1.7l-3.2,2.3l-2.6-1.2l0.1-9.3l-9.6,9.9L108,88l4.5-7l4.3-2 l-5.1-2.1l-4.8,0.5l0.2-1.7l1.3-1.2l8.7-2.2L119.7,74.5 M205.9,223.1l-1.3,3.1H204l-7.1,11.2l-1.9,18.2l-3.1,6.1h-0.5v0.6l-0.8,0.3 l-1.1,1.2l-2.7-0.3l-9.4,6.7l-7.7,21.6l-3.9,3.3l-5.1-1.1l2.1,3.3l0.5,5.3l-7.9,3.3l-1.4,1.5l-0.5,3.6l-1.1,0.6l-1.1-0.3l-1.8,0.9 l1.8,6.1l-1.8,5.6l3.4,6.1l-2,5.9l0.5,3.1l11.1,8.2l-0.2,0.5l-9.3-0.6l-4.3-5.1l-4.7-1.7l-8.6-17.1l0.5-1.7l-6-12.3l-4.5-56.7 l-12.4-10.2l-4.2-8.1l-0.8-0.6l-9.8-21.5l1.1-2.2l-0.3-2.6l-0.5-0.8l7.9-15.3l0.3-5.6l-1-2.8l1-3.9l1.8-0.3l9.7-8.2l2.1,0.3l0.8,5.1 l2.7-5.1l1.3-0.3l4.2,2.8h0.9l0.2,0.6l14.8,3.9l1.6,1.4l0.3,0.6l7.9,6.7l7.7,0.9l4.3,4l2,6.3l-1,4.6l4.4,1.4l1.1,2.2l5.2-1.1 l2.1,1.1l2.6,4l2.9-0.9l9,1.9l8.6,5.8L205.9,223.1'/></svg>"
              ],[
                "asia",
                "Asia",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='asia' d='M322.9,118.9l22.8,42.5l13.5-5.9l16.8-19l-7.3-6.5l-0.7-3.4h-0.1l-5.7,5.2l-0.9,0.1l-3.2-4.4l-0.4-0.2l-0.7,1.7 l-1.2-0.4l-4.1-11.4l0.2-0.5l1.9-1.2l5.1,6.8l6.2,2.7l0.8-0.2l1.1-1.1l1.6,0.4l2.9,2.6l0.4,0.8l16.4,0.8l6.9,6.5l0.4,0.1l1.4-0.3 l0.3,0.1l-1.7,2.5l2.9,2.8h0.7l3.3-3.3l0.5,0.3l9.2,32.1l4,3.7l1.3-1.3h0.2l1.7,1.3l1.4,6.6l1.6,0.9l1.7-2.9l-2.3-7.3l-0.1,0.3v-0.2 l-1.7,0.6l-1.3-1.1l1.2-14.3l14.3-17.6l5.9-1.7l0.3,0.1l3.1,4.5l0.8,0.2l0.9,1.5l0.8,0.3l4.7,10.3l0.2,0.1l2-0.6l5.4,10.1l-0.3,10.5 l2.8,3.7l0,0l4.2,10.8l1.8,1.7l-1.1,2.4l-0.8-0.6l-1.9-4l-1.7-1.4l-0.3-0.9l-5.5-3.5l-2.4-0.3l-0.2,1.2l19.8,28.5l2.6-3.6l-5.7-11.2 l0.9-4l0.7-0.2l0.2-2.3l-9.3-18.6l-0.3-8.9l1.4-1.5l6.7,7.8l1.4,0.3l1.1-0.6l0.1,0.1l-0.2,3.4l0.6,0.5l0.5,0.2l7.4-7.9l-2-10.4 l-6.9-9.5l4.9-6l0.8,0.2l0.8,0.5l1.7,3.9l2.9-4.7l10.1-3.6l5.1-8.1l1.6-9.9l-2.5-2l1.1-1.7l-7.5-11.5l3.5-4.7l-6.1-0.9l-3.5-3.7 l4.1-4.3l0.8-0.1l1.4,0.9l0.6,2.9l2.8-1.3l3.9,1.4l0.9,3.2l2.3,0.5l5,9h0.4l2.3-2.4h0.3l1-1.5l-1.7-3.8l-5.8-5.9l2.1-4v-3.6l2.6-2.4 l0.5,0.1l0.2-0.1l-3.5-15.2l-0.2,0.1v-0.1l-9.3,1.2l-7.3-9.3L464,58.8l-0.8,1.9L441.2,60l-1.5-1.8l-0.2,0.1l0,0l-7.3,4.1l-7.5-3 l-0.5,0.3l-1.8-0.8l-0.9-1.2l-0.3,0.1l-0.1-0.1l-5.7-0.4l-0.3-0.2l0,0l0,0l-1,0.5l-1.5,4.5l-4.2,2.7l-16.8-4.4L377.5,50l0,0l-0.2,1 l1.8,6.7l-13.3,3l-9.2-3.8l-1.1,3.1l-6.7-1.6l-0.1,0.1h-0.2l-4.4,6.8l3.8,3.8l0.6,2.7l0,0l0,0L352,71l2.6,2.2V74l-2.3,1.9l-0.8,1.6 l1.6,3.9l0.9,0.3l1,1.1l2.6,0.9l1.7,1.7l-0.2,1.1l-1.5,2.8l2.1,3.7v4.5l-1.3,1.4l-3.8-0.9l-4.7-5.1v-0.6l-1.4-1.4l-3.9,2.1l-2.4-2.1 l-1.6,0.9l-0.3,5.1l-15.2,4.7l-1.7,9.8l-2.5,1.7L322.9,118.9 M531.1,99.3l-1,2l-4,1.7l-2.4,3l-3.3-2.5l-6.4,0.2l-0.2-0.7l8.9-4.2 l3.7-4.9l-0.6-3.3l-3.2-5.1l-0.7-0.4v-5.1l1.4-2.6l1.7,0.3l0.6,0.7h0.8l1.1,0.8l1.3,0.3l0.6,1.9l-1.7,2l-2.6-1.2L531.1,99.3  M500.5,130.3l1.9-0.9l-0.8,6.3l-1.6-0.3L500.5,130.3 M515.9,180.5l-1.7,0.4l-2.2-3.3l-3.6-2.2l4.3-2.5l0.9-3.1l-0.3-4.1l-4.6-2.1 l-2,0.5l-5.1,8.5l-2.4,0.3l-0.2-3.4l0.8-0.7l4.2-9.3l-1.8-3.7l1.4-9.3l2.4,1.8l1.6,3.6l-0.5,4.8l8,6.4l0.1-0.1l3.1,11.2L515.9,180.5 L515.9,180.5L515.9,180.5 M497.7,179.5l2.6,0.9l1.1,1.9l-1.8,5.1l0.8,7l-6,10.9l-9.2-1.7l-2.9-10.9L497.7,179.5L497.7,179.5  M509,194.8l-1.8,0.1L509,194.8 M515,193.9l-1.7,2.2l-2.4-0.2l-1.9-1.1l-3.3,1.3l-0.3,1.9l1.2,1.4l2.1-0.3l0.9-0.7l1.1,0.1l0.3,1.2 l-1.9,2.6l0.7,5.6l-2.3-2l-1-2l-1.5,1l0.9,5.2l-3.1-0.4l0.2-2.8l-1.4-2.5l2.9-10.5l3.2-1.6l3.8,1.2l3.4-1.1L515,193.9 M530.7,198.1 l2.5,0.5l0.4,0.4l2,5.3l2.1-2.2l4.2-1.7l14.5,11.5l2.4,0.5l4-2.6l-1.2,4.7l-3.5,1.4l-0.5,1.4l0.1,1.3l4.4,6.5l-4.4-1.5l-5.2-7.5 l-5.6,4.4l-5.6-2l-1.2-1.5l1.3-1.5l-1.9-2.4l-0.3-0.8l-8.5-5l-0.9-4.7l-3.4-3.1l2.4-1.4H530.7 M476.6,212.1l19.1,5l3.1-0.8l4.4,1.4 l3.3-0.9l12.4,2.1l-0.1,0.6l-8.2,4v-1.9l-35.4-5.6l-1.5-1.8l2.5-1.9H476.6 M569.4,280.1l-19,14.6l-0.7-1.1l2.2-4.6l5.1-3l7.4-9.7 l0.9-4.3l4.8,5.1L569.4,280.1 M554.3,267.3l-11.1,18.2l-5.7,3.1l-4.8,7.7l-2.5,0.5l-0.6-1.9l0.5-3.4l2.8-2.9l-6.6-0.8l-1.6-1.4 l-1.7-8.4l-0.9-0.9l-3.1,1.1l-5.2-3.9l-32.3,7.3l-2.3-1.9l2.3-4.5l0.6-21.9l1.8-2.5l13.9-6.4l4.3-4.8l0.3-0.9l10-9.2l4.2,1.9l5.5-7 l4.2-1.4l4.9,2l-1.1,5l2.8,4.8l4.5,2.8l3.2-4.5l2.5-11.7l4.6,10.8v7.6l7.7,18.5L554.3,267.3L554.3,267.3L554.3,267.3L554.3,267.3 L554.3,267.3L554.3,267.3'/></svg>"
              ],[
                "europe",
                "Europe",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='europe' d='M556.7,26.9l-35.5-7.3l-3.5,1.4l-49.9-5.2l-2.7,2l-45.8-4.1l-1.3-1.9l-15.3-2.2l-0.2,0.1h-0.1l-0.2,0.2l-6,0.6 l-0.5,0.5L372.4,17l-1.7,1.7l-5.8-3.1h-1.7l-1.5,3.7l1.8,2.5l-0.4,0.2l-10.1-1.5l-6.8,1.9l-5.3-0.6l-7.2,2.6l-4.2-1h-0.1l-3.1,3.2 l-0.9,0.2l-2.6,2.2l-2.3,0.8l-1.6,2h-1.7l-5.1-5.1l-1-0.2l-0.1-0.5l1.3-0.9l8.4,1.6l0.5-0.1l2.4-1.8l-0.8-0.9l-20.2-5.5l-16.9,3.4 L268,37l0.8,6.1l3.2,1.7l4-1l1.5,0.9l2.6,5.5h0.8l0.7,1.2l0.8,0.2l7.9-9.7l-2.9-5.4l8.5-8.9h0.5l1.3,1.7l-2.7,6.6l0.8,2.8l11.9,2.4 l-4,1.8l-3.5-0.3l-1.5,1.2l1,1.6l-0.1,2.2l-0.9-0.6H297l-1.8,1.2l-0.5,3.9l-2.3,2.2h-4.3l-4.2,1.9l-6.8-0.7l-0.6-0.4l2.5-1.7 l0.5-1.2l-0.9-1.7l-0.2-0.1l-2.3,0.5l-0.2-0.1l-0.2-3.4l-0.4-0.1l-2.6,3.9l1.3,3.7l-1.4,1.7L269,57l-18.9,13.1l0.1,1l1.7,1.6 l0.8,0.3l1.3,2.2l0.3,3.6l-3.1,4.5l-9.7-0.9l-1.3,1.5L239,97.9l0.4,1.1l5.1,3.1l0.2,0.8l1.6-0.2l0.1-0.2h0.1v-0.1l7.9-4.5l10-14.3 l10-2.8l1.2,0.5l11,11.5l0.2,2.3l-2,1.8l-1.9-0.4l-1.8,0.5l3.8,3.9l1.1-0.7l3.7-5.6l0.2-0.5l-0.9-1.9l0.2-0.4l2.3,0.3l0.8-1 l-1.7-0.9l-8.7-7.6l-0.5-4.5l1.4,0.2l10.4,8l3.4,9l1,0.5l0.5,0.6v1.5l4.5,6.1v0.4l0.7,1.1l3.7,1.3l1.4-1.6l-3.8-2.3l-0.1-1.7 l2.2-2.6l-6.3-6.3l5.6-2.2L306,90l5.8,8l4.2-0.6l2.7,0.9l1,4.7l0.7-0.1l1.8-2l-1.3-1.7l0.2-0.9h4.3l0.3,2.7l15.2-4.7l0.4-5.1 l1.5-0.9l2.5,2l3.9-2.1l1.4,1.5l0.3-3.9l-3.1-5.3l-1.3-8.6l2.9-2.5l-0.6-2.7l-3.8-3.8l4.5-6.9l6.8,1.6l1.1-3.1l9.2,3.8l13.3-3.1 l-1.8-6.7l0.2-1l8.7,7.4l22.2,7.4l4.3-2.7l1.5-4.5l1-0.5l0.2,0.2l6,0.4l1,1.2l1.7,0.8l0.5-0.3l7.5,2.9l7.5-4.2l1.5,1.8l22.1,0.8 l0.7-1.8l23.5-1.4l7,9.2l9.6-1.2l3.4,15.2l1,1.1l-0.2,0.2l1.7,1.7l0.5,0.1l1.8-2.2l1.6-5.3L508,56.7l-2.9-2.2l-5.5,0.3l-2.6-2.5 l1.8-7.8l0.5-0.3l0.2-0.9l3.4-1.7l14.2,0.6l1.3-4.8l1.6-1.2l0.4-0.1l4.3,1.2l0.1-0.1l0.2,0.1l3.1-2.5l1.7,0.9l-1,12l6.9,15.9l3.1-3 l0.1-0.3l2.3,1.1l0.8-2.2l-1.1-8.7l-4.8-5.8l0.1-2.6l0.8-1.5l4.5-2.2l2.2,0.2l4-3.7l2.1-0.3l1.1-1.7l-5.2-2.5l-0.5-1.7l2.9-1.7 l8.2,2.2l0.9-0.2l0.8-1.2L556.7,26.9 M331,87l-11.6-3.1l-8.9,2.9l-0.2-0.1l-0.5-1.9l2.9-7l2.9-2.5h1.7l2.1,1.1l2.3-1.7l1.8-3.4 l1.8-0.6l2.1,0.6l-0.8,3.9l7.7,7.3L331,87 M252.8,18.2l-5.8,5.6l-3.7,1.1l-1.1,4.3l-2.2,1.7l-0.2,1.2l0.9,1.7l7.8,1.2l-2.4,2.9 l-4.6,1.7l-5.9-2.9l2-1.8l1.9-0.8l-2.5-2.1l-11.4,1.7l-4.7,3.1l-8,1.7L203,49l-3.4,0.3l-3.7-2.8l-1.3-10.6l5.2-4.5l1.1-2l-1.9-3.3 l-0.5-0.3v-0.6l-0.5-0.3v-0.6l-0.6-0.3l-1.1-1.4l-3.1-1.4h-5.5l-4-1.7l71.2-3.4L252.8,18.2 M258.9,60.7l0.7,1.2l-10.5,1.5l3.4-1.5 l-0.1-1.5l-2.7-0.9l4.2-4.9l-2.7-2.7l-5.9,7.4l-4.4,0.8l1.1-2.7l-0.2-2.7l8.5-4.8l0.3-3.8l1-1.3l1.3,0.4l0.2,1.1l1.3,0.3l-0.8,3.2 l3.3,2.4l1.7,5.1l2.6,0.9L258.9,60.7'/></svg>"
            ]];
          }

            
          if(path.indexOf("?geo.cat=geographic_regions&select=geo,geo.name,shape_lores_svg")>-1) {
            warn("WAFFLE READER: APPLYING STUB FUNCTIONALITY TO GET DATA geographic_regions, WHICH IS NOT YET IN WS");
            resp.rows = [[
                "america",
                "America",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='america' d='M189.96,40.495c1.3,0.72,2.56,1.51,3.82,2.32l1.04,0.23c0.57,0.13,1.7,0.39,2.27,0.52c0.55,0.18,1.64,0.55,2.18,0.73c-0.13,1.2-0.26,2.41-0.36,3.61c-4.66,0.37-9.34,0.55-14,0.8c0.06,1.15,0.11,2.3,0.16,3.45c0.58-0.04,1.74-0.11,2.32-0.14c1.6-0.47,2.8,0.77,3.51,2.04l0.63,0.8c0.88,0.68,1.23,1.54,1.06,2.59l-0.11,1.04c1.27-0.13,1.89,0.44,1.87,1.71c2.21,0.13,4.42,0.26,6.65,0.27c1.38-0.07,2.75,0.11,4.1,0.43c1.94,0.35,3.91,0.45,5.88,0.44c0.57,0.09,1.72,0.27,2.29,0.35l1.24,0.46c0.12-1.63,0.31-3.27,0.3-4.91c-0.29-1.27,0.12-2.87,1.7-2.85c1.17-0.31,2.33-0.63,3.5-0.96c-0.16-0.53-0.46-1.58-0.61-2.1c-0.42-1.05-0.16-1.91,0.76-2.6c1.85-1.74,3.41-3.76,5.09-5.66c2.13-2.35,5.27-3.21,8.07-4.51l0.62-0.31c1.1-0.64,2.26-1.21,3.49-1.58c1.25-0.46,2.52-0.97,3.57-1.83c0.51-0.9,1.27-1.43,2.28-1.59c2.35-0.65,4.6-1.6,6.83-2.58l-0.65-1.11c-0.6-0.83-0.87-1.75-0.81-2.76c-2.47-0.83-4.94-1.79-7.54-2.09c-1.18-0.02-2.34-0.27-3.43-0.68c-0.87-0.11-2.59-0.34-3.45-0.46c-1.18,0.08-2.35-0.12-3.47-0.479c-2.02-0.15-6.06-0.46-8.09-0.62c-1.35,0.04-4.07,0.11-5.43,0.14c-0.54,0.18-1.64,0.54-2.18,0.71c-0.62,0.89-1.44,1.311-2.48,1.271l-0.72,0.03c-4.64,0.31-9.27,0.63-13.89,1.02l-0.78,0.38c-2.28,1.27-4.54,2.55-6.82,3.82l-0.7,0.42c-0.93,0.689-1.95,1.24-3.04,1.6l-0.93,0.521c-0.83,0.83-1.72,1.02-2.7,0.56C184.92,35.785,186.99,38.645,189.96,40.495z M203.85,33.395l-1.02,0.57c2.36,1.12-1.66,3.47-1.3,0.83c-0.15-1.15-0.3-2.311-0.43-3.46C201.77,28.755,206.22,32.025,203.85,33.395z M204.82,54.435c-2.256-0.119-4.503-0.26-6.75-0.442c-0.075-1.56,0.615-2.036,2.07-1.438C201.7,53.195,203.26,53.815,204.82,54.435 M162.94,36.825c0.44,0.12,1.3,0.36,1.74,0.48c1.02-0.1,1.92,0.2,2.7,0.88c1.21,0.82,2.51,1.5,3.83,2.14c1.16,0.36,1.59,1.11,1.31,2.23c0.15-0.36,0.43-1.09,0.58-1.46c0.31-1.14,1.05-1.58,2.22-1.31c1.21,0.15,2.43,0.26,3.66,0.33c0.56,0.1,1.69,0.29,2.25,0.39c0.49,0.17,1.46,0.5,1.95,0.66c0.19-1.6,0.38-3.21,0.57-4.81l-0.66-0.3c-2.57-1.13-5.11-2.33-7.64-3.53l0.2,1.09c0.74,1.38-1.02,2.32-2.03,1.35c-1.1-0.49-2.23-0.92-3.38-1.28c-1.12-0.23-2.15-0.77-2.95-1.6c-0.99-0.82-1.99-1.62-3-2.4c-1.93,0.89-3.85,1.8-5.74,2.74c0.42,0.4,1.28,1.2,1.71,1.6C161.26,34.855,162.13,35.815,162.94,36.825 M146.08,43.795c0.74-1.05,1.6-2.01,2.57-2.86c0.47-0.47,1.42-1.42,1.89-1.89c-3.31-0.11-6.59-0.23-9.88-0.37c0.93,2.65,1.99,5.26,3.18,7.8C144.61,45.605,145.35,44.705,146.08,43.795 M126.03,51.835c2.62-0.65,5.14-1.52,7.75-2.24c-0.52,1.48-1.03,2.97-1.56,4.45c-0.15,0.4-0.43,1.2-0.57,1.6c1.2,0,2.12,1.06,2.04,2.24c0.42,0.14,1.27,0.42,1.7,0.56c2.78,0.89,5.5,1.98,8.13,3.25c0.76-0.15,2.27-0.46,3.03-0.62c0.85-0.58,1.77-0.78,2.78-0.58c3.31,0.26,6.48-1.06,9.3-2.65c0.95-0.74,1.82-0.69,2.61,0.13c0.27-1.58,0.55-3.16,0.84-4.74c-2.61-1.72-5.18-3.49-7.79-5.21l-0.6-0.39c-1.13-0.69-2.22-1.45-3.19-2.35c-0.19,0.48-0.57,1.45-0.76,1.93c-0.33,1.19-1.07,1.63-2.23,1.33l0.36,1.28c0.87,1.17-0.63,2.79-1.7,1.55c-2.62-1.55-5.39-2.82-7.95-4.47c-2.48-1.64-4.97-3.27-7.46-4.89c-2.52,0.64-4.88,1.82-6.94,3.4c-0.82,0.75-1.98,1.45-3.11,0.91c-0.15,1.61-0.31,3.23-0.47,4.84C122.14,51.535,124.08,52.215,126.03,51.835 M176.44,48.955l-0.4-1.49c-3.84,0.58-7.59,1.65-11.2,3.1c0.39,0.4,1.18,1.19,1.58,1.59c1.19,1.11,2.27,2.34,3.31,3.6c1.17,2.14,3.56,2.08,5.56,1.21c0.73-1.21,1.51-2.4,2.29-3.58c0.25-0.73,0.75-2.2,1-2.94C177.36,50.695,176.65,50.195,176.44,48.955 M320.03,350.335c-0.43-1.08-0.7-2.22-0.76-3.37c-0.96-1.18-2.23-2.02-3.43-2.9c-2.29-1.58-4.56-3.18-6.87-4.71c-6.17-1.83-12.18-4.11-18.19-6.42c-1.25-0.35-2.65-0.8-3.27-2.05c-1.73-2.42-2.9-5.17-3.72-8.02c-0.54-1.74-0.94-3.49-1.21-5.25l-0.97,0.03c-1.07,0.09-1.87-0.35-2.4-1.34c-0.73-0.86-1.54-1.63-2.44-2.3c-1.07-0.54-1.41-1.33-1.01-2.36c-2.81-0.28-5.71-0.37-8.45-0.97c-1.79-1.51-3.28-3.33-4.68-5.18l-0.42-0.53c-3.22-4.75-8.95-8.5-14.85-7.28c-1.59,0.11-3.24,0.24-4.77-0.29c-3.42-1.09-6.75-2.48-10.11-3.67c-0.86,0.83-1.69,1.68-2.5,2.55c-0.83,0.98-1.75,1.87-2.72,2.7c-0.92,1.06-1.58,2.3-2.16,3.57c-0.15,1.4-1.72,1.69-2.63,0.76c-0.61-0.01-1.82-0.05-2.43-0.07c-2.08,0.09-4.21-0.19-6.23-0.36l-1.3-0.14c-1.27-0.02-1.85-0.64-1.74-1.87c0.11-4.16,0.39-8.36-0.12-12.5c0.09-1.47-0.99-2.41-2.32-2.7c-1.12-0.2-2.19-0.59-3.16-1.18c-0.72-0.35-2.16-1.04-2.89-1.39c-0.38-0.2-1.15-0.59-1.53-0.78c0.19-2.24,0.58-6.7,0.77-8.94c0.17-1.35,0.45-2.68,0.71-4.01c-0.73-1.02-1.3-2.16-1.69-3.35c-1.41-0.13-2.82-0.25-4.22-0.37c-0.07,1.19-1.18,2.11-2.36,1.93c-0.49,1.16-0.96,2.32-1.44,3.49c-0.45,1.52-1.59,2.7-2.99,3.41l-1.12,0.7c-1.02,0.89-2.69,1.36-3.71,0.2l-0.8-0.63c-2.7-1.79-4.49-4.5-5.88-7.35l-0.46-0.82c-0.61-0.88-0.7-1.81-0.29-2.8c0.95-4.01,1.78-8.05,2.24-12.15c0.18-1.43,0.56-4.28,0.74-5.71c0.51-0.12,1.53-0.38,2.05-0.5c4.34-0.98,8.8-0.27,13.19,0.1c0.4-0.88,0.98-1.61,1.74-2.2l0.86-0.78c1.29-1.25,2.9-1.47,4.81-0.66c7.01,0.89,5.82,9.64,10.35,13.31c0.98,0.58,1.98,1.14,2.94,1.78c0.85-1.45,1.68-2.91,2.54-4.35c1.59,0.13,3.18,0.29,4.78,0.45c0.05-0.72,0.15-2.16,0.2-2.88c-0.68-0.6-1.31-1.25-1.89-1.93c-0.83,0.05-2.48,0.14-3.3,0.18c-1.15,0.15-1.85-0.36-2.12-1.52c-0.48-1.21-1.02-2.38-1.64-3.51c-0.69-0.84-0.86-1.76-0.52-2.75c0.45-1.72,0.81-3.47,1.39-5.14c1.92-3.29,5.11-5.51,7.9-8c3.73-2.83,5-7.82,4.94-12.3c-0.17-1.02,0.05-1.95,0.65-2.79l0.3-0.99c0.05-1.04,0.45-1.92,1.21-2.63l0.61-0.85c0.94-1.39,1.91-3.09,3.76-3.31c1.39-0.36,2.78-0.7,4.18-1.04c-0.01-1.86,0.26-3.64,0.82-5.35c1.01-1.68,1.96-3.64,3.86-4.47c3.43-1.92,5.49,2.56,7.97,4.13c0.34-0.5,1.02-1.48,1.37-1.97c0.63-1.18,1.73-1.96,2.9-2.55c3.53-1.93,5.72-5.48,8.29-8.44c-1.73-0.08-3.47-0.14-5.2-0.13l-0.69,0.42c-1.16,0.68-3.49,2.03-4.65,2.7c-0.18-2.73-0.37-5.46-0.56-8.19c-0.16-1.88-0.4-3.76-0.64-5.63c3.98-1.15,9.02,0.07,12.39-2.86c0.65-0.67,2.51-2.1,2.9-0.45c-0.49,1.17-1.38,1.52-2.67,1.07c-0.13,2.38-0.34,4.76-0.33,7.14c0.02,1.15,0.03,2.32-0.15,3.46c3.36,0.98,6.79,2.07,10.34,1.83c1.45-0.11,2.9-0.21,4.36-0.17c-0.22-1.62-0.53-3.23-0.93-4.81c-0.55-0.93-0.62-1.87-0.2-2.83l0.42-1.16c-0.98,0.56-1.86,0.39-2.64-0.5c-0.99-0.79-1.99-1.55-3.01-2.29c-0.17-1.03-0.34-2.06-0.5-3.09c-0.39-1.14,0.12-2.29,0.81-3.19c0.26-0.41,0.77-1.23,1.02-1.65c-1.23,0.19-1.89-0.34-1.99-1.58c-0.26-1.61-0.52-3.22-0.75-4.83c-2.32-1.69-4.63-3.4-6.9-5.15l-0.61-0.49c-3.13-2.6-3.67-6.84-5.2-10.39l-0.33-0.76c-0.79-1.49-1.58-2.99-2.33-4.5l-0.5-0.78c-0.93-0.52-1.46-1.3-1.59-2.33c-0.16-0.71-0.49-2.13-0.66-2.84c-1.89,1.68-3.82,3.34-5.9,4.78c-1.01,0.73-2.21,1.13-3.38,1.52c-1.21,0.35-1.87-0.14-1.99-1.5l-0.29-1.46c-0.38-1.91-0.65-3.83-0.82-5.76c-0.37-0.28-1.13-0.83-1.51-1.11c-1.97-1.44-3.84-2.99-5.77-4.47c-2.81-1.52-6.83-4.98-9.96-2.68c-0.82,0.99-1.68,1.98-2.81,2.63l-0.48,0.32c1.23,0.07,1.76,0.73,1.62,1.98c-0.02,0.59-0.05,1.77-0.06,2.36c0.13,1.22-0.43,2.32-1,3.34l-0.35,1.23c-0.16,1.45-0.48,4.34-0.64,5.78l1,1c1.06,0.86,1.74,2.08,2.08,3.4c0.2,0.55,0.61,1.65,0.82,2.19c1.07,0.76,1,2.28-0.25,2.81c-0.13,0.52-0.39,1.55-0.51,2.06c-0.09,1.05-0.61,1.82-1.56,2.3c-0.52,0.46-1.55,1.38-2.07,1.84c-0.63,0.99-1.46,1.32-2.5,0.98l0.86,0.89c0.84,0.72,1.08,1.61,0.72,2.68c-0.09,0.51-0.28,1.52-0.37,2.03c-0.33,1.91-0.66,3.83-0.99,5.75c-2.6-2.17-4.47-5.01-5.64-8.17c-0.67-1.56-1.46-3.12-2.87-4.13c-1.31-1.02-2.56-2.12-3.75-3.27c-0.49-0.36-1.47-1.1-1.96-1.46c-0.97-0.34-1.67-0.96-2.09-1.88l-0.54-0.47c-2.16-1.24-4.37-2.39-6.62-3.44c-0.56-0.03-1.68-0.09-2.24-0.11c-1.42,0.43-2.59-0.58-2.73-1.97c-0.45-1.25-1.33-2.26-2.19-3.23c-0.88-0.76-1.5-1.84-1.29-3.03c-0.02-1.82-0.05-5.44-0.07-7.25c-0.15-1.06,0.23-1.89,1.14-2.49l0.56-0.51c2.08-2.03,4.12-4.09,6.26-6.06l0.59-0.53c1.88-1.6,3.89-3.03,5.88-4.48c1.43,1.48,2.86,2.97,4.31,4.44l0.7,0.71c1.06-0.53,2.21-0.87,3.38-1.01l1.1-0.19c1.52-0.33,3.08-0.32,4.62-0.14c0.74,0.05,2.22,0.15,2.95,0.2l-0.47-0.85c-0.49-0.82-0.88-1.68-1.18-2.58c-0.52-1.42-1.36-2.96-2.95-3.34c-1-0.16-1.8-0.65-2.39-1.47c-0.5-0.38-1.5-1.13-2-1.5c-1.4-0.39-2.09-2.31-0.38-2.85l0.61-0.39c2.4-1.55,4.78-3.12,7.19-4.66c-0.09-4.37,0.03-8.75,0.43-13.1c2.47-0.39,4.87-0.71,7.4-0.95c0.1,0.38,0.31,1.15,0.41,1.53c1.18,3.42,0.01,6.92-1.29,10.1c1.73,0.26,3.47,0.5,5.22,0.74c0.88-1.42,1.76-2.84,2.67-4.25l0.23,0.87c0.51,1.48,1.12,2.93,1.68,4.4c0.69,1.19,0.26,2.77-0.95,3.44c-3.19,2.63-7,4.34-10.61,6.29c-0.06,1.3-0.11,2.59-0.15,3.89c0.44,0.16,1.32,0.48,1.77,0.64c1.19,0.31,1.61,1.06,1.26,2.23c0.65-0.32,1.95-0.96,2.6-1.28c0.96-0.65,2.12-0.99,3.28-0.73c0.8,0.05,2.39,0.16,3.19,0.22c1.14-0.03,1.85,0.52,2.14,1.66l0.45,1.03c0.65,1.35,1.3,2.72,1.68,4.19c1.31,0.26,2.63,0.5,3.96,0.72c1.19,0.04,2.25,0.59,3.16,1.33l0.74,0.45c0.98,0.37,1.64,1.04,1.98,2.03c0.37,0.03,1.09,0.08,1.45,0.1c0.5-0.24,1.49-0.72,1.98-0.96c2.45-2.4,3.93-6.04,3.27-9.47c-1.39-2.09-2.91-4.1-4.47-6.07c-0.79-0.84-1.51-1.74-2.15-2.69c-2.13-1.1-0.01-3.44,1.2-1.3c0.34,0.14,1.01,0.42,1.35,0.56c1.54,0.69,1.79,1.7,0.75,3.04l-0.41,0.53c0.32,0.09,0.97,0.28,1.29,0.38c1.87,0.56,3.75,1.08,5.64,1.59c0.72-2.99,2.35-6.14,1.49-9.25c-0.72-0.89-1.31-1.87-1.66-2.95c-0.62-1.77-2.39-2.69-4.08-3.14c-1.02-0.13-1.83-0.61-2.44-1.42l-0.71-0.38c-1.87-0.3-2.59-2.03-1.34-3.48c1.17-1.91-0.47-3.89-1.54-5.42c-1.67-1.75-3.41-3.44-5.21-5.05c-2.09-1.45-4.52-2.33-6.93-3.09c-1.18-0.17-2.16-0.89-2.66-1.97c-1.34-1.99-2.99-4.55-5.76-4.2c-2.88,0.07-5.78,0.27-8.64,0.4c-0.28-0.95-0.55-1.89-0.83-2.83c-0.39-1.31-0.78-2.61-1.16-3.91l-0.91-0.04c-2.99-0.08-6-0.26-8.97-0.41c-2-0.11-3.99-0.22-5.98-0.35c0.34,1.1-0.08,1.84-1.24,2.24c-1.83,0.94-4.07,2.22-3.44,4.67c0.01,1.39,0.02,4.16,0.02,5.55v1.65c1.32,0.73,2.41,1.8,3.37,2.95l0.52,0.57c1.78,1.89,3.5,3.83,5.19,5.8l0.59,0.65c1.18,0.65,1.15,2.14,0.08,2.89c-1.08,1.62-1.93,3.38-2.82,5.12c-0.47-1.42-0.98-2.82-1.55-4.2c-0.84-1.05-1.68-2.1-2.52-3.14c-0.92-0.63-1.84-1.25-2.78-1.84c-2.03-1.28-3.91-2.82-5.42-4.69c-2.34-3.72-1.01-8.14,0.93-11.74c0.48-1.26,1.53-2.16,2.48-3.08l0.52-0.86c0.54-1.3,1.06-2.61,1.71-3.87c-4.5-0.35-9.01-0.53-13.5-0.77c0.33,3.29,0.67,6.56,1.03,9.86c0.79,1.74,0.37,5.85-1.53,3.4c-0.52-1.8-0.85-3.64-1.27-5.46c-0.37-1.33-0.54-2.75-0.08-4.08l0.2-0.83c-0.66-0.63-1.99-1.91-2.66-2.55c-2.68,0.97-5.37,1.91-8.09,2.8l0.73,1.25c1.63,1.58-0.23,3.44-2.02,2.41l-1.4-0.29c0.14,0.55,0.43,1.66,0.58,2.21c-0.07,1.32,0.38,2.41,1.35,3.26c1.23,1.06,2.44,2.13,3.64,3.23c1.93,1.33,3.99,2.45,6.18,3.36c-0.18,1.2-0.54,3.58-0.71,4.77c-0.09,1.33-0.77,2.49-1.37,3.64l-0.21,0.75c-0.55,1.73,0.23,4.73-1.9,5.06c-1.77,0.26-3.56,0.39-5.34,0.51c-2.41,0.82-1.84-2.77,0.25-1.51c0.16-1.29,0.27-2.59,0.33-3.89c-0.13-1.01,0.12-1.93,0.74-2.73c0.44-0.86,1.32-2.56,1.76-3.41c-2.41-0.77-4.82-1.56-7.21-2.35c-1.07-2.78-2.1-5.6-3.54-8.21c-0.71-1.14-1.31-2.34-1.83-3.57l-0.57-0.93c-0.87-0.81-1.06-1.7-0.57-2.67c-0.56,0.26-1.67,0.78-2.23,1.04c-1.16,0.64-2.42,1.07-3.73,1.25c-1.56,0.32-3.11,0.71-4.59,1.3c-0.51,1.26-2.01,1.35-2.8,0.31c-2.05-1.15-4.24-2-6.39-2.95c-1.49-0.42-2.39-1.76-2.83-3.17c-0.23-0.56-0.7-1.7-0.93-2.26c-0.7,0.85-1.58,1.02-2.64,0.51c-1.57-0.41-3.16-0.66-4.78-0.73c-1.38,0-2.76-0.17-4.06-0.67c-0.98-0.31-2.96-0.92-3.95-1.23c-1.11,1.67-2.21,3.34-3.19,5.09c-0.72,1.52-1.22,3.19-1.16,4.88c0.21,1,0.05,1.94-0.47,2.82c-0.17,0.48-0.51,1.43-0.68,1.91c-0.27,0.49-0.81,1.46-1.08,1.94l1.45,0.17c1.57,0.01,2.94,0.84,4.11,1.83c0.55,0.42,1.66,1.25,2.22,1.67c1.45-0.74,2.97-1.35,4.45-2.03c0.44-0.29,1.34-0.87,1.78-1.16c1.21-1.49,3.39-1.11,3.28,1.04c0.46,1.97,0.93,3.95,1.64,5.86c0.63,1.68,1.31,3.35,1.98,5.02c-1.55-0.32-4.65-0.96-6.21-1.28l-0.78-0.17c-1.49-0.22-2.7-1.15-3.94-1.92c-0.65,0-1.94-0.01-2.59-0.02c-0.58,0.91-1.39,1.39-2.44,1.44l-1.09,0.13c-1.8,0.49-3.98,0.2-4.71-1.77c-0.67-1.09-1.33-2.17-1.98-3.26c-0.3,0.47-0.89,1.41-1.19,1.88c-0.39,0.38-1.19,1.15-1.59,1.53c-0.33-0.03-0.99-0.09-1.33-0.13c-2.13-0.22-4.28-0.26-6.43-0.32l-0.64,0.86c-0.67,1.22-1.97,1.87-3.33,1.92c-2.62,0.42-5.23,0.9-7.86,1.3c-1.76,0.58-3.34,0.42-4.74-0.49c-1.27-0.72-2.54-1.44-3.9-1.98c-2.91-0.98-5.88-1.77-8.84-2.56c-2.48-0.6-5.07-0.64-7.6-0.74c-1.11,0-3.32-0.01-4.43-0.01l-0.43-0.39c-1.47-1.27-3.03-2.67-4.99-3.07c-1.03,0-1.91-0.36-2.62-1.09l-0.8-0.55c-3.01-0.08-6.03-0.02-9.03,0.07c-1.48,0.5-2.85,1.26-4.15,2.11c-0.91,0.67-1.96,1.38-3.16,1.15l-1.17-0.04c0.47,1.06,0.17,1.87-0.9,2.45c-0.85,0.64-1.68,1.31-2.48,2.01c-2.47,2.23-4.9,4.51-7.38,6.72c-0.05,0.71-0.14,2.15-0.18,2.86c2.14,0.98,4.26,1.98,6.39,2.98c-0.13,0.68-0.38,2.04-0.5,2.72c-1.64,0.98-3.28,1.96-4.88,3l-0.68,0.47c-1.25,0.94-2.49,1.89-3.82,2.72c0.56,1.04,1.16,2.05,1.8,3.04c2.23,1.52,4.57,2.87,6.96,4.1c1.76-0.04,3.51-0.32,5.25-0.53c2.18-1.18,4.07,2.1,1.22,2.51c-1.65,0.48-3.32,0.83-4.99,1.19c-1.98,3.8-4.07,7.55-5.56,11.57c3.6,4.66,8.7,9.03,14.52,10.34c0.56,0.06,1.68,0.18,2.24,0.24c0.73,0.05,2.18,0.16,2.91,0.21l1.31,0.03c-1.57,2.04-3.23,4.03-4.96,5.95l-0.46,0.55c-0.79,1.03-1.75,1.94-2.9,2.57l-0.8,0.52c0.99-0.38,1.87-0.13,2.62,0.75l0.97,0.5c0.53,0.21,1.59,0.64,2.13,0.85l0.61,0.36c1.54-2.01,3.15-3.95,4.83-5.82l0.46-0.53c0.8-1.02,1.75-1.9,2.75-2.73l0.42-0.57c0.27-0.98,0.84-1.73,1.72-2.23c0.61-0.99,1.1-2.03,1.48-3.12c0.36-0.95,0.71-1.9,1.07-2.85c2.33,0.83,4.68,1.61,7.05,2.33c0.81-0.38,2.42-1.14,3.23-1.52c-0.14-0.51-0.41-1.52-0.55-2.03c-0.81-1.22,0.19-3.21,1.7-2.16c1.89,0.66,3.8,1.37,5.81,1.51c1.01-0.12,1.93,0.11,2.77,0.69c0.73,0.14,2.2,0.43,2.93,0.57c1.02-0.03,1.88,0.34,2.56,1.12c1.74,0.99,3.71,1.48,5.62,2.04c1.35,0.17,2.33,1.14,3.14,2.16c0.72,0.89,1.59,1.59,2.6,2.11c1.67,0.69,3.31,1.46,4.91,2.32l0.78,0.43c0.98,0.43,1.54,1.18,1.69,2.27l0.34,0.91c0.85,0.58,1.37,1.36,1.57,2.37l0.29,0.73c0.92,0.44,1.53,1.15,1.83,2.13l0.33,0.64c2.2,3.86,5.06,7.42,6.47,11.69c0.37,2.61,0.62,5.25,0.75,7.9c1.43,0.72,2.69,1.74,3.72,2.98c0.45,0.51,1.34,1.54,1.79,2.06c1.46,3.03,1.53,6.45,1.91,9.74l0.06,0.87c0.08,3.9-0.08,7.8-0.12,11.7c0.09,4.67-0.44,9.82,2.34,13.86c0.78,1.11,1.41,2.32,1.83,3.63l0.4,0.96c0.6,1.22,1.06,2.52,1.24,3.88c0.04,4.18,2.96,7.21,7.13,7.43c1.13,0.12,1.74,0.75,1.84,1.9c0.43,2.14,1.01,4.33,2.3,6.13c0.7,0.73,1.06,1.61,1.06,2.63c0.87,1.88,2.33,3.39,3.62,4.99c1.05,0.95,1.24,2.41,1.2,3.76c0,2.61,0.3,5.51,2.48,7.27c0.98,0.86,1.85,1.85,2.56,2.95c0.43,0.5,1.28,1.51,1.7,2.01c1.21,1.09,2.4,2.19,3.54,3.35c0.48,0.44,1.44,1.33,1.92,1.77c-0.01-1.13-0.07-2.25-0.19-3.37c-0.89-0.56-1.35-1.35-1.4-2.36c-0.25-1.72-0.61-3.42-0.93-5.11c-0.27-1.41-0.52-2.82-0.77-4.23c0.95,1.41,1.9,2.82,2.84,4.24c0.57,0.9,1.21,1.76,1.91,2.57c0.82,0.6,1.29,1.42,1.42,2.43l0.23,0.76c0.96,0.37,1.64,1.03,2.05,1.98l0.51,0.72c0.78,1.01,1.8,2.07,1.67,3.46c0.07,1.77,0.19,5.29,0.25,7.05c1.55,1.72,3.06,3.47,4.5,5.29l0.77-0.12c1.19-0.4,2.27,0.37,3.06,1.18c1.23,1.09,2.66,1.95,4.21,2.52c1.14,0.2,1.75,0.85,1.83,1.95c0.03,0.23,0.09,0.7,0.11,0.93c3.98,0.29,7.94,0.73,11.89,1.31c2.31,1.2,4.04,3.26,6.36,4.46c1.13,0.17,2.28,0.46,3.2,1.2c2.2,1.37,4.42,2.7,6.52,4.23c1.07,0.54,1.59,1.65,1.94,2.75l0.35,0.77c0.82,0.6,1.31,1.4,1.48,2.41c0.47,1.4,1.42,2.63,2.56,3.56c3.62,1.77,7.67,2.93,11.7,2.06c0.65,0.53,1.31,1.07,1.97,1.61c0.89,0.61,1.22,1.47,1,2.58c0.02,0.95,0.05,2.85,0.07,3.8c0.07,0.97,0.2,2.91,0.27,3.88l-0.47,0.43l-0.81,0.82c-1.12,1.29-2.29,2.53-3.47,3.76c-0.92,1.14-1.57,2.54-1.78,4c0.07,1.02-0.21,1.93-0.86,2.72c0.07,0.51,0.21,1.54,0.29,2.05c0.58,0.86,0.76,1.8,0.53,2.81c-0.06,0.58-0.19,1.75-0.25,2.33c0,1.35-0.42,2.65-0.99,3.87c-3.28,4.89,0.22,10.28,4.09,13.3c0.87,0.59,1.3,1.43,1.29,2.51l0.21,0.99c0.55,0.86,0.74,1.8,0.57,2.82c-0.08,1.57,0.61,3.05,1.41,4.37c0.74,1.11,1.33,2.32,1.76,3.59c0.22,0.46,0.66,1.37,0.88,1.83c1,1.31,1.99,2.63,2.89,4.02c0.6,0.88,1.28,1.69,2.05,2.43c2.23,1.97,4.52,3.84,6.84,5.71l0.82,0.58c0.26,0.18,0.79,0.54,1.05,0.72c-0.06,0.89-0.16,2.66-0.22,3.55c-0.12,2.02-0.36,6.06-0.48,8.08c-0.12,1.19-0.36,3.56-0.48,4.74c-0.21,1.66-0.35,3.34-0.42,5.02c0.07,1.17-0.16,2.33-0.58,3.43c-0.36,1.29-0.57,2.61-0.65,3.95c-0.52,7.56-0.05,15.36-2.29,22.68c-0.4,1.31-0.83,2.61-1.12,3.96c-0.08,1.01-0.49,1.86-1.25,2.54l-0.54,0.76c-0.29,6.19-0.28,12.4-0.39,18.62c0.01,2.93,0.4,5.85,0.73,8.77c0.19,1.04-0.13,1.9-0.98,2.61l-0.66,0.85c-0.53,1.09-1.32,1.45-2.38,1.07c0.65,2.08,1.4,4.14,1.89,6.28c0.64,3.28,0.71,6.58,0.98,9.93c0.15,2.62,0.29,5.26,0.4,7.91c0.89,0.75,1.78,1.51,2.67,2.28c2.52,2.16,4.89,4.47,7.35,6.71c3.25,2.62,7.76,0.42,11.53,0.34c-0.84-0.93-1.7-1.83-2.57-2.7c-0.99-0.88-1.81-1.92-2.51-3.02l-0.5-0.65c-0.87-0.56-1.4-1.34-1.58-2.34c-0.35-1.06-0.73-2.11-1.16-3.13c-0.54-1.31-1.08-2.61-1.61-3.91c0.82-0.91,1.65-1.8,2.46-2.71c2.79-3.28,5.16-7.31,5.64-11.61c-0.45-0.81-0.87-1.63-1.25-2.45c-0.59-1.18-1.23-2.32-1.84-3.47c1.52-1.89,3.13-3.7,4.71-5.54c1.06-1.29,1.89-2.75,2.6-4.25c1.08-2.38,2.16-4.75,3.27-7.11l0.33-0.74c0.52-1.36,1.29-2.76,2.75-3.27c0.51-0.26,1.53-0.79,2.04-1.05c2.54-1.33,5.07-2.68,7.52-4.15c0.69-2.65,0.41-5.4,0.36-8.09c2.11-1.02,4.38-1.89,6.13-3.5c0.87-0.96,1.81-1.84,2.83-2.64c1.96-1.62,2.4-4.29,2.74-6.66c0.04-1.07,0.56-1.83,1.56-2.27l0.61-0.45c0.57-0.84,1.34-1.37,2.34-1.57c1.67-1.77,2-4.3,2.48-6.58c0.51-2.74,0.96-5.53,1.55-8.23l0.14-0.59c0.38-1.78,2.18-2.65,3.49-3.67l0.84-0.63c1-0.87,2.12-1.64,3.42-1.98c1.65-0.61,3.34-1.18,4.9-2.02c0.92-1.1,1.88-2.18,2.89-3.2c1.86-1.98,3.01-4.53,3.57-7.16c0.23-1.3,0.65-2.56,1.14-3.78c1.35-4.8,0.75-9.98,2.15-14.75c0.97-1.95,2.17-3.77,3.39-5.58C318.94,360.125,320.97,355.295,320.03,350.335z M201.62,108.035c1.3-1.03,2.87,1.21,1.56,2.15C201.86,111.255,200.3,108.975,201.62,108.035z M160.23,91.855l-1.2,0.51c-2.9,2.15-6.3,3.57-9.96,3.77l0.76-0.25c-2.64,0.37-5.3,0.58-7.97,0.64c-2.68-0.07-1.45-5.11,1.01-3.92c2.06-0.02,4.12-0.03,6.19-0.08c3.98-1.16,8.33-2.5,12.34-0.78L160.23,91.855 M220.38,271.435c1.05-0.17,1.87,0.23,2.46,1.2l0.57,0.55c3.09,2.48,6.34,4.75,9.63,6.97c3.54,0.04,7-0.77,10.46-1.43c0-1.01,0.01-3.04,0.01-4.06c-0.29,0.02-0.89,0.05-1.18,0.07c-1.05,0.11-1.86-0.32-2.43-1.27c-0.5-0.45-1.51-1.37-2.02-1.82c-1.31-0.98-2.58-2.01-3.76-3.12c-0.88-0.78-1.76-1.53-2.66-2.26l-0.34,1.07c-0.08,2.57-2.4,2.54-3.98,1.18l-0.85-0.41c-0.98-0.33-1.68-0.96-2.1-1.91c-0.72-0.78-1.55-1.41-2.49-1.9c-2.11-1-4.26-1.93-6.44-2.74c-1.16-0.25-2.31-0.19-3.43,0.16c-2.3,0.78-4.55,1.68-6.82,2.49c0.46,1.39,0.93,2.79,1.4,4.18c3.95-0.84,8.1-1.22,11.75,0.89c1.19,0.34,1.6,1.09,1.23,2.26L220.38,271.435z'/></svg>"
              ],[
                "sub_saharan_africa",
                "Sub-Saharan Africa",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='sub_saharan_africa' d='M488.08,345.035c5.11-10.88,14.33-19.02,20.83-28.98c3.28-6.75,5.42-14.26,5.12-21.82c-4.56,1.59-9.14,3.19-13.67,4.84c-1.21,0.87-2.79,0.27-3.09-1.19l-0.48-0.92c-1.47-2.71-2.98-5.4-4.4-8.13c-4.72-7.55-8.46-15.7-11.36-24.12c-6.5-0.32-12.99-1.01-19.5-0.67c-3.83,1.29-6.55,4.65-10.11,6.5c-5.98-1.5-10.87-5.94-16.83-7.39c-11.42-0.79-19.79,8.42-28.23,14.57c-6.29-6.06-12.33-12.36-18.54-18.5c-1.77-1.59-3.57-3.15-5.43-4.62c-4.34-2.86-9.65-3.57-14.65-4.58c-5.4,4.16-7.36,11.61-9.44,17.91c0.35,8.3,0.43,16.66-1.15,24.89c1.67,0.73,3.35,1.49,5.09,2.06c1.04,0.24,2.42,0.78,2.33,2.1c0.89,6.5,1.7,13.87,7.64,17.84c2.9,4.07,9.61,6.35,13.61,2.58c0.89-1.13,2.41-1.25,3.58-0.46c5.3,2.98,10.55-1.13,15.91-1.18c4.74,1.87,8.9,4.86,13.16,7.6c-0.62,4.54-1.44,9.09-1.16,13.7c2.11,5.98,8.03,10.05,9.24,16.42c2.56,8.84-1.93,17.43-2.92,26.09c-0.65,8.14,3.8,15.16,6.28,22.58c0.52,1.8,0.77,3.67,0.76,5.63c-0.33,7.45,3.61,13.84,5.72,20.7c0.43,4.23,3.12,7.44,5.54,10.67c5.88-2.56,13.43-1.47,18.23-6c0.35-0.95,0.99-1.63,1.92-2.04c5.03-4.33,8.65-10.45,10.18-16.92c0.91-3.6,3.23-6.52,5.33-9.49c3.47-5.2-0.62-11.99,2.91-17.22c2.82-4.1,7.5-6.21,11.65-8.73C490.87,367.495,486.8,356.435,488.08,345.035 M511.44,359.355c-1.12,0.4-2.23,0.81-3.34,1.22c2,8.17-7.02,12.62-10.6,18.7c-1.28,6.86-2.24,13.9-2.13,20.91c0.09,1.22,0.14,2.44,0.17,3.67c-0.27,1.6,0.69,3.59,2.54,3.48c0.97-0.01,1.95,0.05,2.93,0.16c1.47,0.12,2.95,0.22,4.44,0.31c2.46-9.41,4.82-18.85,7.04-28.32c1.41-5.41-1.91-11.14,0.56-16.4C512.51,361.835,511.97,360.595,511.44,359.355z'/></svg>"
              ],[
                "east_asia_pacific",
                "East Asia & Pacific",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='east_asia_pacific' d='M673.78,359.585c1.46,1.17,2.93,2.37,4.62,3.23c2.09-2.16,4.08-4.44,5.93-6.82c-8.72,2.34-16.34-5.53-25.18-1.45c-1.03,0.4-1.94,0.24-2.73-0.46c-4.84-4.17-10.66-6.75-17.2-6.55c-1.27-0.05-1.79-0.68-1.57-1.9c0.17-1.64,0.37-3.28,0.48-4.91c0.03-1.18,0.1-2.34,0.2-3.5c-1.12-1.44-2.53-2.6-3.85-3.81c-1.09-6.14-1.85-12.37-3.76-18.33c-1.72-3.65-5.16-6.21-6.8-9.9c-0.54-3.21,0.4-6.45,0.62-9.65c4.63,2.68,7.54,7.26,10.73,11.39c3.93-2.52,7.66-5.55,10.13-9.58c0.92-6.9-2.27-13.36-5.55-19.17c-1.79-2.71-0.06-5.83,0.57-8.6c1.45,0,2.91,0,4.37,0.01c-1.13,2.28-2.32,4.52-3.45,6.79c1.75,1.14,3.52,2.28,5.3,3.41c2.72-4.47,3.4-10.99,8.99-12.92c5.66-1.83,11.2-5.22,12.78-11.45c0.19-1.01,0.74-1.76,1.65-2.26c2.63-2.21,3.59-5.83,3.45-9.15c-0.05-1-0.05-1.99,0.01-2.97c0.36-5.74-2.52-10.9-4.7-16.01c2.42-2.33,4.68-4.82,6.89-7.34c-1.89-0.71-3.8-1.39-5.69-2.07c2.26-1.55,4.64-2.92,6.99-4.34c2.78,5.42,4.8,11.15,6.72,16.92c2.27-1.04,4.51-2.18,6.7-3.41c-1.55-7.61,0.35-15.09,1.16-22.61c0.2-3.31,0.58-6.58,1.13-9.83c1.93-2.68,4.22-5.09,6.48-7.51c-5.43-1.11-9.5-5.07-13.27-8.84c-3.16-3.51-3.2-8.54-4.13-12.93c-2.61-0.44-5.08-0.84-7.64-1.26c-2.02,4.14-2.97,9.41-6.5,12.45c-7.78,0.26-15.41,1.65-23.11,2.61c-7.94-2.57-15.44-6.53-23.21-9.66c-0.96,2.69-1.6,5.48-2.53,8.19c-5.15-1.23-10.96-3.49-16.05-0.7c-6.92,3.8-12.21,9.89-17.81,15.33c-4.57,3.74-2.78,10.8-7.27,14.61c-2.84,3.03-7.1,4.04-10.66,5.8c0.78,2.66,1.56,5.35,2.66,7.9c3.58,6.07,10.11,11.34,9.06,19.04c1.46,0.12,2.04,0.91,1.74,2.36c1.68,0.49,3.34,1.04,5,1.62c1.47,0.32,2.05,1.18,1.75,2.57c3.69,1.22,7.36,2.51,11.14,3.41c0.09-1.88,2.77-2.14,3.26-0.34c5.16-1.63,10.4-3.01,15.74-3.96c-0.39,10.36-6.57,18.96-10.55,28.14c-0.57,3.1,1.76,5.75,3.84,7.74c1.24,0.74,1.48,2.33,0.57,3.44c-0.34,0.73-1.04,2.2-1.38,2.93c2.27-0.22,4.55-0.47,6.83-0.72c1.46,4.8,3.78,9.65,2.78,14.77c-1.06,6.75,2.27,12.96,4.23,19.18c-3.76-1.78-7.58-3.45-11.61-4.52c0.85,3.8,1.4,7.78,3.87,10.94c6.44,9.51,11.34,20.71,21.1,27.36c1.07,0.44,1.51,1.21,1.33,2.3c-0.06,0.47-0.17,1.4-0.23,1.87c1.86-0.17,3.72-0.34,5.6-0.5c1.8-0.41,3.47,0.45,5.02,1.27c6.09,1.79,12.33,3.25,18.58,4.49C669.74,362.315,671.77,360.595,673.78,359.585 M691.93,240.635c1.09-0.46,2.19-0.91,3.31-1.35c0.229-1.49,0.479-2.96,0.74-4.44c0.14-1.11,0.81-1.68,2.01-1.69c6.03-1.36,11.64-4.12,17.6-5.75c1.32-5.8,3.39-11.49,3.68-17.47c-0.03-1,0.07-1.98,0.3-2.95c0.21-1.17,0.43-2.33,0.66-3.49c3.38-2.03,5.46-5.39,6.98-8.93c-2.29-1.45-4.49-3.07-6.96-4.2c-0.58-0.22-1.74-0.65-2.32-0.87c-2.2,5.1-7.26,10.67-3.86,16.32c0.82,1.06,1.22,2.59,0.17,3.67c-2.01,4.77-6.88,6.98-10.1,10.75c-4.21,4.14-9.85,6.39-14.81,9.44C690.25,233.325,691.12,236.955,691.93,240.635 M672.63,254.455c-4.63,3.53-5.19,9.39-3.15,14.67c2.53-0.86,3.6-3.21,3.04-5.76c-0.23-1-0.06-1.93,0.5-2.79C673.27,258.525,672.84,256.475,672.63,254.455 M684.31,305.865c-1.21-2.6-4.32-3.46-6.51-4.89c-0.41-1.04-0.82-2.07-1.22-3.1c0.61,0.07,1.84,0.22,2.45,0.29c1.17,0.01,1.81,0.6,1.91,1.77l0.11,0.62c-0.18-6.63-5.98-11.05-6.71-17.51c-0.29-0.97-0.33-1.95-0.1-2.94c0.12-1.02,0.37-3.08,0.49-4.11c-2.31,0.86-4.56,1.83-6.77,2.89c1.53-0.78,1.98,1.32,1.05,2.18c-2.58,4.38,0.16,9.5,1.25,13.88c1.79,5.69,2.71,11.61,3.67,17.47c2.35,1.86,5.14,3.06,7.74,4.54C683.42,313.545,685.43,309.925,684.31,305.865 M667.62,296.795c-3.66,2.94-7.17,6.78-7.05,11.79c1.01-0.04,3.03-0.11,4.04-0.14C665.91,304.645,667.07,300.785,667.62,296.795 M770.41,322.895c-0.63,0.21-1.9,0.62-2.53,0.82c2.58,3.25,5.3,6.39,7.44,9.97c1.87-3,5.92-6.7,2.96-10.29c-0.68-0.78-0.98-1.67-0.89-2.69c-0.27-2.58-1.59-4.87-2.62-7.19c-2.53,0.54-5.05,1.13-7.6,1.51c0.02-1.65,0.04-3.31,0.02-4.95c0.14-0.55,0.42-1.65,0.56-2.2c-0.81-0.11-2.43-0.32-3.24-0.43c-0.05,4.21-0.07,8.42-0.08,12.64c2.34,0.16,4.68,0.02,7.03,0.17C773.84,320.375,771.94,323.065,770.41,322.895 M651.81,319.775c-2.78,3-6.91,4.45-9.38,7.72c-1.84,2.22,0.1,4.87,0.92,7.09c2.32,4.22,4.22,11.11,10.73,9.48c4.49,1.37,7.38-2.16,10.35-4.63c0.79,3.51,1.47,7.03,2.24,10.56c2.42-1.41,5.85-2.03,7.44-4.36c-0.31-8.07,5.5-14.08,7.37-21.54c-3.15,0.98-6.43,1.8-9.61,2.57c-1.14-0.18-3.43-0.54-4.58-0.72c-0.46-0.16-1.37-0.48-1.83-0.65c0.87-3.49,1.63-7.03,1.88-10.63c-1.52-1.11-4.58-3.35-6.1-4.47C657.38,312.615,655.24,316.865,651.81,319.775 M716.22,314.735c-0.7,2.41-1.53,4.75-2.14,7.19c2.21-0.34,4.45-0.56,6.7-0.62c2.33-0.21,4.66-0.43,6.99-0.69c0.86-0.11,1.75-0.23,2.64-0.35c2.13,3.19,4.69,6.06,7.35,8.83c0.61-5.42-2.51-10.07-5.11-14.5C727.25,315.965,721.66,315.605,716.22,314.735 M745.38,325.445c0.99-0.68,1.98-1.36,2.99-2.03c0.01-0.85,0.05-2.55,0.07-3.39c-1.24,0.36-2.47,0.74-3.68,1.14c-0.55,0.02-1.66,0.04-2.21,0.06c0.06,0.83,0.18,2.51,0.24,3.34C743.76,324.505,744.63,324.795,745.38,325.445 M754.89,329.085c1.41-1.37,2.81-2.76,4.18-4.18c-1.57-0.18-3.14-0.35-4.69-0.51C754.54,325.955,754.71,327.515,754.89,329.085 M784,335.575c0.54,0.85,0.73,1.78,0.55,2.79c0.04,4.68,0.6,11.77,6.25,13.2c1.24,0.42,2.42,1.11,3.15,2.25l0.54,0.66c-0.1-4.59-3.38-7.58-5.36-11.28c-1.65-5.98,0.69-13.84-5.5-17.62C783.7,328.915,783.47,332.245,784,335.575 M738.22,351.265c2.28-1.87,2.94-4.92,3.98-7.54c-3.94,1.24-7.93,2.31-12,3c-2.32-3.02-4.71-6.29-8.55-7.44c-4.96-2.08-10.62-5.53-16.02-2.74c-3.32-3.38-7.52-5.99-12.54-5.71c0.63,4.98,1.42,10.02,3.73,14.54l1.31-0.02c1.86-0.06,3.72,0.2,5.58,0.77c1.35,0.38,2.71,0.78,4.08,1.2c0.16,3.48,0.17,6.98-0.01,10.46c5.79,1.61,12.23,3.66,17.67-0.04c3.17,3.67,7.41,5.98,12.14,7.12c0.23-1.55,0.71-4.65,0.94-6.19c-2.38-1.46-4.77-2.91-7.15-4.37c0.24-0.97,0.5-1.92,0.77-2.88C734.16,351.565,736.26,351.985,738.22,351.265 M747.51,336.595c1.25-0.08,2.51-0.15,3.77-0.21c0.43-1.03,0.86-2.05,1.31-3.06c-1.69-0.35-3.38-0.7-5.05-1.06C747.53,333.705,747.52,335.145,747.51,336.595 M740.72,357.255c3.73,5.23,7.87,12.81,15.28,12.14c-0.18-0.56-0.54-1.67-0.72-2.22C755.01,360.005,746.17,358.795,740.72,357.255 M732.82,389.945c-3.18-4.36-3.65-9.92-6.24-14.55c-2.65-4.47-3.5-10.4-8.64-12.82c-1.37,5.26-2.32,10.61-3.11,16c0.24,1.43-1.62,2.05-2.38,0.88c-3.72-2.13-5.71-5.84-5.91-10.22c-0.44-1.1-0.59-2.38,0.05-3.43l0.46-1.11c-3.66-0.73-7.43-1.31-11.17-0.83c-4.22,1.41-5.51,6.3-7.89,9.56c-1.01-1.29-2-2.6-2.96-3.91c-4.9,4.1-13.1,6.94-12.4,14.59c-0.05,1.28-0.33,2.89-1.77,3.29c-5.3,2.55-10.89,4.52-15.89,7.66c-1.5,0.99-2.58,2.57-2.64,4.42c-1.65,13.09,5.13,25.3,5.65,38.3c1.33-0.09,2.68-0.18,4.03-0.28c0.97-0.11,1.96-0.14,2.96-0.08c9.6-0.06,17.45-6.79,26.521-8.85c4.88-1.58,8,2.36,10.39,5.67c2.44,3.52,6.3,5.52,9.75,7.89c1.16,3,1.44,6.91,4.12,9.14c3.58,0.61,7.22-0.03,10.8-0.46c3.5-0.72,8.19-0.65,10.47-4.02c0.55-1.06,1.34-1.39,2.38-0.98c-0.11-7.39,2.05-14.43,5.78-20.78c0.08-0.56,0.23-1.68,0.31-2.24c0.56-5.14-0.03-10.4-0.92-15.45C742.11,400.645,735.92,396.295,732.82,389.945 M774.13,387.045c-2.23-1.19-4.52-2.24-6.85-3.19c0.84,6.64,1.34,13.59,4.35,19.7C777.2,399.325,771.4,392.495,774.13,387.045 M794.97,401.925c-2.66,2.09,1.33,2.19,2.9,2.5c0.57,0.02,1.71,0.05,2.27,0.07c2.72-0.38,3.11-4.32,4.28-6.4c-2.6,0.35-5.12,0.95-7.56,1.79C796.5,400.815,795.87,401.495,794.97,401.925 M813.64,398.695c-2.08,2.31-3.9,4.88-5.24,7.7c-1.62,2.94,1.29,5.67,2.64,8.08c1.5-3.68,3.25-7.48,3.15-11.53C813.98,401.525,813.75,400.115,813.64,398.695 M788.49,435.135c1.1,4.84,3.229,9.63,2.34,14.71c-1.56,4.38-5.11,7.65-7.52,11.56c-2.55,4.47-7.13,7.01-11.11,9.98c0.12,4.16,2.72,9.01,7.91,6.7c3.73,0.13,5.64-3.56,5.23-6.87c-0.18-1.11,0.19-1.94,1.1-2.52c7.36-4.71,12.74-12.19,14.63-20.71c0.09-0.96,0.33-1.89,0.71-2.76C795.11,445.265,792.08,439.535,788.49,435.135 M723.63,455.055c1,4.84,2.04,9.71,3.71,14.37c5.46-2.19,8.23-7.54,7.8-13.37C731.27,456.055,727.42,455.755,723.63,455.055z'/></svg>"
              ],[
                "south_asia",
                "South Asia",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='south_asia' d='M601.63,246.995c-1.07,0.51-2.16,0.62-3.26,0.34c-3.78-0.9-7.45-2.19-11.14-3.41c-1.28-0.34-1.86-1.2-1.75-2.57c-1.66-0.58-3.32-1.13-5-1.62c-1.29-0.26-1.88-1.04-1.74-2.36c1.05-7.7-5.48-12.97-9.06-19.04c-3.8,0.06-7.53,0.15-11.31,0.2c-0.73-0.14-2.2-0.42-2.94-0.56c-6.29,1.78-12.33,4.28-18.51,6.36c-3.12,8.02,0.28,16.11,2.42,23.86c2.17,4.11-1.04,7.46-2.88,10.72c3.76,0.44,7.52,0.82,11.31,1.26c3.44,5.13,8.18,9.16,12.36,13.65c2.5,5.67,2.57,12.13,5.07,17.83c2.35,5.49,3.82,11.29,5.51,17.01c1.95-0.71,3.89-1.43,5.83-2.16c0.76,2.94,1.48,5.9,2.28,8.86c1.94-0.91,3.93-1.79,5.63-3.12c0.2-5.39-4.38-9.48-4.46-14.8c-0.021-4.48-1.46-9.7,2.32-13.11c4.66-5.32,9.59-10.53,15.38-14.64c3.07,0.03,6.11,0.85,9.13,1.48c3.98-9.18,10.16-17.78,10.55-28.14C612.03,243.985,606.79,245.365,601.63,246.99 M591.761,303.9c0,6.72,0.83,13.56-0.69,20.19c1.29,0.4,2.56,0.81,3.87,1.2c3.3-6.65,2.56-14.28,0.82-21.29C594.421,303.96,593.091,303.93,591.761,303.9z'/></svg>"
              ],[
                "middle_east_north_africa",
                "Middle East & North Africa",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='middle_east_north_africa' d='M539.34,248.195c-2.14-7.75-5.54-15.84-2.42-23.86c-2.55-2.9-4.72-6.23-7.82-8.55c-3.76,0.07-7.32,1.15-10.88,2.17c-3.09-0.28-5.96-1.47-8.81-2.57c-3.41-1.2-6.9-2.16-10.37-3.16c-0.29,1.63-0.88,4.87-1.17,6.5c-5.93,0.71-11.98,0.86-17.75,2.52c-2.52,0.6-2.94,3.38-3.46,5.49c-0.93,3.22-1.05,7.96-4.96,9.05c-8.68,2.12-17.59-0.32-25.24-4.46c-2.21,2.25-4.4,4.52-6.57,6.8c-4.71-2.71-9.39-5.47-14.02-8.3c-1.19-3.9-1.29-8.46-3.94-11.78c-3.08-2.15-7.27-0.19-10.57-0.3c-8.18,0.62-16.06,2.8-24.04,4.54c-1.61,0.37-3.24,0.7-4.85,1.04c-3.75,5.03-8.11,9.99-8.7,16.54c-0.25,3.94-4.05,5.46-7.03,7.06c-0.11,0.71-0.32,2.14-0.42,2.85c0.35,0.06,1.06,0.18,1.42,0.25c5,1.01,10.31,1.72,14.65,4.58c1.96,1.35,3.73,2.96,5.43,4.62c6.21,6.14,12.25,12.44,18.54,18.5c8.44-6.15,16.81-15.36,28.23-14.57c5.96,1.45,10.85,5.89,16.83,7.39c3.56-1.85,6.28-5.21,10.11-6.5c6.51-0.34,13,0.35,19.5,0.67c-1.49-4.16-3.04-8.29-4.39-12.49c7.47,11.08,12.24,23.78,15.75,36.61c1.42,2.73,2.93,5.42,4.4,8.13c9.35-5.37,19.76-9.02,27.99-16.19c3.55-4.15,6.63-8.67,9.82-13.09c-2.02-3.28-3.91-6.63-5.5-10.14c2.46,0.42,4.91,0.88,7.36,1.37C538.3,255.655,541.51,252.305,539.34,248.195z M514.19,255.825c-2.91-3.79-4.66-8.33-5.75-12.95c4.8,4.17,9.01,9.01,12.95,14C519.02,256.865,515.88,258.145,514.19,255.825z'/></svg>"
              ],[          
                "europe_central_asia",
                "Europe & Central Asia",
                "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='europe_central_asia' d='M527.62,81.815c-1.81-4.6-3.69-9.97-0.39-14.54c5.21-8.59,15.11-11.99,24.07-15.18c3.03-0.96,3.76-4.4,5-6.91c-7.53-0.09-14.66,2.35-21.78,4.44c-3.29,1.39-7.55,2.13-9.06,5.83c-4.25,6.76-8.13,13.75-12.72,20.29C515.48,81.435,521.66,83.515,527.62,81.815 M341.44,55.475c2.64-5.77,2.33-12.32,3.2-18.47c2.12-5.6,7.66-8.51,12.64-11.14c-2.48-4.16-7.41-4.5-11.73-5.39c-1.93-4.7-5.32-9.04-10.31-10.7c-6.87-3.27-14.33,0.62-21.45-1.67c-0.25,1.23-0.74,3.68-0.99,4.91c-9.18-5.71-20.98-4.25-30.18,0.55c-2.57,2.44-4.15,5.811-7.13,7.86c-0.84,0.83-1.73,0.88-2.67,0.14l-1-0.64c0.11,2.5,0.33,7.51,0.44,10.01c2.76,5.82,9.96,5.83,15.44,6.91c1.62,8.65,2.63,17.41,3.47,26.16c-0.36,4.92-3.41,9.54-2.26,14.57c0.59,0.83,0.8,1.76,0.63,2.77c-1.49,7.83,3.9,13.85,10.46,16.91c2.5-5.38,5.09-10.73,7.75-16.03c6.5-1.83,12.02-5.88,18.47-7.86c3.54-1.57,8.57-2.06,9.74-6.47c1.76-4-1.85-7.38-4.19-10.16C334.89,56.945,339.65,58.825,341.44,55.475 M782.56,84.155c-0.47,1.66-0.93,3.31-1.37,4.97c-7.42-4.41-16.63-3.57-24.01-8.03c-3.6-1.87-8.34-4.57-11.86-1.13c-0.67,1.11-2.27,1.19-2.73-0.14c-1.93-2.52-4.26-4.72-6.5-6.93c-2.9-1.18-6.16-0.08-9.1-1.11c-2.08-0.67-4.09-1.6-6.23-2.06c-1.22-0.07-2.43-0.15-3.63-0.26c-3.82-0.47-6.46,2.71-8.73,5.25c-0.65,0.86-1.51,1.19-2.58,0.99c-5.28-0.07-10.45,1.31-15.52,2.62c-1.25-3.96-2.14-8.02-3.06-12.05c-3.4-0.93-6.9-1.53-10.4-1.78c-1.15,1.67-2.18,3.45-3.67,4.83c-7.39-2.12-14.71-4.59-22.08-6.8c4.31-4.31,3.24-10.23,1.69-15.56c-4.26-1.08-9.13-0.43-12.88-3.02c-2.73-1.15-5.55-4.33-8.78-2.89c-4.63,1.89-7.72,6.08-11.67,8.99c-0.94,1.22-2.53,0.86-3.63,0.13c-3.57-2.12-7.39,0.33-10.92,1.18c-3.15,1.06-6.58,1.43-9.43,3.17c-1.81,2.24-2.25,5.26-3.29,7.9c-3.35,0.92-6.69,1.79-9.97,2.88c-1.07,0.46-2.38,0.73-3.38-0.02c0.26,1.85,0.56,3.69,0.9,5.52c-1.38,0.87-2.76,1.75-4.07,2.7c-1.01,1.03-2.92,1.68-3.77,0.1c-1.22-1.48-2.42-2.97-3.62-4.46c-1.52,1.45-3,2.93-4.49,4.39c-0.29-1.5-0.56-3-0.83-4.5l-0.86,0.32c-0.58,0.08-1.73,0.23-2.3,0.31c-0.68-0.02-2.04-0.06-2.72-0.08c-1,0.05-1.99,0.06-2.97,0.03c-6.52,2.06-5,11.43-6.64,16.52c-2.74,0.12-8.21,0.37-10.95,0.49c-0.51,0.22-1.51,0.66-2.02,0.88c-6.07,4.03-13.7,2.67-20.54,3.83c-3.68,0.95-6.63,3.67-8.44,6.92c-0.37,1.29-2.96,3.74-3.3,1.27c-0.13-2.59,0.18-5.17,0.1-7.75c-1.56,0.02-3.09,0.22-4.62,0.42c-0.48,3.08-0.89,6.17-1.35,9.26c-0.96-0.03-1.91-0.06-2.85-0.08l-0.69-0.01c-0.12-0.56-0.35-1.69-0.47-2.25c0.55-4.48-4.63-5.86-7.42-8.12c-4.37-3.11-10.29-2.92-14.51-6.16c-1.89-3-4.35-6.24-8.3-5.63c-1.74,0.02-3.44,0.04-5.11,0.04c-3.89,0.05-7.2,2.34-10.38,4.3c-6.12,4.05-13.19,7.44-17,14.05c-3.09,3.72-4.11,8.54-6.6,12.59c-3.87,4.99-9.23,8.49-14.39,11.98c0.13,0.45,0.39,1.33,0.52,1.77c0.49,1.64,0.45,3.33-0.13,5.08c-0.65,4.67,0.22,9.36,1.08,13.95c3.49-1.03,7.01-2.11,10.44-3.38c-5.19,4.58-4.51,11.72-4.79,18.07c-5.61,0.48-9.03,4.69-12.28,8.67c-2.82-4.04-4.19-8.88-6.79-13.04c-3.39-4.97-2.78-11.3-4.86-16.78c-3.85,0.59-7.93,2.12-9.09,6.15c-1.5,5.26-5.89,8.7-8.52,13.26c-0.29,3.7-1.17,7.83,0.59,11.34c2.66,2.02,5.88,0.05,8.62-0.7c-1.86-2.64,2.4-3.49,1.38-0.3c-0.23,2.29-0.66,4.54-1.09,6.8c1.13,0.05,2.27,0.09,3.41,0.12c0.99-0.04,1.96,0.08,2.92,0.36c0.53,0.12,1.58,0.37,2.1,0.5c0.13,0.61,0.38,1.83,0.51,2.44c-1.7,0.42-5.09,1.26-6.79,1.68c2.46,4.73,5.97,8.77,9.08,13.07c-1.47,1.59-2.98,3.15-4.37,4.82c-0.56,1.31-2.18,1.05-2.73-0.11c-3.2-4.36-8.71-1.13-12.91-0.28l0.48,1.12c0.09,0.57,0.27,1.71,0.36,2.28c-0.18,3.27-0.21,6.55-0.1,9.82c-0.01,0.57-0.02,1.72-0.03,2.29c-1.01,5.3,2.93,9.34,6.84,12.16c1.61-0.34,3.24-0.67,4.85-1.04c3.93-1.6,8.15-3.58,10.14-7.58c3.83-9.05,11.45-15.77,20.29-19.76c4.51,6.36,11.12,11,14.27,18.37c-2.63,1.19-5.01,2.52-7.52,3.83c1.89,1.64,3.78,3.28,5.67,4.93c3.3-4.19,6.63-8.35,9.97-12.5c3.01,4.11,6.6,7.86,10.98,10.53c0.91-4.43,1.8-8.87,2.67-13.31c1.78,4.45,2.93,9.16,5.18,13.4c2.92,2.5,7.44,1.3,10.68,3.28c1.37,1.03,2.51,2.34,3.73,3.57c1.09-0.1,2.18-0.21,3.28-0.31c0.52-2.11,0.94-4.89,3.46-5.49c5.77-1.66,11.82-1.81,17.75-2.52c0.29-1.63,0.88-4.87,1.17-6.5c3.47,1,6.96,1.96,10.37,3.16c0.64-2.84,2.22-5.83,1.09-8.77c-1.88-5.67-4.27-11.17-5.61-17.01c3.46-1.03,6.89-2.32,10.5-2.77c2.05-0.38,0.94,2.57-0.5,2.53c-1.54,0.77-3.07,1.55-4.6,2.33c3.51,8.47,6.25,17.23,7.93,26.26c3.56-1.02,7.12-2.1,10.88-2.17c3.1,2.32,5.27,5.65,7.82,8.55c6.18-2.08,12.22-4.58,18.51-6.36c0.76-1.34,2.85-1.13,2.94,0.56c3.78-0.05,7.51-0.14,11.31-0.2c-1.1-2.55-1.88-5.24-2.66-7.9c3.56-1.76,7.82-2.77,10.66-5.8c4.49-3.81,2.7-10.87,7.27-14.61c5.6-5.44,10.89-11.53,17.81-15.33c5.09-2.79,10.9-0.53,16.05,0.7c0.93-2.71,1.57-5.5,2.53-8.19c7.77,3.13,15.27,7.09,23.21,9.66c7.7-0.96,15.33-2.35,23.11-2.61c3.53-3.04,4.48-8.31,6.5-12.45c2.56,0.42,5.03,0.82,7.64,1.26c0.93,4.39,0.97,9.42,4.13,12.93c3.77,3.77,7.84,7.73,13.27,8.84c-2.26,2.42-4.55,4.83-6.48,7.51c-0.55,3.25-0.93,6.52-1.13,9.83c3.57-2.16,7.68-3,11.79-3.44c2.33-3.44,4.73-6.82,7.14-10.21c3.52-4.73,3.61-10.92,5-16.44c0.34-0.46,1.02-1.38,1.36-1.84c0.11,0.38,0.34,1.14,0.46,1.52c0.39,5.9,0.36,11.82,0.59,17.73c0.58,0.22,1.74,0.65,2.32,0.87c2.51-2.36,2.13-6.16,2.76-9.21c1.33-7.43-0.54-15.01-1.69-22.31c-5.5-1.67-11.51-1.6-16.57-4.55c5.84-5.93,10.54-13.37,17.71-17.81c0.88-0.58,1.81-0.55,2.77,0.07c7.14,1.65,14.66,1.2,21.97,1.84c1.84-4.42,4.28-8.54,7.23-12.31c0.42-1.44,2.35-1.05,2.44,0.37c0.84,2.23,2.18,4.23,3.7,6.07c-4.17,5.31-8.48,10.49-13.43,15.09c0.47,7.37,1.65,14.67,3.36,21.85c0.76,0.01,2.28,0.04,3.04,0.05c5.11-6.79,9.88-13.92,13.45-21.65c1.55-3.07-0.6-6.21-1.42-9.16c3.15-1.99,6.47-3.78,9.42-6.09l0.49-0.41c0.91,0.25,2.74,0.73,3.65,0.98c0.94,0.28,1.89,0.56,2.85,0.84c5.1-6.6,13-10.06,21.08-11.21c-0.07-3.26-0.09-6.53,0.34-9.77c1.03-4.41,5.51-6.65,7.16-10.73c1.1-2.65,2.43-5.21,4.03-7.59C807.19,85.225,793.68,84.225,782.56,84.155z M385.7,162.815c-0.05-1.84-0.16-5.51-0.22-7.34c1.02,0.46,2.04,0.91,3.07,1.37C387.59,158.835,386.64,160.815,385.7,162.815z M394.6,173.925c-0.14-0.32-0.43-0.97-0.57-1.29C395.45,170.455,397.2,174.535,394.6,173.925z M438.12,204.965c-4.42-3.76-8.85-7.77-11.23-13.19c4.05,3.22,8.12,6.42,12.41,9.32C438.91,202.385,438.5,203.665,438.12,204.965z M444.704,121.556c0.179,3.023,0.504,6.094,0.636,9.14c1.19,2.4,2.7,4.63,4.09,6.94c-2.52,5.01-4.77,10.14-7.13,15.22c-5.5,0.7-10.72,2.77-16.23,3.35c1.14,1.52-2.28,2.63-2.17,0.7c-0.88-1.14-1.76-2.27-2.64-3.41c3.78,0.49,7.87,0.2,10.98-2.27c4.32-4.67,5.93-11.02,7.99-16.85c1.12-4.25-3.12-9.2,0.27-12.85c3.62-4.56,6.96-9.32,10.1-14.22c0.16,1.45,0.49,4.35,0.65,5.8C448.83,115.624,444.943,117.717,444.704,121.556z M454.54,132.865c0.94-1.11,2.72-1.21,4.05-0.85C460.19,133.855,454.77,134.815,454.54,132.865z M483.39,105.225c0.79,1.46,1.61,2.91,2.41,4.37c-3.5-0.36-7.11-0.62-10.28-2.27C478.12,106.565,480.75,105.865,483.39,105.225z M479.47,188.485c-1.11,1.45-3.02-0.54-1.66-1.66C478.93,185.465,480.92,187.385,479.47,188.485z M476.26,200.025c-1.23,1.23-2.44,1.22-3.64-0.01c-3.07,1.83-6.33,3.33-9.57,4.82c-0.51-2.02-1.2-4.04-1.19-6.15c1.32-3.52,3.58-6.61,5.46-9.86c4.19,5.28,11.54,2.83,16.76,6.08c2.16,2.88,4.09,5.95,5.91,9.07C485.23,203.475,480.48,202.345,476.26,200.025z M563.81,93.445c-1.04-1.29-1.04-3.57,0-4.86C565.41,89.035,565.41,92.995,563.81,93.445 M444.69,121.695c0.002-0.048,0.011-0.092,0.014-0.14c-0.011-0.173-0.025-0.348-0.034-0.521L444.69,121.695 M340.98,105.145c2.18,5.34,3.83,15.85,11.97,12.85c1.13-0.39,2.32-0.61,3.53-0.52c0.59,0.01,1.77,0.03,2.36,0.04c7,1.57,9.34-6.93,9.48-12.13C359.71,101.875,349.59,101.475,340.98,105.145 M413.6,206.395c0.53,2.06,1.9,4.81,4.19,5.07c0.56-0.03,1.68-0.08,2.25-0.11c0.35-0.23,1.05-0.68,1.4-0.9c-0.04-4.44-1.94-8.54-3.5-12.6C416.23,200.505,413.58,203.055,413.6,206.395 M450.56,221.285c-1.37,2.07-0.08,4.49,0.33,6.65c1.83-0.41,5.49-1.24,7.32-1.65C456.09,224.075,453.87,221.435,450.56,221.285z'/></svg>"
            ]];
            console.log(resp);
          }      
          
          if(path.indexOf("?geo.cat=income_groups&select=geo,geo.name,shape_lores_svg")>-1) {
            warn("WAFFLE READER: APPLYING STUB FUNCTIONALITY TO GET DATA income_groups, WHICH IS NOT YET IN WS");
            resp.rows = [[
                "lower_middle_income",
                "Lower middle income",
                null
              ],[
                "low_income",
                "Low income",
                null
              ],[
                "upper_middle_income",
                "Upper middle income",
                null
              ],[
                "high_income",
                "High income",
                null
            ]];
            console.log(resp);
          }
          
          if(path.indexOf("?geo.cat=landlocked&select=geo,geo.name,shape_lores_svg")>-1) {
            warn("WAFFLE READER: APPLYING STUB FUNCTIONALITY TO GET DATA landlocked, WHICH IS NOT YET IN WS");
            resp.rows = [[
                "landlocked",
                "Landlocked",
                null
              ],[
                "coastline",
                "Coastline",
                null
            ]];
            console.log(resp);
          }

          if(path.indexOf("?geo.cat=g77_and_oecd_countries&select=geo,geo.name,shape_lores_svg")>-1) {
            warn("WAFFLE READER: APPLYING STUB FUNCTIONALITY TO GET DATA g77_and_oecd_countries, WHICH IS NOT YET IN WS");
            resp.rows = [[
                "others",
                "Others",
                null
              ],[
                "oecd",
                "OECD",
                null
              ],[
                "g77",
                "G77",
                null
            ]];
            console.log(resp);
          }

          if(path.indexOf("?geo.cat=main_religion_2008&select=geo,geo.name,shape_lores_svg")>-1) {
            warn("WAFFLE READER: APPLYING STUB FUNCTIONALITY TO GET DATA main_religion_2008, WHICH IS NOT YET IN WS");
            resp.rows = [[
                "eastern_religions",
                "Eastern religions",
                null
              ],[
                "muslim",
                "Muslim",
                null
              ],[
                "christian",
                "Christian",
                null
            ]];
            console.log(resp);
          }

          //format data
          resp = mapRows(this._uzip(resp.data || resp), this._parsers);

          //cache and resolve
          FILE_CACHED$3[path] = resp;

          this._parse(p, query, resp);
          FILE_REQUESTED$3[path] = void 0;
        },

        _readCallbackError: function (p, path, query, resp) {
          p.reject({
            'message' : this.ERROR_NETWORK,
            'data': path
          });
        },

        _uzip: function (table) {
          var header;
          var rows = table.rows;
          var headers = table.headers;
          var result = new Array(rows.length);
          // unwrap compact data into json collection
          for (var i = 0; i < rows.length; i++) {
            result[i] = {};
            for (var headerIndex = 0; headerIndex < headers.length; headerIndex++) {
              header = headers[headerIndex];
              result[i][header] = '';
              if (!(typeof rows[i][headerIndex] == 'undefined' || rows[i][headerIndex] === null)) {
                result[i][header] = rows[i][headerIndex].toString();
              }
              if (header === 'geo.cat') {
                result[i][header] = [result[i][header]];
              }
            }
          }
          return result;
        },

        _parse: function (p, query, resp) {

          var data = resp;

          // sorting
          // one column, one direction (ascending) for now
          if(query.orderBy && data[0]) {
            if (data[0][query.orderBy]) {
              data.sort(function(a, b) {
                return a[query.orderBy] - b[query.orderBy];
              });
            } else {
              return p.reject({
                'message' : this.ERROR_ORDERING,
                'data': query.orderBy
              });
            }
          }

          this._data = data;
          p.resolve();
        }

      });

      var QueryEncoder = (function() {
        return {
          encodeQuery: encodeQuery
        };

        function encodeQuery(param) {
          return mapParams()(param);
        }

        function mapParams(depth) {
          if (!depth) {
            return _map;
          }

          return _mapRange;
        }

        function _map(v, i) {
          // if falsy value
          if (!v) {
            return v;
          }

          // if value is string or number
          if (v.toString() === v || _isNumber(v)) {
            return v;
          }

          // if value is array
          if (Array.isArray(v)) {
            return v.map(mapParams(1)).join();
          }

          if (typeof v === 'object') {
            return _toArray(v).map(mapParams(1)).join();
          }

          return v;
        }

        function _mapRange(v) {
          return encodeURI(v).replace(/,/g, ':')
        }

        function _isNumber(value) {
          return parseInt(value, 10) == value;
        }

        function _toArray(object) {
          return Object.keys(object).map(function(key) {
            if (object[key] === true) {
              return [key];
            }

            return [key, object[key]];
          })
        }
      })();

      var FILE_CACHED$2 = {}; //caches files from this reader
      var FILE_REQUESTED$2 = {}; //caches files from this reader

      var JSONReader = Reader.extend({

        /**
         * Initializes the reader.
         * @param {Object} reader_info Information about the reader
         */
        init: function(reader_info) {
          this._name = 'json';
          this._data = [];
          this._basepath = reader_info.path;
          this._parsers = reader_info.parsers;
          if(!this._basepath) {
            error$1("Missing base path for json reader");
          };
        },

        /**
         * Reads from source
         * @param {Object} query to be performed
         * @param {String} language language
         * @returns a promise that will be resolved when data is read
         */
        read: function(query, language) {
          var _this = this;
          var p = new Promise();

          //this specific reader has support for the tag {{LANGUAGE}}
          var path = this._basepath.replace("{{LANGUAGE}}", language);
          _this._data = [];

          (function(query, p) {

            //if cached, retrieve and parse
            if(FILE_CACHED$2.hasOwnProperty(path)) {
              parse(FILE_CACHED$2[path]);
            }
            //if requested by another hook, wait for the response
            else if(FILE_REQUESTED$2.hasOwnProperty(path)) {
              FILE_REQUESTED$2[path].then(function() {
                parse(FILE_CACHED$2[path]);
              });
            }
            //if not, request and parse
            else {
              d3.json(path, function(error, res) {

                if(!res) {
                  error$1("No permissions or empty file: " + path, error);
                  return;
                }

                if(error) {
                  error$1("Error Happened While Loading JSON File: " + path, error);
                  return;
                }
                //fix JSON response
                res = format(res);

                //cache and resolve
                FILE_CACHED$2[path] = res;
                FILE_REQUESTED$2[path].resolve();
                FILE_REQUESTED$2[path] = void 0;

                parse(res);
              });
              FILE_REQUESTED$2[path] = new Promise();
            }

            function format(res) {
              //TODO: Improve local json filtering
              //make category an array and fix missing regions
              res = res[0].map(function(row) {
                row['geo.cat'] = [row['geo.cat']];
                row['geo.world_4region'] = row['geo.world_4region'] || row['geo'];
                return row;
              });

              //format data
              res = mapRows(res, _this._parsers);

              //TODO: fix this hack with appropriate ORDER BY
              //order by formatted
              //sort records by time
              var keys = Object.keys(_this._parsers);
              var order_by = keys[0];
              res.sort(function(a, b) {
                return a[order_by] - b[order_by];
              });
              //end of hack

              return res;
            }

            function parse(res) {
              var data = res;
              //rename geo.category to geo.cat
              var where = query.where;
              if(where['geo.category']) {
                where['geo.cat'] = clone(where['geo.category']);
                where['geo.category'] = void 0;
              }

              //format values in the dataset and filters
              where = mapRows([where], _this._parsers)[0];

              //make sure conditions don't contain invalid conditions
              var validConditions = [];
              forEach(where, function(v, p) {
                for(var i = 0, s = data.length; i < s; i++) {
                  if(data[i].hasOwnProperty(p)) {
                    validConditions.push(p);
                    return true;
                  }
                };
              });
              //only use valid conditions
              where = clone(where, validConditions);

              data = filterAny(data, where);

              //warn if filtering returns empty array
              if(data.length == 0) {
                p.reject("data reader returns empty array, that's bad");
                return;
              }

              //only selected items get returned
              data = data.map(function(row) {
                return clone(row, query.select);
              });

              _this._data = data;

              p.resolve();
            }

          })(query, p);

          return p;
        },

        /**
         * Gets the data
         * @returns all data
         */
        getData: function() {
          return this._data;
        }
      });

      /*!
       * Inline Reader
       * the simplest reader possible
       */

      var InlineReader = Reader.extend({
          init: function (reader_info) {
            this.name = "inline";
            this._super(reader_info);
          }
        });

      var FILE_CACHED$1 = {}; //caches files from this reader
      var FILE_REQUESTED$1 = {}; //caches files from this reader
      // temporal hack for https problem

      var GraphReader = Reader.extend({

        /**
         * Initializes the reader.
         * @param {Object} reader_info Information about the reader
         */
        init: function (reader_info) {
          this._name = 'graph';
          this._data = [];
          this._basepath = reader_info.path;
          this._parsers = reader_info.parsers;
          if (!this._basepath) {
            error$1("Missing base path for graph reader");
          }
        },

        /**
         * Reads from source
         * @param {Object} query to be performed
         * @param {String} language language
         * @returns a promise that will be resolved when data is read
         */
        read: function (query, language) {
          var _this = this;
          var p = new Promise();
          var path = this._basepath;
          //format time query if existing
          if (query.where.time) {
            var time = query.where.time[0];
            var t = typeof time.join !== 'undefined' && time.length === 2 ?
              // {from: time, to: time}
              JSON.stringify({from: getYear(time[0]), to: getYear(time[1])}) :
              getYear(time[0]);
            path += '?time=' + t;
          }

          function getYear(time) {
            if (typeof time === 'string') {
              return time;
            }

            return time.getUTCFullYear();
          }

          _this._data = [];

          (function (query, p) {
            //if cached, retrieve and parse
            if (FILE_CACHED$1.hasOwnProperty(path)) {
              parse(FILE_CACHED$1[path]);
              return p;
            }
            //if requested by another hook, wait for the response
            if (FILE_REQUESTED$1.hasOwnProperty(path)) {
              FILE_REQUESTED$1[path].then(function () {
                parse(FILE_CACHED$1[path]);
              });
              return p;
            }
            //if not, request and parse
            FILE_REQUESTED$1[path] = new Promise();
            get(path, [], onSuccess, console.error.bind(console), true);
            function onSuccess(resp) {
              if (!resp) {
                error$1("Empty json: " + path, error);
                return;
              }

              resp = format(uzip(resp.data));
              //cache and resolve
              FILE_CACHED$1[path] = resp;
              FILE_REQUESTED$1[path].resolve();
              FILE_REQUESTED$1[path] = void 0;

              parse(resp);
            }

            return p;

            function uzip(table) {
              var rows = table.rows;
              var headers = table.headers;
              var result = new Array(rows.length);
              // unwrap compact data into json collection
              for (var i = 0; i < rows.length; i++) {
                result[i] = {};
                for (var j = 0; j < headers.length; j++) {
                  result[i][headers[j]] = (rows[i][j] || '').toString();
                  if (headers[j] === 'geo.cat') {
                    result[i][headers[j]] = [result[i][headers[j]]];
                  }
                }
              }
              return result;
            }

            function format(res) {
              //format data
              res = mapRows(res, _this._parsers);

              //TODO: fix this hack with appropriate ORDER BY
              //order by formatted
              //sort records by time
              var keys = Object.keys(_this._parsers);
              var order_by = keys[0];
              res.sort(function (a, b) {
                return a[order_by] - b[order_by];
              });
              //end of hack

              return res;
            }

            function parse(res) {

              var data = res;
              //rename geo.category to geo.cat
              var where = query.where;
              if (where['geo.category']) {
                where['geo.cat'] = clone(where['geo.category']);
                delete where['geo.category'];
              }

              //format values in the dataset and filters
              where = mapRows([where], _this._parsers)[0];

              //make sure conditions don't contain invalid conditions
              var validConditions = [];
              forEach(where, function (v, p) {
                for (var i = 0, s = data.length; i < s; i++) {
                  if (data[i].hasOwnProperty(p)) {
                    validConditions.push(p);
                    return true;
                  }
                }
              });
              //only use valid conditions
              where = clone(where, validConditions);

              //filter any rows that match where condition
              data = filterAny(data, where);

              //warn if filtering returns empty array
              if (data.length === 0) warn("data reader returns empty array, that's bad");

              //only selected items get returned
              data = data.map(function (row) {
                return clone(row, query.select);
              });
              _this._data = data;
              p.resolve();
            }

          })(query, p);

          return p;
        },

        /**
         * Gets the data
         * @returns all data
         */
        getData: function () {
          return this._data;
        }
      });

      var index = null;
      var concepts = null;
      var conceptTypeHash = {};
      var entities = [];

      function Ddf(ddfPath) {
        this.ddfPath = ddfPath;

        if (this.ddfPath[this.ddfPath.length - 1] !== '/') {
          this.ddfPath += '/';
        }

        var parser = document.createElement('a');
        parser.href = ddfPath;
      }

      Ddf.prototype.reset = function () {
        index = null;
        concepts = [];
        conceptTypeHash = {};
        entities = [];
        CACHE.FILE_CACHED = {};
        CACHE.FILE_REQUESTED = {};
      };

      Ddf.prototype.getIndex = function (cb) {
        var indexFileName = this.ddfPath + 'ddf--index.csv';
        var indexAction = load(indexFileName);

        indexAction.then(function () {
          index = CACHE.FILE_CACHED[indexFileName];

          cb(null, index);
        }, function (err) {
          cb(err);
        });
      };

      Ddf.prototype.getConceptFileNames = function () {
        var _this = this;
        var result = [];

        if(index) {
          index.forEach(function (indexRecord) {
            if (indexRecord.key === 'concept') {
              result.push(_this.ddfPath + indexRecord.file);
            }
          });
        }

        return unique(result);
      };

      function getSelectParts(query) {
        return query.select.map(function (selectPart) {
          var pos = selectPart.indexOf('.');

          return pos >= 0 ? selectPart.substr(pos + 1) : selectPart;
        });
      }

      function getWhereParts(query) {
        var whereParts = [];

        for (var whereKey in query.where) {
          if (query.where.hasOwnProperty(whereKey)) {
            var pos = whereKey.indexOf('.');
            var value = pos >= 0 ? whereKey.substr(pos + 1) : whereKey;

            value = value.replace(/is--/, '');
            whereParts.push(value);
          }
        }

        return whereParts;
      }

      Ddf.prototype.getEntitySetsByQuery = function (query) {
        if (!query || !query.select || !query.where) {
          return 'Wrong entities query; it should contain "select" and "where" fields';
        }

        var selectPartsEntitySets = getSelectParts(query).filter(function (part) {
          return conceptTypeHash[part] === 'entity_set';
        });

        var wherePartsEntitySets = getWhereParts(query).filter(function (part) {
          return conceptTypeHash[part] === 'entity_set';
        });

        return wherePartsEntitySets.length > 0 ? wherePartsEntitySets : selectPartsEntitySets;
      };

      Ddf.prototype.getEntityFileNames = function (query) {
        var _this = this;
        var result = [];
        var expectedEntities = this.getEntitySetsByQuery(query);

        if (typeof expectedEntities === 'string') {
          return expectedEntities;
        }

        if(index) {
          index.forEach(function (indexRecord) {
            if (expectedEntities.indexOf(indexRecord.key) >= 0) {
              result.push(_this.ddfPath + indexRecord.file);
            }
          });
        }

        return unique(result);
      };

      // this method detects kind of particular entity file
      Ddf.prototype.getHeaderDescriptor = function (select, firstRecord) {
        var count = 0;
        var convert = {};

        // following code answers next question:
        // `Is this set of entities contains all of selectable concepts?`
        // or `Is this entities file good for given query?`

        if(firstRecord) {
          select.map(function (field) {
            // headers should not contain data before `.`
            var pos = field.indexOf('.');
            var _field = pos >= 0 ? field.substr(pos + 1) : field;

            if (firstRecord[_field]) {
              convert[_field] = field;
              count++;
            }
          });
        }

        // todo: remove this ugly hack later
        convert.latitude = 'geo.latitude';
        convert.longitude = 'geo.longitude';

        return {
          // this entity file is expected for future processing
          // if at least one criteria was matched
          needed: count > 0,
          convert: convert
        };
      };

      Ddf.prototype.applyFilter = function (record, filter) {
        var matches = 0;

        for (var k in filter) {
          if (filter.hasOwnProperty(k)) {
            var pos = k.indexOf('.');
            var normConcept = pos >= 0 ? k.substr(pos + 1) : k;

            if (!record[normConcept]) {
              continue;
            }

            if (record[normConcept].toUpperCase() ===
              filter[k].toString().toUpperCase()) {
              matches++;
            }
          }
        }

        return Object.keys(filter).length === matches;
      };

      // get information for entity correction by filter
      // for example rule `geo.is--country: true` will be generate pair: `geo: "country"`
      // it will be needed when geo column in the entity css is 'country', but Vizabi expects only "geo"
      Ddf.prototype.getFilterConvertPairs = function (filter) {
        var result = {};

        for (var k in filter) {
          if (filter.hasOwnProperty(k)) {
            var pos = k.indexOf('.');
            if (pos >= 0) {
              result[k.substr(0, pos)] = k.substr(pos).replace(/^.is--/, '');
            }
          }
        }

        return result;
      };

      Ddf.prototype.normalizeAndFilter = function (headerDescriptor, content, filter) {
        var _this = this;
        var result = [];
        var convertPairs = _this.getFilterConvertPairs(filter);

        content.forEach(function (record) {
          if (!_this.applyFilter(record, filter)) {
            return;
          }

          var _record = {};

          for (var field in record) {
            if (record.hasOwnProperty(field)) {
              // get filtered data with expected prefix
              // for example, correct:
              // transform (in `geo` file) column `name` to `geo.name` field in `Vizabi's data`
              var _field = headerDescriptor.convert[field];

              // add Vizabi oriented data if related concepts are not same in the csv file
              for (var convertPairKey in convertPairs) {
                if (convertPairs.hasOwnProperty(convertPairKey) && record[convertPairs[convertPairKey]]) {
                  _record[convertPairKey] = record[convertPairs[convertPairKey]];
                }
              }

              if (_field) {
                _record[_field] = record[field];
              }
            }
          }

          result.push(_record);
        });

        return result;
      };

      Ddf.prototype.getEntities = function (query, cb) {
        var _this = this;
        var entityActions = [];
        var entityFileNames = _this.getEntityFileNames(query);

        if (typeof entityFileNames === 'string') {
          return cb(entityFileNames);
        }

        entityFileNames.forEach(function (fileName) {
          entityActions.push(load(fileName));
        });

        if(!entityActions.length) {
          cb([]);
        }

        // secondly we should get entities
        Promise.all(entityActions).then(function () {
          var _entities = [];

          Object.keys(CACHE.FILE_CACHED).forEach(function (fileName) {
            if (entityFileNames.indexOf(fileName) >= 0) {
              if(CACHE.FILE_CACHED[fileName] && CACHE.FILE_CACHED[fileName][0]) {
                var headerDescriptor = _this.getHeaderDescriptor(query.select, CACHE.FILE_CACHED[fileName][0]);
                // apply filter only for entities?
                if (headerDescriptor.needed === true) {
                  _entities = _entities
                    .concat(_this.normalizeAndFilter(headerDescriptor, CACHE.FILE_CACHED[fileName], query.where));
                }
              }
            }
          });

          if (_entities.length > 0) {
            entities = _entities;
          }

          cb(null, entities);
        }, function (err) {
          cb(err);
        });
      };

      Ddf.prototype.getConcepts = function (query, cb) {
        var _this = this;
        var conceptActions = [];
        var conceptFileNames = _this.getConceptFileNames();

        if(!conceptFileNames.length) {
          cb(conceptActions);
        }

        conceptFileNames.forEach(function (fileName) {
          conceptActions.push(load(fileName));
        });

        // first of all we need concepts
        Promise.all(conceptActions).then(function () {
          var _concepts = [];

          Object.keys(CACHE.FILE_CACHED).forEach(function (fileName) {
            if (conceptFileNames.indexOf(fileName) >= 0) {
              _concepts = _concepts.concat(CACHE.FILE_CACHED[fileName]);
            }
          });

          if (_concepts.length > 0) {
            concepts = _concepts;
            concepts.forEach(function (concept) {
              var splittedConcepts = concept.concept.split(/,/);

              splittedConcepts.forEach(function (splittedConcept) {
                conceptTypeHash[splittedConcept] = concept.concept_type;
              });
            });
          }

          cb(null, concepts);
        }, function (err) {
          cb(err);
        });
      };

      Ddf.prototype.getConceptsAndEntities = function (query, cb) {
        var _this = this;

        _this.getConcepts(query, function (err, concepts) {
          if (err) {
            return cb(err);
          }

          _this.getEntities(query, function (err, entities) {
            cb(err, concepts, entities);
          });
        });
      };

      // extract measures and other concept names from query
      Ddf.prototype.divideByQuery = function (query) {
        var measures = [];
        var other = [];

        query.select.forEach(function (partOfSelect) {
          if (conceptTypeHash[partOfSelect] === 'measure') {
            measures.push(partOfSelect);
          }

          if (conceptTypeHash[partOfSelect] !== 'measure') {
            other.push(partOfSelect);
          }
        });

        return {
          measures: measures,
          other: other
        };
      };

      Ddf.prototype.getDataPointDescriptorsByIndex = function (query) {
        var _this = this;
        var descriptors = [];
        var fileNames = [];

        if (index) {
          index.forEach(function (indexRecord) {
            if (conceptTypeHash[indexRecord.value] === 'measure') {
              var other = indexRecord.key.split(/,/);
              var parts = other.concat(indexRecord.value);
              var founded = 0;

              parts.forEach(function (part) {
                if (query.select.indexOf(part) >= 0) {
                  founded++;
                }
              });

              if (founded === parts.length) {
                fileNames.push(_this.ddfPath + indexRecord.file);
                descriptors.push({
                  fileName: _this.ddfPath + indexRecord.file,
                  measures: [indexRecord.value],
                  // only one measure should be present in DDF1 data point in case of Vizabi using?
                  measure: indexRecord.value,
                  other: other
                });
              }
            }
          });
        }

        return {
          descriptors: descriptors,
          fileNames: fileNames
        };
      };

      // data points descriptors will be used for data points content loading
      Ddf.prototype.getDataPointDescriptors = function (query) {
        this.categorizedQuery = this.divideByQuery(query);
        var descResultByIndex = this.getDataPointDescriptorsByIndex(query);
        var result = descResultByIndex.descriptors;
        return result;
      };

      // get data points source
      Ddf.prototype.getDataPointsContent = function (query, cb) {
        var _this = this;
        var actions = [];

        this.dataPointDescriptors = this.getDataPointDescriptors(query);

        this.dataPointDescriptors.forEach(function (dataPointDescriptor) {
          actions.push(load(dataPointDescriptor.fileName));
        });

        if(!actions.length) {
          return cb();
        }

        Promise.all(actions).then(function () {
          _this.dataPointDescriptors.forEach(function (dataPointDescriptor) {
            dataPointDescriptor.content = CACHE.FILE_CACHED[dataPointDescriptor.fileName];
          });

          cb();
        }, function (err) {
          cb(err);
        });
      };

      Ddf.prototype.getExpectedConcept = function (type) {
        for (var i = 0; i < concepts.length; i++) {
          if (this.categorizedQuery.other.indexOf(concepts[i].concept) >= 0 &&
            concepts[i].concept_type === type) {
            return concepts[i].concept;
          }
        }

        return null;
      };

      Ddf.prototype.getTimeConcept = function () {
        return this.getExpectedConcept('time');
      };

      Ddf.prototype.getEntityDomainConcept = function () {
        return this.getExpectedConcept('entity_domain');
      };

      // get data points data (for reader)
      Ddf.prototype.getDataPoints = function (query, cb) {
        var _this = this;

        _this.getDataPointsContent(query, function (err) {
          if (err) {
            return cb(err);
          }

          var entityDomainConcept = _this.getEntityDomainConcept();
          var timeConcept = _this.getTimeConcept();

          // fill hash (measure by entity_domain and time)
          _this.dataPointDescriptors.forEach(function (pointDescriptor) {
            pointDescriptor.contentHash = {};

            pointDescriptor.content.forEach(function (record) {
              if (!pointDescriptor.contentHash[record[entityDomainConcept]]) {
                pointDescriptor.contentHash[record[entityDomainConcept]] = {};
              }

              pointDescriptor.contentHash[record[entityDomainConcept]][record[timeConcept]] =
                record[pointDescriptor.measure];
            });
          });

          var result = [];
          // get range for entity_domain
          var entityDomainValues = getExpectedEntityDomainValues(_this.getEntityDomainConcept());
          // get range for time
          var timeRangeValues = getTimeRange(query.where[_this.getTimeConcept()]);

          // fill data points data
          entityDomainValues.forEach(function (entity) {
            timeRangeValues.forEach(function (time) {
              var record = {};

              // record (row)
              record[entityDomainConcept] = entity;
              record[timeConcept] = new Date(time);

              // add measures
              var count = 0;
              _this.dataPointDescriptors.forEach(function (pointDescriptor) {
                if (pointDescriptor.contentHash[entity] && pointDescriptor.contentHash[entity][time]) {
                  record[pointDescriptor.measure] = Number(pointDescriptor.contentHash[entity][time]);
                  count++;
                }
              });

              if (count === _this.dataPointDescriptors.length) {
                result.push(record);
              }
            });
          });

          cb(err, result);
        });
      };

      Ddf.prototype.cachedFileExists = function (path) {
        return typeof CACHE.FILE_CACHED[path] != 'undefined';
      };

      //// csv utils

      var EVALALLOWED = null;

      var CACHE = {
        FILE_CACHED: {},
        FILE_REQUESTED: {}
      };

      function defineEvalAllowed() {
        try {
          new Function("", "");
          EVALALLOWED = true;
        } catch (ignore) {
          // Content-Security-Policy does not allow "unsafe-eval".
          EVALALLOWED = false;
        }
      }

      // parsing csv string to an object, circumventing d3.parse which uses eval unsafe new Function() which doesn't comply with CSP
      // https://developer.chrome.com/apps/contentSecurityPolicy
      // https://github.com/mbostock/d3/pull/1910
      function csvToObject(res) {
        var header;
        return (res == null) ? null : d3.csv.parseRows(res, function (row, i) {
          if (i) {
            var o = {}, j = -1, m = header.length;
            while (++j < m) o[header[j]] = row[j];
            return o;
          }
          header = row;
        });
      }

      function load(path) {
        if (CACHE.FILE_REQUESTED[path]) {
          return CACHE.FILE_REQUESTED[path];
        }

        CACHE.FILE_REQUESTED[path] = new Promise();

        // checks if eval() statements are allowed. They are needed for fast parsing by D3.
        if (EVALALLOWED == null) {
          defineEvalAllowed();
        }

        // true:  load using csv, which uses d3.csv.parse, is faster but doesn't comply with CSP
        // false: load using text and d3.csv.parseRows to circumvent d3.csv.parse and comply with CSP
        var loader = (EVALALLOWED) ? d3.csv : d3.text;
        var parser = (EVALALLOWED) ? null : csvToObject;

        if (Ddf.chromeFs) {
          loader = function (path, cb) {
            Ddf.chromeFs.readFile(path, '', function (err, file) {
              cb(err, file);
            });
          };
          parser = csvToObject;
        }

        loader(path, function (error, res) {
          var reason;

          if (!res) {
            reason = 'No permissions or empty file: ' + path + ': ' + error.message;
            error$1(reason);

            CACHE.FILE_CACHED[path] = null;
            CACHE.FILE_REQUESTED[path].reject(reason);
            return;
          }

          if (error) {
            reason = 'Error Happened While Loading CSV File: ' + path + ': ' + error.message;
            error$1(reason);

            CACHE.FILE_CACHED[path] = null;
            CACHE.FILE_REQUESTED[path].reject(reason);
            return;
          }

          if (parser) {
            res = parser(res);
          }

          CACHE.FILE_CACHED[path] = res;
          CACHE.FILE_REQUESTED[path].resolve();
        });

        return CACHE.FILE_REQUESTED[path];
      }

      //// time utils

      function flatten(arr) {
        arr = arr || [];
        return arr.reduce(function (prev, cur) {
          var more = [].concat(cur).some(Array.isArray);
          return prev.concat(more ? cur.flatten() : cur);
        }, []);
      }

      function getUnique(arr) {
        var u = {};
        var a = [];
        for (var i = 0, l = arr.length; i < l; ++i) {
          if (u.hasOwnProperty(arr[i])) {
            continue;
          }

          a.push(arr[i]);
          u[arr[i]] = 1;
        }
        return a;
      }

      var TIME_TYPE_PATTERN = [
        // year
        /^(\d{4})$/,
        // quarter
        /^(\d{4})q(\d{1})$/,
        // month
        /^(\d{4})(\d{2})$/,
        // week
        /^(\d{4})w(\d{1,2})$/,
        // date
        /^(\d{4})(\d{2})(\d{2})$/
      ];

      function extractLocalTimeRange(type) {
        function parse(option) {
          var match1 = TIME_TYPE_PATTERN[type].exec(option[0]);
          var match2 = TIME_TYPE_PATTERN[type].exec(option[1]);

          return {
            first: [match1[1], match1[2], match1[3]],
            second: [match2[1], match2[2], match2[3]]
          };
        }

        function getTypicalRange(option, minLimit, maxLimit, divider, isFullV) {
          var parsed = parse(option);
          var sYear = Number(parsed.first[0]);
          var v1 = Number(parsed.first[1]);
          var fYear = Number(parsed.second[0]);
          var v2 = Number(parsed.second[1]);

          var result = [];
          for (var year = sYear; year <= fYear; year++) {
            var sV = year === sYear ? v1 : minLimit;
            var fV = year === fYear ? v2 : maxLimit;
            for (var v = sV; v <= fV; v++) {
              if (isFullV === true && v < 10) {
                v = '0' + v;
              }

              result.push(year + divider + v);
            }
          }

          return result;
        }

        var options = [
          function year(option) {
            var parsed = parse(option);
            var sYear = Number(parsed.first[0]);
            var fYear = Number(parsed.second[0]);

            var result = [];
            for (var year = sYear; year <= fYear; year++) {
              result.push('' + year);
            }

            return result;
          },
          function quarter(option) {
            return getTypicalRange(option, 1, 4, 'q', false);
          },
          function month(option) {
            return getTypicalRange(option, 1, 12, '', true);
          },
          function week(option) {
            return getTypicalRange(option, 1, 53, 'w', true);
          },
          function date(option) {
            var parsed = parse(option);
            var sYear = Number(parsed.first[0]);
            var month1 = Number(parsed.first[1]);
            var day1 = Number(parsed.first[2]);
            var fYear = Number(parsed.second[0]);
            var month2 = Number(parsed.second[1]);
            var day2 = Number(parsed.second[2]);

            var result = [];
            for (var year = sYear; year <= fYear; year++) {
              var sMonth = year === sYear ? month1 : 1;
              var fMonth = year === fYear ? month2 : 12;
              for (var month = sMonth; month <= fMonth; month++) {
                var monthStr = month < 10 ? '0' + month : month;
                var sDay = (year === sYear && month === sMonth) ? day1 : 1;
                var fDay = (year === fYear && month === fMonth) ? day2 : 31;

                for (var day = sDay; day <= fDay; day++) {
                  var dayStr = day < 10 ? '0' + day : day;

                  result.push(year + '' + monthStr + '' + dayStr);
                }
              }
            }

            return result;
          }
        ];

        return options[type];
      }

      function detectTimeType(timeQuery) {
        var flat = flatten(timeQuery);
        var types = [];
        for (var i = 0; i < flat.length; i++) {
          for (var j = 0; j < TIME_TYPE_PATTERN.length; j++) {
            if (TIME_TYPE_PATTERN[j].test(flat[i])) {
              types.push(j);
              break;
            }
          }
        }

        types = getUnique(types);

        if (types.length !== 1) {
          throw new Error('Wrong time query format: ' + JSON.stringify(timeQuery));
        }

        return types[0];
      }

      function getTimeRange(query) {
        var type = detectTimeType(query);
        var extractor = extractLocalTimeRange(type);
        var result = [];

        query.forEach(function (option) {
          if (typeof option === 'string') {
            result.push(option);
          }

          if (typeof option === 'object') {
            result = result.concat(extractor(option));
          }
        });

        return result;
      }

      //// entity set utils

      function getExpectedEntityDomainValues(entityName) {
        return entities.map(function (entity) {
          return entity[entityName];
        })
      }

      function getShapes(geoCat) {
        var shapes = {
          world_4region: [[
            "africa",
            "Africa",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='africa' d='M322.7,114.7l-1-1.8l-6.5,2.3l-16-4.8l-2.3,1.7l-1.8,4.5l-16.9-8.6l-0.2-0.6l-0.3-5.5l-2-2.8l-29,4.4l-0.2-0.4 l-1.7,0.2l-0.1,1.1l-6.7,7l-0.5,1.9l-0.6,0.7l-0.3,3.3l-15.3,23.7l0.6,13.2l-1.4,3l1.1,7.6l12.1,17.9l6,2.8l7.1-1.9l4.5,0.8 l13.7-3.3l3.9,4.5h3.5l1.6,1.4l1.8,3.6l-1.1,10.7l9.2,27.4l-4,14.6l8.5,30.7l1.1,1.1v0.7h0.5l3.5,12.5l2,1.7l11.9-0.6l15-18.2v-3.9 l5.1-4.5l1.1-4.2l-1.1-5.9l10.5-12.2l0.6-0.3l1.6-3.7l-3.4-24l25-43.3l-13.1,1.1l-1.8-1.1l-24.7-48.6l0.9-0.4l0.6-1L322.7,114.7  M360.1,233.2l2.3,1.7l-8.6,30.5l-4.3-0.6l-2-7.6l2.8-14.6l6.4-4.4l2.8-4.9L360.1,233.2z'/></svg>"
          ], [
            "americas",
            "Americas",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='americas' d='M134.8,152l-11.4,1.8l-3.1-1.7l5.3-1.3l-0.7-1.1l-3.3-1.4h-0.1l-8.1-0.9l-0.3-0.3l-0.3-1.5l-6.2-3.6l-3.4,0.8 l-1.6,1.3l-1.2-0.5l-0.7-1.7l3.8-1.6l9.1,0.7l9.5,5.3l0,0l3.3,1.8l1.7-0.5l6.6,2.8L134.8,152 M183.7,25.4l-0.5-1.5l-2.6-2.2 l-2.1-0.6l-2.9-2.2l-18.2-2.2l-5.1,3.7l2,4.3l-6,2.2l1-1.7l-4.6-1.9l-0.5-1.7l-1.1-1.2l-2.9,0.5l-2.1,4.2l-5.8,2.5l-15.5-2.2 l10.5-1.7l-1.3-4l-11.6-0.4l-3.2-1.5L96,20.7h5.8l4,1.9l-1.7,1l0.8,1l7.2,2.3l-78.9-5.3l-10,3.6l-0.4,4.4L18,31.1l1,1.8l1.7,1.2 l-5.5,4.5l-0.4,5.6L13.8,46l1.8,1.8l-4.4,6.2L22,43.7l1.8-0.5l1.3-1.2l13.4,4l4,4.2l-1.3,14l1.6,2.6l-3.3,1.3L39.4,70l2.7,2.6 L28.6,96.9l1.6,11.2l4.8,5.6l-0.2,3.4l2.5,6.1l-0.5,5l6.6,11.9L38,121.5l1.7-4l3.4,6.1l0.3,2.2l7.1,13.1l1.1,9.2l11.1,8.7l1.6,0.3 l1.3,0.9l5.5,1.2l3.4-0.9l5.5,4.2l0.3,0.5l0.8,0.3l2.1,1.9l5.5,0.5l0.2,0.6l0.8,0.3l4.8,8.9l2.3,1.5l0.2,0.5l7.1,3.4l1.6-1.7 l-5.1-2.2l-1.3-15.6l-6.3-2.2l-3.7,0.3v-4.6l3.7-8.9l-5.2-0.9l-0.5,0.3L83,151l-6.3,2.2l-4-2.8l-3.2-8.9l3.2-11.8l0.5-0.3l0.2-1.2 l2.6-3.1l8.5-3.6l6.3,1.8l4.5-3.1l9.2,1.1l2.5,3.1l1.5,7.8l1.3,1.8l2.1-4.5l-1.1-5l1.6-7l13.7-12.3l0.2-3.7l0.8-1.7l0.9-0.2l0.7,0.5 l0.6-1.9l15-8.8l2.2-3.9l11.9-5.1l-2.2,3.6l11.4-3.8l-5.2-1.7l-1.8-2.8l1.6-4.2l-0.8-0.9h-4.2l0.8-1.5l19.5-3.2l1.6,2.8l-4.5,4.2 l6,1.7l5.3-2.2l-6.3-7.6l4.5-6.1l-1.1-0.6l-0.2-0.5h-3.2l-3.7-13.4l-7.7,3.1l-1.8-1.9l0.2-3.9l-2.3-2.5l-3.4-1.5l-6.6,1.9l-2.1,4.2 l-1.1,0.6l-1.3,2.2l-0.3,3.4l-10,9.5l-0.8,2.8l-1.8,1.9l-2.1,0.3l-1.8-2.5l1.1-4.8l-11.9-6.1l-3.1-5.1l15-12l1.3,0.3l5.1-1.2 l1.1-1.2l0.4-1.2l3.4-0.3l-1.7,4.8L147,34l4.6,0.7l-2.2-2.9l-2.1-1.2l8.2-2.8l0.3-0.6l2-1.7l0.7,0.1l8.1-4.2l7.4,5.3l0.2,1.5l-6,1.5 l-1.8,2.2l3.7,5.3l3.4,1.2l2.3-2.2l2.9-1.2L179,33l-0.2-1.9l7.7-1.7L183.7,25.4 M119.7,74.5l0.8,3.1l1.7,1.8l3.3-0.2l5.4,4.7 l2.7,0.2l-0.5,1.7l-4.7-0.4l0.2-1.2l-2.6-0.9l-2,0.6l-2.6,3.4l3.1,1.7l-3.2,2.3l-2.6-1.2l0.1-9.3l-9.6,9.9L108,88l4.5-7l4.3-2 l-5.1-2.1l-4.8,0.5l0.2-1.7l1.3-1.2l8.7-2.2L119.7,74.5 M205.9,223.1l-1.3,3.1H204l-7.1,11.2l-1.9,18.2l-3.1,6.1h-0.5v0.6l-0.8,0.3 l-1.1,1.2l-2.7-0.3l-9.4,6.7l-7.7,21.6l-3.9,3.3l-5.1-1.1l2.1,3.3l0.5,5.3l-7.9,3.3l-1.4,1.5l-0.5,3.6l-1.1,0.6l-1.1-0.3l-1.8,0.9 l1.8,6.1l-1.8,5.6l3.4,6.1l-2,5.9l0.5,3.1l11.1,8.2l-0.2,0.5l-9.3-0.6l-4.3-5.1l-4.7-1.7l-8.6-17.1l0.5-1.7l-6-12.3l-4.5-56.7 l-12.4-10.2l-4.2-8.1l-0.8-0.6l-9.8-21.5l1.1-2.2l-0.3-2.6l-0.5-0.8l7.9-15.3l0.3-5.6l-1-2.8l1-3.9l1.8-0.3l9.7-8.2l2.1,0.3l0.8,5.1 l2.7-5.1l1.3-0.3l4.2,2.8h0.9l0.2,0.6l14.8,3.9l1.6,1.4l0.3,0.6l7.9,6.7l7.7,0.9l4.3,4l2,6.3l-1,4.6l4.4,1.4l1.1,2.2l5.2-1.1 l2.1,1.1l2.6,4l2.9-0.9l9,1.9l8.6,5.8L205.9,223.1'/></svg>"
          ], [
            "asia",
            "Asia",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='asia' d='M322.9,118.9l22.8,42.5l13.5-5.9l16.8-19l-7.3-6.5l-0.7-3.4h-0.1l-5.7,5.2l-0.9,0.1l-3.2-4.4l-0.4-0.2l-0.7,1.7 l-1.2-0.4l-4.1-11.4l0.2-0.5l1.9-1.2l5.1,6.8l6.2,2.7l0.8-0.2l1.1-1.1l1.6,0.4l2.9,2.6l0.4,0.8l16.4,0.8l6.9,6.5l0.4,0.1l1.4-0.3 l0.3,0.1l-1.7,2.5l2.9,2.8h0.7l3.3-3.3l0.5,0.3l9.2,32.1l4,3.7l1.3-1.3h0.2l1.7,1.3l1.4,6.6l1.6,0.9l1.7-2.9l-2.3-7.3l-0.1,0.3v-0.2 l-1.7,0.6l-1.3-1.1l1.2-14.3l14.3-17.6l5.9-1.7l0.3,0.1l3.1,4.5l0.8,0.2l0.9,1.5l0.8,0.3l4.7,10.3l0.2,0.1l2-0.6l5.4,10.1l-0.3,10.5 l2.8,3.7l0,0l4.2,10.8l1.8,1.7l-1.1,2.4l-0.8-0.6l-1.9-4l-1.7-1.4l-0.3-0.9l-5.5-3.5l-2.4-0.3l-0.2,1.2l19.8,28.5l2.6-3.6l-5.7-11.2 l0.9-4l0.7-0.2l0.2-2.3l-9.3-18.6l-0.3-8.9l1.4-1.5l6.7,7.8l1.4,0.3l1.1-0.6l0.1,0.1l-0.2,3.4l0.6,0.5l0.5,0.2l7.4-7.9l-2-10.4 l-6.9-9.5l4.9-6l0.8,0.2l0.8,0.5l1.7,3.9l2.9-4.7l10.1-3.6l5.1-8.1l1.6-9.9l-2.5-2l1.1-1.7l-7.5-11.5l3.5-4.7l-6.1-0.9l-3.5-3.7 l4.1-4.3l0.8-0.1l1.4,0.9l0.6,2.9l2.8-1.3l3.9,1.4l0.9,3.2l2.3,0.5l5,9h0.4l2.3-2.4h0.3l1-1.5l-1.7-3.8l-5.8-5.9l2.1-4v-3.6l2.6-2.4 l0.5,0.1l0.2-0.1l-3.5-15.2l-0.2,0.1v-0.1l-9.3,1.2l-7.3-9.3L464,58.8l-0.8,1.9L441.2,60l-1.5-1.8l-0.2,0.1l0,0l-7.3,4.1l-7.5-3 l-0.5,0.3l-1.8-0.8l-0.9-1.2l-0.3,0.1l-0.1-0.1l-5.7-0.4l-0.3-0.2l0,0l0,0l-1,0.5l-1.5,4.5l-4.2,2.7l-16.8-4.4L377.5,50l0,0l-0.2,1 l1.8,6.7l-13.3,3l-9.2-3.8l-1.1,3.1l-6.7-1.6l-0.1,0.1h-0.2l-4.4,6.8l3.8,3.8l0.6,2.7l0,0l0,0L352,71l2.6,2.2V74l-2.3,1.9l-0.8,1.6 l1.6,3.9l0.9,0.3l1,1.1l2.6,0.9l1.7,1.7l-0.2,1.1l-1.5,2.8l2.1,3.7v4.5l-1.3,1.4l-3.8-0.9l-4.7-5.1v-0.6l-1.4-1.4l-3.9,2.1l-2.4-2.1 l-1.6,0.9l-0.3,5.1l-15.2,4.7l-1.7,9.8l-2.5,1.7L322.9,118.9 M531.1,99.3l-1,2l-4,1.7l-2.4,3l-3.3-2.5l-6.4,0.2l-0.2-0.7l8.9-4.2 l3.7-4.9l-0.6-3.3l-3.2-5.1l-0.7-0.4v-5.1l1.4-2.6l1.7,0.3l0.6,0.7h0.8l1.1,0.8l1.3,0.3l0.6,1.9l-1.7,2l-2.6-1.2L531.1,99.3  M500.5,130.3l1.9-0.9l-0.8,6.3l-1.6-0.3L500.5,130.3 M515.9,180.5l-1.7,0.4l-2.2-3.3l-3.6-2.2l4.3-2.5l0.9-3.1l-0.3-4.1l-4.6-2.1 l-2,0.5l-5.1,8.5l-2.4,0.3l-0.2-3.4l0.8-0.7l4.2-9.3l-1.8-3.7l1.4-9.3l2.4,1.8l1.6,3.6l-0.5,4.8l8,6.4l0.1-0.1l3.1,11.2L515.9,180.5 L515.9,180.5L515.9,180.5 M497.7,179.5l2.6,0.9l1.1,1.9l-1.8,5.1l0.8,7l-6,10.9l-9.2-1.7l-2.9-10.9L497.7,179.5L497.7,179.5  M509,194.8l-1.8,0.1L509,194.8 M515,193.9l-1.7,2.2l-2.4-0.2l-1.9-1.1l-3.3,1.3l-0.3,1.9l1.2,1.4l2.1-0.3l0.9-0.7l1.1,0.1l0.3,1.2 l-1.9,2.6l0.7,5.6l-2.3-2l-1-2l-1.5,1l0.9,5.2l-3.1-0.4l0.2-2.8l-1.4-2.5l2.9-10.5l3.2-1.6l3.8,1.2l3.4-1.1L515,193.9 M530.7,198.1 l2.5,0.5l0.4,0.4l2,5.3l2.1-2.2l4.2-1.7l14.5,11.5l2.4,0.5l4-2.6l-1.2,4.7l-3.5,1.4l-0.5,1.4l0.1,1.3l4.4,6.5l-4.4-1.5l-5.2-7.5 l-5.6,4.4l-5.6-2l-1.2-1.5l1.3-1.5l-1.9-2.4l-0.3-0.8l-8.5-5l-0.9-4.7l-3.4-3.1l2.4-1.4H530.7 M476.6,212.1l19.1,5l3.1-0.8l4.4,1.4 l3.3-0.9l12.4,2.1l-0.1,0.6l-8.2,4v-1.9l-35.4-5.6l-1.5-1.8l2.5-1.9H476.6 M569.4,280.1l-19,14.6l-0.7-1.1l2.2-4.6l5.1-3l7.4-9.7 l0.9-4.3l4.8,5.1L569.4,280.1 M554.3,267.3l-11.1,18.2l-5.7,3.1l-4.8,7.7l-2.5,0.5l-0.6-1.9l0.5-3.4l2.8-2.9l-6.6-0.8l-1.6-1.4 l-1.7-8.4l-0.9-0.9l-3.1,1.1l-5.2-3.9l-32.3,7.3l-2.3-1.9l2.3-4.5l0.6-21.9l1.8-2.5l13.9-6.4l4.3-4.8l0.3-0.9l10-9.2l4.2,1.9l5.5-7 l4.2-1.4l4.9,2l-1.1,5l2.8,4.8l4.5,2.8l3.2-4.5l2.5-11.7l4.6,10.8v7.6l7.7,18.5L554.3,267.3L554.3,267.3L554.3,267.3L554.3,267.3 L554.3,267.3L554.3,267.3'/></svg>"
          ], [
            "europe",
            "Europe",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 584.5 364.5'><path id='europe' d='M556.7,26.9l-35.5-7.3l-3.5,1.4l-49.9-5.2l-2.7,2l-45.8-4.1l-1.3-1.9l-15.3-2.2l-0.2,0.1h-0.1l-0.2,0.2l-6,0.6 l-0.5,0.5L372.4,17l-1.7,1.7l-5.8-3.1h-1.7l-1.5,3.7l1.8,2.5l-0.4,0.2l-10.1-1.5l-6.8,1.9l-5.3-0.6l-7.2,2.6l-4.2-1h-0.1l-3.1,3.2 l-0.9,0.2l-2.6,2.2l-2.3,0.8l-1.6,2h-1.7l-5.1-5.1l-1-0.2l-0.1-0.5l1.3-0.9l8.4,1.6l0.5-0.1l2.4-1.8l-0.8-0.9l-20.2-5.5l-16.9,3.4 L268,37l0.8,6.1l3.2,1.7l4-1l1.5,0.9l2.6,5.5h0.8l0.7,1.2l0.8,0.2l7.9-9.7l-2.9-5.4l8.5-8.9h0.5l1.3,1.7l-2.7,6.6l0.8,2.8l11.9,2.4 l-4,1.8l-3.5-0.3l-1.5,1.2l1,1.6l-0.1,2.2l-0.9-0.6H297l-1.8,1.2l-0.5,3.9l-2.3,2.2h-4.3l-4.2,1.9l-6.8-0.7l-0.6-0.4l2.5-1.7 l0.5-1.2l-0.9-1.7l-0.2-0.1l-2.3,0.5l-0.2-0.1l-0.2-3.4l-0.4-0.1l-2.6,3.9l1.3,3.7l-1.4,1.7L269,57l-18.9,13.1l0.1,1l1.7,1.6 l0.8,0.3l1.3,2.2l0.3,3.6l-3.1,4.5l-9.7-0.9l-1.3,1.5L239,97.9l0.4,1.1l5.1,3.1l0.2,0.8l1.6-0.2l0.1-0.2h0.1v-0.1l7.9-4.5l10-14.3 l10-2.8l1.2,0.5l11,11.5l0.2,2.3l-2,1.8l-1.9-0.4l-1.8,0.5l3.8,3.9l1.1-0.7l3.7-5.6l0.2-0.5l-0.9-1.9l0.2-0.4l2.3,0.3l0.8-1 l-1.7-0.9l-8.7-7.6l-0.5-4.5l1.4,0.2l10.4,8l3.4,9l1,0.5l0.5,0.6v1.5l4.5,6.1v0.4l0.7,1.1l3.7,1.3l1.4-1.6l-3.8-2.3l-0.1-1.7 l2.2-2.6l-6.3-6.3l5.6-2.2L306,90l5.8,8l4.2-0.6l2.7,0.9l1,4.7l0.7-0.1l1.8-2l-1.3-1.7l0.2-0.9h4.3l0.3,2.7l15.2-4.7l0.4-5.1 l1.5-0.9l2.5,2l3.9-2.1l1.4,1.5l0.3-3.9l-3.1-5.3l-1.3-8.6l2.9-2.5l-0.6-2.7l-3.8-3.8l4.5-6.9l6.8,1.6l1.1-3.1l9.2,3.8l13.3-3.1 l-1.8-6.7l0.2-1l8.7,7.4l22.2,7.4l4.3-2.7l1.5-4.5l1-0.5l0.2,0.2l6,0.4l1,1.2l1.7,0.8l0.5-0.3l7.5,2.9l7.5-4.2l1.5,1.8l22.1,0.8 l0.7-1.8l23.5-1.4l7,9.2l9.6-1.2l3.4,15.2l1,1.1l-0.2,0.2l1.7,1.7l0.5,0.1l1.8-2.2l1.6-5.3L508,56.7l-2.9-2.2l-5.5,0.3l-2.6-2.5 l1.8-7.8l0.5-0.3l0.2-0.9l3.4-1.7l14.2,0.6l1.3-4.8l1.6-1.2l0.4-0.1l4.3,1.2l0.1-0.1l0.2,0.1l3.1-2.5l1.7,0.9l-1,12l6.9,15.9l3.1-3 l0.1-0.3l2.3,1.1l0.8-2.2l-1.1-8.7l-4.8-5.8l0.1-2.6l0.8-1.5l4.5-2.2l2.2,0.2l4-3.7l2.1-0.3l1.1-1.7l-5.2-2.5l-0.5-1.7l2.9-1.7 l8.2,2.2l0.9-0.2l0.8-1.2L556.7,26.9 M331,87l-11.6-3.1l-8.9,2.9l-0.2-0.1l-0.5-1.9l2.9-7l2.9-2.5h1.7l2.1,1.1l2.3-1.7l1.8-3.4 l1.8-0.6l2.1,0.6l-0.8,3.9l7.7,7.3L331,87 M252.8,18.2l-5.8,5.6l-3.7,1.1l-1.1,4.3l-2.2,1.7l-0.2,1.2l0.9,1.7l7.8,1.2l-2.4,2.9 l-4.6,1.7l-5.9-2.9l2-1.8l1.9-0.8l-2.5-2.1l-11.4,1.7l-4.7,3.1l-8,1.7L203,49l-3.4,0.3l-3.7-2.8l-1.3-10.6l5.2-4.5l1.1-2l-1.9-3.3 l-0.5-0.3v-0.6l-0.5-0.3v-0.6l-0.6-0.3l-1.1-1.4l-3.1-1.4h-5.5l-4-1.7l71.2-3.4L252.8,18.2 M258.9,60.7l0.7,1.2l-10.5,1.5l3.4-1.5 l-0.1-1.5l-2.7-0.9l4.2-4.9l-2.7-2.7l-5.9,7.4l-4.4,0.8l1.1-2.7l-0.2-2.7l8.5-4.8l0.3-3.8l1-1.3l1.3,0.4l0.2,1.1l1.3,0.3l-0.8,3.2 l3.3,2.4l1.7,5.1l2.6,0.9L258.9,60.7'/></svg>"
          ]],
          geographic_regions: [[
            "america",
            "America",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='america' d='M189.96,40.495c1.3,0.72,2.56,1.51,3.82,2.32l1.04,0.23c0.57,0.13,1.7,0.39,2.27,0.52c0.55,0.18,1.64,0.55,2.18,0.73c-0.13,1.2-0.26,2.41-0.36,3.61c-4.66,0.37-9.34,0.55-14,0.8c0.06,1.15,0.11,2.3,0.16,3.45c0.58-0.04,1.74-0.11,2.32-0.14c1.6-0.47,2.8,0.77,3.51,2.04l0.63,0.8c0.88,0.68,1.23,1.54,1.06,2.59l-0.11,1.04c1.27-0.13,1.89,0.44,1.87,1.71c2.21,0.13,4.42,0.26,6.65,0.27c1.38-0.07,2.75,0.11,4.1,0.43c1.94,0.35,3.91,0.45,5.88,0.44c0.57,0.09,1.72,0.27,2.29,0.35l1.24,0.46c0.12-1.63,0.31-3.27,0.3-4.91c-0.29-1.27,0.12-2.87,1.7-2.85c1.17-0.31,2.33-0.63,3.5-0.96c-0.16-0.53-0.46-1.58-0.61-2.1c-0.42-1.05-0.16-1.91,0.76-2.6c1.85-1.74,3.41-3.76,5.09-5.66c2.13-2.35,5.27-3.21,8.07-4.51l0.62-0.31c1.1-0.64,2.26-1.21,3.49-1.58c1.25-0.46,2.52-0.97,3.57-1.83c0.51-0.9,1.27-1.43,2.28-1.59c2.35-0.65,4.6-1.6,6.83-2.58l-0.65-1.11c-0.6-0.83-0.87-1.75-0.81-2.76c-2.47-0.83-4.94-1.79-7.54-2.09c-1.18-0.02-2.34-0.27-3.43-0.68c-0.87-0.11-2.59-0.34-3.45-0.46c-1.18,0.08-2.35-0.12-3.47-0.479c-2.02-0.15-6.06-0.46-8.09-0.62c-1.35,0.04-4.07,0.11-5.43,0.14c-0.54,0.18-1.64,0.54-2.18,0.71c-0.62,0.89-1.44,1.311-2.48,1.271l-0.72,0.03c-4.64,0.31-9.27,0.63-13.89,1.02l-0.78,0.38c-2.28,1.27-4.54,2.55-6.82,3.82l-0.7,0.42c-0.93,0.689-1.95,1.24-3.04,1.6l-0.93,0.521c-0.83,0.83-1.72,1.02-2.7,0.56C184.92,35.785,186.99,38.645,189.96,40.495z M203.85,33.395l-1.02,0.57c2.36,1.12-1.66,3.47-1.3,0.83c-0.15-1.15-0.3-2.311-0.43-3.46C201.77,28.755,206.22,32.025,203.85,33.395z M204.82,54.435c-2.256-0.119-4.503-0.26-6.75-0.442c-0.075-1.56,0.615-2.036,2.07-1.438C201.7,53.195,203.26,53.815,204.82,54.435 M162.94,36.825c0.44,0.12,1.3,0.36,1.74,0.48c1.02-0.1,1.92,0.2,2.7,0.88c1.21,0.82,2.51,1.5,3.83,2.14c1.16,0.36,1.59,1.11,1.31,2.23c0.15-0.36,0.43-1.09,0.58-1.46c0.31-1.14,1.05-1.58,2.22-1.31c1.21,0.15,2.43,0.26,3.66,0.33c0.56,0.1,1.69,0.29,2.25,0.39c0.49,0.17,1.46,0.5,1.95,0.66c0.19-1.6,0.38-3.21,0.57-4.81l-0.66-0.3c-2.57-1.13-5.11-2.33-7.64-3.53l0.2,1.09c0.74,1.38-1.02,2.32-2.03,1.35c-1.1-0.49-2.23-0.92-3.38-1.28c-1.12-0.23-2.15-0.77-2.95-1.6c-0.99-0.82-1.99-1.62-3-2.4c-1.93,0.89-3.85,1.8-5.74,2.74c0.42,0.4,1.28,1.2,1.71,1.6C161.26,34.855,162.13,35.815,162.94,36.825 M146.08,43.795c0.74-1.05,1.6-2.01,2.57-2.86c0.47-0.47,1.42-1.42,1.89-1.89c-3.31-0.11-6.59-0.23-9.88-0.37c0.93,2.65,1.99,5.26,3.18,7.8C144.61,45.605,145.35,44.705,146.08,43.795 M126.03,51.835c2.62-0.65,5.14-1.52,7.75-2.24c-0.52,1.48-1.03,2.97-1.56,4.45c-0.15,0.4-0.43,1.2-0.57,1.6c1.2,0,2.12,1.06,2.04,2.24c0.42,0.14,1.27,0.42,1.7,0.56c2.78,0.89,5.5,1.98,8.13,3.25c0.76-0.15,2.27-0.46,3.03-0.62c0.85-0.58,1.77-0.78,2.78-0.58c3.31,0.26,6.48-1.06,9.3-2.65c0.95-0.74,1.82-0.69,2.61,0.13c0.27-1.58,0.55-3.16,0.84-4.74c-2.61-1.72-5.18-3.49-7.79-5.21l-0.6-0.39c-1.13-0.69-2.22-1.45-3.19-2.35c-0.19,0.48-0.57,1.45-0.76,1.93c-0.33,1.19-1.07,1.63-2.23,1.33l0.36,1.28c0.87,1.17-0.63,2.79-1.7,1.55c-2.62-1.55-5.39-2.82-7.95-4.47c-2.48-1.64-4.97-3.27-7.46-4.89c-2.52,0.64-4.88,1.82-6.94,3.4c-0.82,0.75-1.98,1.45-3.11,0.91c-0.15,1.61-0.31,3.23-0.47,4.84C122.14,51.535,124.08,52.215,126.03,51.835 M176.44,48.955l-0.4-1.49c-3.84,0.58-7.59,1.65-11.2,3.1c0.39,0.4,1.18,1.19,1.58,1.59c1.19,1.11,2.27,2.34,3.31,3.6c1.17,2.14,3.56,2.08,5.56,1.21c0.73-1.21,1.51-2.4,2.29-3.58c0.25-0.73,0.75-2.2,1-2.94C177.36,50.695,176.65,50.195,176.44,48.955 M320.03,350.335c-0.43-1.08-0.7-2.22-0.76-3.37c-0.96-1.18-2.23-2.02-3.43-2.9c-2.29-1.58-4.56-3.18-6.87-4.71c-6.17-1.83-12.18-4.11-18.19-6.42c-1.25-0.35-2.65-0.8-3.27-2.05c-1.73-2.42-2.9-5.17-3.72-8.02c-0.54-1.74-0.94-3.49-1.21-5.25l-0.97,0.03c-1.07,0.09-1.87-0.35-2.4-1.34c-0.73-0.86-1.54-1.63-2.44-2.3c-1.07-0.54-1.41-1.33-1.01-2.36c-2.81-0.28-5.71-0.37-8.45-0.97c-1.79-1.51-3.28-3.33-4.68-5.18l-0.42-0.53c-3.22-4.75-8.95-8.5-14.85-7.28c-1.59,0.11-3.24,0.24-4.77-0.29c-3.42-1.09-6.75-2.48-10.11-3.67c-0.86,0.83-1.69,1.68-2.5,2.55c-0.83,0.98-1.75,1.87-2.72,2.7c-0.92,1.06-1.58,2.3-2.16,3.57c-0.15,1.4-1.72,1.69-2.63,0.76c-0.61-0.01-1.82-0.05-2.43-0.07c-2.08,0.09-4.21-0.19-6.23-0.36l-1.3-0.14c-1.27-0.02-1.85-0.64-1.74-1.87c0.11-4.16,0.39-8.36-0.12-12.5c0.09-1.47-0.99-2.41-2.32-2.7c-1.12-0.2-2.19-0.59-3.16-1.18c-0.72-0.35-2.16-1.04-2.89-1.39c-0.38-0.2-1.15-0.59-1.53-0.78c0.19-2.24,0.58-6.7,0.77-8.94c0.17-1.35,0.45-2.68,0.71-4.01c-0.73-1.02-1.3-2.16-1.69-3.35c-1.41-0.13-2.82-0.25-4.22-0.37c-0.07,1.19-1.18,2.11-2.36,1.93c-0.49,1.16-0.96,2.32-1.44,3.49c-0.45,1.52-1.59,2.7-2.99,3.41l-1.12,0.7c-1.02,0.89-2.69,1.36-3.71,0.2l-0.8-0.63c-2.7-1.79-4.49-4.5-5.88-7.35l-0.46-0.82c-0.61-0.88-0.7-1.81-0.29-2.8c0.95-4.01,1.78-8.05,2.24-12.15c0.18-1.43,0.56-4.28,0.74-5.71c0.51-0.12,1.53-0.38,2.05-0.5c4.34-0.98,8.8-0.27,13.19,0.1c0.4-0.88,0.98-1.61,1.74-2.2l0.86-0.78c1.29-1.25,2.9-1.47,4.81-0.66c7.01,0.89,5.82,9.64,10.35,13.31c0.98,0.58,1.98,1.14,2.94,1.78c0.85-1.45,1.68-2.91,2.54-4.35c1.59,0.13,3.18,0.29,4.78,0.45c0.05-0.72,0.15-2.16,0.2-2.88c-0.68-0.6-1.31-1.25-1.89-1.93c-0.83,0.05-2.48,0.14-3.3,0.18c-1.15,0.15-1.85-0.36-2.12-1.52c-0.48-1.21-1.02-2.38-1.64-3.51c-0.69-0.84-0.86-1.76-0.52-2.75c0.45-1.72,0.81-3.47,1.39-5.14c1.92-3.29,5.11-5.51,7.9-8c3.73-2.83,5-7.82,4.94-12.3c-0.17-1.02,0.05-1.95,0.65-2.79l0.3-0.99c0.05-1.04,0.45-1.92,1.21-2.63l0.61-0.85c0.94-1.39,1.91-3.09,3.76-3.31c1.39-0.36,2.78-0.7,4.18-1.04c-0.01-1.86,0.26-3.64,0.82-5.35c1.01-1.68,1.96-3.64,3.86-4.47c3.43-1.92,5.49,2.56,7.97,4.13c0.34-0.5,1.02-1.48,1.37-1.97c0.63-1.18,1.73-1.96,2.9-2.55c3.53-1.93,5.72-5.48,8.29-8.44c-1.73-0.08-3.47-0.14-5.2-0.13l-0.69,0.42c-1.16,0.68-3.49,2.03-4.65,2.7c-0.18-2.73-0.37-5.46-0.56-8.19c-0.16-1.88-0.4-3.76-0.64-5.63c3.98-1.15,9.02,0.07,12.39-2.86c0.65-0.67,2.51-2.1,2.9-0.45c-0.49,1.17-1.38,1.52-2.67,1.07c-0.13,2.38-0.34,4.76-0.33,7.14c0.02,1.15,0.03,2.32-0.15,3.46c3.36,0.98,6.79,2.07,10.34,1.83c1.45-0.11,2.9-0.21,4.36-0.17c-0.22-1.62-0.53-3.23-0.93-4.81c-0.55-0.93-0.62-1.87-0.2-2.83l0.42-1.16c-0.98,0.56-1.86,0.39-2.64-0.5c-0.99-0.79-1.99-1.55-3.01-2.29c-0.17-1.03-0.34-2.06-0.5-3.09c-0.39-1.14,0.12-2.29,0.81-3.19c0.26-0.41,0.77-1.23,1.02-1.65c-1.23,0.19-1.89-0.34-1.99-1.58c-0.26-1.61-0.52-3.22-0.75-4.83c-2.32-1.69-4.63-3.4-6.9-5.15l-0.61-0.49c-3.13-2.6-3.67-6.84-5.2-10.39l-0.33-0.76c-0.79-1.49-1.58-2.99-2.33-4.5l-0.5-0.78c-0.93-0.52-1.46-1.3-1.59-2.33c-0.16-0.71-0.49-2.13-0.66-2.84c-1.89,1.68-3.82,3.34-5.9,4.78c-1.01,0.73-2.21,1.13-3.38,1.52c-1.21,0.35-1.87-0.14-1.99-1.5l-0.29-1.46c-0.38-1.91-0.65-3.83-0.82-5.76c-0.37-0.28-1.13-0.83-1.51-1.11c-1.97-1.44-3.84-2.99-5.77-4.47c-2.81-1.52-6.83-4.98-9.96-2.68c-0.82,0.99-1.68,1.98-2.81,2.63l-0.48,0.32c1.23,0.07,1.76,0.73,1.62,1.98c-0.02,0.59-0.05,1.77-0.06,2.36c0.13,1.22-0.43,2.32-1,3.34l-0.35,1.23c-0.16,1.45-0.48,4.34-0.64,5.78l1,1c1.06,0.86,1.74,2.08,2.08,3.4c0.2,0.55,0.61,1.65,0.82,2.19c1.07,0.76,1,2.28-0.25,2.81c-0.13,0.52-0.39,1.55-0.51,2.06c-0.09,1.05-0.61,1.82-1.56,2.3c-0.52,0.46-1.55,1.38-2.07,1.84c-0.63,0.99-1.46,1.32-2.5,0.98l0.86,0.89c0.84,0.72,1.08,1.61,0.72,2.68c-0.09,0.51-0.28,1.52-0.37,2.03c-0.33,1.91-0.66,3.83-0.99,5.75c-2.6-2.17-4.47-5.01-5.64-8.17c-0.67-1.56-1.46-3.12-2.87-4.13c-1.31-1.02-2.56-2.12-3.75-3.27c-0.49-0.36-1.47-1.1-1.96-1.46c-0.97-0.34-1.67-0.96-2.09-1.88l-0.54-0.47c-2.16-1.24-4.37-2.39-6.62-3.44c-0.56-0.03-1.68-0.09-2.24-0.11c-1.42,0.43-2.59-0.58-2.73-1.97c-0.45-1.25-1.33-2.26-2.19-3.23c-0.88-0.76-1.5-1.84-1.29-3.03c-0.02-1.82-0.05-5.44-0.07-7.25c-0.15-1.06,0.23-1.89,1.14-2.49l0.56-0.51c2.08-2.03,4.12-4.09,6.26-6.06l0.59-0.53c1.88-1.6,3.89-3.03,5.88-4.48c1.43,1.48,2.86,2.97,4.31,4.44l0.7,0.71c1.06-0.53,2.21-0.87,3.38-1.01l1.1-0.19c1.52-0.33,3.08-0.32,4.62-0.14c0.74,0.05,2.22,0.15,2.95,0.2l-0.47-0.85c-0.49-0.82-0.88-1.68-1.18-2.58c-0.52-1.42-1.36-2.96-2.95-3.34c-1-0.16-1.8-0.65-2.39-1.47c-0.5-0.38-1.5-1.13-2-1.5c-1.4-0.39-2.09-2.31-0.38-2.85l0.61-0.39c2.4-1.55,4.78-3.12,7.19-4.66c-0.09-4.37,0.03-8.75,0.43-13.1c2.47-0.39,4.87-0.71,7.4-0.95c0.1,0.38,0.31,1.15,0.41,1.53c1.18,3.42,0.01,6.92-1.29,10.1c1.73,0.26,3.47,0.5,5.22,0.74c0.88-1.42,1.76-2.84,2.67-4.25l0.23,0.87c0.51,1.48,1.12,2.93,1.68,4.4c0.69,1.19,0.26,2.77-0.95,3.44c-3.19,2.63-7,4.34-10.61,6.29c-0.06,1.3-0.11,2.59-0.15,3.89c0.44,0.16,1.32,0.48,1.77,0.64c1.19,0.31,1.61,1.06,1.26,2.23c0.65-0.32,1.95-0.96,2.6-1.28c0.96-0.65,2.12-0.99,3.28-0.73c0.8,0.05,2.39,0.16,3.19,0.22c1.14-0.03,1.85,0.52,2.14,1.66l0.45,1.03c0.65,1.35,1.3,2.72,1.68,4.19c1.31,0.26,2.63,0.5,3.96,0.72c1.19,0.04,2.25,0.59,3.16,1.33l0.74,0.45c0.98,0.37,1.64,1.04,1.98,2.03c0.37,0.03,1.09,0.08,1.45,0.1c0.5-0.24,1.49-0.72,1.98-0.96c2.45-2.4,3.93-6.04,3.27-9.47c-1.39-2.09-2.91-4.1-4.47-6.07c-0.79-0.84-1.51-1.74-2.15-2.69c-2.13-1.1-0.01-3.44,1.2-1.3c0.34,0.14,1.01,0.42,1.35,0.56c1.54,0.69,1.79,1.7,0.75,3.04l-0.41,0.53c0.32,0.09,0.97,0.28,1.29,0.38c1.87,0.56,3.75,1.08,5.64,1.59c0.72-2.99,2.35-6.14,1.49-9.25c-0.72-0.89-1.31-1.87-1.66-2.95c-0.62-1.77-2.39-2.69-4.08-3.14c-1.02-0.13-1.83-0.61-2.44-1.42l-0.71-0.38c-1.87-0.3-2.59-2.03-1.34-3.48c1.17-1.91-0.47-3.89-1.54-5.42c-1.67-1.75-3.41-3.44-5.21-5.05c-2.09-1.45-4.52-2.33-6.93-3.09c-1.18-0.17-2.16-0.89-2.66-1.97c-1.34-1.99-2.99-4.55-5.76-4.2c-2.88,0.07-5.78,0.27-8.64,0.4c-0.28-0.95-0.55-1.89-0.83-2.83c-0.39-1.31-0.78-2.61-1.16-3.91l-0.91-0.04c-2.99-0.08-6-0.26-8.97-0.41c-2-0.11-3.99-0.22-5.98-0.35c0.34,1.1-0.08,1.84-1.24,2.24c-1.83,0.94-4.07,2.22-3.44,4.67c0.01,1.39,0.02,4.16,0.02,5.55v1.65c1.32,0.73,2.41,1.8,3.37,2.95l0.52,0.57c1.78,1.89,3.5,3.83,5.19,5.8l0.59,0.65c1.18,0.65,1.15,2.14,0.08,2.89c-1.08,1.62-1.93,3.38-2.82,5.12c-0.47-1.42-0.98-2.82-1.55-4.2c-0.84-1.05-1.68-2.1-2.52-3.14c-0.92-0.63-1.84-1.25-2.78-1.84c-2.03-1.28-3.91-2.82-5.42-4.69c-2.34-3.72-1.01-8.14,0.93-11.74c0.48-1.26,1.53-2.16,2.48-3.08l0.52-0.86c0.54-1.3,1.06-2.61,1.71-3.87c-4.5-0.35-9.01-0.53-13.5-0.77c0.33,3.29,0.67,6.56,1.03,9.86c0.79,1.74,0.37,5.85-1.53,3.4c-0.52-1.8-0.85-3.64-1.27-5.46c-0.37-1.33-0.54-2.75-0.08-4.08l0.2-0.83c-0.66-0.63-1.99-1.91-2.66-2.55c-2.68,0.97-5.37,1.91-8.09,2.8l0.73,1.25c1.63,1.58-0.23,3.44-2.02,2.41l-1.4-0.29c0.14,0.55,0.43,1.66,0.58,2.21c-0.07,1.32,0.38,2.41,1.35,3.26c1.23,1.06,2.44,2.13,3.64,3.23c1.93,1.33,3.99,2.45,6.18,3.36c-0.18,1.2-0.54,3.58-0.71,4.77c-0.09,1.33-0.77,2.49-1.37,3.64l-0.21,0.75c-0.55,1.73,0.23,4.73-1.9,5.06c-1.77,0.26-3.56,0.39-5.34,0.51c-2.41,0.82-1.84-2.77,0.25-1.51c0.16-1.29,0.27-2.59,0.33-3.89c-0.13-1.01,0.12-1.93,0.74-2.73c0.44-0.86,1.32-2.56,1.76-3.41c-2.41-0.77-4.82-1.56-7.21-2.35c-1.07-2.78-2.1-5.6-3.54-8.21c-0.71-1.14-1.31-2.34-1.83-3.57l-0.57-0.93c-0.87-0.81-1.06-1.7-0.57-2.67c-0.56,0.26-1.67,0.78-2.23,1.04c-1.16,0.64-2.42,1.07-3.73,1.25c-1.56,0.32-3.11,0.71-4.59,1.3c-0.51,1.26-2.01,1.35-2.8,0.31c-2.05-1.15-4.24-2-6.39-2.95c-1.49-0.42-2.39-1.76-2.83-3.17c-0.23-0.56-0.7-1.7-0.93-2.26c-0.7,0.85-1.58,1.02-2.64,0.51c-1.57-0.41-3.16-0.66-4.78-0.73c-1.38,0-2.76-0.17-4.06-0.67c-0.98-0.31-2.96-0.92-3.95-1.23c-1.11,1.67-2.21,3.34-3.19,5.09c-0.72,1.52-1.22,3.19-1.16,4.88c0.21,1,0.05,1.94-0.47,2.82c-0.17,0.48-0.51,1.43-0.68,1.91c-0.27,0.49-0.81,1.46-1.08,1.94l1.45,0.17c1.57,0.01,2.94,0.84,4.11,1.83c0.55,0.42,1.66,1.25,2.22,1.67c1.45-0.74,2.97-1.35,4.45-2.03c0.44-0.29,1.34-0.87,1.78-1.16c1.21-1.49,3.39-1.11,3.28,1.04c0.46,1.97,0.93,3.95,1.64,5.86c0.63,1.68,1.31,3.35,1.98,5.02c-1.55-0.32-4.65-0.96-6.21-1.28l-0.78-0.17c-1.49-0.22-2.7-1.15-3.94-1.92c-0.65,0-1.94-0.01-2.59-0.02c-0.58,0.91-1.39,1.39-2.44,1.44l-1.09,0.13c-1.8,0.49-3.98,0.2-4.71-1.77c-0.67-1.09-1.33-2.17-1.98-3.26c-0.3,0.47-0.89,1.41-1.19,1.88c-0.39,0.38-1.19,1.15-1.59,1.53c-0.33-0.03-0.99-0.09-1.33-0.13c-2.13-0.22-4.28-0.26-6.43-0.32l-0.64,0.86c-0.67,1.22-1.97,1.87-3.33,1.92c-2.62,0.42-5.23,0.9-7.86,1.3c-1.76,0.58-3.34,0.42-4.74-0.49c-1.27-0.72-2.54-1.44-3.9-1.98c-2.91-0.98-5.88-1.77-8.84-2.56c-2.48-0.6-5.07-0.64-7.6-0.74c-1.11,0-3.32-0.01-4.43-0.01l-0.43-0.39c-1.47-1.27-3.03-2.67-4.99-3.07c-1.03,0-1.91-0.36-2.62-1.09l-0.8-0.55c-3.01-0.08-6.03-0.02-9.03,0.07c-1.48,0.5-2.85,1.26-4.15,2.11c-0.91,0.67-1.96,1.38-3.16,1.15l-1.17-0.04c0.47,1.06,0.17,1.87-0.9,2.45c-0.85,0.64-1.68,1.31-2.48,2.01c-2.47,2.23-4.9,4.51-7.38,6.72c-0.05,0.71-0.14,2.15-0.18,2.86c2.14,0.98,4.26,1.98,6.39,2.98c-0.13,0.68-0.38,2.04-0.5,2.72c-1.64,0.98-3.28,1.96-4.88,3l-0.68,0.47c-1.25,0.94-2.49,1.89-3.82,2.72c0.56,1.04,1.16,2.05,1.8,3.04c2.23,1.52,4.57,2.87,6.96,4.1c1.76-0.04,3.51-0.32,5.25-0.53c2.18-1.18,4.07,2.1,1.22,2.51c-1.65,0.48-3.32,0.83-4.99,1.19c-1.98,3.8-4.07,7.55-5.56,11.57c3.6,4.66,8.7,9.03,14.52,10.34c0.56,0.06,1.68,0.18,2.24,0.24c0.73,0.05,2.18,0.16,2.91,0.21l1.31,0.03c-1.57,2.04-3.23,4.03-4.96,5.95l-0.46,0.55c-0.79,1.03-1.75,1.94-2.9,2.57l-0.8,0.52c0.99-0.38,1.87-0.13,2.62,0.75l0.97,0.5c0.53,0.21,1.59,0.64,2.13,0.85l0.61,0.36c1.54-2.01,3.15-3.95,4.83-5.82l0.46-0.53c0.8-1.02,1.75-1.9,2.75-2.73l0.42-0.57c0.27-0.98,0.84-1.73,1.72-2.23c0.61-0.99,1.1-2.03,1.48-3.12c0.36-0.95,0.71-1.9,1.07-2.85c2.33,0.83,4.68,1.61,7.05,2.33c0.81-0.38,2.42-1.14,3.23-1.52c-0.14-0.51-0.41-1.52-0.55-2.03c-0.81-1.22,0.19-3.21,1.7-2.16c1.89,0.66,3.8,1.37,5.81,1.51c1.01-0.12,1.93,0.11,2.77,0.69c0.73,0.14,2.2,0.43,2.93,0.57c1.02-0.03,1.88,0.34,2.56,1.12c1.74,0.99,3.71,1.48,5.62,2.04c1.35,0.17,2.33,1.14,3.14,2.16c0.72,0.89,1.59,1.59,2.6,2.11c1.67,0.69,3.31,1.46,4.91,2.32l0.78,0.43c0.98,0.43,1.54,1.18,1.69,2.27l0.34,0.91c0.85,0.58,1.37,1.36,1.57,2.37l0.29,0.73c0.92,0.44,1.53,1.15,1.83,2.13l0.33,0.64c2.2,3.86,5.06,7.42,6.47,11.69c0.37,2.61,0.62,5.25,0.75,7.9c1.43,0.72,2.69,1.74,3.72,2.98c0.45,0.51,1.34,1.54,1.79,2.06c1.46,3.03,1.53,6.45,1.91,9.74l0.06,0.87c0.08,3.9-0.08,7.8-0.12,11.7c0.09,4.67-0.44,9.82,2.34,13.86c0.78,1.11,1.41,2.32,1.83,3.63l0.4,0.96c0.6,1.22,1.06,2.52,1.24,3.88c0.04,4.18,2.96,7.21,7.13,7.43c1.13,0.12,1.74,0.75,1.84,1.9c0.43,2.14,1.01,4.33,2.3,6.13c0.7,0.73,1.06,1.61,1.06,2.63c0.87,1.88,2.33,3.39,3.62,4.99c1.05,0.95,1.24,2.41,1.2,3.76c0,2.61,0.3,5.51,2.48,7.27c0.98,0.86,1.85,1.85,2.56,2.95c0.43,0.5,1.28,1.51,1.7,2.01c1.21,1.09,2.4,2.19,3.54,3.35c0.48,0.44,1.44,1.33,1.92,1.77c-0.01-1.13-0.07-2.25-0.19-3.37c-0.89-0.56-1.35-1.35-1.4-2.36c-0.25-1.72-0.61-3.42-0.93-5.11c-0.27-1.41-0.52-2.82-0.77-4.23c0.95,1.41,1.9,2.82,2.84,4.24c0.57,0.9,1.21,1.76,1.91,2.57c0.82,0.6,1.29,1.42,1.42,2.43l0.23,0.76c0.96,0.37,1.64,1.03,2.05,1.98l0.51,0.72c0.78,1.01,1.8,2.07,1.67,3.46c0.07,1.77,0.19,5.29,0.25,7.05c1.55,1.72,3.06,3.47,4.5,5.29l0.77-0.12c1.19-0.4,2.27,0.37,3.06,1.18c1.23,1.09,2.66,1.95,4.21,2.52c1.14,0.2,1.75,0.85,1.83,1.95c0.03,0.23,0.09,0.7,0.11,0.93c3.98,0.29,7.94,0.73,11.89,1.31c2.31,1.2,4.04,3.26,6.36,4.46c1.13,0.17,2.28,0.46,3.2,1.2c2.2,1.37,4.42,2.7,6.52,4.23c1.07,0.54,1.59,1.65,1.94,2.75l0.35,0.77c0.82,0.6,1.31,1.4,1.48,2.41c0.47,1.4,1.42,2.63,2.56,3.56c3.62,1.77,7.67,2.93,11.7,2.06c0.65,0.53,1.31,1.07,1.97,1.61c0.89,0.61,1.22,1.47,1,2.58c0.02,0.95,0.05,2.85,0.07,3.8c0.07,0.97,0.2,2.91,0.27,3.88l-0.47,0.43l-0.81,0.82c-1.12,1.29-2.29,2.53-3.47,3.76c-0.92,1.14-1.57,2.54-1.78,4c0.07,1.02-0.21,1.93-0.86,2.72c0.07,0.51,0.21,1.54,0.29,2.05c0.58,0.86,0.76,1.8,0.53,2.81c-0.06,0.58-0.19,1.75-0.25,2.33c0,1.35-0.42,2.65-0.99,3.87c-3.28,4.89,0.22,10.28,4.09,13.3c0.87,0.59,1.3,1.43,1.29,2.51l0.21,0.99c0.55,0.86,0.74,1.8,0.57,2.82c-0.08,1.57,0.61,3.05,1.41,4.37c0.74,1.11,1.33,2.32,1.76,3.59c0.22,0.46,0.66,1.37,0.88,1.83c1,1.31,1.99,2.63,2.89,4.02c0.6,0.88,1.28,1.69,2.05,2.43c2.23,1.97,4.52,3.84,6.84,5.71l0.82,0.58c0.26,0.18,0.79,0.54,1.05,0.72c-0.06,0.89-0.16,2.66-0.22,3.55c-0.12,2.02-0.36,6.06-0.48,8.08c-0.12,1.19-0.36,3.56-0.48,4.74c-0.21,1.66-0.35,3.34-0.42,5.02c0.07,1.17-0.16,2.33-0.58,3.43c-0.36,1.29-0.57,2.61-0.65,3.95c-0.52,7.56-0.05,15.36-2.29,22.68c-0.4,1.31-0.83,2.61-1.12,3.96c-0.08,1.01-0.49,1.86-1.25,2.54l-0.54,0.76c-0.29,6.19-0.28,12.4-0.39,18.62c0.01,2.93,0.4,5.85,0.73,8.77c0.19,1.04-0.13,1.9-0.98,2.61l-0.66,0.85c-0.53,1.09-1.32,1.45-2.38,1.07c0.65,2.08,1.4,4.14,1.89,6.28c0.64,3.28,0.71,6.58,0.98,9.93c0.15,2.62,0.29,5.26,0.4,7.91c0.89,0.75,1.78,1.51,2.67,2.28c2.52,2.16,4.89,4.47,7.35,6.71c3.25,2.62,7.76,0.42,11.53,0.34c-0.84-0.93-1.7-1.83-2.57-2.7c-0.99-0.88-1.81-1.92-2.51-3.02l-0.5-0.65c-0.87-0.56-1.4-1.34-1.58-2.34c-0.35-1.06-0.73-2.11-1.16-3.13c-0.54-1.31-1.08-2.61-1.61-3.91c0.82-0.91,1.65-1.8,2.46-2.71c2.79-3.28,5.16-7.31,5.64-11.61c-0.45-0.81-0.87-1.63-1.25-2.45c-0.59-1.18-1.23-2.32-1.84-3.47c1.52-1.89,3.13-3.7,4.71-5.54c1.06-1.29,1.89-2.75,2.6-4.25c1.08-2.38,2.16-4.75,3.27-7.11l0.33-0.74c0.52-1.36,1.29-2.76,2.75-3.27c0.51-0.26,1.53-0.79,2.04-1.05c2.54-1.33,5.07-2.68,7.52-4.15c0.69-2.65,0.41-5.4,0.36-8.09c2.11-1.02,4.38-1.89,6.13-3.5c0.87-0.96,1.81-1.84,2.83-2.64c1.96-1.62,2.4-4.29,2.74-6.66c0.04-1.07,0.56-1.83,1.56-2.27l0.61-0.45c0.57-0.84,1.34-1.37,2.34-1.57c1.67-1.77,2-4.3,2.48-6.58c0.51-2.74,0.96-5.53,1.55-8.23l0.14-0.59c0.38-1.78,2.18-2.65,3.49-3.67l0.84-0.63c1-0.87,2.12-1.64,3.42-1.98c1.65-0.61,3.34-1.18,4.9-2.02c0.92-1.1,1.88-2.18,2.89-3.2c1.86-1.98,3.01-4.53,3.57-7.16c0.23-1.3,0.65-2.56,1.14-3.78c1.35-4.8,0.75-9.98,2.15-14.75c0.97-1.95,2.17-3.77,3.39-5.58C318.94,360.125,320.97,355.295,320.03,350.335z M201.62,108.035c1.3-1.03,2.87,1.21,1.56,2.15C201.86,111.255,200.3,108.975,201.62,108.035z M160.23,91.855l-1.2,0.51c-2.9,2.15-6.3,3.57-9.96,3.77l0.76-0.25c-2.64,0.37-5.3,0.58-7.97,0.64c-2.68-0.07-1.45-5.11,1.01-3.92c2.06-0.02,4.12-0.03,6.19-0.08c3.98-1.16,8.33-2.5,12.34-0.78L160.23,91.855 M220.38,271.435c1.05-0.17,1.87,0.23,2.46,1.2l0.57,0.55c3.09,2.48,6.34,4.75,9.63,6.97c3.54,0.04,7-0.77,10.46-1.43c0-1.01,0.01-3.04,0.01-4.06c-0.29,0.02-0.89,0.05-1.18,0.07c-1.05,0.11-1.86-0.32-2.43-1.27c-0.5-0.45-1.51-1.37-2.02-1.82c-1.31-0.98-2.58-2.01-3.76-3.12c-0.88-0.78-1.76-1.53-2.66-2.26l-0.34,1.07c-0.08,2.57-2.4,2.54-3.98,1.18l-0.85-0.41c-0.98-0.33-1.68-0.96-2.1-1.91c-0.72-0.78-1.55-1.41-2.49-1.9c-2.11-1-4.26-1.93-6.44-2.74c-1.16-0.25-2.31-0.19-3.43,0.16c-2.3,0.78-4.55,1.68-6.82,2.49c0.46,1.39,0.93,2.79,1.4,4.18c3.95-0.84,8.1-1.22,11.75,0.89c1.19,0.34,1.6,1.09,1.23,2.26L220.38,271.435z'/></svg>"
          ], [
            "sub_saharan_africa",
            "Sub-Saharan Africa",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='sub_saharan_africa' d='M488.08,345.035c5.11-10.88,14.33-19.02,20.83-28.98c3.28-6.75,5.42-14.26,5.12-21.82c-4.56,1.59-9.14,3.19-13.67,4.84c-1.21,0.87-2.79,0.27-3.09-1.19l-0.48-0.92c-1.47-2.71-2.98-5.4-4.4-8.13c-4.72-7.55-8.46-15.7-11.36-24.12c-6.5-0.32-12.99-1.01-19.5-0.67c-3.83,1.29-6.55,4.65-10.11,6.5c-5.98-1.5-10.87-5.94-16.83-7.39c-11.42-0.79-19.79,8.42-28.23,14.57c-6.29-6.06-12.33-12.36-18.54-18.5c-1.77-1.59-3.57-3.15-5.43-4.62c-4.34-2.86-9.65-3.57-14.65-4.58c-5.4,4.16-7.36,11.61-9.44,17.91c0.35,8.3,0.43,16.66-1.15,24.89c1.67,0.73,3.35,1.49,5.09,2.06c1.04,0.24,2.42,0.78,2.33,2.1c0.89,6.5,1.7,13.87,7.64,17.84c2.9,4.07,9.61,6.35,13.61,2.58c0.89-1.13,2.41-1.25,3.58-0.46c5.3,2.98,10.55-1.13,15.91-1.18c4.74,1.87,8.9,4.86,13.16,7.6c-0.62,4.54-1.44,9.09-1.16,13.7c2.11,5.98,8.03,10.05,9.24,16.42c2.56,8.84-1.93,17.43-2.92,26.09c-0.65,8.14,3.8,15.16,6.28,22.58c0.52,1.8,0.77,3.67,0.76,5.63c-0.33,7.45,3.61,13.84,5.72,20.7c0.43,4.23,3.12,7.44,5.54,10.67c5.88-2.56,13.43-1.47,18.23-6c0.35-0.95,0.99-1.63,1.92-2.04c5.03-4.33,8.65-10.45,10.18-16.92c0.91-3.6,3.23-6.52,5.33-9.49c3.47-5.2-0.62-11.99,2.91-17.22c2.82-4.1,7.5-6.21,11.65-8.73C490.87,367.495,486.8,356.435,488.08,345.035 M511.44,359.355c-1.12,0.4-2.23,0.81-3.34,1.22c2,8.17-7.02,12.62-10.6,18.7c-1.28,6.86-2.24,13.9-2.13,20.91c0.09,1.22,0.14,2.44,0.17,3.67c-0.27,1.6,0.69,3.59,2.54,3.48c0.97-0.01,1.95,0.05,2.93,0.16c1.47,0.12,2.95,0.22,4.44,0.31c2.46-9.41,4.82-18.85,7.04-28.32c1.41-5.41-1.91-11.14,0.56-16.4C512.51,361.835,511.97,360.595,511.44,359.355z'/></svg>"
          ], [
            "east_asia_pacific",
            "East Asia & Pacific",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='east_asia_pacific' d='M673.78,359.585c1.46,1.17,2.93,2.37,4.62,3.23c2.09-2.16,4.08-4.44,5.93-6.82c-8.72,2.34-16.34-5.53-25.18-1.45c-1.03,0.4-1.94,0.24-2.73-0.46c-4.84-4.17-10.66-6.75-17.2-6.55c-1.27-0.05-1.79-0.68-1.57-1.9c0.17-1.64,0.37-3.28,0.48-4.91c0.03-1.18,0.1-2.34,0.2-3.5c-1.12-1.44-2.53-2.6-3.85-3.81c-1.09-6.14-1.85-12.37-3.76-18.33c-1.72-3.65-5.16-6.21-6.8-9.9c-0.54-3.21,0.4-6.45,0.62-9.65c4.63,2.68,7.54,7.26,10.73,11.39c3.93-2.52,7.66-5.55,10.13-9.58c0.92-6.9-2.27-13.36-5.55-19.17c-1.79-2.71-0.06-5.83,0.57-8.6c1.45,0,2.91,0,4.37,0.01c-1.13,2.28-2.32,4.52-3.45,6.79c1.75,1.14,3.52,2.28,5.3,3.41c2.72-4.47,3.4-10.99,8.99-12.92c5.66-1.83,11.2-5.22,12.78-11.45c0.19-1.01,0.74-1.76,1.65-2.26c2.63-2.21,3.59-5.83,3.45-9.15c-0.05-1-0.05-1.99,0.01-2.97c0.36-5.74-2.52-10.9-4.7-16.01c2.42-2.33,4.68-4.82,6.89-7.34c-1.89-0.71-3.8-1.39-5.69-2.07c2.26-1.55,4.64-2.92,6.99-4.34c2.78,5.42,4.8,11.15,6.72,16.92c2.27-1.04,4.51-2.18,6.7-3.41c-1.55-7.61,0.35-15.09,1.16-22.61c0.2-3.31,0.58-6.58,1.13-9.83c1.93-2.68,4.22-5.09,6.48-7.51c-5.43-1.11-9.5-5.07-13.27-8.84c-3.16-3.51-3.2-8.54-4.13-12.93c-2.61-0.44-5.08-0.84-7.64-1.26c-2.02,4.14-2.97,9.41-6.5,12.45c-7.78,0.26-15.41,1.65-23.11,2.61c-7.94-2.57-15.44-6.53-23.21-9.66c-0.96,2.69-1.6,5.48-2.53,8.19c-5.15-1.23-10.96-3.49-16.05-0.7c-6.92,3.8-12.21,9.89-17.81,15.33c-4.57,3.74-2.78,10.8-7.27,14.61c-2.84,3.03-7.1,4.04-10.66,5.8c0.78,2.66,1.56,5.35,2.66,7.9c3.58,6.07,10.11,11.34,9.06,19.04c1.46,0.12,2.04,0.91,1.74,2.36c1.68,0.49,3.34,1.04,5,1.62c1.47,0.32,2.05,1.18,1.75,2.57c3.69,1.22,7.36,2.51,11.14,3.41c0.09-1.88,2.77-2.14,3.26-0.34c5.16-1.63,10.4-3.01,15.74-3.96c-0.39,10.36-6.57,18.96-10.55,28.14c-0.57,3.1,1.76,5.75,3.84,7.74c1.24,0.74,1.48,2.33,0.57,3.44c-0.34,0.73-1.04,2.2-1.38,2.93c2.27-0.22,4.55-0.47,6.83-0.72c1.46,4.8,3.78,9.65,2.78,14.77c-1.06,6.75,2.27,12.96,4.23,19.18c-3.76-1.78-7.58-3.45-11.61-4.52c0.85,3.8,1.4,7.78,3.87,10.94c6.44,9.51,11.34,20.71,21.1,27.36c1.07,0.44,1.51,1.21,1.33,2.3c-0.06,0.47-0.17,1.4-0.23,1.87c1.86-0.17,3.72-0.34,5.6-0.5c1.8-0.41,3.47,0.45,5.02,1.27c6.09,1.79,12.33,3.25,18.58,4.49C669.74,362.315,671.77,360.595,673.78,359.585 M691.93,240.635c1.09-0.46,2.19-0.91,3.31-1.35c0.229-1.49,0.479-2.96,0.74-4.44c0.14-1.11,0.81-1.68,2.01-1.69c6.03-1.36,11.64-4.12,17.6-5.75c1.32-5.8,3.39-11.49,3.68-17.47c-0.03-1,0.07-1.98,0.3-2.95c0.21-1.17,0.43-2.33,0.66-3.49c3.38-2.03,5.46-5.39,6.98-8.93c-2.29-1.45-4.49-3.07-6.96-4.2c-0.58-0.22-1.74-0.65-2.32-0.87c-2.2,5.1-7.26,10.67-3.86,16.32c0.82,1.06,1.22,2.59,0.17,3.67c-2.01,4.77-6.88,6.98-10.1,10.75c-4.21,4.14-9.85,6.39-14.81,9.44C690.25,233.325,691.12,236.955,691.93,240.635 M672.63,254.455c-4.63,3.53-5.19,9.39-3.15,14.67c2.53-0.86,3.6-3.21,3.04-5.76c-0.23-1-0.06-1.93,0.5-2.79C673.27,258.525,672.84,256.475,672.63,254.455 M684.31,305.865c-1.21-2.6-4.32-3.46-6.51-4.89c-0.41-1.04-0.82-2.07-1.22-3.1c0.61,0.07,1.84,0.22,2.45,0.29c1.17,0.01,1.81,0.6,1.91,1.77l0.11,0.62c-0.18-6.63-5.98-11.05-6.71-17.51c-0.29-0.97-0.33-1.95-0.1-2.94c0.12-1.02,0.37-3.08,0.49-4.11c-2.31,0.86-4.56,1.83-6.77,2.89c1.53-0.78,1.98,1.32,1.05,2.18c-2.58,4.38,0.16,9.5,1.25,13.88c1.79,5.69,2.71,11.61,3.67,17.47c2.35,1.86,5.14,3.06,7.74,4.54C683.42,313.545,685.43,309.925,684.31,305.865 M667.62,296.795c-3.66,2.94-7.17,6.78-7.05,11.79c1.01-0.04,3.03-0.11,4.04-0.14C665.91,304.645,667.07,300.785,667.62,296.795 M770.41,322.895c-0.63,0.21-1.9,0.62-2.53,0.82c2.58,3.25,5.3,6.39,7.44,9.97c1.87-3,5.92-6.7,2.96-10.29c-0.68-0.78-0.98-1.67-0.89-2.69c-0.27-2.58-1.59-4.87-2.62-7.19c-2.53,0.54-5.05,1.13-7.6,1.51c0.02-1.65,0.04-3.31,0.02-4.95c0.14-0.55,0.42-1.65,0.56-2.2c-0.81-0.11-2.43-0.32-3.24-0.43c-0.05,4.21-0.07,8.42-0.08,12.64c2.34,0.16,4.68,0.02,7.03,0.17C773.84,320.375,771.94,323.065,770.41,322.895 M651.81,319.775c-2.78,3-6.91,4.45-9.38,7.72c-1.84,2.22,0.1,4.87,0.92,7.09c2.32,4.22,4.22,11.11,10.73,9.48c4.49,1.37,7.38-2.16,10.35-4.63c0.79,3.51,1.47,7.03,2.24,10.56c2.42-1.41,5.85-2.03,7.44-4.36c-0.31-8.07,5.5-14.08,7.37-21.54c-3.15,0.98-6.43,1.8-9.61,2.57c-1.14-0.18-3.43-0.54-4.58-0.72c-0.46-0.16-1.37-0.48-1.83-0.65c0.87-3.49,1.63-7.03,1.88-10.63c-1.52-1.11-4.58-3.35-6.1-4.47C657.38,312.615,655.24,316.865,651.81,319.775 M716.22,314.735c-0.7,2.41-1.53,4.75-2.14,7.19c2.21-0.34,4.45-0.56,6.7-0.62c2.33-0.21,4.66-0.43,6.99-0.69c0.86-0.11,1.75-0.23,2.64-0.35c2.13,3.19,4.69,6.06,7.35,8.83c0.61-5.42-2.51-10.07-5.11-14.5C727.25,315.965,721.66,315.605,716.22,314.735 M745.38,325.445c0.99-0.68,1.98-1.36,2.99-2.03c0.01-0.85,0.05-2.55,0.07-3.39c-1.24,0.36-2.47,0.74-3.68,1.14c-0.55,0.02-1.66,0.04-2.21,0.06c0.06,0.83,0.18,2.51,0.24,3.34C743.76,324.505,744.63,324.795,745.38,325.445 M754.89,329.085c1.41-1.37,2.81-2.76,4.18-4.18c-1.57-0.18-3.14-0.35-4.69-0.51C754.54,325.955,754.71,327.515,754.89,329.085 M784,335.575c0.54,0.85,0.73,1.78,0.55,2.79c0.04,4.68,0.6,11.77,6.25,13.2c1.24,0.42,2.42,1.11,3.15,2.25l0.54,0.66c-0.1-4.59-3.38-7.58-5.36-11.28c-1.65-5.98,0.69-13.84-5.5-17.62C783.7,328.915,783.47,332.245,784,335.575 M738.22,351.265c2.28-1.87,2.94-4.92,3.98-7.54c-3.94,1.24-7.93,2.31-12,3c-2.32-3.02-4.71-6.29-8.55-7.44c-4.96-2.08-10.62-5.53-16.02-2.74c-3.32-3.38-7.52-5.99-12.54-5.71c0.63,4.98,1.42,10.02,3.73,14.54l1.31-0.02c1.86-0.06,3.72,0.2,5.58,0.77c1.35,0.38,2.71,0.78,4.08,1.2c0.16,3.48,0.17,6.98-0.01,10.46c5.79,1.61,12.23,3.66,17.67-0.04c3.17,3.67,7.41,5.98,12.14,7.12c0.23-1.55,0.71-4.65,0.94-6.19c-2.38-1.46-4.77-2.91-7.15-4.37c0.24-0.97,0.5-1.92,0.77-2.88C734.16,351.565,736.26,351.985,738.22,351.265 M747.51,336.595c1.25-0.08,2.51-0.15,3.77-0.21c0.43-1.03,0.86-2.05,1.31-3.06c-1.69-0.35-3.38-0.7-5.05-1.06C747.53,333.705,747.52,335.145,747.51,336.595 M740.72,357.255c3.73,5.23,7.87,12.81,15.28,12.14c-0.18-0.56-0.54-1.67-0.72-2.22C755.01,360.005,746.17,358.795,740.72,357.255 M732.82,389.945c-3.18-4.36-3.65-9.92-6.24-14.55c-2.65-4.47-3.5-10.4-8.64-12.82c-1.37,5.26-2.32,10.61-3.11,16c0.24,1.43-1.62,2.05-2.38,0.88c-3.72-2.13-5.71-5.84-5.91-10.22c-0.44-1.1-0.59-2.38,0.05-3.43l0.46-1.11c-3.66-0.73-7.43-1.31-11.17-0.83c-4.22,1.41-5.51,6.3-7.89,9.56c-1.01-1.29-2-2.6-2.96-3.91c-4.9,4.1-13.1,6.94-12.4,14.59c-0.05,1.28-0.33,2.89-1.77,3.29c-5.3,2.55-10.89,4.52-15.89,7.66c-1.5,0.99-2.58,2.57-2.64,4.42c-1.65,13.09,5.13,25.3,5.65,38.3c1.33-0.09,2.68-0.18,4.03-0.28c0.97-0.11,1.96-0.14,2.96-0.08c9.6-0.06,17.45-6.79,26.521-8.85c4.88-1.58,8,2.36,10.39,5.67c2.44,3.52,6.3,5.52,9.75,7.89c1.16,3,1.44,6.91,4.12,9.14c3.58,0.61,7.22-0.03,10.8-0.46c3.5-0.72,8.19-0.65,10.47-4.02c0.55-1.06,1.34-1.39,2.38-0.98c-0.11-7.39,2.05-14.43,5.78-20.78c0.08-0.56,0.23-1.68,0.31-2.24c0.56-5.14-0.03-10.4-0.92-15.45C742.11,400.645,735.92,396.295,732.82,389.945 M774.13,387.045c-2.23-1.19-4.52-2.24-6.85-3.19c0.84,6.64,1.34,13.59,4.35,19.7C777.2,399.325,771.4,392.495,774.13,387.045 M794.97,401.925c-2.66,2.09,1.33,2.19,2.9,2.5c0.57,0.02,1.71,0.05,2.27,0.07c2.72-0.38,3.11-4.32,4.28-6.4c-2.6,0.35-5.12,0.95-7.56,1.79C796.5,400.815,795.87,401.495,794.97,401.925 M813.64,398.695c-2.08,2.31-3.9,4.88-5.24,7.7c-1.62,2.94,1.29,5.67,2.64,8.08c1.5-3.68,3.25-7.48,3.15-11.53C813.98,401.525,813.75,400.115,813.64,398.695 M788.49,435.135c1.1,4.84,3.229,9.63,2.34,14.71c-1.56,4.38-5.11,7.65-7.52,11.56c-2.55,4.47-7.13,7.01-11.11,9.98c0.12,4.16,2.72,9.01,7.91,6.7c3.73,0.13,5.64-3.56,5.23-6.87c-0.18-1.11,0.19-1.94,1.1-2.52c7.36-4.71,12.74-12.19,14.63-20.71c0.09-0.96,0.33-1.89,0.71-2.76C795.11,445.265,792.08,439.535,788.49,435.135 M723.63,455.055c1,4.84,2.04,9.71,3.71,14.37c5.46-2.19,8.23-7.54,7.8-13.37C731.27,456.055,727.42,455.755,723.63,455.055z'/></svg>"
          ], [
            "south_asia",
            "South Asia",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='south_asia' d='M601.63,246.995c-1.07,0.51-2.16,0.62-3.26,0.34c-3.78-0.9-7.45-2.19-11.14-3.41c-1.28-0.34-1.86-1.2-1.75-2.57c-1.66-0.58-3.32-1.13-5-1.62c-1.29-0.26-1.88-1.04-1.74-2.36c1.05-7.7-5.48-12.97-9.06-19.04c-3.8,0.06-7.53,0.15-11.31,0.2c-0.73-0.14-2.2-0.42-2.94-0.56c-6.29,1.78-12.33,4.28-18.51,6.36c-3.12,8.02,0.28,16.11,2.42,23.86c2.17,4.11-1.04,7.46-2.88,10.72c3.76,0.44,7.52,0.82,11.31,1.26c3.44,5.13,8.18,9.16,12.36,13.65c2.5,5.67,2.57,12.13,5.07,17.83c2.35,5.49,3.82,11.29,5.51,17.01c1.95-0.71,3.89-1.43,5.83-2.16c0.76,2.94,1.48,5.9,2.28,8.86c1.94-0.91,3.93-1.79,5.63-3.12c0.2-5.39-4.38-9.48-4.46-14.8c-0.021-4.48-1.46-9.7,2.32-13.11c4.66-5.32,9.59-10.53,15.38-14.64c3.07,0.03,6.11,0.85,9.13,1.48c3.98-9.18,10.16-17.78,10.55-28.14C612.03,243.985,606.79,245.365,601.63,246.99 M591.761,303.9c0,6.72,0.83,13.56-0.69,20.19c1.29,0.4,2.56,0.81,3.87,1.2c3.3-6.65,2.56-14.28,0.82-21.29C594.421,303.96,593.091,303.93,591.761,303.9z'/></svg>"
          ], [
            "middle_east_north_africa",
            "Middle East & North Africa",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='middle_east_north_africa' d='M539.34,248.195c-2.14-7.75-5.54-15.84-2.42-23.86c-2.55-2.9-4.72-6.23-7.82-8.55c-3.76,0.07-7.32,1.15-10.88,2.17c-3.09-0.28-5.96-1.47-8.81-2.57c-3.41-1.2-6.9-2.16-10.37-3.16c-0.29,1.63-0.88,4.87-1.17,6.5c-5.93,0.71-11.98,0.86-17.75,2.52c-2.52,0.6-2.94,3.38-3.46,5.49c-0.93,3.22-1.05,7.96-4.96,9.05c-8.68,2.12-17.59-0.32-25.24-4.46c-2.21,2.25-4.4,4.52-6.57,6.8c-4.71-2.71-9.39-5.47-14.02-8.3c-1.19-3.9-1.29-8.46-3.94-11.78c-3.08-2.15-7.27-0.19-10.57-0.3c-8.18,0.62-16.06,2.8-24.04,4.54c-1.61,0.37-3.24,0.7-4.85,1.04c-3.75,5.03-8.11,9.99-8.7,16.54c-0.25,3.94-4.05,5.46-7.03,7.06c-0.11,0.71-0.32,2.14-0.42,2.85c0.35,0.06,1.06,0.18,1.42,0.25c5,1.01,10.31,1.72,14.65,4.58c1.96,1.35,3.73,2.96,5.43,4.62c6.21,6.14,12.25,12.44,18.54,18.5c8.44-6.15,16.81-15.36,28.23-14.57c5.96,1.45,10.85,5.89,16.83,7.39c3.56-1.85,6.28-5.21,10.11-6.5c6.51-0.34,13,0.35,19.5,0.67c-1.49-4.16-3.04-8.29-4.39-12.49c7.47,11.08,12.24,23.78,15.75,36.61c1.42,2.73,2.93,5.42,4.4,8.13c9.35-5.37,19.76-9.02,27.99-16.19c3.55-4.15,6.63-8.67,9.82-13.09c-2.02-3.28-3.91-6.63-5.5-10.14c2.46,0.42,4.91,0.88,7.36,1.37C538.3,255.655,541.51,252.305,539.34,248.195z M514.19,255.825c-2.91-3.79-4.66-8.33-5.75-12.95c4.8,4.17,9.01,9.01,12.95,14C519.02,256.865,515.88,258.145,514.19,255.825z'/></svg>"
          ], [
            "europe_central_asia",
            "Europe & Central Asia",
            "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 833 532'><path id='europe_central_asia' d='M527.62,81.815c-1.81-4.6-3.69-9.97-0.39-14.54c5.21-8.59,15.11-11.99,24.07-15.18c3.03-0.96,3.76-4.4,5-6.91c-7.53-0.09-14.66,2.35-21.78,4.44c-3.29,1.39-7.55,2.13-9.06,5.83c-4.25,6.76-8.13,13.75-12.72,20.29C515.48,81.435,521.66,83.515,527.62,81.815 M341.44,55.475c2.64-5.77,2.33-12.32,3.2-18.47c2.12-5.6,7.66-8.51,12.64-11.14c-2.48-4.16-7.41-4.5-11.73-5.39c-1.93-4.7-5.32-9.04-10.31-10.7c-6.87-3.27-14.33,0.62-21.45-1.67c-0.25,1.23-0.74,3.68-0.99,4.91c-9.18-5.71-20.98-4.25-30.18,0.55c-2.57,2.44-4.15,5.811-7.13,7.86c-0.84,0.83-1.73,0.88-2.67,0.14l-1-0.64c0.11,2.5,0.33,7.51,0.44,10.01c2.76,5.82,9.96,5.83,15.44,6.91c1.62,8.65,2.63,17.41,3.47,26.16c-0.36,4.92-3.41,9.54-2.26,14.57c0.59,0.83,0.8,1.76,0.63,2.77c-1.49,7.83,3.9,13.85,10.46,16.91c2.5-5.38,5.09-10.73,7.75-16.03c6.5-1.83,12.02-5.88,18.47-7.86c3.54-1.57,8.57-2.06,9.74-6.47c1.76-4-1.85-7.38-4.19-10.16C334.89,56.945,339.65,58.825,341.44,55.475 M782.56,84.155c-0.47,1.66-0.93,3.31-1.37,4.97c-7.42-4.41-16.63-3.57-24.01-8.03c-3.6-1.87-8.34-4.57-11.86-1.13c-0.67,1.11-2.27,1.19-2.73-0.14c-1.93-2.52-4.26-4.72-6.5-6.93c-2.9-1.18-6.16-0.08-9.1-1.11c-2.08-0.67-4.09-1.6-6.23-2.06c-1.22-0.07-2.43-0.15-3.63-0.26c-3.82-0.47-6.46,2.71-8.73,5.25c-0.65,0.86-1.51,1.19-2.58,0.99c-5.28-0.07-10.45,1.31-15.52,2.62c-1.25-3.96-2.14-8.02-3.06-12.05c-3.4-0.93-6.9-1.53-10.4-1.78c-1.15,1.67-2.18,3.45-3.67,4.83c-7.39-2.12-14.71-4.59-22.08-6.8c4.31-4.31,3.24-10.23,1.69-15.56c-4.26-1.08-9.13-0.43-12.88-3.02c-2.73-1.15-5.55-4.33-8.78-2.89c-4.63,1.89-7.72,6.08-11.67,8.99c-0.94,1.22-2.53,0.86-3.63,0.13c-3.57-2.12-7.39,0.33-10.92,1.18c-3.15,1.06-6.58,1.43-9.43,3.17c-1.81,2.24-2.25,5.26-3.29,7.9c-3.35,0.92-6.69,1.79-9.97,2.88c-1.07,0.46-2.38,0.73-3.38-0.02c0.26,1.85,0.56,3.69,0.9,5.52c-1.38,0.87-2.76,1.75-4.07,2.7c-1.01,1.03-2.92,1.68-3.77,0.1c-1.22-1.48-2.42-2.97-3.62-4.46c-1.52,1.45-3,2.93-4.49,4.39c-0.29-1.5-0.56-3-0.83-4.5l-0.86,0.32c-0.58,0.08-1.73,0.23-2.3,0.31c-0.68-0.02-2.04-0.06-2.72-0.08c-1,0.05-1.99,0.06-2.97,0.03c-6.52,2.06-5,11.43-6.64,16.52c-2.74,0.12-8.21,0.37-10.95,0.49c-0.51,0.22-1.51,0.66-2.02,0.88c-6.07,4.03-13.7,2.67-20.54,3.83c-3.68,0.95-6.63,3.67-8.44,6.92c-0.37,1.29-2.96,3.74-3.3,1.27c-0.13-2.59,0.18-5.17,0.1-7.75c-1.56,0.02-3.09,0.22-4.62,0.42c-0.48,3.08-0.89,6.17-1.35,9.26c-0.96-0.03-1.91-0.06-2.85-0.08l-0.69-0.01c-0.12-0.56-0.35-1.69-0.47-2.25c0.55-4.48-4.63-5.86-7.42-8.12c-4.37-3.11-10.29-2.92-14.51-6.16c-1.89-3-4.35-6.24-8.3-5.63c-1.74,0.02-3.44,0.04-5.11,0.04c-3.89,0.05-7.2,2.34-10.38,4.3c-6.12,4.05-13.19,7.44-17,14.05c-3.09,3.72-4.11,8.54-6.6,12.59c-3.87,4.99-9.23,8.49-14.39,11.98c0.13,0.45,0.39,1.33,0.52,1.77c0.49,1.64,0.45,3.33-0.13,5.08c-0.65,4.67,0.22,9.36,1.08,13.95c3.49-1.03,7.01-2.11,10.44-3.38c-5.19,4.58-4.51,11.72-4.79,18.07c-5.61,0.48-9.03,4.69-12.28,8.67c-2.82-4.04-4.19-8.88-6.79-13.04c-3.39-4.97-2.78-11.3-4.86-16.78c-3.85,0.59-7.93,2.12-9.09,6.15c-1.5,5.26-5.89,8.7-8.52,13.26c-0.29,3.7-1.17,7.83,0.59,11.34c2.66,2.02,5.88,0.05,8.62-0.7c-1.86-2.64,2.4-3.49,1.38-0.3c-0.23,2.29-0.66,4.54-1.09,6.8c1.13,0.05,2.27,0.09,3.41,0.12c0.99-0.04,1.96,0.08,2.92,0.36c0.53,0.12,1.58,0.37,2.1,0.5c0.13,0.61,0.38,1.83,0.51,2.44c-1.7,0.42-5.09,1.26-6.79,1.68c2.46,4.73,5.97,8.77,9.08,13.07c-1.47,1.59-2.98,3.15-4.37,4.82c-0.56,1.31-2.18,1.05-2.73-0.11c-3.2-4.36-8.71-1.13-12.91-0.28l0.48,1.12c0.09,0.57,0.27,1.71,0.36,2.28c-0.18,3.27-0.21,6.55-0.1,9.82c-0.01,0.57-0.02,1.72-0.03,2.29c-1.01,5.3,2.93,9.34,6.84,12.16c1.61-0.34,3.24-0.67,4.85-1.04c3.93-1.6,8.15-3.58,10.14-7.58c3.83-9.05,11.45-15.77,20.29-19.76c4.51,6.36,11.12,11,14.27,18.37c-2.63,1.19-5.01,2.52-7.52,3.83c1.89,1.64,3.78,3.28,5.67,4.93c3.3-4.19,6.63-8.35,9.97-12.5c3.01,4.11,6.6,7.86,10.98,10.53c0.91-4.43,1.8-8.87,2.67-13.31c1.78,4.45,2.93,9.16,5.18,13.4c2.92,2.5,7.44,1.3,10.68,3.28c1.37,1.03,2.51,2.34,3.73,3.57c1.09-0.1,2.18-0.21,3.28-0.31c0.52-2.11,0.94-4.89,3.46-5.49c5.77-1.66,11.82-1.81,17.75-2.52c0.29-1.63,0.88-4.87,1.17-6.5c3.47,1,6.96,1.96,10.37,3.16c0.64-2.84,2.22-5.83,1.09-8.77c-1.88-5.67-4.27-11.17-5.61-17.01c3.46-1.03,6.89-2.32,10.5-2.77c2.05-0.38,0.94,2.57-0.5,2.53c-1.54,0.77-3.07,1.55-4.6,2.33c3.51,8.47,6.25,17.23,7.93,26.26c3.56-1.02,7.12-2.1,10.88-2.17c3.1,2.32,5.27,5.65,7.82,8.55c6.18-2.08,12.22-4.58,18.51-6.36c0.76-1.34,2.85-1.13,2.94,0.56c3.78-0.05,7.51-0.14,11.31-0.2c-1.1-2.55-1.88-5.24-2.66-7.9c3.56-1.76,7.82-2.77,10.66-5.8c4.49-3.81,2.7-10.87,7.27-14.61c5.6-5.44,10.89-11.53,17.81-15.33c5.09-2.79,10.9-0.53,16.05,0.7c0.93-2.71,1.57-5.5,2.53-8.19c7.77,3.13,15.27,7.09,23.21,9.66c7.7-0.96,15.33-2.35,23.11-2.61c3.53-3.04,4.48-8.31,6.5-12.45c2.56,0.42,5.03,0.82,7.64,1.26c0.93,4.39,0.97,9.42,4.13,12.93c3.77,3.77,7.84,7.73,13.27,8.84c-2.26,2.42-4.55,4.83-6.48,7.51c-0.55,3.25-0.93,6.52-1.13,9.83c3.57-2.16,7.68-3,11.79-3.44c2.33-3.44,4.73-6.82,7.14-10.21c3.52-4.73,3.61-10.92,5-16.44c0.34-0.46,1.02-1.38,1.36-1.84c0.11,0.38,0.34,1.14,0.46,1.52c0.39,5.9,0.36,11.82,0.59,17.73c0.58,0.22,1.74,0.65,2.32,0.87c2.51-2.36,2.13-6.16,2.76-9.21c1.33-7.43-0.54-15.01-1.69-22.31c-5.5-1.67-11.51-1.6-16.57-4.55c5.84-5.93,10.54-13.37,17.71-17.81c0.88-0.58,1.81-0.55,2.77,0.07c7.14,1.65,14.66,1.2,21.97,1.84c1.84-4.42,4.28-8.54,7.23-12.31c0.42-1.44,2.35-1.05,2.44,0.37c0.84,2.23,2.18,4.23,3.7,6.07c-4.17,5.31-8.48,10.49-13.43,15.09c0.47,7.37,1.65,14.67,3.36,21.85c0.76,0.01,2.28,0.04,3.04,0.05c5.11-6.79,9.88-13.92,13.45-21.65c1.55-3.07-0.6-6.21-1.42-9.16c3.15-1.99,6.47-3.78,9.42-6.09l0.49-0.41c0.91,0.25,2.74,0.73,3.65,0.98c0.94,0.28,1.89,0.56,2.85,0.84c5.1-6.6,13-10.06,21.08-11.21c-0.07-3.26-0.09-6.53,0.34-9.77c1.03-4.41,5.51-6.65,7.16-10.73c1.1-2.65,2.43-5.21,4.03-7.59C807.19,85.225,793.68,84.225,782.56,84.155z M385.7,162.815c-0.05-1.84-0.16-5.51-0.22-7.34c1.02,0.46,2.04,0.91,3.07,1.37C387.59,158.835,386.64,160.815,385.7,162.815z M394.6,173.925c-0.14-0.32-0.43-0.97-0.57-1.29C395.45,170.455,397.2,174.535,394.6,173.925z M438.12,204.965c-4.42-3.76-8.85-7.77-11.23-13.19c4.05,3.22,8.12,6.42,12.41,9.32C438.91,202.385,438.5,203.665,438.12,204.965z M444.704,121.556c0.179,3.023,0.504,6.094,0.636,9.14c1.19,2.4,2.7,4.63,4.09,6.94c-2.52,5.01-4.77,10.14-7.13,15.22c-5.5,0.7-10.72,2.77-16.23,3.35c1.14,1.52-2.28,2.63-2.17,0.7c-0.88-1.14-1.76-2.27-2.64-3.41c3.78,0.49,7.87,0.2,10.98-2.27c4.32-4.67,5.93-11.02,7.99-16.85c1.12-4.25-3.12-9.2,0.27-12.85c3.62-4.56,6.96-9.32,10.1-14.22c0.16,1.45,0.49,4.35,0.65,5.8C448.83,115.624,444.943,117.717,444.704,121.556z M454.54,132.865c0.94-1.11,2.72-1.21,4.05-0.85C460.19,133.855,454.77,134.815,454.54,132.865z M483.39,105.225c0.79,1.46,1.61,2.91,2.41,4.37c-3.5-0.36-7.11-0.62-10.28-2.27C478.12,106.565,480.75,105.865,483.39,105.225z M479.47,188.485c-1.11,1.45-3.02-0.54-1.66-1.66C478.93,185.465,480.92,187.385,479.47,188.485z M476.26,200.025c-1.23,1.23-2.44,1.22-3.64-0.01c-3.07,1.83-6.33,3.33-9.57,4.82c-0.51-2.02-1.2-4.04-1.19-6.15c1.32-3.52,3.58-6.61,5.46-9.86c4.19,5.28,11.54,2.83,16.76,6.08c2.16,2.88,4.09,5.95,5.91,9.07C485.23,203.475,480.48,202.345,476.26,200.025z M563.81,93.445c-1.04-1.29-1.04-3.57,0-4.86C565.41,89.035,565.41,92.995,563.81,93.445 M444.69,121.695c0.002-0.048,0.011-0.092,0.014-0.14c-0.011-0.173-0.025-0.348-0.034-0.521L444.69,121.695 M340.98,105.145c2.18,5.34,3.83,15.85,11.97,12.85c1.13-0.39,2.32-0.61,3.53-0.52c0.59,0.01,1.77,0.03,2.36,0.04c7,1.57,9.34-6.93,9.48-12.13C359.71,101.875,349.59,101.475,340.98,105.145 M413.6,206.395c0.53,2.06,1.9,4.81,4.19,5.07c0.56-0.03,1.68-0.08,2.25-0.11c0.35-0.23,1.05-0.68,1.4-0.9c-0.04-4.44-1.94-8.54-3.5-12.6C416.23,200.505,413.58,203.055,413.6,206.395 M450.56,221.285c-1.37,2.07-0.08,4.49,0.33,6.65c1.83-0.41,5.49-1.24,7.32-1.65C456.09,224.075,453.87,221.435,450.56,221.285z'/></svg>"
          ]],
          income_groups: [[
            "lower_middle_income",
            "Lower middle income",
            null
          ], [
            "low_income",
            "Low income",
            null
          ], [
            "upper_middle_income",
            "Upper middle income",
            null
          ], [
            "high_income",
            "High income",
            null
          ]],
          landlocked: [[
            "landlocked",
            "Landlocked",
            null
          ], [
            "coastline",
            "Coastline",
            null
          ]],
          g77_and_oecd_countries: [[
            "others",
            "Others",
            null
          ], [
            "oecd",
            "OECD",
            null
          ], [
            "g77",
            "G77",
            null
          ]],
          main_religion_2008: [[
            "eastern_religions",
            "Eastern religions",
            null
          ], [
            "muslim",
            "Muslim",
            null
          ], [
            "christian",
            "Christian",
            null
          ]]
        };

        return shapes[geoCat];
      }

      var DDF1CSVReader = Reader.extend({

        /**
         * Initializes the reader.
         * @param {Object} reader_info Information about the reader
         */
        init: function (reader_info) {
          this._name = 'ddf1-csv';
          this._data = [];
          this._ddfPath = reader_info.path;
          this.ddf = new Ddf(this._ddfPath);
        },

        /**
         * Reads from source
         * @param {Object} query to be performed
         * @param {String} language language
         * @returns a promise that will be resolved when data is read
         */
        read: function (queryPar, language) {
          var _this = this;
          var query = deepExtend({}, queryPar);
          var p = new Promise();

          function isShapeQuery() {
            return queryPar.select.indexOf('shape_lores_svg') >= 0 && queryPar.where['geo.cat'].length > 0;
          }

          if (isShapeQuery()) {
            _this._data = getShapes(queryPar.where['geo.cat']);
            p.resolve();
          }

          if (!isShapeQuery()) {
            _this.ddf.getIndex(function () {
              // get `concepts` and `entities` in any case
              // this data needed for query's kind (service, data point) detection
              _this.ddf.getConceptsAndEntities(query, function (err, concepts, entities) {
                if (err) {
                  p.reject(err);
                }

                // service query: it was detected by next criteria:
                // all of `select` section of query parts are NOT measures
                if (!err && _this.ddf.divideByQuery(query).measures.length <= 0) {
                  _this._data = entities;
                  p.resolve();
                }

                // data point query: it was detected by next criteria:
                // at least one measure was detected in `select` section of the query
                if (_this.ddf.divideByQuery(query).measures.length > 0) {
                  _this.ddf.getDataPoints(query, function (err, data) {
                    if (err) {
                      p.reject(err);
                    }

                    if (!err) {
                      _this._data = data;
                      p.resolve();
                    }
                  });
                }
              });
            });
          }

          return p;
        },

        /**
         * Gets the data
         * @returns all data
         */
        getData: function () {
          return this._data;
        }
      });

      var FILE_CACHED = {}; //caches files from this reader
      var FILE_REQUESTED = {}; //caches files from this reader

      var CSVReader = Reader.extend({

        /**
         * Initializes the reader.
         * @param {Object} reader_info Information about the reader
         */
        init: function(reader_info) {
          this._name = 'csv';
          this._data = [];
          this._basepath = reader_info.path;
          this._parsers = reader_info.parsers;
          if(!this._basepath) {
            error$1("Missing base path for csv reader");
          }
        },

        /**
         * Reads from source
         * @param {Object} query to be performed
         * @param {String} language language
         * @returns a promise that will be resolved when data is read
         */
        read: function(query, language) {
          var _this = this;
          var p = new Promise();

          //this specific reader has support for the tag {{LANGUAGE}}
          this.path = this._basepath.replace("{{LANGUAGE}}", language);

          //replace conditional tags {{<any conditional>}}
          this.path = this.path.replace(/{{(.*?)}}/g, function(match, capture) {
            capture = capture.toLowerCase();
            if(isArray(query.where[capture])) {
              return query.where[capture].sort().join('-');
            }
            return query.where[capture];
          });

          //if only one year, files ending in "-YYYY.csv"
          var loadPath = this.path;
          if(query.where.time && query.where.time[0].length === 1) {
            loadPath = loadPath.replace(".csv", "-" + query.where.time[0][0] + ".csv");
          }

          _this._data = [];

          (function(query, p) {

            // load and then read from the cache when loaded
            var loadPromise = _this.load(loadPath, parse);
            loadPromise.then(function() {
              parse(FILE_CACHED[loadPath]);
            })

            function parse(res) {

              var data = res;   

              //rename geo.category to geo.cat
              var where = query.where;
              if(where['geo.category']) {
                where['geo.cat'] = clone(where['geo.category']);
                where['geo.category'] = void 0;
              }

              // load (join) any properties if necessary
              var propertiesLoadPromise = _this.loadProperties(data, query);

              // once done, continue parsing
              propertiesLoadPromise.then(function() {

                //make sure conditions don't contain invalid conditions
                var validConditions = [];
                forEach(where, function(v, p) {
                  for(var i = 0, s = data.length; i < s; i++) {
                    if(data[i].hasOwnProperty(p)) {
                      validConditions.push(p);
                      return true;
                    }
                  };
                });

                // only use valid conditions
                where = clone(deepClone(where), validConditions);

                // 
                where = mapRows([where], _this._parsers)[0];

                //filter any rows that match where condition
                data = filterAny(data, where);

                //warn if filtering returns empty array
                if(data.length == 0) {
                  p.reject("data reader returns empty array, that's bad");
                  return;
                }

                //only selected items get returned
                data = data.map(function(row) {
                  return clone(row, query.select);
                });

                // grouping
                data = _this.groupData(data, query);


                // hack: if no year queried, add it, vizabi expects it
                if (typeof data[0].year === 'undefined' && typeof data[0].time === 'undefined') {
                  var isDatapointQuery = true;
                  forEach(query.select,function(column) {
                    // heuristic: if properties are mentioned, it's not a datapoint query
                    if (column.indexOf('.') !== -1) {
                      isDatapointQuery = false;
                    }
                  });
                  if (isDatapointQuery) {
                    forEach(data, function(row) {
                      row.year = new Date("2011");
                    })
                  }
                }

                // hack for Stats SA: if no geo queried, add it, agepyramid expects it even if there's only 1 country.
                // heuristic: check age or age_by_1_year to apply it only to age pyramid
                if (typeof data[0].geo === 'undefined' && (typeof data[0].age !== "undefined" || typeof data[0].age_by_1_year !== "undefined")) {
                  var isDatapointQuery = true;
                  forEach(query.select,function(column) {
                    // heuristic: if properties are mentioned, it's not a datapoint query
                    if (column.indexOf('.') !== -1) {
                      isDatapointQuery = false;
                    }
                  });
                  if (isDatapointQuery) {
                    forEach(data, function(row) {
                      row.geo = "zaf";
                    })
                  }
                }

                // sorting
                // one column, one direction (ascending) for now
                if(query.orderBy && data[0]) {
                  if (data[0][query.orderBy]) {
                    data.sort(function(a, b) {
                      return a[query.orderBy] - b[query.orderBy];
                    });
                  } else {
                    p.reject("Cannot sort by " + query.orderBy + ". Column does not exist in result.");
                  }
                }


                _this._data = data;
                p.resolve();

              })


            }

          })(query, p);

          return p;
        },

        /**
         * Gets the data
         * @returns all data
         */
        getData: function() {
          return this._data;
        },


        format: function(res) {

          //make category an array
          res = res.map(function(row) {
            if(row['geo.cat']) {
              row['geo.cat'] = [row['geo.cat']];
            }
            return row;
          });

          //format data
          res = mapRows(res, this._parsers);

          return res;
        },

        load: function(path) {
          var _this = this;

          //if not yet cached or request, start a request
          if(!FILE_CACHED.hasOwnProperty(path) && !FILE_REQUESTED.hasOwnProperty(path)) {
            // load the csv
            d3.csv(path, function(error, res) {

              if(!res) {
                error$1("No permissions or empty file: " + path, error);
                return;
              }

              if(error) {
                error$1("Error Happened While Loading CSV File: " + path, error);
                return;
              }

              //fix CSV response
              res = _this.format(res);

              //cache and resolve
              FILE_CACHED[path] = res;
              FILE_REQUESTED[path].resolve();
              // commented this out because the promise needs to stay for future requests, indicating it is already in the cache
              // FILE_REQUESTED[path] = void 0; 

            });
            FILE_REQUESTED[path] = new Promise();
          }    
          // always return a promise, even if it is already in the cache
          return FILE_REQUESTED[path];
        },

        loadProperties: function(data, query) {
            var _this = this;

            // see if there are any properties used in the query and load them
            // At the moment properties are loaded and added to the data-set only when required but for every query. Maybe loading and adding them to the data-set once is better?
            var propertiesPromises = [];
            var propertiesByKey = {};

            // check both select and where for columns that actually refer to properties
            forEach(query.select, function(column) {
              checkForProperty(column);
            });
            forEach(query.where, function(values, column) {
              checkForProperty(column);
            });

            // load properties for each column referring to property in the dataset
              
            // The below process O(n*m*o) but both n and o are typically small: n = number of property-sets, m = size of data-set, o = number of columns in property-set
            // for each requested property-set
            forEach(propertiesByKey, function(properties, key) {
              properties[key] = true; // also retrieve the key-column
              propertiesPromises.push(loadProperties(properties, key));
            });

            return propertiesPromises.length ? Promise.all(propertiesPromises) : new Promise.resolve();


            function checkForProperty(column) {
              var split = column.split('.');
              if (split.length == 2) {
                propertiesByKey[split[0]] = propertiesByKey[split[0]] || [];
                propertiesByKey[split[0]].push(column);
              }
            }

            function loadProperties(queriedProperties, keyColumn) {

              /*
               * Code below is for a path to a file when properties are shared between datasets
               *

              // parse the url of the original csv
              var parser = document.createElement('a');
              parser.href = path;

              // construct the path of the file with properties of the key column
              var newpathname = parser.pathname.substr(0, parser.pathname.lastIndexOf('/') + 1) + key + "-properties.csv";
              var propertiesPath = parser.protocol + '//' + parser.host + newpathname + parser.search + parser.hash;
              */

              // get path of properties that are specific for the current data-set
              var propertiesPath = _this.path.replace(".csv", "-" + keyColumn + "-properties.csv");

              // load the file and return the promise for loading
              var processedPromise = new Promise();
              var loadPromise = _this.load(propertiesPath);
              loadPromise.then(function() {

                var properties = {};

                // load all the properties in a map with the keyColumn-value as keyColumn (e.g. properties['swe']['geo.name'] = 'Sweden')
                // this map is readable in O(1)
                forEach(FILE_CACHED[propertiesPath], function(object) {
                  properties[object[keyColumn]] = object;
                }); 

                // go through each row of data
                forEach(data, function(row, index) { // e.g. row = { geo: se, pop: 1000, gdp: 5 }
                  // copy each property that was queried to the matching data-row (matching = same keyColumn)
                  forEach(queriedProperties, function(property) {
                      
                      // check if row exists in properties
                      if(properties[row[keyColumn]]){
                          row[property] = properties[row[keyColumn]][property];
                      }else{
                          // if not, then complain
                          warn(row[keyColumn] + " is missing from GEO-PROPERTIES.CSV");
                      }
                    
                  })
                });
                  
                processedPromise.resolve();

              });

              return processedPromise;
            }
        },

        groupData: function(data, query) {

          // nested object which will be used to find the right group for each datarow. Each leaf will contain a reference to a data-object for aggregration.
          var grouping_map = {}; 

          var filtered = data.filter(function(val, index) {

            var keep;
            var leaf = grouping_map; // start at the base

            // find the grouping-index for each grouping property (i.e. entity)
            var keys = Object.keys(query.grouping);
            var n = keys.length;
            for (var i = 0; i < n; i++) {
              var grouping = query.grouping[keys[i]];
              var entity = keys[i];

              var group_index;

              // TO-DO: only age is grouped together for now, should be more generic
              if (entity == 'age' || entity == 'age_by_1_year') {

                var group_by = grouping;
                var group_offset = 0;

                var group_nr = Math.floor((val[entity] - group_offset) / group_by); // group number
                var group_start = group_nr * group_by + group_offset; // number at which the group starts

                // if the group falls outside the where filter, make the group smaller
                if (group_start < query.where[entity][0][0])
                  group_start = query.where[entity][0][0];   

                group_index = group_start;
                val[entity] = group_index;
              }

              // if this is not the last grouping property
              if (i < (n-1)) {

                // create if next grouping level doesn't exist yet
                if (!leaf[val[entity]])
                  leaf[val[entity]] = {};
                // set leaf to next level to enable recursion
                leaf = leaf[val[entity]];

              } else {

                // if last grouping property: we are at the leaf and can aggegrate

                if (!leaf[val[entity]]) {

                  // if the final leaf isn't set yet, start it by letting it refer to the current row in the data. We will keep this row in the data-set.
                  leaf[val[entity]] = val;
                  keep = true;

                } else {

                  // if the final leaf was already set, aggregrate!
                  leaf = leaf[val[entity]];
                  // if the leaf already had values, apply the aggregrate functions for each property
                  forEach(query.select, function(property, key) {
                    
                    //avoid aggregating keys, such as geo and time, also avoid aggregating properties, such as geo.region
                    if(keys.indexOf(property) != -1 || property.indexOf(keys[0]) != -1) return;
                    // aggregrate the un-grouped data (now only sum population)
                    // leaf[property] = parseFloat(leaf[property]) + parseFloat(val[property]);
                    
                    //never aggregate strings!
                    if(val[property]!=="" && !+val[property] && +val[property]!==0) return;
                    leaf[property] = leaf[property] + val[property];
                  });  
                  keep = false;

                }

              }

            }

            // if this row will function as place for aggregration, keep it, otherwise, discard it through the filter.
            return keep;

          });
        
          return filtered;

        }

      });

      var _index$1 = {
      csv : CSVReader,
      ddf : Ddf,
      ddf1csv : DDF1CSVReader,
      graph : GraphReader,
      inline : InlineReader,
      json : JSONReader,
      waffle : WSReader,
      };

      var readers = Object.freeze({
      	csv: CSVReader,
      	ddf: Ddf,
      	ddf1csv: DDF1CSVReader,
      	graph: GraphReader,
      	inline: InlineReader,
      	json: JSONReader,
      	waffle: WSReader,
      	default: _index$1
      });

      //  d3.scale.genericLog
      function genericLog() {
        return function d3_scale_genericLog(logScale) {
          var _this = this;
          var scales = [];
          var domainParts = [];
          var eps = 0.1;
          var delta = 5;
          var domain = logScale.domain();
          var range = logScale.range();
          var interpolator = null;
          var rangePointingForward, domainPointingForward;

          var abs = function (arg) {
            if (arg instanceof Array)
              return arg.map(function (d) {
                return Math.abs(d);
              });
            return Math.abs(arg);
          };

          var _buildLinearScale = function(fakeDomain, fakeRange) {
            return {
              domain: fakeDomain,
              sign: 1,
              range: fakeRange,
              scale: d3.scale.linear().domain(fakeDomain).range(fakeRange)
            };
          };

          var _buildLogScale = function(fakeDomain, fakeRange, revertDomain) {
            var normalizedDomain = fakeDomain;
            //var normalizedRange = fakeRange.slice(0);
            if (revertDomain) {
              normalizedDomain = abs(fakeDomain);
              //fakeRange.reverse();
            }
            return {
              domain: fakeDomain,
              sign: revertDomain?-1:1,
              range: fakeRange,
              scale: d3.scale.log().domain(normalizedDomain).range(fakeRange)
            };
          };


          var buildScales = function () {
            rangePointingForward = range[0] < range[range.length - 1];
            var rangePointingSign = rangePointingForward ? 1 : -1;
            scales = [];
            if (domainParts.length == 1) {
              if (domainParts[0][0] <= 0 && domainParts[0][1] >= 0) {
                scales = [_buildLinearScale(domainParts[0], range)];
              } else {
                scales = [_buildLogScale(domainParts[0], range, domainParts[0][0] <= 0)];
              }
            } else {
              var maxDomain = d3.max(abs(domain));
              var rangeLength = abs(d3.max(range) - d3.min(range));
              var minRangePoint, rangePointKoef = 1;
              var firstRangePoint = 0, secondRangePoint = 0, firstEps = 0, secondEps = 0;
              logScale.domain([eps, maxDomain]).range([0, rangeLength]);
              minRangePoint = delta;//logScale(eps * 2);
              if (domain[0] != 0 && abs(domain[0]) > eps)
                firstRangePoint = logScale(abs(domain[0]));
              if (domain[domain.length - 1] != 0  && abs(domain.length - 1) > eps)
                secondRangePoint = logScale(abs(domain[domain.length - 1]));

              if (abs(domain[0]) > eps)
                firstEps = minRangePoint;

              if (abs(domain[domain.length - 1]) > eps)
                secondEps = minRangePoint;

              rangeLength = rangeLength - firstEps - secondEps;
              if (secondRangePoint != 0) rangePointKoef = abs((firstRangePoint) / (secondRangePoint));

              var point1, point2;
              if (domainParts.length == 2) {
                // example: [-eps..0,eps][eps, val]
                if (domain[0] == 0 || abs(domain[0]) <= eps) {
                  point1 = range[0] + firstRangePoint * rangePointKoef * rangePointingSign
                    + secondEps * rangePointingSign;
                  scales = [
                    _buildLinearScale(domainParts[0], [range[0], point1]),
                    _buildLogScale(domainParts[1], [point1,  range[1]], !domainPointingForward)
                  ];
                } else if (domain[domain.length - 1] == 0 || abs(domain[domain.length - 1]) <= eps) {// example: [-val,-eps][-eps, 0..eps]
                  point1 = range[range.length - 1] - (firstEps + secondEps) * rangePointKoef * rangePointingSign
                  scales = [
                    _buildLogScale(domainParts[0], [range[0], point1], domainPointingForward),
                    _buildLinearScale(domainParts[1], [point1, range[range.length - 1]])
                  ];
                }
              } else {
                point1 = range[0] + rangeLength / (1/rangePointKoef + 1) * rangePointingSign;
                point2 = range[0] + (rangeLength / (1/rangePointKoef + 1) + firstEps + secondEps) * rangePointingSign;
                scales = [
                  _buildLogScale(domainParts[0], [range[0], point1], domainPointingForward),
                  _buildLinearScale(domainParts[1], [point1, point2]),
                  _buildLogScale(domainParts[2], [point2, range[range.length - 1]], !domainPointingForward)
                ];
              }
            }
          };

          var buildDomain = function () {
            domainPointingForward = domain[0] < domain[domain.length - 1];
            domainParts = [];
            if ((d3.min(domain) > 0 && d3.max(domain) > 0) || (d3.min(domain) < 0 && d3.max(domain) < 0)) {
              domainParts = [domain];
            } else {
              var start, end;
              if (domainPointingForward) {
                start = domain[0];
                end = domain[domain.length - 1];
              } else {
                start = domain[domain.length - 1];
                end = domain[0];
              }
              var _addSubdomain = function(first, second) {
                if (domainPointingForward) {
                  domainParts.push([first, second]);
                } else {
                  domainParts.unshift([second, first]);
                }
              };
              while (start != end) {
                if (end <= -eps || (start >= -eps && end <= eps) || start >= eps) {
                  _addSubdomain(start, end);
                  start = end;
                } else if (start < -eps && end >= -eps) {
                  _addSubdomain(start, -eps);
                  start = -eps;
                } else if (start >= -eps && end >= eps) {
                  _addSubdomain(start, eps);
                  start = eps;
                } else {
                  console.warn("Something wrong while build subdomains: " + start + " " + end);
                  start = end;
                }
              }
            }
            buildScales();
          };

          var _getScaleByDomain = function(x) {
            if (domainPointingForward) {
              if (x < domain[0]) {
                return scales[0];
              } else if (x > domain[domain.length - 1]) {
                return scales[scales.length - 1];
              } else {
                for (var i = 0; i < scales.length; i++) {
                  if (x >= scales[i].domain[0] && x <= scales[i].domain[scales[i].domain.length - 1]) {
                    return scales[i];
                  }
                }
              }
            } else {
              if (x > domain[0]) {
                return scales[0];
              } else if (x < domain[domain.length - 1]) {
                return scales[scales.length - 1];
              } else {
                for (var i = 0; i < scales.length; i++) {
                  scale = scales[i];
                  if (x <= scales[i].domain[0] && x >= scales[i].domain[scales[i].domain.length - 1]) {
                    return scales[i];
                  }
                }
              }
            }
          };

          var getScaleByRange = function(x) {
            if (rangePointingForward) {
              if (x < range[0]) {
                return scales[0];
              } else if (x > range[range.length - 1]) {
                return scales[scales.length - 1];
              } else {
                for (var i = 0; i < scales.length; i++) {
                  if (x >= scales[i].range[0] && x <= scales[i].range[scales[i].range.length - 1]) {
                    return scales[i];
                  }
                }
              }
            } else {
              if (x > range[0]) {
                return scales[0];
              } else if (x < range[range.length - 1]) {
                return scales[scales.length - 1];
              } else {
                for (var i = 0; i < scales.length; i++) {
                  var scalePart = scales[i];
                  if (x <= scales[i].range[0] && x >= scales[i].range[1]) {
                    return scales[i];
                  }
                }
              }
            }
          };

          //polyfill for IE11
          Math.sign = Math.sign || function (x) {
              x = +x;
              if (x === 0 || isNaN(x)) {
                return x;
              }
              return x > 0 ? 1 : -1;
            }

          function scale(x) {
            var currScale = _getScaleByDomain(x);
            if (interpolator) {
              return interpolator(currScale.scale(x * currScale.sign));
            } else {
              return currScale.scale(x * currScale.sign);
            }
          }

          scale.eps = function(arg) {
            if(!arguments.length)
              return eps;
            eps = arg;
            scale.domain(domain);
            return scale;
          };

          scale.delta = function(arg) {
            if(!arguments.length)
              return delta;
            delta = arg;
            scale.range(range);
            return scale;
          };

          scale.domain = function(arg) {
            if(!arguments.length)
              return domain;
            
            // this is an internal array, it will be modified. the input _arg should stay intact
            switch(arg.length) {
              // if no values are given, reset input to the default domain (do nothing)
              case 0:
                arg = domain;
                break;
              // use the given value as a center, get the domain /2 and *2 around it
              case 1:
                arg = [
                  arg[0] / 2,
                  arg[0] * 2
                ];
                break;
            }
            //if the domain is just a single value
            if(arg[0] == arg[arg.length - 1]) {
              arg[0] = arg[0] / 2;
              arg[arg.length - 1] = arg[arg.length - 1] * 2;
            }
            domain = arg;
            var min = d3.min(abs(domain).filter(function(val){ return !!val}));
            if (min) eps = Math.min(eps, min / 100);
            buildDomain();
            return scale;
          };

          
          scale.range = function(arg, force) {
            if(!arguments.length)
              return range;

            switch(arg.length) {
              // reset input to the default range
              case 0:
                arg = range;
                break;
              // use the only value as a center, get the range ±100 around it
              case 1:
                arg = [
                  arg[0] - 100,
                  arg[0] + 100
                ];
                break;
              // two is the standard case. do nothing
            }

            //console.log("LOG and LIN range:", logScale.range(), linScale.range());
            if (interpolator && !force) {
              interpolator.range(arg);
            } else {
              range = arg;
              var min = d3.min(abs(range).filter(function(val){ return !!val}));

              if (min) delta = Math.min(delta, min/100);
              buildScales();
            }
            return scale;
          };

          scale.interpolate = function(arg) {
            interpolator = d3.scale.linear().domain(domain).range(range).interpolate(arg);
            scale.range(interpolator.domain(), true);
            return scale;
          };

          scale.invert = function(arg) {
            var currScale = getScaleByRange(arg);
            return currScale.scale.invert(arg) * currScale.sign;
          };

          scale.ticks = function(arg) {
            var ticks = [], partTicks;
            for (var i = 0; i < scales.length; i++) {
              if (scales[i].sign == -1) {
                partTicks = scales[i].scale.ticks().reverse().map(function(val){ return val * -1 });
              } else {
                partTicks = scales[i].scale.ticks();
              }
              if (ticks.length > 0 && partTicks.length > 0 && ticks[ticks.length - 1] == partTicks[0]) {
                partTicks.splice(0, 1);
              }
              ticks.push.apply(ticks, partTicks);
            }
            return ticks;
          };

          scale.copy = function() {
            return d3_scale_genericLog(logScale).domain(domain).range(range).delta(delta).eps(eps);
          };

          return d3.rebind(scale, logScale, 'base', 'rangeRound', 'clamp', 'nice',
            'tickFormat');
        }(d3.scale.log().domain([0.1, 200]).range([0, 1000]));
      };

      function detectTouchEvent(element, onTap, onLongTap) {
        var start;
        var coordX;
        var coordY;
        var namespace = onTap ? '.onTap' : '.onLongTap';
        d3.select(element)
          .on('touchstart' + namespace, function(d, i) {
            start = d3.event.timeStamp;
            coordX = d3.event.changedTouches[0].screenX;
            coordY = d3.event.changedTouches[0].screenY;
          })
          .on('touchend' + namespace, function(d, i) {
            coordX = Math.abs(coordX - d3.event.changedTouches[0].screenX);
            coordY = Math.abs(coordY - d3.event.changedTouches[0].screenY);
            if(coordX < 5 && coordY < 5) {
              if(d3.event.timeStamp - start < 500)
                return onTap ? onTap(d, i) : undefined;
              return onLongTap ? onLongTap(d, i) : undefined;
            } else return undefined;
          });
      }

      //d3.selection.prototype.onTap
      var onTap = function(callback) {
        return this.each(function() {
          detectTouchEvent(this, callback);
        })
      };

      //d3.selection.prototype.onLongTap
      var onLongTap = function(callback) {
        return this.each(function() {
          detectTouchEvent(this, null, callback);
        })
      };

      var Vzb = function(name, placeholder, external_model) {
        var tool = Tool.get(name);
        if(tool) {
          var t = new tool(placeholder, external_model);
          Vzb._instances[t._id] = t;
          return t;
        } else {
          error$1('Tool "' + name + '" was not found.');
        }
      };

      //stores reference to each tool on the page
      Vzb._instances = {};
      //stores global variables accessible by any tool or component
      Vzb._globals = globals;

      //TODO: clear all objects and intervals as well
      //garbage collection
      Vzb.clearInstances = function(id) {
        if(id) {
          Vzb._instances[id] = void 0;
        } else {
          for(var i in Vzb._instances) {
            Vzb._instances[i].clear();
          }
          Vzb._instances = {};
        }
      };

      //register available readers
      forEach(readers, function(reader, name) {
        Reader.register(name, reader);
      });

      //register available components
      forEach(components, function(component, name) {
        Component.register(name, component);
      });


      d3.scale.genericLog = genericLog;
      d3.selection.prototype.onTap = onTap;
      d3.selection.prototype.onLongTap = onLongTap;

      //makes all objects accessible
      Vzb.Tool = Tool;
      Vzb.Component = Component;
      Vzb.Model = Model;
      Vzb.Reader = Reader;
      Vzb.Events = EventSource;
      Vzb.utils = utils;

      //BAR CHART COMPONENT
      var AxisLabelerComponent = Component.extend({

        /**
         * Initializes the component (Bar Chart).
         * Executed once before any template is rendered.
         * @param {Object} config The options passed to the component
         * @param {Object} context The component's parent
         */
        init: function(config, context) {
          this.name = 'axislabeler';
          this.template = 'axislabeler.html';

          //define expected models for this component
          this.model_expects = [{name: "scales"}, {name: "show"}];

          var _this = this;

          this.model_binds = {
            "change:scales": function(evt) {
              _this.initScales();
              _this.update();
            },
            'change:show': function(evt, path) {
              _this.initScales();
              _this.update();
            }
          };

          //contructor is the same as any component
          this._super(config, context);

          this.xScale = null;
          this.yScale = null;

          this.xAxis = axisSmart();
          this.yAxis = axisSmart();
        },

        /**
         * DOM is ready
         */
        readyOnce: function() {
          var _this = this;
          this.element = d3.select(this.element);

          // reference elements
          this.graph = this.element.select('.vzb-al-graph');
          this.xAxisEl = this.graph.select('.vzb-al-axis-x');
          this.yAxisEl = this.graph.select('.vzb-al-axis-y');
          
          //$(".vzb-bc-axis-x, .vzb-bc-axis-y").css('font-size',this.model.show.labelSize);
          this.xInvert = function(d){return _this.xScale(_this.xScale.invert(_this.xScale(d)));}
          this.yInvert = function(d){return _this.yScale(_this.yScale.invert(_this.yScale(d)));}
          
          this.line = d3.svg.line()
            .x(function(d) { return _this.xScale(d); })
            .y(function(d) { return _this.yScale(d); });

          this.lineInvert = d3.svg.line()
            .x(function(d) { return _this.xInvert(d); })
            .y(function(d) { return _this.yInvert(d); });

          //component events
          this.on("resize", function() {
            _this.update();
          })
        },

        /*
         * Both model and DOM are ready
         */
        ready: function() {
          console.log("Model ready");
          this.initScales();
          this.update();
        },
        
        initScales: function() {
          var _this = this;

          var domain = this.model.scales.domain;

          this.xScale = d3.scale[this.model.scales.xScaleType]();
          this.yScale = d3.scale[this.model.scales.yScaleType]();

          this.xScale.domain(domain);

          this.yScale.domain(domain);

          this.mockData = d3.range(domain[0], domain[domain.length - 1], (domain[domain.length - 1] - domain[0]) / 10000);
          this.mockData.push(domain[domain.length - 1]);
        },



        update: function() {
          var _this = this;

          var margin = this.model.show.toolMargin.getPlainObject();

          //stage
          var height = (parseInt(this.element.style("height"), 10) - margin.top - margin.bottom) || 0;
          var width = (parseInt(this.element.style("width"), 10) - margin.left - margin.right) || 0;
          
          if(height<=0 || width<=0) return warn("Axis Labeler update() call interrupted for Vizabi container is too little or has display:none");

          //graph group is shifted according to margins (while svg element is at 100 by 100%)
          this.graph.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          //update scales to the new range
          var xLength = this.xScale.domain().length;
          var yLength = this.yScale.domain().length;
          this.xScale.range(d3.range(xLength).map(function(n) { return width/(xLength-1) * n })) //.nice();
          this.yScale.range(d3.range(yLength).map(function(n) { return height/(yLength-1) * n }).reverse()) //.nice();

          this.xAxis.scale(this.xScale)
            .orient("bottom")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.scales.xScaleType,
              toolMargin: margin
            });

          this.yAxis.scale(this.yScale)
            .orient("left")
            .tickSize(6, 0)
            .tickSizeMinor(3, 0)
            .labelerOptions({
              scaleType: this.model.scales.yScaleType,
              toolMargin: margin
            });



          this.xAxisEl.attr("transform", "translate(0," + height + ")");
          this.xAxisEl.call(this.xAxis);
          this.yAxisEl.call(this.yAxis);

          //TODO: remove. make font sizing through plain CSS
          //this.xAxisEl.selectAll("text").style('font-size',this.model.show.labelSize);
          //this.yAxisEl.selectAll("text").style('font-size',this.model.show.labelSize);


          var path = this.graph.selectAll(".vzb-al-line").data([0]);
          path.enter().append("path")
            .attr("class", "vzb-al-line")
          path.datum(this.mockData).attr("d", this.line);
          
          var pathInvert = this.graph.selectAll(".vzb-al-line-invert").data([0]);
          pathInvert.enter().append("path")
            .attr("class", "vzb-al-line-invert")
          pathInvert.datum(this.mockData).attr("d", this.lineInvert);
          
          var format = d3.format(".4r");

          var dots = this.graph.selectAll(".vzb-al-dots").data(this.mockData);
          dots.enter().append("circle")
            .attr("class", "vzb-al-dots")
            .attr("r", 5)
            .on("mouseenter", function(d, i){
              console.log("Point #" + i + ": " + d + " x=" + format(_this.xScale(d)) + " y=" + format(_this.yScale(d)))
            });
          dots.exit().remove();
          dots.attr("cx", function(d) {
              return _this.xScale(d)
            })
            .attr("cy", function(d) {
              return _this.yScale(d)
            });
          
          var dotsInvert = this.graph.selectAll(".vzb-al-dots-invert").data(this.mockData);
          dotsInvert.enter().append("circle")
            .attr("class", "vzb-al-dots-invert")
            .attr("r", 5)
            .on("mouseenter", function(d, i){
              console.log("Point #" + i + ": " + d + " x=" + format(_this.xScale(d)) + " y=" + format(_this.yScale(d)))
            });
          dotsInvert.exit().remove();
          dotsInvert.attr("cx", function(d) {
              return _this.xInvert(d)
            })
            .attr("cy", function(d) {
              return _this.yInvert(d)
            });
        }
      });

      var listPointer = 0;
      var listData = [
          [-123, 123],
          [1.00000, 10000.0],
          [4.00000, 123.000],
          [0.00060, 123.000],
          [123.000, 4.00000],
          [123.000, 0.00060],
          [-123.00, -4.0000],
          [-123.00, -0.0006],
          [-4.0000, -123.00],
          [-0.0006, -123.00],
          [-123.00, 1800.00],
          [1800.00, -123.00],
          [123.000, -18000.],
          [-18000., 123.000],
          [-0.0006, 1800.00],
          [1800.00, -0.0006],
          [0.00060, -1800.0],
          [-1800.0, 0.00060],
          [-12.000, -2.0000],
          [-80.000, 40.0000],
          [5.00000, 8.00000],
          [42.0000, 42.0000],
          [0.00000000005, 4554545484715],
          [-2611968678575, 4554545484715],
          [-0.0020, 0.00200],
          [-123, -0.1, 0.002, 1540],
          [-123, -0.001, 0.5, 1540],
          [123, 0.1, -0.002, -1540],
          [123, 0.001, -0.5, -1540]
      ];

      //AXIS LABELER TOOL
      var AxisLabeler = Tool.extend('AxisLabeler', {

        /**
         * Initializes the tool (Bar Chart Tool).
         * Executed once before any template is rendered.
         * @param {Object} placeholder Placeholder element for the tool
         * @param {Object} external_model Model as given by the external page
         */
        init: function(placeholder, external_model) {

          this.name = "axislabeler";

          //specifying components
          this.components = [{
            component: AxisLabelerComponent,
            placeholder: '.vzb-tool-viz',
            model: ["state.scales", "state.show"] //pass models to component
          }];

          //constructor is the same as any tool
          this._super(placeholder, external_model);
        },

        default_model: {
          state: {
            scales:{
                domain: listData[listPointer],
                xScaleType: 'linear',
                yScaleType: 'genericLog'
            },
            show:{
                labelSize: "16px",
                labelMargin: {LR: "5px", TB: "5px"},
                toolMargin: {top: 30, right: 20, left: 40, bottom: 40}
            }

          },
          data: {noConceptprops: true}
        }
      });

      var language = {
        id: "en",
        strings: {}
      };

      // Fallback in case if WS is not available - requesting data from local files
      var locationArray = window.location.href.split("/");
      var localUrl = locationArray.splice(0, locationArray.indexOf("preview")).join("/") + "/preview/";

      globals.ext_resources = deepExtend({
        host: localUrl,
        preloadPath: 'data/',
        dataPath: 'data/waffles/'
      }, globals.ext_resources);

      //OVERWRITE OPTIONS

      BarChart.define('default_model', {
        state: {
          time: {
            start: "1800",
            end: "2012",
            value: "2000",
            step: 1
          },
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["usa", "swe", "nor"],
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          marker: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis_y: {
              use: "indicator",
              which: "sg_population", // systema globalis
              //which: "population_total",
              scaleType: "log",
              allow: {
                scales: ["linear", "log"]
              }
            },
            axis_x: {
              use: "property",
              which: "geo.name",
              allow: {
                scales: ["ordinal"],
                names: ["!geo", "!_default"]
              }
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              scaleType: "ordinal"
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "dont-panic-poverty.csv"
        },
        language: language,
        ui: {
          presentation: false
        }
      });

      BarRankChart.define('default_model', {
        state: {
          time: {
            start: "1950",
            end: "2015",
            value: "2000",
            step: 1
          },
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["country", "unstate"]
              }
            },
            opacitySelectDim: .3,
            opacityRegular: 1
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          entities_allpossible: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["*"],
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          marker_allpossible: {
            space: ["entities_allpossible"],
            label: {
              use: "property",
              which: "geo.name"
            }
          },
          marker: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis_x: {
              use: "indicator",
              which: "sg_population", //systema globalis
              //which: "population_total",
              scaleType: "log",
              allow: {
                scales: [
                  "linear",
                  "log"
                ]
              }
            },
            // should not be here because axis-y is not geo.name but order of population
            axis_y: {
              use: "property",
              which: "geo.name",
              scaleType: "log",
              allow: {
                scales: [
                  "ordinal"
                ]
              }
            },
            color: {
              use: "property",
              which: "geo.world_4region"
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        language: language,
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "dont-panic-poverty.csv",
          splash: true
        },
        ui: {
          presentation: false
        }
      });

      BubbleMap.define('datawarning_content', {
        title: "",
        body: "Comparing the size of economy across countries and time is not trivial. The methods vary and the prices change. Gapminder has adjusted the picture for many such differences, but still we recommend you take these numbers with a large grain of salt.<br/><br/> Countries on a lower income levels have lower data quality in general, as less resources are available for compiling statistics. Historic estimates of GDP before 1950 are generally also more rough. <br/><br/> Data for child mortality is more reliable than GDP per capita, as the unit of comparison, dead children, is universally comparable across time and place. This is one of the reasons this indicator has become so useful to measure social progress. But the historic estimates of child mortality are still suffering from large uncertainties.<br/><br/> Learn more about the datasets and methods in this <a href='http://www.gapminder.org/news/data-sources-dont-panic-end-poverty' target='_blank'>blog post</a>",
        doubtDomain: [1800, 1950, 2015],
        doubtRange: [1.0, .3, .2]
      });

      BubbleMap.define('default_model', {
        state: {
          time: {
            start: "1800",
            end: "2015",
            value: "2015",
            step: 1,
            speed: 300
          },
          entities: {
            dim: "geo",
            opacitySelectDim: .3,
            opacityRegular: 1,
            show: {
              _defs_: {
                "geo.cat": ["country", "unstate"]
              }
            },
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          marker: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            size: {
              use: "indicator",
              //which: "sg_population",//systema globalis
              which: "population_total",
              scaleType: "linear",
              allow: {
                scales: ["linear"]
              },
              extent: [0.04, 0.85]
            },
            lat: {
              use: "property",
              which: "geo.latitude",
              _important: true
            },
            lng: {
              use: "property",
              which: "geo.longitude",
              _important: true
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              scaleType: "ordinal",
              allow: {
                names: ["!geo.name"]
              }
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "dont-panic-poverty.csv",
          splash: true
        },
        language: language,
        ui: {
          chart: {
            labels: {
              dragging: true
            }
          },
          presentation: false
        }
      });

      MountainChart.define('datawarning_content', {
        title: "Income data has large uncertainty!",
        body: "There are many different ways to estimate and compare income. Different methods are used in different countries and years. Unfortunately no data source exists that would enable comparisons across all countries, not even for one single year. Gapminder has managed to adjust the picture for some differences in the data, but there are still large issues in comparing individual countries. The precise shape of a country should be taken with a large grain of salt.<br/><br/> Gapminder strongly agrees with <a href='https://twitter.com/brankomilan' target='_blank'>Branko Milanovic</a> about the urgent need for a comparable global income survey, especially for the purpose of monitoring the UN poverty-goal.<br/><br/> We are constantly improving our datasets and methods. Please expect revision of this graph within the coming months. <br/><br/> Learn more about the datasets and methods in this <a href='http://www.gapminder.org/news/data-sources-dont-panic-end-poverty' target='_blank'>blog post</a>",
        doubtDomain: [1800, 1950, 2015],
        doubtRange: [1.0, .8, .6]
      });

      MountainChart.define('default_model', {
        state: {
          time: {
            start: 1800,
            end: 2015,
            value: 2015,
            step: 1,
            delay: 100,
            delayThresholdX2: 50,
            delayThresholdX4: 25
          },
          entities: {
            dim: "geo",
            opacitySelectDim: .3,
            opacityRegular: .7,
            show: {
              _defs_: {
                "geo": ["*"],
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          entities_allpossible: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["*"],
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          marker_allpossible: {
            space: ["entities_allpossible"],
            label: {
              use: "property",
              which: "geo.name"
            }
          },
          marker: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis_y: {
              use: "indicator",
              which: "sg_population",//systema globalis
              //which: "population_total",
              scaleType: 'linear'
            },
            axis_x: {
              use: "indicator",
              which: "sg_gdp_p_cap_const_ppp2011_dollar",//systema globalis
              //which: "income_per_person_gdppercapita_ppp_inflation_adjusted",
              scaleType: 'log',
              domainMin: .11, //0
              domainMax: 500, //100
              tailFatX: 1.85,
              tailCutX: .2,
              tailFade: .7,
              xScaleFactor: 1.039781626,
              xScaleShift: -1.127066411
            },
            axis_s: {
              use: "indicator",
              which: "sg_gini", //systema globalis
              //which: "inequality_index_gini",
              scaleType: 'linear'
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              scaleType: "ordinal",
              allow: {
                names: ["!geo.name"]
              }
            },
            stack: {
              use: "constant",
              which: "all" // set a property of data or values "all" or "none"
            },
            group: {
              use: "property",
              which: "geo.world_4region", // set a property of data
              manualSorting: ["asia", "africa", "americas", "europe"],
              merge: false
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        language: language,
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "dont-panic-poverty.csv",
          splash: true
        },
        ui: {
          chart: {
            manualSortingEnabled: true,
            yMaxMethod: "latest",
            probeX: 1.85,
            xLogStops: [1, 2, 5],
            xPoints: 50
          },
          presentation: false
        }
      });


      LineChart.define('default_model', {
        state: {
          time: {
            start: 1800,
            end: 2012,
            value: 2012,
            step: 1,
          },
          //entities we want to show
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["usa", "swe", "chn"],
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          //how we show it
          marker: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis_y: {
              use: "indicator",
              which: "sg_gdp_p_cap_const_ppp2011_dollar",//systema globalis
              //which: "income_per_person_gdppercapita_ppp_inflation_adjusted",
              scaleType: "log",
              allow: {
                scales: ["linear", "log", "time"]
              }

            },
            axis_x: {
              use: "indicator",
              which: "time",
              scaleType: "time",
              allow: {
                scales: ["time"]
              }
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              allow: {
                scales: ["ordinal"],
                names: ["!geo.name"]
              }
            }
          },
          entities_allpossible: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["*"],
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          marker_allpossible: {
            space: ["entities_allpossible"],
            label: {
              use: "property",
              which: "geo.name"
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },

        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "dont-panic-poverty.csv",
          splash: false
        },
        language: language,
        ui: {
          chart: {
            labels: {
              min_number_of_entities_when_values_hide: 2 //values hide when showing 2 entities or more
            },
            whenHovering: {
              hideVerticalNow: false,
              showProjectionLineX: true,
              showProjectionLineY: true,
              higlightValueX: true,
              higlightValueY: true,
              showTooltip: false
            }
          },
          presentation: false
        }
      });

      BubbleChart.define('datawarning_content', {
        title: "",
        body: "Comparing the size of economy across countries and time is not trivial. The methods vary and the prices change. Gapminder has adjusted the picture for many such differences, but still we recommend you take these numbers with a large grain of salt.<br/><br/> Countries on a lower income levels have lower data quality in general, as less resources are available for compiling statistics. Historic estimates of GDP before 1950 are generally also more rough. <br/><br/> Data for child mortality is more reliable than GDP per capita, as the unit of comparison, dead children, is universally comparable across time and place. This is one of the reasons this indicator has become so useful to measure social progress. But the historic estimates of child mortality are still suffering from large uncertainties.<br/><br/> Learn more about the datasets and methods in this <a href='http://www.gapminder.org/news/data-sources-dont-panic-end-poverty' target='_blank'>blog post</a>",
        doubtDomain: [1800, 1950, 2015],
        doubtRange: [1.0, .3, .2]
      });

      BubbleChart.define('default_model', {

        state: {
          time: {
            start: "1800",
            end: "2015",
            value: "2015",
            step: 1
          },
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["country", "unstate"]
              }
            }
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          marker: {
            space: ["entities", "time"],
            type: "geometry",
            shape: "circle",
            label: {
              use: "property",
              which: "geo.name"
            },
            size_label: {
              use: "constant",
              which: "_default",
              scaleType: "ordinal",
              _important: false,
              extent: [0, 0.33]
            },

            axis_y: {
              use: "indicator",
              //which: "sg_child_mortality_rate_per1000", //systema globalis
              which: "life_expectancy_years",
              scaleType: "linear",
              zoomedMin: 15,
              allow: {
                scales: ["linear", "log", "time"]
              }
            },
            axis_x: {
              use: "indicator",
              //which: "sg_gdp_p_cap_const_ppp2011_dollar",//systema globalis
              which: "income_per_person_gdppercapita_ppp_inflation_adjusted", 
              scaleType: "log",
              allow: {
                scales: ["linear", "log", "time"]
              }
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              scaleType: "ordinal",
              allow: {
                names: ["!geo.name"]
              }
            },
            size: {
              use: "indicator",
              //which: "sg_population",//systema globalis
              which: "population_total", 
              scaleType: "linear",
              allow: {
                scales: ["linear"]
              },
              extent: [0, 0.85]
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "dont-panic-poverty.csv",
          splash: true
        },
        language: language,
        ui: {
          chart: {
            whenHovering: {
              showProjectionLineX: true,
              showProjectionLineY: true,
              higlightValueX: true,
              higlightValueY: true
            },
            labels: {
              dragging: true,
              removeLabelBox: false
            },
            trails: true,
            lockNonSelected: 0
          },
          presentation: false,
          cursorMode: 'arrow',
          zoomOnScrolling: false,
          adaptMinMaxZoom: false
        }
      });

      PopByAge.define('default_model', {
        state: {
          time: {
            value: '2013',
            start: '1950',
            end: '2100'
          },
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["usa"]
              }
            }
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["world_4region"]
              }
            }
          },
          entities_age: {
            dim: "age",
            show: {
              _defs_: {
                "age": [
                  [0, 95]
                ] //show 0 through 100
              }
            },
            grouping: 5
          },
          marker: {
            space: ["entities", "entities_age", "time"],
            label: {
              use: "indicator",
              which: "age"
            },
            label_name: {
              use: "property",
              which: "geo"
            },
            axis_y: {
              use: "indicator",
              which: "age",
              // domain Max should be set manually as age max from entites_age plus one grouping value (95 + 5 = 100)
              // that way the last age group fits in on the scale
              domainMax: 100,
              domainMin: 0
            },
            axis_x: {
              use: "indicator",
              which: "sg_population"
            },
            color: {
              use: "constant",
              which: "#ffb600",
              allow: {
                names: ["!geo.name"]
              }
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "geo.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "usa.csv",
          splash: false
        },
        language: language,
        ui: {
          presentation: false
        }
      });

      AgePyramid.define('default_model', {
        state: {
          time: {
            value: '2011',
            start: '1950',
            end: '2100',
            step: 1,
            delayThresholdX2: 0,
            delayThresholdX4: 0,
            immediatePlay: true,
            delay: 1500
          },
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["*"]
              }
            }
          },
          entities_minimap: {
            dim: "geo",
            show: {
              _defs_: {
                "geo.cat": ["country"]
              }
            }
          },
          entities_age: {
            dim: "age",
            show: {
              _defs_: {
                "age": [
                  [0, 95]
                ] //show 0 through 100
              }
            },
            grouping: 1,
            _multiple: true
          },
          entities_stack: {
            space: ["entities_age", "entities_side"],
            dim: "education_attainment",
            _multiple: true
          },
          entities_side: {
            dim: "population_group"
          },
          marker: {
            space: ["entities", "entities_side", "entities_stack", "entities_age", "time"],
            label: {
              use: "indicator",
              which: "age"
            },
            label_name: {
              use: "property",
              which: "population_group"
            },
            axis_y: {
              use: "indicator",
              which: "age",
              // domain Max should be set manually as age max from entites_age plus one grouping value (95 + 5 = 100)
              // that way the last age group fits in on the scale
              domainMax: 100,
              domainMin: 0
            },
            axis_x: {
              use: "indicator",
              which: "population",
              //domainMin: 0,
              //domainMax: 1400000000
            },
            color: {
              use: "property",
              which: "education_attainment"
              // allow: {
              //   names: ["!stack.name"]
              // }
            },
            side: {
              use: "property",
              which: "population_group"
            }
          },
          marker_side: {
            space: ["entities", "entities_side", "time"],
            hook_total: {
              use: "indicator",
              which: "population"
            }      
          },
          marker_minimap:{
            space: ["entities_stack"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "education_attainment"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        language: language,
        //NO DEFAULT DATA SOURCE. DATA COMES FROM EXTERNAL PAGE
        ui: {
          chart: {
            stacked: true,
            inpercent: false,
            flipSides: true
          },
          presentation: false
        }
      });

      JOINTPyramidLine.define('default_model', {
        state: {
          time: {
            value: '2011',
            start: '1996',
            end: '2011'
          },
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["*"]
              }
            }
          },
          entities_age: {
            dim: "age",
            show: {
              _defs_: {
                "age": [
                  [0, 95]
                ] //show 0 through 100
              }
            },
            grouping: 5,
            _multiple: true
          },
          entities_stack: {
            space: ["entities_age", "entities_side"],
            dim: "education",
            _multiple: true,
            select: []
          },
          entities_side: {
            dim: "sex"
          },
          marker_pyramid: {
            space: ["entities", "entities_side", "entities_stack", "entities_age", "time"],
            label: {
              use: "indicator",
              which: "age"
            },
            label_name: {
              use: "property",
              which: "sex"
            },
            axis_y: {
              use: "indicator",
              which: "age",
              // domain Max should be set manually as age max from entites_age plus one grouping value (95 + 5 = 100)
              // that way the last age group fits in on the scale
              domainMax: 100,
              domainMin: 0
            },
            axis_x: {
              use: "indicator",
              which: "zaf_population"
            },
            color: {
              use: "property",
              which: "education"
            },
            side: {
              use: "property",
              which: "sex"
            }
          },
          marker_line: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis_y: {
              use: "indicator",
              which: "tfr",
              scaleType: "linear",
              allow: {
                scales: ["linear", "log"]
              }
            },
            axis_x: {
              use: "indicator",
              which: "time",
              scaleType: "time",
              allow: {
                scales: ["time"]
              }
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              allow: {
                scales: ["ordinal"],
                names: ["!geo.name"]
              }
            }
          },
          marker_side: {
            space: ["entities", "entities_side", "time"],
            hook_total: {
              use: "indicator",
              which: "zaf_population"
            }      
          }
        },
        language: language,
        //NO DEFAULT DATA SOURCE. DATA COMES FROM EXTERNAL PAGE
        ui: {
          chart: {
            labels: {
              min_number_of_entities_when_values_hide: 2 //values hide when showing 2 entities or more
            },
            whenHovering: {
              hideVerticalNow: false,
              showProjectionLineX: true,
              showProjectionLineY: true,
              higlightValueX: true,
              higlightValueY: true,
              showTooltip: false
            },
            stacked: true,
            inpercent: false
          },    
          presentation: false
        }
      });




      JOINTCartogramLine.define('datawarning_content', {
        title: "",
        body: "Comparing the size of economy across countries and time is not trivial. The methods vary and the prices change. Gapminder has adjusted the picture for many such differences, but still we recommend you take these numbers with a large grain of salt.<br/><br/> Countries on a lower income levels have lower data quality in general, as less resources are available for compiling statistics. Historic estimates of GDP before 1950 are generally also more rough. <br/><br/> Data for child mortality is more reliable than GDP per capita, as the unit of comparison, dead children, is universally comparable across time and place. This is one of the reasons this indicator has become so useful to measure social progress. But the historic estimates of child mortality are still suffering from large uncertainties.<br/><br/> Learn more about the datasets and methods in this <a href='http://www.gapminder.org/news/data-sources-dont-panic-end-poverty' target='_blank'>blog post</a>",
        doubtDomain: [1800, 1950, 2015],
        doubtRange: [1.0, .3, .2]
      });

      JOINTCartogramLine.define('default_model', {
        state: {
          time: {
            value: '2011',
            start: '1996',
            end: '2011'
          },
          entities: {
            dim: "geo",
            opacitySelectDim: .3,
            opacityRegular: 1,
            show: {
              _defs_: {
                "geo": ["*"]
              }
            },
          },
          entities_line: {
            dim: "geo",
            opacitySelectDim: .3,
            opacityRegular: 1,
            show: {
              _defs_: {
                "geo": ["zaf"]
              }
            },
          },
          marker: {
            space: ["entities", "time"],
            size: {
              use: "constant",
              //which: "sg_population",//systema globalis
              which: "_default",
              scaleType: "ordinal",
              _important: true,
              showArcs: false,
              allow: {
                scales: ["linear", "ordinal"]
              },
              extent: [0, 1]
            },
            color: {
              use: "indicator",
              which: "piped_water_percentage",
              scaleType: "linear",
              _important: true
            },
            label: {
              use: "property",
              which: "geo.name"
              //which: "province.name"
            }
          },
          marker_line: {
            space: ["entities_line", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis_y: {
              use: "indicator",
              which: "piped_water_percentage",
              scaleType: "linear",
              allow: {
                scales: ["linear", "log"]
              }
            },
            axis_x: {
              use: "indicator",
              which: "time",
              scaleType: "time",
              allow: {
                scales: ["time"]
              }
            },
            color: {
              use: "property",
              which: "geo.world_4region",
              allow: {
                scales: ["ordinal"],
                names: ["!geo.name"]
              }
            }
          }
        },
        language: language,
        //NO DEFAULT DATA SOURCE. DATA COMES FROM EXTERNAL PAGE
        ui: {
          chart: {
            labels: {
              min_number_of_entities_when_values_hide: 0 //values hide when showing 2 entities or more
            },
            hideXAxisValue: true,
            whenHovering: {
              hideVerticalNow: true,
              showProjectionLineX: true,
              showProjectionLineY: true,
              higlightValueX: true,
              higlightValueY: true,
              showTooltip: false
            },
            stacked: true,
            inpercent: false
          },    
          presentation: true
        }
      });





      DonutChart.define('default_model', {
        state: {
          // available time would have the range of 1990-2012 years (%Y), with the deafult position at 2000
          time: {
            start: "1990",
            end: "2012",
            value: "2000"
          },
          //Entities include all ("*") geo's of category "regions" -- equivalent to 'geo: ["asi", "ame", "eur", "afr"]'
          entities: {
            dim: "geo",
            show: {
              _defs_: {
                "geo": ["usa", "bra", "chn", "ind", "idn"],
                "geo.cat": ["country"]
              }
            }
          },
          //Markers correspond to visuals that we want to show. We have label, axis and color
          marker: {
            space: ["entities", "time"],
            label: {
              use: "property",
              which: "geo.name"
            },
            axis: {
              use: "indicator",
              which: "sg_population"
            },
            color: {
              use: "property",
              which: "geo.world_4region"
            }
          }
        },
        data: {
          reader: "csv",
          path: globals.ext_resources.host + globals.ext_resources.dataPath + "basic-indicators.csv",
          splash: false
        },
        language: language,
        ui: {
          presentation: false
        }

      });

      Cartogram.define('datawarning_content', {
        title: "",
        body: "Comparing the size of economy across countries and time is not trivial. The methods vary and the prices change. Gapminder has adjusted the picture for many such differences, but still we recommend you take these numbers with a large grain of salt.<br/><br/> Countries on a lower income levels have lower data quality in general, as less resources are available for compiling statistics. Historic estimates of GDP before 1950 are generally also more rough. <br/><br/> Data for child mortality is more reliable than GDP per capita, as the unit of comparison, dead children, is universally comparable across time and place. This is one of the reasons this indicator has become so useful to measure social progress. But the historic estimates of child mortality are still suffering from large uncertainties.<br/><br/> Learn more about the datasets and methods in this <a href='http://www.gapminder.org/news/data-sources-dont-panic-end-poverty' target='_blank'>blog post</a>",
        doubtDomain: [1800, 1950, 2015],
        doubtRange: [1.0, .3, .2]
      });

      Cartogram.define('default_model', {
        state: {
          time: {
            start: "1800",
            end: "2015",
            value: "2015",
            step: 1,
            speed: 300,
            dim: "year"
          },
          entities: {
            dim: "municipality",
            //dim: "province",
            opacitySelectDim: .3,
            opacityRegular: 1,
            show: {
              _defs_: {
                "municipality.cat": ["province", "municipality"],
                //"province.cat": ["province", "municipality"]
              }
            },
          },
          entities_minimap: {
            dim: "municipality",
            //dim: "province",
            show: {
              _defs_: {
                "municipality.cat": ["province", "municipality"],
                //"province.cat": ["province", "municipality"]
              }
            }
          },
          marker: {
            space: ["entities", "time"],
            size: {
              use: "constant",
              //which: "sg_population",//systema globalis
              which: "_default",
              scaleType: "ordinal",
              _important: true,
              showArcs: false,
              allow: {
                scales: ["linear", "ordinal"]
              },
              extent: [0, 1]
            },
            color: {
              use: "indicator",
              which: "piped_water_percentage",
              scaleType: "linear",
              _important: true
            },
            label: {
              use: "property",
              which: "municipality.name"
              //which: "province.name"
            }
          },
          marker_minimap:{
            space: ["entities_minimap"],
              type: "geometry",
              shape: "svg",
              label: {
                use: "property",
                which: "municipality.name"
                //which: "province.name"
              },
              geoshape: {
                use: "property",
                which: "shape_lores_svg"
              }
          }
        },
        //NO DEFAULT DATA SOURCE. DATA COMES FROM EXTERNAL PAGE
        language: language,
        ui: {
          chart: {
            labels: {
              dragging: true
            },
            lockNonSelected: 0,
            lockActive: 0,
            sizeSelectorActive:0
          },
          presentation: false
        }
      });

      //Waffle Server Reader custom path
      WSReader.define('basepath', globals.ext_resources.host + globals.ext_resources.dataPath);

      //preloading mountain chart precomputed shapes
      MountainChartComponent.define("preload", function(done) {
        var shape_path = globals.ext_resources.shapePath ? globals.ext_resources.shapePath :
            globals.ext_resources.host + globals.ext_resources.preloadPath + "mc_precomputed_shapes.json";     

        d3.json(shape_path, function(error, json) {
          if(error) return console.warn("Failed loading json " + shape_path + ". " + error);
          MountainChartComponent.define('precomputedShapes', json);
          done.resolve();
        });
      });

      //preloading bubble map country shapes
      BubbleMapComponent.define("preload", function(done) {
        var shape_path = globals.ext_resources.shapePath ? globals.ext_resources.shapePath :
            globals.ext_resources.host + globals.ext_resources.preloadPath + "world-50m.json"; 
          
        d3.json(shape_path, function(error, json) {
          if(error) return console.warn("Failed loading json " + shape_path + ". " + error);
          BubbleMapComponent.define('world', json);
          done.resolve();
        });
      });

      CartogramComponent.define("preload", function(done) {
        var shape_path = globals.ext_resources.shapePath ? globals.ext_resources.shapePath :
            globals.ext_resources.host + globals.ext_resources.preloadPath + "municipalities.json"; 
        
        d3.json(shape_path, function(error, json) {
          if(error) return console.warn("Failed loading json " + shape_path + ". " + error);
          CartogramComponent.define('world', json);
          CartogramComponent.define('geometries', json.objects.topo.geometries);
          CartogramComponent.define('id_lookup', json.objects.id_lookup);
          done.resolve();
        });
      });

      CartogramComponent.define("preload", function(done) {
        var shape_path = globals.ext_resources.shapePath ? globals.ext_resources.shapePath :
            globals.ext_resources.host + globals.ext_resources.preloadPath + "municipalities.json"; 
        
        d3.json(shape_path, function(error, json) {
          if(error) return console.warn("Failed loading json " + shape_path + ". " + error);
          CartogramComponent.define('world', json);
          CartogramComponent.define('geometries', json.objects.topo.geometries);
          CartogramComponent.define('id_lookup', json.objects.id_lookup);
          done.resolve();
        });
      });


      //preloading concept properties for all charts
      Tool.define("preload", function(promise) {

        var _this = this;

        var conceptprops_path = globals.ext_resources.conceptpropsPath ? globals.ext_resources.conceptpropsPath :
            globals.ext_resources.host + globals.ext_resources.preloadPath + "metadata.json";    
        
        //TODO: concurrent
        //load language first
        this.preloadLanguage().then(function() {
          //then concept properties
          
          if (!_this.model.data || _this.model.data.noConceptprops) {
            promise.resolve();
            return;
          }
          
          d3.json(conceptprops_path, function(conceptprops) {

            globals.conceptprops = conceptprops;
              
            if(!globals.conceptprops.indicatorsDB["_default"]) globals.conceptprops.indicatorsDB["_default"] = {
                "use": "constant",
                "scales": ["ordinal"]
            }
            if(globals.conceptprops.indicatorsTree.children.map(function(m){return m.id}).indexOf("_default")===-1) {
                globals.conceptprops.indicatorsTree.children.push({"id": "_default"});
            }

            // TODO: REMOVE THIS HACK
            // We are currently saving concept properties info to default state manually in order
            // to produce small URLs considering some of the info in concept properties to be default
            // we need a consistent way to add concept properties to Vizabi
            addMinMax("axis_x");
            addMinMax("axis_y");
            addMinMax("size");
            addMinMax("size_label");
            addPalettes("color");

            promise.resolve();

          });
        });

        // TODO: REMOVE THIS HACK (read above)
        function addPalettes(hook) {
          //protection in case id state or marker or [hook] is undefined
          if(!((_this.default_model.state||{}).marker||{})[hook]) return;
          
          var color = _this.default_model.state.marker[hook];
          var palette = ((globals.conceptprops.indicatorsDB[color.which]||{}).color||{}).palette||{};
          var paletteLabels = ((globals.conceptprops.indicatorsDB[color.which]||{}).color||{}).paletteLabels||{};
          color.palette = extend({}, color.palette, palette);
          color.paletteLabels = clone(paletteLabels);
        }

        function addMinMax(hook) {
          //protection in case id state or marker or [hook] is undefined
          if(!((_this.default_model.state||{}).marker||{})[hook]) return;
          
          var axis = _this.default_model.state.marker[hook];
          if(axis.use === "indicator" && globals.conceptprops.indicatorsDB[axis.which] && globals.conceptprops.indicatorsDB[axis.which].domain) {
            var domain = globals.conceptprops.indicatorsDB[axis.which].domain;
            axis.domainMin = axis.domainMin || domain[0];
            axis.domainMax = axis.domainMax || domain[1];
            axis.zoomedMin = axis.zoomedMin || axis.domainMin || domain[0];
            axis.zoomedMax = axis.zoomedMax || axis.domainMax || domain[1];
          }
        }

      });

      Tool.define("preloadLanguage", function() {
        var _this = this;
        var promise = new Promise();

        var langModel = this.model.language;
        
        // quit if no language model is set (go translationless)
        if(!langModel) return promise.resolve();
        
        var translation_path = globals.ext_resources.translationPath ? globals.ext_resources.translationPath :
            globals.ext_resources.host + globals.ext_resources.preloadPath + "translation/" + langModel.id + ".json";

        if(!langModel.strings[langModel.id]) {
          d3.json(translation_path, function(langdata) {
            langModel.strings[langModel.id] = langdata;
            _this.model.language.strings.trigger("change");
            promise.resolve();
          });
        } else {
          this.model.language.strings.trigger("change");
          promise = promise.resolve();
        }

        return promise;

      });
      globals.version = "0.15.0-33"; globals.build = "1467019990983"; globals.templates = (function(templates) {templates['bubblesize.html'] = '<div class="vzb-bs-holder"> <svg class="vzb-bs-svg"> <g class="vzb-bs-slider-wrap"> <g class="vzb-bs-slider"> </g> </g> </svg> </div> ';templates['about.html'] = '<div class="vzb-dialog-modal"> <div class="vzb-dialog-title"> <%=t ( "buttons/about") %> </div> <div class="vzb-dialog-content"> <p class="vzb-about-text0"></p> <p class="vzb-about-text1"></p> <br/> <p class="vzb-about-version"></p> <p class="vzb-about-updated"></p> <br/> <p class="vzb-about-text2"></p> <br/> <p class="vzb-about-report"></p> <br/> <p class="vzb-about-credits"></p> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div> ';templates['axes.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="axes" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="axes" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/axes") %> </div> <div class="vzb-dialog-content"> <p class="vzb-dialog-sublabel"> <%=t ("buttons/axis_x") %> <span class="vzb-xaxis-selector"></span> </p> <div class="vzb-xaxis-minmax vzb-dialog-paragraph"></div> <p class="vzb-dialog-sublabel"> <%=t ("buttons/axis_y") %> <span class="vzb-yaxis-selector"></span> </p> <div class="vzb-yaxis-minmax vzb-dialog-paragraph"></div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div>';templates['axesmc.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="axesmc" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="axesmc" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/axes") %> </div> <div class="vzb-dialog-content"> <div class="vzb-yaxis-container"> <p class="vzb-dialog-sublabel"><%=t ( "hints/mount/maxYvalue") %></p> <form class="vzb-dialog-paragraph"> <label><input type="radio" name="ymax" value="immediate"><%=t ( "mount/maxYmode/immediate") %></label> <label><input type="radio" name="ymax" value="latest"><%=t ( "mount/maxYmode/latest") %></label> </form> </div> <div class="vzb-xaxis-container"> <p class="vzb-dialog-sublabel"> <%=t ( "hints/mount/logXstops") %> </p> <form class="vzb-dialog-paragraph"> <input type="checkbox" name="logstops" value="1">1 <input type="checkbox" name="logstops" value="2">2 <input type="checkbox" name="logstops" value="5">5 </form> </div> <p class="vzb-dialog-sublabel"> <%=t ( "hints/mount/xlimits") %> </p> <div class="vzb-xlimits-container vzb-dialog-paragraph"></div> <div class="vzb-probe-container"> <p class="vzb-dialog-sublabel"> <%=t ( "hints/mount/probe") %> </p> <input type="text" class="vzb-probe-field" name="probe"> </div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div>';templates['colors.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="colors" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="colors" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/colors") %> <span class="vzb-caxis-selector"></span> </div> <div class="vzb-dialog-content"> <div class="vzb-clegend-container"></div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div> ';templates['find.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="find" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="find" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "dialogs/find") %> <span class="vzb-dialog-content vzb-find-filter"> <input id="vzb-find-search" type="search"/> </span> </div> <div class="vzb-dialog-content vzb-dialog-content-fixed vzb-dialog-scrollable"> <div class="vzb-find-list">  </div> </div> <div class="vzb-dialog-buttons"> <div class="vzb-dialog-bubbleopacity vzb-dialog-control"></div> <div id="vzb-find-deselect" class="vzb-dialog-button"> <%=t ( "buttons/deselect") %> </div> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> <%=t ( "buttons/ok") %> </div> </div> </div> ';templates['label.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="label" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="label" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/label") %> </div> <div class="vzb-dialog-content"> <span class="vzb-saxis-selector"></span> <div class="vzb-dialog-sizeslider"></div> <div class="vzb-removelabelbox-switch"></div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div> ';templates['moreoptions.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="moreoptions" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="moreoptions" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ("buttons/more_options") %> </div> <div class="vzb-dialog-content vzb-dialog-scrollable"> <div class="vzb-dialog-options-buttonlist"> </div> <div class="vzb-accordion"> </div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div>';templates['opacity.html'] = '<div class="vzb-dialog-modal"> <div class="vzb-dialog-title"> <%=t ( "buttons/opacity") %> </div> <div class="vzb-dialog-content"> <p class="vzb-dialog-sublabel"> <%=t ("buttons/opacityRegular") %> </p> <div class="vzb-dialog-bubbleopacity-regular"></div> <p class="vzb-dialog-sublabel"> <%=t ("buttons/opacityNonselect") %> </p> <div class="vzb-dialog-bubbleopacity-selectdim"></div> </div> </div> </div> ';templates['presentation.html'] = '<div class="vzb-dialog-modal"> <div class="vzb-dialog-title"> <%=t ( "dialogs/presentation") %> </div> <div class="vzb-dialog-content"> <div class="vzb-presentationmode-switch"></div> </div> </div> ';templates['show.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="show" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="show" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/show") %> <span class="vzb-dialog-content vzb-show-filter"> <input id="vzb-show-search" type="search"/> </span> </div> <div class="vzb-dialog-content vzb-dialog-content-fixed vzb-dialog-scrollable"> <p class="vzb-dialog-sublabel"> <%=t ( "hints/mount/onlyshowthefollowing") %> </p> <div class="vzb-show-list">  </div> </div> <div class="vzb-dialog-buttons"> <div id="vzb-show-deselect" class="vzb-dialog-button"> <%=t ( "buttons/deselect") %> </div> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> <%=t ( "buttons/ok") %> </div> </div> </div> ';templates['size.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="size" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="size" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/size") %> <span class="vzb-saxis-selector"></span> </div> <div class="vzb-dialog-content"> <div class="vzb-dialog-bubblesize"></div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div> ';templates['speed.html'] = '<div class="vzb-dialog-modal"> <div class="vzb-dialog-title"> <%=t ( "buttons/speed") %> </div> <div class="vzb-dialog-content"> <div class="vzb-dialog-placeholder"></div> </div> </div> ';templates['stack.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="stack" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="stack" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/stack") %> </div> <div class="vzb-dialog-content vzb-dialog-scrollable">  <form class="vzb-howtostack vzb-dialog-paragraph"> <label> <input type="radio" name="stack" value="none"> <%=t ( "mount/stacking/none") %> </label> <label> <input type="radio" name="stack" value="geo.world_4region"> <%=t ( "mount/stacking/region") %> </label> <label> <input type="radio" name="stack" value="all"> <%=t ( "mount/stacking/world") %> </label> </form> <form class="vzb-howtomerge vzb-dialog-paragraph"> <p class="vzb-dialog-sublabel"> <%=t ( "hints/mount/howtomerge") %> </p> <label> <input type="radio" name="merge" value="none"> <%=t ( "mount/merging/none") %> </label> <label> <input type="radio" name="merge" value="grouped"> <%=t ( "mount/merging/region") %> </label> <label> <input type="radio" name="merge" value="stacked"> <%=t ( "mount/merging/world") %> </label> </form> <form class="vzb-manual-sorting"> <p class="vzb-dialog-sublabel"> <%=t ( "mount/manualSorting") %> </p> <div class="vzb-dialog-draggablelist vzb-dialog-control"></div> </form> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary">OK</div> </div> </div>';templates['zoom.html'] = '<div class="vzb-dialog-modal"> <span class="thumb-tack-class thumb-tack-class-ico-pin fa" data-dialogtype="label" data-click="pinDialog"></span> <span class="thumb-tack-class thumb-tack-class-ico-drag fa" data-dialogtype="label" data-click="dragDialog"></span> <div class="vzb-dialog-title"> <%=t ( "buttons/zoom") %> <div class="vzb-dialog-zoom-buttonlist"></div> </div> <div class="vzb-dialog-content"> <div class="vzb-zoomonscrolling-switch"></div> <div class="vzb-adaptminmaxzoom-switch"></div> </div> <div class="vzb-dialog-buttons"> <div data-click="closeDialog" class="vzb-dialog-button vzb-label-primary"> OK </div> </div> </div> ';templates['minmaxinputs.html'] = '<div class="vzb-mmi-holder"> <span class="vzb-mmi-domainmin-label"></span> <input type="text" class="vzb-mmi-domainmin" name="min"> <span class="vzb-mmi-domainmax-label"></span> <input type="text" class="vzb-mmi-domainmax" name="max"> <br class="vzb-mmi-break"/> <span class="vzb-mmi-zoomedmin-label"></span> <input type="text" class="vzb-mmi-zoomedmin" name="min"> <span class="vzb-mmi-zoomedmax-label"></span> <input type="text" class="vzb-mmi-zoomedmax" name="max"> </div>';templates['sizeslider.html'] = '<div class="vzb-szs-holder"> <svg class="vzb-szs-svg"> <g class="vzb-szs-slider-wrap"> <g class="vzb-szs-slider"> </g> </g> </svg> </div> ';templates['timeslider.html'] = '<div class="vzb-timeslider vzb-ts-loading"> <div class="vzb-ts-slider-wrapper"> <svg class="vzb-ts-slider"> <g> <g class="vzb-ts-slider-axis"></g> <g class="vzb-ts-slider-select"></g> <g class="vzb-ts-slider-slide"> <circle class="vzb-ts-slider-handle"></circle> <text class="vzb-ts-slider-value"></text> </g> </g> </svg> </div>  <div class="vzb-ts-btns"> <button class="vzb-ts-btn-loading vzb-ts-btn"> <div class="vzb-loader"></div> </button> <button class="vzb-ts-btn-play vzb-ts-btn"> <svg class="vzb-icon vzb-icon-play" viewBox="3 3 42 42" xmlns="http://www.w3.org/2000/svg"> <path xmlns="http://www.w3.org/2000/svg" d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm-4 29V15l12 9-12 9z"/> </svg> </button> <button class="vzb-ts-btn-pause vzb-ts-btn"> <svg class="vzb-icon vzb-icon-pause" viewBox="3 3 42 42" xmlns="http://www.w3.org/2000/svg"> <path xmlns="http://www.w3.org/2000/svg" d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm-2 28h-4V16h4v16zm8 0h-4V16h4v16z"/> </svg> </button> </div> </div> ';templates['agepyramid.html'] = ' <svg class="vzb-agepyramid"> <g class="vzb-bc-header"> <text class="vzb-bc-title"></text> <text class="vzb-bc-title vzb-bc-title-right"></text> <text class="vzb-bc-year"></text> </g> <g class="vzb-bc-graph"> <svg class="vzb-bc-bars-crop"> <g class="vzb-bc-bars"></g> <g class="vzb-bc-labels"></g> </svg> <text class="vzb-bc-axis-y-title"></text> <g class="vzb-bc-axis-x"></g> <g class="vzb-bc-axis-x vzb-bc-axis-x-left"></g> <g class="vzb-bc-axis-y"></g> <g class="vzb-bc-axis-labels">  </g> </g> </svg> ';templates['axislabeler.html'] = ' <svg class="vzb-axislabeler"> <g class="vzb-al-graph"> <g class="vzb-al-axis-x"></g> <g class="vzb-al-axis-y"></g> </g> </svg> ';templates['barchart.html'] = ' <svg class="vzb-barchart"> <g class="vzb-bc-graph"> <g class="vzb-bc-bars"></g> <g class="vzb-bc-bar-labels"></g> <g class="vzb-bc-axis-y-title"></g> <text class="vzb-bc-year"></text> <g class="vzb-bc-axis-x-title"></g> <g class="vzb-bc-axis-x"></g> <g class="vzb-bc-axis-y"></g> <g class="vzb-bc-axis-labels">  </g> </g> </svg> ';templates['barrank.html'] = ' <div class="vzb-barrankchart"> <svg class="vzb-br-header"> <text class="vzb-br-title"></text> <text class="vzb-br-total"></text> </svg> <div class="barsviewport"> <svg class="vzb-br-bars-svg"> <g class="vzb-br-bars"></g> </svg> </div> </div> ';templates['bubblechart.html'] = ' <div class="vzb-bubblechart"> <svg class="vzb-bubblechart-svg vzb-export"> <g class="vzb-bc-graph"> <g class="vzb-bc-year"></g> <svg class="vzb-bc-axis-x"><g></g></svg> <svg class="vzb-bc-axis-y"><g></g></svg> <line class="vzb-bc-projection-x"></line> <line class="vzb-bc-projection-y"></line> <svg class="vzb-bc-bubbles-crop"> <rect class="vzb-bc-eventarea"></rect> <g class="vzb-bc-trails"></g> <g class="vzb-bc-bubbles"></g> <g class="vzb-bc-lines"></g> <g class="vzb-bc-bubble-crown vzb-hidden"> <circle class="vzb-crown-glow"></circle> <circle class="vzb-crown"></circle> </g> </svg> <g class="vzb-bc-axis-y-title"></g> <g class="vzb-bc-axis-x-title"></g> <g class="vzb-bc-axis-s-title"></g> <g class="vzb-bc-axis-c-title"></g> <g class="vzb-bc-axis-y-info vzb-noexport"></g> <g class="vzb-bc-axis-x-info vzb-noexport"></g> <svg class="vzb-bc-labels-crop"> <g class="vzb-bc-labels"></g> </svg> <g class="vzb-data-warning vzb-noexport"> <svg></svg> <text></text> </g> <rect class="vzb-bc-zoom-rect"></rect> <g class="vzb-bc-tooltip vzb-hidden"> <rect class="vzb-tooltip-glow"></rect> <rect class="vzb-tooltip-border"></rect> <text class="vzb-tooltip-text"></text> </g> </g> </svg> <svg> <defs> <filter id="vzb-glow-filter" x="-50%" y="-50%" width="200%" height="200%"> <feGaussianBlur in="SourceGraphic" stdDeviation="2"></feGaussianBlur> </filter> </defs> </svg>  <div class="vzb-tooltip vzb-hidden vzb-tooltip-mobile"></div> </div> ';templates['bubblemap.html'] = ' <div class="vzb-bubblemap"> <svg class="vzb-bmc-map-background vzb-export"> <g class="vzb-bmc-map-graph"></g> </svg> <svg class="vzb-bubblemap-svg vzb-export"> <g class="vzb-bmc-graph"> <g class="vzb-bmc-year"></g> <g class="vzb-bmc-lines"></g> <g class="vzb-bmc-bubbles"></g> <g class="vzb-bmc-bubble-labels"></g> <g class="vzb-bmc-axis-y-title"> <text></text> </g> <g class="vzb-bmc-axis-c-title"> <text></text> </g> <g class="vzb-bmc-axis-y-info vzb-noexport"> </g> <g class="vzb-bmc-axis-c-info vzb-noexport"> </g> <g class="vzb-data-warning vzb-noexport"> <svg></svg> <text></text> </g> <g class="vzb-bmc-labels"></g> <g class="vzb-bmc-tooltip vzb-hidden"> <rect class="vzb-tooltip-border"></rect> <text class="vzb-tooltip-text"></text> </g> </g> </svg> </div> ';templates['cartogram.html'] = ' <div class="vzb-cartogram"> <svg class="vzb-cartogram-svg"> <g class="vzb-ct-graph"> <g class="vzb-ct-year"></g> <svg class="vzb-ct-map-background vzb-export"> <g class="vzb-ct-map-graph"></g> </svg> <svg class="vzb-ct-labels-crop"> <g class="vzb-ct-labels"> <line class="vzb-ct-vertical-now"></line> </g> </svg> <g class="vzb-ct-axis-y-title"><text></text></g> <g class="vzb-ct-axis-c-title"><text></text></g> <g class="vzb-ct-axis-y-info"></g> <g class="vzb-ct-axis-c-info"></g> <g class="vzb-ct-tooltip vzb-hidden"> <rect class="vzb-tooltip-border"></rect> <text class="vzb-tooltip-text"></text> </g> <g class="vzb-data-warning vzb-noexport"> <svg></svg> <text></text> </g> </g> </svg> </div> ';templates['donutchart.html'] = ' <div class="vzb-donutchart"> <svg class="vzb-dc-graph">  </svg> <div class="vzb-tooltip vzb-hidden"></div> </div> ';templates['linechart.html'] = ' <div class="vzb-linechart"> <svg class="vzb-linechart-svg"> <g class="vzb-lc-graph"> <svg class="vzb-lc-axis-x"><g></g></svg> <svg class="vzb-lc-axis-y"><g></g></svg> <text class="vzb-lc-axis-x-value"></text> <text class="vzb-lc-axis-y-value"></text> <svg class="vzb-lc-lines-crop"> <svg class="vzb-lc-lines"></svg> <line class="vzb-lc-projection-x"></line> <line class="vzb-lc-projection-y"></line> </svg> <svg class="vzb-lc-labels-crop"> <g class="vzb-lc-labels"> <line class="vzb-lc-vertical-now"></line> </g> </svg> <g class="vzb-lc-axis-y-title"></g> <g class="vzb-lc-axis-x-title"></g> <g class="vzb-lc-axis-y-info"></g>  </g> </svg> <div class="vzb-tooltip vzb-hidden"></div> </div> ';templates['mountainchart.html'] = ' <div class="vzb-mountainchart"> <svg class="vzb-mountainchart-svg"> <g class="vzb-mc-graph"> <rect class="vzb-mc-eventarea"></rect> <g class="vzb-mc-year"></g> <g class="vzb-mc-mountains-mergestacked"></g> <g class="vzb-mc-mountains-mergegrouped"></g> <g class="vzb-mc-mountains"></g> <g class="vzb-mc-mountains-labels"></g> <g class="vzb-mc-axis-y-title"> <text></text> </g> <g class="vzb-mc-axis-x-title"> <text></text> </g> <g class="vzb-mc-axis-info"> </g> <g class="vzb-data-warning"> <svg></svg> <text></text> </g> <g class="vzb-mc-axis-x"></g> <g class="vzb-mc-axis-labels"></g> <g class="vzb-mc-probe"> <text class="vzb-shadow vzb-mc-probe-value-ul"></text> <text class="vzb-shadow vzb-mc-probe-value-ur"></text> <text class="vzb-shadow vzb-mc-probe-value-dl"></text> <text class="vzb-shadow vzb-mc-probe-value-dr"></text> <text class="vzb-mc-probe-value-ul"></text> <text class="vzb-mc-probe-value-ur"></text> <text class="vzb-mc-probe-value-dl"></text> <text class="vzb-mc-probe-value-dr"></text> <text class="vzb-mc-probe-extremepoverty"></text> <line></line> </g> <g class="vzb-mc-tooltip vzb-hidden"> <rect class="vzb-tooltip-border"></rect> <text class="vzb-tooltip-text"></text> </g> </g> </svg> </div> ';templates['popbyage.html'] = ' <svg class="vzb-popbyage"> <g class="vzb-bc-header"> <text class="vzb-bc-title"></text> <text class="vzb-bc-year"></text> </g> <g class="vzb-bc-graph"> <g class="vzb-bc-bars"></g> <g class="vzb-bc-labels"></g> <text class="vzb-bc-axis-y-title"></text> <g class="vzb-bc-axis-x"></g> <g class="vzb-bc-axis-y"></g> <g class="vzb-bc-axis-labels">  </g> </g> </svg> '; return templates})({});

      return Vzb;

}));