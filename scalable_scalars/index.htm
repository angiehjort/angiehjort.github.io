<!DOCTYPE html>
<meta charset="utf-8">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width,user-scalable=no,minimal-ui">
<title>Scalable scalar visualization</title>

<head>
    <link href="http://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css">
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

    <link href="dashboard.css" rel="stylesheet">
    <script src="one_dash_plot.js" charset="utf-8"></script>
    <script src="constants.js" charset="utf-8"></script>
    <script src="utilities.js" charset="utf-8"></script>
    <script src="random.js" charset="utf-8"></script>

    <script>
        var randomStream = new Random();

        function One() {
            this.p1= randomStream.normal(SCALAR_KPI_META.p1.target*2, SCALAR_KPI_META.p1.target*0.5);
            this.p2= randomStream.normal(SCALAR_KPI_META.p2.target*4, SCALAR_KPI_META.p2.target*0.8);
            this.p3= randomStream.normal(SCALAR_KPI_META.p3.target, SCALAR_KPI_META.p3.target*0.3);
        }
        
        SCALAR_KPI_META = {
            p1:     {name: "Parameter 1",          nameShort: "Alarm rate",        id:"average_10min",    method: "Average",   methodShort: "Avg",     units: "/10min", targetType: TARGET_LO_ISGOOD, target:1, maximum:20, format: function(n){return (d3.round(n,2)==d3.round(n,0))?d3.round(n,0):d3.format(".2r")(n)}},//20
            p2:    {name: "Parameter 2",          nameShort: "rate",        id:"peak_10min_1",     method: "Peak",      methodShort: "Peak",    units: "/10min", targetType: TARGET_LO_ISGOOD, target:10, maximum:200, format: function(n){return (d3.round(n,2)==d3.round(n,0))?d3.round(n,0):d3.format(".2r")(n)}},//500
            p3:        {name: "Parameter 3", nameShort: "Time to ackn",      id:"timetoacknow",     method: "Average",   methodShort: "Avg",     units: "min",   targetType: TARGET_LO_ISGOOD, target:3, maximum:20, format: function(n){return (n*60<1)?"0":minutesToMMSS(n)}},//60
            timeAlarmActive:  {name: "Time alm active",     nameShort: "Time active",       id:"",                 method: "Average",   methodShort: "Avg",     units: "h",     targetType: TARGET_LO_ISGOOD, target:1, maximum:10, format: d3.format(".3g")},
            timeInFlood:      {name: "Time in flood",       nameShort: "Time in flood",     id:"flood_10min_50",   method: "",          methodShort: "",        units: "%",     targetType: TARGET_LO_ISGOOD, target:1, maximum:10, format: function(n){return (d3.round(n,2)==d3.round(n,0))?d3.round(n,0):d3.format(".2r")(n)}},//10
            staleAlarms:      {name: "Standing alarms",     nameShort: "Standing alarms",   id:"staleall",         method: "Number of", methodShort: "",        units: "total",     targetType: TARGET_LO_ISGOOD, target:5, maximum:50, format: function(n){return (d3.round(n,2)==d3.round(n,0))?d3.round(n,0):d3.format(".2r")(n)}},//50
            staleAlarmsOldest:{name: "Standing alarm",      nameShort: "",    id:"staleoldest",      method: "Longest",   methodShort: "Longest", units: "months",  targetType: TARGET_LO_ISGOOD, target:1, maximum:12, format: function(n){return (d3.round(n,2)==d3.round(n,0))?d3.round(n,0):d3.format(".2r")(n)}},//24
            trainingsPassed:  {name: "Training passed",     nameShort: "Training passed",   id:"",                 method: "total",     methodShort: "",        units: "",      targetType: TARGET_HI_ISGOOD, target:0, maximum:1, format: d3.format(".3g")},
            improvements:     {name: "Improvements",        nameShort: "Improves",          id:"",                 method: "total",     methodShort: "",        units: "",      targetType: TARGET_HI_ISGOOD, target:0, maximum:1, format: d3.format(".3g")},
            empty:            {name: "",                    nameShort: "",                  id:"",                 method: "",          methodShort: "",        units: "",      targetType: TARGET_LO_ISGOOD, target:0, maximum:1, format: d3.format(".3g")}
        }

        N_MAX = 1024;
        LIMIT_BULLET = 1; // samples
        LIMIT_PCOORDS = 150; // samples
        LIMIT_DASHPLOT = 500; // samples


    window.onload = function(){
        scalarKpiVis = d3.dashPlot().stepy(100).height(600).width(600);
        samplesAll = [];
        samplesSelected = [];
        for (i=0; i<N_MAX; i++)samplesAll.push(new One());


        d3.select("#slider")[0][0].onchange = function() {
            update(Math.ceil(Math.pow(2,this.value/10)))
        }
        iWannaHoverOff = function(assetID){
            d3.selectAll("." + ASSET_ID + "#" + assetID).classed("active", false);
        }
        iWannaHoverOn = function(assetID){
            d3.selectAll("." + ASSET_ID + "#" + assetID).classed("active", true);
        }

        var kpiGroup = d3.select("#container")
            .append("svg")
            .append("g")
            .attr("class","scalarKpiVis")
            .attr("transform", "translate(" + (50) + "," + (50) + ")");

        update = function(n){
            d3.select("#nsamples").text("samples:"+ n);
            kpiGroup.data([samplesAll.slice(0,Math.min(n, samplesAll.length))]).call(scalarKpiVis);

            d3.select("head").selectAll("#connectionOpacity")
                .data([null]).enter().append("style")
                .attr("id", "connectionOpacity")
                .attr("type", "text/css");

            d3.selectAll("#connectionOpacity")
                .text(".dashPlot .connection{opacity: "+(1-Math.log(n)/Math.log(LIMIT_PCOORDS))+"}");
        d3.selectAll("."+ASSET_ID+".hoverable").on("mouseover",
            function () {iWannaHoverOn(d3.select(this).attr("id"))});
        d3.selectAll("."+ASSET_ID+".hoverable").on("mouseout",
            function () {iWannaHoverOff(d3.select(this).attr("id"))});

        }
        update(1);



    }

    </script>
</head>
<body>
    <input id = "slider" type="range" name="points" min="0" max="100" value="0">
    <span id = "nsamples"></span>
    <div id="container"></div>
</body>
