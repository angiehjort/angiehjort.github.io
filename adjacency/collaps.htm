<!DOCTYPE html>
<meta charset="utf-8">
<head>
    <link href="matrix_style.css" rel="stylesheet">
    <script src="d3.v3.min.js"></script>
    <script src="utilities.js"></script>
    <script src="jquery-2.1.1.js"></script>
    <script src="tree_model.js"></script>
    <script src="data_convertor.js"></script>
</head>
<body>
    <script>
        var screenSize = Math.min(window.innerWidth, window.innerHeight);
        if (screenSize<500) screenSize = 500;
        var margin = {
                top: 20,
                right: 20,
                bottom: 20,
                left: 20
            },
            square = {w: 200, h: 200},
            width = screenSize - margin.right - margin.left,
            height = screenSize - margin.top - margin.bottom;

        var i = 0,
            duration = 1000,
            heightOne;

        var tree = d3.layout.cluster().separation(function(a, b){return 1})
            .size([height - square.h, width - square.w]);

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom);
        var gridSvg = svg.append("g").attr("transform", "translate(" + (margin.left+square.w) + "," + (margin.top+square.h) + ")");
        var svgV = svg.append("g").attr("transform", "translate(" + margin.left + "," + (margin.top+square.h) + ")");
        var svgH = svg.append("g").attr("transform", "translate(" + (margin.left+square.w) + "," + margin.top + ")");
        var linksSvg = svg.append("g").attr("transform", "translate(" + (margin.left+square.w) + "," + (margin.top+square.h) + ")");
        var tooltip = d3.select("body").append("div").attr("class","tooltip");
        var arrow = d3.select("body").append("div").attr("class","arrow").html("↗");
        var controlls = d3.select("body").append("div").attr("class","controlls");

            controlls.append("div").text("Modify hierarchy:");
            controlls.append("div").attr("class","hieUp button").text("▲")
                .on("click",function(){iWannaHieUpDown(-1)});
            controlls.append("div").attr("class","hieDown button").text("▼")
                .on("click",function(){iWannaHieUpDown(+1)});

            controlls.append("div").text("Sort leaves by:");
            controlls.selectAll(".sortingControll")
                .data(["Name", "Frequency", "Length of the name"])
                .enter().append("div").attr("class","sortingControll button")
                .text(function(d){return d.substr(0,2)})
                .attr("title", function(d){return d})
                .on("click",function(d){iWannaSortLeavesBy(d)});

        d3.json("readme_dmc.json", function (error, dataTree) {
            d3.json("rules.json", function (error, dataRules){

                model = new Model(dataTree, dataRules);
                model.nodes = tree.nodes(model.root).reverse();
                model.init();


                model.root.x0 = height / 2;
                model.root.y0 = 0;

                heightOne = (height-square.h)/model.leaves.length;
                updateTree(model.root);
            });
        });



        d3.select(self.frameElement).style("height", "800px");







        function hoverLinkON(d) {
            d3.select("div.tooltip").style("opacity",0.9)
                .html(d.if + " → " + d.then + " <br> " + "confidence: " + d.confidence + " <br> " + "hits: " + d.hits)
                .style("top",d3.event.y+10+"px")
                .style("left",d3.event.x+10+"px");
                var visibleIf = model.getFirstVisibleNode(model.getNodeByNodeID(d.if)).id;
                var visibleThen = model.getFirstVisibleNode(model.getNodeByNodeID(d.then)).id;
                d3.select(".vertical.id" + visibleIf).classed("hover",true);
                d3.select(".horizontal.id" + visibleThen).classed("hover",true);
                d3.select(".link.id" + d.if + d.then).classed("hover",true);
        }
        function hoverLinkOFF(d) {
            d3.select("div.tooltip").style("opacity",0)
                .style("top",0)
                .style("left",0);
                var visibleIf = model.getFirstVisibleNode(model.getNodeByNodeID(d.if)).id;
                var visibleThen = model.getFirstVisibleNode(model.getNodeByNodeID(d.then)).id;
                d3.select(".vertical.id" + visibleIf).classed("hover",false);
                d3.select(".horizontal.id" + visibleThen).classed("hover",false);
                d3.select(".link.id" + d.if + d.then).classed("hover",false);
        }
        function hoverNodeON(node){
            d3.selectAll(".id" + node.id).classed("hover",true);
            model.getLeaves(node).forEach(function(n){
                d3.selectAll(".id" + n.id + " .grid").classed("hover",true);
            });
            model.getLinksByNode(node).forEach(function(l){
                d3.selectAll(".link.id" + l.if + l.then).classed("hover",true);
            })
        }
        function hoverNodeOFF(node){
            d3.selectAll(".id" + node.id).classed("hover",false);
            model.getLeaves(node).forEach(function(n){
                d3.selectAll(".id" + n.id + " .grid").classed("hover",false);
            });
            model.getLinksByNode(node).forEach(function(l){
                d3.selectAll(".link.id" + l.if + l.then).classed("hover",false);
            });
        }

        function iWannaHieUpDown(arg){
            if(model.hieLevel==0 && arg<0
            || model.hieLevel==model.hieLevelMax && arg>0)return;

            model.hieLevel = model.hieLevel+arg;

            model.root = JSON.parse(JSON.stringify(model._root));
            model.nodes = tree.nodes(model.root).reverse();
            model.root.x0 = height / 2;
            model.root.y0 = 0;

            model.reduceTreeToDepth(model.root, model.hieLevel);
            updateTree(model.root);
        }


        var comparators = {
            "Name": function(a, b){return d3.ascending(a.id, b.id)},
            "Frequency": function(a, b){return model.getLinksByNode(a).length - model.getLinksByNode(b).length},
            "Length of the name": function(a, b){return a.id.length - b.id.length},
        }

        function iWannaSortLeavesBy(arg){
            tree.sort(comparators[arg]);
            updateTree(model.root);
        }



        function order(a, b){return a.hits - b.hits; }




        function updatematrix (root){
            var maxHits = d3.max(model.links.map(function(l){return l.hits}));
            var maxConfidence = d3.max(model.links.map(function(l){return l.confidence}));
           
            var rScale = d3.scale.sqrt()
                .domain([0, maxHits])
                .range([2, Math.max(heightOne/2, 3)]);
            
            var oScale = d3.scale.linear()
                .domain([0, maxConfidence])
                .range([0, 1]);
            
            
            var linksVis = linksSvg.selectAll("circle.link").data(model.links);

            linksVis.exit().remove();

            linksVis.enter().append("circle")
                .attr("class",function(d){return "link id" + d.if + d.then})
                .attr("cy", root.x)
                .attr("cx", root.x)
                .attr("r", 0)
                .style("opacity", 0)
                .on("mouseover",hoverLinkON)
                .on("mouseout",hoverLinkOFF);
            
            
            linksVis.transition().duration(duration)
                .attr("cy", function(d){
                    return model.getFirstVisibleNode(model.getNodeByNodeID(d.if)).x;
                })
                .attr("cx", function(d){
                    return model.getFirstVisibleNode(model.getNodeByNodeID(d.then)).x;
                })
                .attr("r", function(d){return rScale(d.hits)})
                .style("opacity", function(d){return oScale(d.confidence)});
        }



        function updateTree(root) {

            model.leaves = model.getLeaves(model.root);
            model.leaveNames = model.leaves.map(function(l){return l.id});

            // Compute the new tree layout.
            model.nodes = tree.nodes(model.root).reverse();

            // Normalize for fixed-depth.
            model.nodes.forEach(function (d) { d.y = d.depth * 25; });

            // Bind the data
            var nodeV = svgV.selectAll("g.node.vertical")
                .data(model.nodes, function (d) { return d.id || (d.id = ++i);  });
            var nodeH = svgH.selectAll("g.node.horizontal")
                .data(model.nodes, function (d) { return d.id || (d.id = ++i);  });


            // Enter any new nodes at the parent's position and build the views
            var nodeEnterV = nodeV.enter().append("g")
                .attr("class", function(d){return "node vertical id"+d.id})
                .attr("transform", function (d) {return "translate(" + root.y0 + "," + root.x0 + ")"; })
                .on("click", click)
                .on("mouseover", hoverNodeON)
                .on("mouseout", hoverNodeOFF);
            var nodeEnterH = nodeH.enter().append("g")
                .attr("class", function(d){return "node horizontal id"+d.id})
                .attr("transform", function (d) {return "translate(" + root.x0 + "," + root.y0 + ")"; })
                .on("click", click)
                .on("mouseover", hoverNodeON)
                .on("mouseout", hoverNodeOFF);

            nodeEnterV.append("line")
                .attr("class", "grid")
                .attr("x1", function(d){return square.w - d.y}).attr("x2", function(d){return width - d.y})
                .attr("y1", 0).attr("y2", 0)
                .attr("stroke-dasharray", "2,1");
            nodeEnterH.append("line")
                .attr("class", "grid")
                .attr("y1", function(d){return square.h - d.y}).attr("y2", function(d){return height - d.y})
                .attr("x1", 0).attr("x2", 0)
                .attr("stroke-dasharray", "2,1");

            nodeEnterV.append("line")
                .attr("class", "tab")
                .attr("x1", 0)
                .attr("x2", 0)
                .style("stroke", function (d) { return d._children ? "red" : "grey"; });
            nodeEnterH.append("line")
                .attr("class", "tab")
                .attr("y1", 0)
                .attr("y2", 0)
                .style("stroke", function (d) { return d._children ? "red" : "grey"; });

            nodeEnterV.append("text")
                .text(function (d) { return d.id;})
                .style("fill-opacity", 1e-6);
            nodeEnterH.append("text")
                .text(function (d) { return d.id;})
                .style("fill-opacity", 1e-6);



            // Transition nodes to their new position.
            var nodeUpdateV = nodeV.transition()
                .duration(duration)
                .attr("transform", function (d) {  return "translate(" + d.y + "," + d.x + ")"; });
            var nodeUpdateH = nodeH.transition()
                .duration(duration)
                .attr("transform", function (d) {  return "translate(" + d.x + "," + d.y + ")"; });

            nodeUpdateV.select("line.grid")
                .style("opacity", function (d) {return d.children==null?1:0});
            nodeUpdateH.select("line.grid")
                .style("opacity", function (d) {return d.children==null?1:0});

            nodeUpdateV.select("line.tab")
                .attr("y1", function (d) {return model.getFirstLeaveY(d) - d.x - heightOne/3})
                .attr("y2", function (d) {return model.getLastLeaveY(d) - d.x + heightOne/3})
                .style("stroke", function (d) {return d._children ? "red" : "grey";});
            nodeUpdateH.select("line.tab")
                .attr("x1", function (d) {return model.getFirstLeaveY(d) - d.x - heightOne/3})
                .attr("x2", function (d) {return model.getLastLeaveY(d) - d.x + heightOne/3})
                .style("stroke", function (d) {return d._children ? "red" : "grey";});

            nodeUpdateV.select("text")
                .attr("transform", function (d) { return "rotate("+ (d.children?-90:0) +")";})
                .attr("x", function (d) {return d.children?0:10;})
                .attr("dy", function (d) { return d.children?-10:".35em";})
                .attr("text-anchor", function (d) { return d.children?"middle":"start";})
                .style("fill-opacity", 1);
            nodeUpdateH.select("text")
                .attr("transform", function (d) { return "rotate("+ (d.children?0:-90) +")";})
                .attr("x", function (d) {return d.children?0:-10;})
                .attr("dy", function (d) { return d.children?-10:".35em";})
                .attr("text-anchor", function (d) { return d.children?"middle":"end";})
                .style("fill-opacity", 1);



            // Transition the removed nodes to the parent's new position.
            var nodeExitV = nodeV.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + root.y + "," + root.x + ")"; })
                .remove();
            var nodeExitH = nodeH.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + root.x + "," + root.y + ")"; })
                .remove();

            nodeExitV.select("line").style("fill-opacity", 1e-6);
            nodeExitH.select("line").style("fill-opacity", 1e-6);
            nodeExitV.select("text").style("fill-opacity", 1e-6);
            nodeExitH.select("text").style("fill-opacity", 1e-6);


            // Stash the old positions for transition.
            model.nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });

            updatematrix(root);
        }

         // Toggle children on click.
        function click(root) {
            if (root.children) {
                root._children = root.children;
                root.children = null;
            } else {
                root.children = root._children;
                root._children = null;
            }
            updateTree(root);
        }
    </script>
</body>
